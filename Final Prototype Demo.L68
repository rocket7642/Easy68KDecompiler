00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/10/2021 5:02:50 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : M68K Dissesembler
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 00003500             13      LEA     CLEAR,A1 
00001006  103C 000E                 14      MOVE.B  #14,D0  
0000100A  4E4F                      15      TRAP    #15 
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 000032FE             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22  * TODO: a welcome message with format message 
0000101E                            23      
0000101E                            24  LOADDATAONE
0000101E  43F9 00003500             25      LEA     CLEAR,A1 
00001024  103C 000E                 26      MOVE.B  #14,D0  
00001028  4E4F                      27      TRAP    #15 
0000102A  43F9 00003438             28      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001030  103C 000E                 29      MOVE.B   #14,D0     ; moves #14 into data register D0
00001034  4E4F                      30      TRAP     #15       ; Displays message via trap 14    
00001036                            31      
00001036  43F9 00003582             32      LEA     INPUT,A1
0000103C  103C 0002                 33      MOVE.B  #2,D0 *takes the string of what the user enters
00001040  4E4F                      34      TRAP    #15
00001042                            35      
00001042  4280                      36      CLR.L   D0
00001044                            37      
00001044                            38      * TODO: check if the input if odd - invalid imput
00001044                            39      
00001044                            40  
00001044                            41      
00001044  1A3C 0000                 42      MOVE.B  #0,D5
00001048                            43      
00001048  13D9 0000A000             44      MOVE.B (A1)+,$A000
0000104E  13D9 0000A010             45      MOVE.B (A1)+,$A010
00001054  13D9 0000A020             46      MOVE.B (A1)+,$A020
0000105A  13D9 0000A030             47      MOVE.B (A1)+,$A030
00001060  13D9 0000A040             48      MOVE.B (A1)+,$A040
00001066  13D9 0000A050             49      MOVE.B (A1)+,$A050
0000106C  13D9 0000A060             50      MOVE.B (A1)+,$A060
00001072  13D9 0000A070             51      MOVE.B (A1)+,$A070
00001078                            52      
00001078  6000 0058                 53      BRA VAL1
0000107C                            54  
0000107C                            55  LOADDATATWO    
0000107C  43F9 0000345F             56      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001082  103C 000E                 57      MOVE.B   #14,D0     ; moves #14 into data register D0
00001086  4E4F                      58      TRAP     #15       ; Displays message via trap 14    
00001088                            59      
00001088  43F9 00003582             60      LEA     INPUT,A1
0000108E  103C 0002                 61      MOVE.B  #2,D0 *takes the string of what the user enters
00001092  4E4F                      62      TRAP    #15
00001094                            63      
00001094  1A3C 0000                 64      MOVE.B  #0,D5
00001098                            65      
00001098  13D9 0000A000             66      MOVE.B (A1)+,$A000
0000109E  13D9 0000A010             67      MOVE.B (A1)+,$A010
000010A4  13D9 0000A020             68      MOVE.B (A1)+,$A020
000010AA  13D9 0000A030             69      MOVE.B (A1)+,$A030
000010B0  13D9 0000A040             70      MOVE.B (A1)+,$A040
000010B6  13D9 0000A050             71      MOVE.B (A1)+,$A050
000010BC  13D9 0000A060             72      MOVE.B (A1)+,$A060
000010C2  13D9 0000A070             73      MOVE.B (A1)+,$A070
000010C8                            74      
000010C8  43F9 0000345F             75      LEA MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010CE                            76      
000010CE  6000 0002                 77      BRA VAL1
000010D2                            78  
000010D2                            79      
000010D2                            80  VAL1    
000010D2  1839 0000A000             81      MOVE.B $A000,D4
000010D8  6000 0072                 82      BRA STARTCHECK
000010DC  13C4 0000A000             83  VAL2    MOVE.B D4,$A000
000010E2  1839 0000A010             84      MOVE.B $A010,D4
000010E8  6000 0062                 85      BRA STARTCHECK
000010EC  13C4 0000A010             86  VAL3    MOVE.B D4,$A010
000010F2  1839 0000A020             87      MOVE.B $A020,D4
000010F8  6000 0052                 88      BRA STARTCHECK
000010FC  13C4 0000A020             89  VAL4    MOVE.B D4,$A020
00001102  1839 0000A030             90      MOVE.B $A030,D4
00001108  6000 0042                 91      BRA STARTCHECK
0000110C  13C4 0000A030             92  VAL5    MOVE.B D4,$A030
00001112  1839 0000A040             93      MOVE.B $A040,D4
00001118  6000 0032                 94      BRA STARTCHECK
0000111C  13C4 0000A040             95  VAL6    MOVE.B D4,$A040
00001122  1839 0000A050             96      MOVE.B $A050,D4
00001128  6000 0022                 97      BRA STARTCHECK
0000112C  13C4 0000A050             98  VAL7    MOVE.B D4,$A050
00001132  1839 0000A060             99      MOVE.B $A060,D4
00001138  6000 0012                100      BRA STARTCHECK
0000113C  13C4 0000A060            101  VAL8    MOVE.B D4,$A060
00001142  1839 0000A070            102      MOVE.B $A070,D4
00001148  6000 0002                103      BRA STARTCHECK
0000114C                           104    
0000114C                           105  STARTCHECK  
0000114C  B83C 0030                106      CMP.B   #48,D4
00001150  6D00 006A                107      BLT INVALID
00001154  B83C 0030                108      CMP.B   #48,D4
00001158  6700 0022                109      BEQ INTSUB
0000115C  B83C 0030                110      CMP.B   #48,D4
00001160  6E00 0002                111      BGT INT2
00001164                           112      
00001164                           113  
00001164                           114  INT2 
00001164                           115      
00001164  B83C 0039                116      CMP.B   #57,D4
00001168  6D00 0012                117      BLT INTSUB
0000116C  B83C 0039                118      CMP.B   #57,D4
00001170  6700 000A                119      BEQ INTSUB
00001174  B83C 0039                120      CMP.B   #57,D4
00001178  6E00 000A                121      BGT CHAR1
0000117C                           122      
0000117C                           123  INTSUB 
0000117C  0404 0030                124      SUB.B #$30,D4
00001180  6000 005C                125      BRA     DONE
00001184                           126  
00001184                           127  CHAR1 
00001184                           128      
00001184  B83C 0041                129      CMP.B   #65,D4
00001188  6D00 0032                130      BLT INVALID
0000118C  B83C 0041                131      CMP.B   #65,D4
00001190  6700 0022                132      BEQ CHARSUB
00001194  B83C 0041                133      CMP.B   #65,D4
00001198  6E00 0002                134      BGT CHAR2
0000119C                           135      
0000119C                           136  CHAR2 
0000119C                           137      
0000119C  B83C 0046                138      CMP.B   #70,D4
000011A0  6D00 0012                139      BLT CHARSUB
000011A4  B83C 0046                140      CMP.B   #70,D4
000011A8  6700 000A                141      BEQ CHARSUB
000011AC  B83C 0046                142      CMP.B   #70,D4
000011B0  6E00 000A                143      BGT INVALID
000011B4                           144      
000011B4                           145  CHARSUB 
000011B4  0404 0037                146      SUB.B #$37,D4
000011B8  6000 0024                147      BRA DONE
000011BC                           148      
000011BC                           149  INVALID 
000011BC  43F9 000033BA            150      LEA BADVAL,A1
000011C2  103C 000E                151      MOVE.B   #14,D0     ; moves #14 into data register D0
000011C6  4E4F                     152      TRAP     #15       ; Displays message via trap 14
000011C8  6000 0002                153      BRA     ENTRYLOOP
000011CC                           154      
000011CC                           155  ENTRYLOOP
000011CC  B43C 0000                156      CMP.B #0,D2
000011D0  6700 FE4C                157      BEQ LOADDATAONE
000011D4  B43C 0001                158      CMP.B #1,D2
000011D8  6700 FEA2                159      BEQ LOADDATATWO
000011DC  4E75                     160      RTS
000011DE                           161      
000011DE                           162  DONE    
000011DE  5205                     163          ADD.B #1,D5
000011E0  BA3C 0000                164          CMP.B #0,D5
000011E4  6700 FEEC                165          BEQ VAL1
000011E8  BA3C 0001                166          CMP.B #1,D5
000011EC  6700 FEEE                167          BEQ VAL2
000011F0  BA3C 0002                168          CMP.B #2,D5
000011F4  6700 FEF6                169          BEQ VAL3
000011F8  BA3C 0003                170          CMP.B #3,D5
000011FC  6700 FEFE                171          BEQ VAL4
00001200  BA3C 0004                172          CMP.B #4,D5
00001204  6700 FF06                173          BEQ VAL5
00001208  BA3C 0005                174          CMP.B #5,D5
0000120C  6700 FF0E                175          BEQ VAL6
00001210  BA3C 0006                176          CMP.B #6,D5
00001214  6700 FF16                177          BEQ VAL7
00001218  BA3C 0007                178          CMP.B #7,D5
0000121C  6700 FF1E                179          BEQ VAL8
00001220  BA3C 0008                180          CMP.B #8,D5
00001224  6700 0006                181          BEQ EXIT
00001228                           182          
00001228  6000 FF22                183          BRA     STARTCHECK
0000122C                           184  
0000122C                           185  
0000122C                           186  
0000122C  13C4 0000A070            187  EXIT    MOVE.B D4,$A070
00001232                           188      
00001232  4284                     189      CLR.L D4
00001234  D839 0000A000            190      ADD.B $A000,D4
0000123A  E98C                     191      LSL.L #4,D4
0000123C  D839 0000A010            192      ADD.B $A010,D4
00001242  E98C                     193      LSL.L #4,D4
00001244  D839 0000A020            194      ADD.B $A020,D4
0000124A  E98C                     195      LSL.L #4,D4
0000124C  D839 0000A030            196      ADD.B $A030,D4
00001252  E98C                     197      LSL.L #4,D4
00001254  D839 0000A040            198      ADD.B $A040,D4
0000125A  E98C                     199      LSL.L #4,D4
0000125C  D839 0000A050            200      ADD.B $A050,D4
00001262  E98C                     201      LSL.L #4,D4
00001264  D839 0000A060            202      ADD.B $A060,D4
0000126A  E98C                     203      LSL.L #4,D4
0000126C  D839 0000A070            204      ADD.B $A070,D4
00001272                           205      
00001272  2E04                     206      MOVE.L D4,D7
00001274  4244                     207      CLR D4
00001276  B43C 0001                208      CMP.B #1,D2
0000127A  6700 0020                209      BEQ STOREADRESSES
0000127E  2C07                     210      MOVE.L D7,D6
00001280  143C 0001                211      MOVE.B #1,D2
00001284  7A00                     212      MOVE.L #0,D5
00001286  6000 FDF4                213      BRA LOADDATATWO
0000128A                           214      
0000128A                           215  ;---------------------------------------------------------
0000128A                           216  
0000128A                           217  LARGERISSUE
0000128A  43F9 000033F0            218      LEA     OUTOFORDER,A1
00001290  103C 000E                219      MOVE.B  #14,D0     ; moves #14 into data register D0
00001294  4E4F                     220      TRAP    #15       ; Displays message via trap 14
00001296  7400                     221      MOVE.L  #0,D2
00001298  6000 FD84                222      BRA     LOADDATAONE
0000129C                           223  
0000129C                           224  STOREADRESSES
0000129C  23C7 0000358C            225      MOVE.L  D7,ENDINGADDRESS
000012A2  23C6 00003584            226      MOVE.L  D6,STARTINGADDRESS
000012A8                           227  LARGERTHAN    
000012A8  BE86                     228      CMP.L D6,D7
000012AA  6DDE                     229      BLT LARGERISSUE
000012AC  4247                     230      CLR     D7
000012AE  2C79 00003584            231      MOVE.L   STARTINGADDRESS,A6
000012B4                           232      
000012B4                           233  MEMORYGRABBER
000012B4  4EB9 00002E5E            234      JSR     CLEARMR     * CLEAR MODES AND REGISTERS
000012BA                           235      
000012BA  43F9 00003500            236      LEA     CLEAR,A1 
000012C0  103C 000E                237      MOVE.B  #14,D0  
000012C4  4E4F                     238      TRAP    #15 
000012C6                           239  
000012C6  2879 0000358C            240      MOVE.L  ENDINGADDRESS,A4
000012CC  BDCC                     241      CMPA.L  A4,A6
000012CE  6C00 0080                242      BGE     ENDING 
000012D2                           243      
000012D2  0C79 0019 00003590       244      CMP.W   #25,CYCLECOUNTER
000012DA  6C00 0044                245      BGE     PAGEBREAK
000012DE  5279 00003590            246      ADD.W   #1,CYCLECOUNTER
000012E4                           247  
000012E4                           248      
000012E4                           249      
000012E4  23CE 00003588            250      MOVE.L      A6,CURRENTADDRESS   
000012EA  2239 00003588            251      MOVE.L      CURRENTADDRESS,D1
000012F0  143C 0010                252      MOVE.B      #16,D2
000012F4  103C 000F                253      MOVE.B      #15,D0     ; moves #14 into data register D0
000012F8  4E4F                     254      TRAP        #15  
000012FA                           255      
000012FA  4EB9 00002B1E            256      JSR     PRINTCLRSPOT      * print space
00001300  4EB9 00002B1E            257      JSR     PRINTCLRSPOT      * print space
00001306  4EB9 00002B1E            258      JSR     PRINTCLRSPOT      * print space
0000130C  4EB9 00002B1E            259      JSR     PRINTCLRSPOT      * print space
00001312                           260      
00001312  361E                     261      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
00001314  33C3 00003592            262      MOVE.W      D3, COMMANDDATA
0000131A                           263   
0000131A  6000 00E6                264      BRA         COMPARE_GROUPS
0000131E                           265      
0000131E  6094                     266      BRA MEMORYGRABBER
00001320                           267      
00001320                           268  PAGEBREAK
00001320  43F9 00003500            269      LEA     CLEAR,A1 
00001326  103C 000E                270      MOVE.B  #14,D0  
0000132A  4E4F                     271      TRAP    #15 
0000132C  43F9 00003387            272      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
00001332  103C 000E                273      MOVE.B   #14,D0     ; moves #14 into data register D0
00001336  4E4F                     274      TRAP     #15       ; Displays message via trap 14
00001338  43F9 00003582            275      LEA     INPUT,A1
0000133E  103C 0002                276      MOVE.B  #2,D0 *takes the string of what the user enters
00001342  4E4F                     277      TRAP    #15
00001344  33FC 0000 00003590       278      MOVE.W #0,CYCLECOUNTER
0000134C                           279      
0000134C  6000 FF66                280      BRA MEMORYGRABBER
00001350                           281   
00001350                           282  ENDING 
00001350  43F9 00003500            283      LEA     CLEAR,A1 
00001356  103C 000E                284      MOVE.B  #14,D0  
0000135A  4E4F                     285      TRAP    #15 
0000135C  33FC 0000 00003590       286      MOVE.W  #0,CYCLECOUNTER
00001364  43F9 00003484            287      LEA     FINALMESSAGE1,A1     * Prints End of Program message
0000136A  103C 000E                288      MOVE.B  #14,D0
0000136E  4E4F                     289      TRAP    #15
00001370  43F9 00003500            290      LEA     CLEAR,A1 
00001376  103C 000E                291      MOVE.B  #14,D0  
0000137A  4E4F                     292      TRAP    #15 
0000137C  43F9 000034AE            293      LEA     FINALMESSAGE2,A1     * Prints End of Program message
00001382  103C 000E                294      MOVE.B  #14,D0
00001386  4E4F                     295      TRAP    #15
00001388  43F9 00003582            296      LEA     INPUT,A1
0000138E  103C 0005                297      MOVE.B  #5,D0 *takes the single charater the user enters
00001392  4E4F                     298      TRAP    #15
00001394  B23C 0031                299      CMP.B #49,D1
00001398  6700 FC66                300      BEQ START
0000139C  B23C 0030                301      CMP.B #48,D1
000013A0  6700 0010                302      BEQ GOODBYE
000013A4  43F9 000033BA            303      LEA     BADVAL,A1     * Prints End of Program message
000013AA  103C 000E                304      MOVE.B  #14,D0
000013AE  4E4F                     305      TRAP    #15
000013B0  609E                     306      BRA ENDING
000013B2                           307  
000013B2                           308  GOODBYE
000013B2  43F9 00003500            309      LEA     CLEAR,A1 
000013B8  103C 000E                310      MOVE.B  #14,D0  
000013BC  4E4F                     311      TRAP    #15 
000013BE  43F9 000035B1            312      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
000013C4  103C 000E                313      MOVE.B   #14,D0     ; moves #14 into data register D0
000013C8  4E4F                     314      TRAP     #15  
000013CA  43F9 000034D8            315      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
000013D0  103C 000E                316      MOVE.B  #14,D0
000013D4  4E4F                     317      TRAP    #15
000013D6  FFFF FFFF                318      SIMHALT             ; halt simulator   
000013DA                           319      
000013DA                           320  ;-------------------------- OP CODE SECTION -------------------------------
000013DA                           321  
000013DA                           322  READ_BITS
000013DA  4287                     323      CLR.L   D7
000013DC  4284                     324      CLR.L   D4
000013DE  1E39 00003594            325      MOVE.B  Bits,D7
000013E4                           326      
000013E4                           327  LOOP_READ_BITS    
000013E4  BE3C 0000                328      CMP.B   #0,D7           * counter
000013E8  6700 1A4C                329      BEQ     RETURN
000013EC                           330      
000013EC  E34C                     331      LSL.W   #1,D4           * make space for new bit
000013EE  E34B                     332      LSL.W   #1,D3          
000013F0                           333  
000013F0  6500 0008                334      BCS     SET             * if 1, then branch to SET
000013F4  5307                     335      SUBI.B  #1,D7          
000013F6  4EF8 13E4                336      JMP     LOOP_READ_BITS
000013FA                           337  SET
000013FA  5244                     338      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013FC  5307                     339      SUBI.B  #1, D7
000013FE  4EF8 13E4                340      JMP     LOOP_READ_BITS  
00001402                           341      
00001402                           342  
00001402                           343  
00001402                           344  COMPARE_GROUPS              * comapres the 4 bits of the instruction
00001402  13FC 0004 00003594       345      MOVE.B  #4,Bits         
0000140A  4EB8 13DA                346      JSR     READ_BITS       * get the first 4 bits and store it in D4
0000140E                           347  
0000140E  B87C 0001                348      CMP.W   #%0001,D4      
00001412  6700 005E                349      BEQ     CHECK_MOVE      * MOVE.B
00001416                           350      
00001416  B87C 0002                351      CMP.W   #%0010,D4       * GROUP 0010     
0000141A  6700 0056                352      BEQ     CHECK_MOVE
0000141E                           353      
0000141E  B87C 0003                354      CMP.W   #%0011,D4       * GROUP 0011     
00001422  6700 004E                355      BEQ     CHECK_MOVE
00001426                           356      
00001426  B87C 0004                357      CMP.W   #%0100,D4      
0000142A  6700 0296                358      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
0000142E                           359      
0000142E  B87C 0005                360      CMP.W   #%0101,D4      
00001432  6700 0458                361      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
00001436                           362      
00001436  B87C 0006                363      CMP.W   #%0110,D4      
0000143A  6700 04EC                364      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
0000143E                           365      
0000143E  B87C 0007                366      CMP.W   #%0111,D4      
00001442  6700 0602                367      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
00001446                           368      
00001446  B87C 0008                369      CMP.W   #%1000,D4      
0000144A  6700 0658                370      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
0000144E                           371      
0000144E  B87C 0009                372      CMP.W   #%1001,D4      
00001452  6700 06DE                373      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
00001456                           374      
00001456  B87C 000C                375      CMP.W   #%1100,D4      
0000145A  6700 0758                376      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
0000145E                           377      
0000145E  B87C 000D                378      CMP.W   #%1101,D4      
00001462  6700 04F4                379      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
00001466                           380      
00001466  B87C 000E                381      CMP.W   #%1110,D4      
0000146A  6700 07D6                382      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
0000146E                           383      
0000146E  6600 171C                384      BNE     PRINT_DATA      * all other instructions are not supported 
00001472                           385  
00001472                           386  
00001472                           387  *************************************MOVE MOVEA*************************
00001472                           388  
00001472                           389  CHECK_MOVE
00001472                           390  
00001472  33F9 00003592 000035EC   391      MOVE.W COMMANDDATA, myWord  * grab 16 bit instruction from main           
0000147C                           392  
0000147C                           393      * grab ID (first 4 bits), use D3, D4 as temp
0000147C  3639 000035EC            394      MOVE.W  myWord, D3                  
00001482  183C 000C                395      MOVE.B  #12,D4
00001486  E86B                     396      LSR.W   D4,D3                       
00001488  13C3 000035EE            397      MOVE.B  D3, ID
0000148E                           398  
0000148E                           399      * grab DestReg (next 3 bits)
0000148E  3639 000035EC            400      MOVE.W  myWord, D3
00001494  183C 0004                401      MOVE.B  #4, D4
00001498  E96B                     402      LSL.W   D4, D3                     
0000149A  183C 000D                403      MOVE.B  #13,D4
0000149E  E86B                     404      LSR.W   D4,D3                       
000014A0  13C3 000035EF            405      MOVE.B  D3, DstReg
000014A6                           406  
000014A6                           407      * grab DestMod (next 3 bits)
000014A6  3639 000035EC            408      MOVE.W  myWord, D3                  
000014AC  183C 0007                409      MOVE.B  #7, D4
000014B0  E96B                     410      LSL.W   D4, D3                      
000014B2  183C 000D                411      MOVE.B  #13,D4
000014B6  E86B                     412      LSR.W   D4,D3                       
000014B8  13C3 000035F0            413      MOVE.B  D3, DstMod
000014BE                           414  
000014BE                           415      * grab SrcReg (next 3 bits)
000014BE  3639 000035EC            416      MOVE.W  myWord, D3                  
000014C4  183C 000A                417      MOVE.B  #10, D4
000014C8  E96B                     418      LSL.W   D4, D3                      
000014CA  183C 000D                419      MOVE.B  #13,D4
000014CE  E86B                     420      LSR.W   D4,D3                       
000014D0  13C3 000035F2            421      MOVE.B  D3, SrcMod
000014D6                           422  
000014D6                           423      * grab SrcMod (next 3 bits)
000014D6  3639 000035EC            424      MOVE.W  myWord, D3                  
000014DC  183C 000D                425      MOVE.B  #13, D4
000014E0  E96B                     426      LSL.W   D4, D3                      
000014E2  183C 000D                427      MOVE.B  #13,D4
000014E6  E86B                     428      LSR.W   D4,D3                       
000014E8  13C3 000035F1            429      MOVE.B  D3, SrcReg
000014EE                           430  
000014EE                           431  
000014EE                           432      * check if MOVE or MOVEA using DestMod
000014EE  0C39 0001 000035F0       433      CMP.B   #1, DstMod                  * DestMod == 1: MOVEA
000014F6  6700 0012                434      BEQ     DS_MOVEA                  
000014FA  6000 0002                435      BRA     DS_MOVE                     * Else: MOVE
000014FE                           436  
000014FE                           437  DS_MOVE        
000014FE  13FC 0000 000035EA       438      MOVE.B  #0,OpName                   * OpName = 0 for MOVE
00001506  6000 001A                439      BRA     CMP_SIZE
0000150A                           440  
0000150A                           441  DS_MOVEA        
0000150A  0C39 0001 000035EE       442      CMP.B   #1, ID
00001512  6700 0182                443      BEQ     ERROR                       * MOVEA cannot have ID = 1
00001516  13FC 0001 000035EA       444      MOVE.B  #01,OpName                  * OpName = 1 for MOVEA
0000151E  6000 0002                445      BRA     CMP_SIZE
00001522                           446  
00001522                           447  CMP_SIZE   
00001522  0C39 0001 000035EE       448      CMP.B   #1, ID                    
0000152A  6700 001A                449      BEQ     SIZE_B
0000152E  0C39 0003 000035EE       450      CMP.B   #3, ID                    
00001536  6700 001C                451      BEQ     SIZE_W
0000153A  0C39 0002 000035EE       452      CMP.B   #2, ID                   
00001542  6700 001E                453      BEQ     SIZE_L
00001546                           454  
00001546                           455  
00001546                           456  SIZE_B        
00001546  23FC 00000001 00003596   457      MOVE.L  #1,SizeValue                 * Set size to 1=Byte
00001550  6000 001E                458      BRA     CHECK_SRCMOD
00001554                           459  
00001554                           460  SIZE_W         
00001554  23FC 00000002 00003596   461      MOVE.L  #2,SizeValue                 * Set size to 2=Word
0000155E  6000 0010                462      BRA     CHECK_SRCMOD
00001562                           463  
00001562                           464  SIZE_L         
00001562  23FC 00000003 00003596   465      MOVE.L  #3,SizeValue                 * Set size to 3=Long
0000156C  6000 0002                466      BRA     CHECK_SRCMOD
00001570                           467  
00001570                           468  CHECK_SRCMOD
00001570  0C39 0007 000035F2       469      CMP.B   #7, SrcMod                * Check if source mode is 7
00001578  6700 0006                470      BEQ     CHECK_SRCREG              * Check source register
0000157C  6000 00C0                471      BRA     CHECK_DESTMOD             * Source not 7, now check destination Mod
00001580                           472  
00001580                           473  CHECK_SRCREG    
00001580  0C39 0000 000035F1       474      CMP.B   #0, SrcReg                * Check is source register is 0
00001588  6700 0088                475      BEQ     DtaSrcWrd                 * Load next word
0000158C  0C39 0001 000035F1       476      CMP.B   #1, SrcReg                * Check if source register is 1
00001594  6700 0092                477      BEQ     DtaSrcLng                 * Load next long
00001598  0C39 0004 000035F1       478      CMP.B   #4, SrcReg                * Check if source register is 4 (immediate value)
000015A0  6700 0006                479      BEQ     DtaSrcImd                 * Load first word into word one
000015A4  6000 00F0                480      BRA     ERROR                     * Invalid register value
000015A8                           481  
000015A8                           482  DtaSrcImd    
000015A8  0C39 0001 000035EE       483      CMP.B   #1, ID                    * ID = 1 - size is byte
000015B0  6700 001E                484      BEQ     DtaSrcImdB                * Load next byte
000015B4  0C39 0002 000035EE       485      CMP.B   #2, ID                    * ID = 2 - size is word
000015BC  6700 0028                486      BEQ     DtaSrcImdW                * Load next word
000015C0  0C39 0003 000035EE       487      CMP.B   #3, ID                    * ID = 3 - size is long
000015C8  6700 0032                488      BEQ     DtaSrcImdL                * Load next long
000015CC  6000 00C8                489      BRA     ERROR                     * Invalid opID (this should never happen)  
000015D0                           490  
000015D0                           491  
000015D0                           492  DtaSrcImdB   
000015D0  4283                     493      CLR.L   D3
000015D2  361A                     494      MOVE.W  (A2)+,D3
000015D4  23C3 000035F4            495      MOVE.L  D3,opDta1
000015DA  13FC 0001 000035F8       496      MOVE.B  #1, opDta1T               * Set Data 1 type as 0=Byte
000015E2  6000 005A                497      BRA     CHECK_DESTMOD             * Check destination mode
000015E6                           498  
000015E6                           499  DtaSrcImdW  
000015E6  4283                     500      CLR.L   D3
000015E8  361A                     501      MOVE.W  (A2)+,D3
000015EA  23C3 000035F4            502      MOVE.L  D3,opDta1
000015F0  13FC 0002 000035F8       503      MOVE.B  #2, opDta1T               * Set Data 1 type as 1=Word
000015F8  6000 0044                504      BRA     CHECK_DESTMOD             * Check destination mode
000015FC                           505  
000015FC                           506  DtaSrcImdL   
000015FC  4283                     507      CLR.L   D3
000015FE  261A                     508      MOVE.L  (A2)+,D3
00001600  23C3 000035F4            509      MOVE.L  D3,opDta1
00001606  13FC 0003 000035F8       510      MOVE.B  #3, opDta1T               * Set Data 1 type as 2=Long
0000160E  6000 002E                511      BRA     CHECK_DESTMOD             * Check destination mode
00001612                           512  
00001612                           513  DtaSrcWrd    
00001612  4283                     514      CLR.L   D3
00001614  361A                     515      MOVE.W  (A2)+,D3
00001616  23C3 000035F4            516      MOVE.L  D3,opDta1
0000161C  13FC 0002 000035F8       517      MOVE.B  #2, opDta1T               * Set Data 1 type as 1=Word
00001624  6000 0018                518      BRA     CHECK_DESTMOD             * Check destination mode
00001628                           519  
00001628                           520  DtaSrcLng                        
00001628  4283                     521      CLR.L   D3
0000162A  261A                     522      MOVE.L  (A2)+,D3
0000162C  23C3 000035F4            523      MOVE.L  D3,opDta1
00001632  13FC 0003 000035F8       524      MOVE.B  #3, opDta1T               * Set Data 1 type as 2=Long
0000163A  6000 0002                525      BRA     CHECK_DESTMOD             * Check destination mode
0000163E                           526  
0000163E                           527  CHECK_DESTMOD
0000163E  0C39 0007 000035F0       528      CMP.B   #7, DstMod                * Check if destination mode is 7
00001646  6700 0006                529      BEQ     CEHCK_DESTREG             * Check destination register
0000164A  6000 0056                530      BRA     myDONE                      * Destination not 7, done with data
0000164E                           531  
0000164E                           532  CEHCK_DESTREG    
0000164E  0C39 0000 000035EF       533      CMP.B   #0, DstReg                * Check if destination register is 0
00001656  6700 0012                534      BEQ     DtaDstWrd                 * Load next word
0000165A  0C39 0001 000035EF       535      CMP.B   #1, DstReg                * Check if destination register is 1
00001662  6700 001C                536      BEQ     DtaDstLng                 * Load next long
00001666  6000 002E                537      BRA     ERROR                     * Invalid registration Mode
0000166A                           538  
0000166A                           539  DtaDstWrd    
0000166A  4283                     540      CLR.L   D3
0000166C  361A                     541      MOVE.W  (A2)+,D3
0000166E  23C3 000035FA            542      MOVE.L  D3,opDta2
00001674  13FC 0001 000035FE       543      MOVE.B  #1, opDta2T               * Set Data2 type as 1=Word
0000167C  6000 0024                544      BRA     myDONE
00001680                           545  
00001680                           546  DtaDstLng    
00001680  4283                     547      CLR.L   D3
00001682  261A                     548      MOVE.L  (A2)+,D3
00001684  23C3 000035FA            549      MOVE.L  D3,opDta2
0000168A  13FC 0002 000035FE       550      MOVE.B  #2, opDta2T               * Set Data2 type as 2=Long
00001692  6000 000E                551      BRA     myDONE
00001696                           552  
00001696                           553  ERROR
00001696  13FC 0000 000035FF       554      MOVE.B  #0, ERR                  * Error 1 = A-OK; 0 = Invalid EA
0000169E  6000 FC14                555      BRA      MEMORYGRABBER
000016A2                           556  
000016A2                           557  
000016A2                           558  myDONE
000016A2  13FC 0001 000035FF       559       MOVE.B  #1, ERR                 * Clear error flag
000016AA  0C39 0000 000035EA       560       CMP.B   #0, OpName              * 0 = OpName for MOVE
000016B2  6700 0F8C                561       BEQ    PRINTMOVE
000016B6  0C39 0001 000035EA       562       CMP.B   #1, OpName              * 1 = OpName for MOVEA
000016BE  6700 0FDE                563       BEQ     PRINTMOVEA
000016C2                           564       
000016C2                           565  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
000016C2                           566  
000016C2                           567  COMPARE_0100
000016C2  0803 000C                568      BTST.L  #$0C,D3             ; compare bit 8 for LEA
000016C6  6600 0022                569      BNE     CHECK_LEA
000016CA                           570      
000016CA  13FC 0004 00003594       571      MOVE.B  #4,Bits
000016D2  4EB8 13DA                572      JSR     READ_BITS
000016D6                           573      
000016D6  B87C 0006                574      CMP.W   #%0110,D4
000016DA  6700 0092                575      BEQ     CHECK_NOT           ; goes to NOT
000016DE                           576      
000016DE                           577     * CMP.W   #%1000,D4
000016DE                           578          * BEQ     CHECK_MOVEM_1000    ; goes to MOVEM_1000
000016DE                           579     * BEQ     CHECK_MOVEM
000016DE                           580     * CMP.W   #%1100,D4       
000016DE                           581          * BEQ     CHECK_MOVEM_1100    ; goes to MOVEM_1100
000016DE                           582     * BEQ     CHECK_MOVEM
000016DE                           583      
000016DE  B87C 000E                584      CMP.W   #%1110,D4
000016E2  6700 0106                585      BEQ     CHECK_NOP_JSR_RTS   ; goes to compare for 1110 (NOP,JSR,RTS)
000016E6                           586      
000016E6  6600 14A4                587      BNE     PRINT_DATA
000016EA                           588  
000016EA                           589  CHECK_LEA
000016EA  13FC 0003 00003594       590      MOVE.B  #3,Bits  
000016F2  4EB8 13DA                591      JSR     READ_BITS 
000016F6  13C4 000035A6            592      MOVE.B  D4,DEST_REG  
000016FC                           593  
000016FC  13FC 0003 00003594       594      MOVE.B  #3,Bits
00001704  4EB8 13DA                595      JSR     READ_BITS
00001708  B83C 0007                596      CMP.B   #7,D4               ; if mode = 111 
0000170C  6600 147E                597      BNE     PRINT_DATA
00001710                           598  
00001710  13FC 0003 00003594       599      MOVE.B  #3,Bits
00001718  4EB8 13DA                600      JSR     READ_BITS 
0000171C  13C4 000035A8            601      MOVE.B  D4,SRC_MODE           
00001722                           602  
00001722  13FC 0003 00003594       603      MOVE.B  #3,Bits 
0000172A  4EB8 13DA                604      JSR     READ_BITS 
0000172E  13C4 000035A9            605      MOVE.B  D4,SRC_REG 
00001734                           606              
00001734  4EB9 00002D70            607      JSR     CHECK_SOURCE
0000173A                           608      
0000173A  0C39 000F 000035C6       609      CMP.B   #$F,SrcMode         ; if SrcMode is invalid
00001742  6700 1448                610      BEQ     PRINT_DATA
00001746                           611      
00001746  0C39 0002 000035C6       612      CMP.B   #$2,SrcMode         ; if SrcMode is 010 = '(An)'
0000174E  6700 0FCC                613      BEQ     PRINTLEA        
00001752                           614      
00001752  0C39 0007 000035C6       615      CMP.B   #$7,SrcMode         ; if SrcMode is 111 + 000 = (XXX).W
0000175A  6700 0FC0                616      BEQ     PRINTLEA    
0000175E                           617      
0000175E  0C39 0008 000035C6       618      CMP.B   #$8,SrcMode         ; if SrcMode is 111 + 001 = (XXX).L
00001766  6700 0FB4                619      BEQ     PRINTLEA
0000176A                           620              
0000176A  6000 16EA                621      BRA     SET_INVALID_EA      ; else, invalid EA
0000176E                           622      
0000176E                           623  CHECK_NOT 
0000176E  13FC 0002 00003594       624      MOVE.B  #2,Bits             
00001776  4EB8 13DA                625      JSR     READ_BITS             
0000177A  13C4 000035B0            626      MOVE.B  D4,SIZE
00001780                           627      
00001780  B83C 0003                628      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
00001784  6700 1406                629      BEQ     PRINT_DATA          * Else, If 11 size invalid
00001788                           630      
00001788  13FC 0003 00003594       631      MOVE.B  #3,Bits       
00001790  4EB8 13DA                632      JSR     READ_BITS       
00001794  13C4 000035A7            633      MOVE.B  D4,DEST_MODE             
0000179A                           634  
0000179A  13FC 0003 00003594       635      MOVE.B  #3,Bits       
000017A2  4EB8 13DA                636      JSR     READ_BITS
000017A6  13C4 000035A6            637      MOVE.B  D4,DEST_REG             
000017AC                           638      
000017AC  4EB9 00002C70            639      JSR     CHECK_DESTINATION       ; Check Destination Mode
000017B2                           640  
000017B2  0C39 000F 000035C4       641      CMP.B   #$F,DstMode         ; if DstMode is invalid
000017BA  6700 13D0                642      BEQ     PRINT_DATA      
000017BE                           643  
000017BE  0C39 000E 000035C4       644      CMP.B   #$E,DstMode 
000017C6  6700 168E                645      BEQ     SET_INVALID_EA      ; flag for invalid EA
000017CA                           646  
000017CA  0C39 0001 000035C4       647      CMP.B   #$1,DstMode         ; If DstMode is 001 = 'An'
000017D2  6700 1682                648      BEQ     SET_INVALID_EA      ; flag for invalid EA
000017D6                           649      
000017D6  0C39 000B 000035C4       650      CMP.B   #$B,DstMode         ; if DstMode is 111 + 100 = #<data>
000017DE  6700 1676                651      BEQ     SET_INVALID_EA      ; flag for invalid EA
000017E2                           652      
000017E2  6000 0F96                653      BRA     PRINTNOT
000017E6                           654  
000017E6                           655  CHECK_MOVEM
000017E6  6000 0F24                656      BRA     PRINTMOVEM
000017EA                           657      
000017EA                           658  *CHECK_MOVEM_1000 
000017EA                           659   *   MOVE.B  #1,Bits
000017EA                           660    *  JSR     READ_BITS
000017EA                           661    *  CMP.B   #%1,D4
000017EA                           662    *  BNE     PRINT_DATA
000017EA                           663      
000017EA                           664     * MOVE.B  #1,Bits
000017EA                           665      *JSR     READ_BITS
000017EA                           666      *MOVE.B  D4,SIZE
000017EA                           667  
000017EA                           668     * MOVE.B  #3,Bits
000017EA                           669     * JSR     READ_BITS
000017EA                           670     * MOVE.B  D4,TEMP_MODE
000017EA                           671      
000017EA                           672     * MOVE.B  #3,Bits
000017EA                           673     * JSR     READ_BITS
000017EA                           674     * MOVE.B  D4,TEMP_REG
000017EA                           675      
000017EA                           676     * JSR     CHECK_TEMP
000017EA                           677     * JSR     CHECK_XBIT
000017EA                           678      
000017EA                           679     * CMP.B   #$F,TempMode        ; If TempMode is invalid
000017EA                           680     * BEQ     PRINT_DATA
000017EA                           681  
000017EA                           682     * CMP.B   #$E,TempMode        ; If TempMode is invalid EA
000017EA                           683     * BEQ     SET_INVALID_EA      ; flag for invalid EA
000017EA                           684  
000017EA                           685     * CMP.B   #$2,TempMode        ; If TempMode is 010 = '(An)'
000017EA                           686     * BEQ     PRINTMOVEM             
000017EA                           687  
000017EA                           688     * CMP.B   #$7,TempMode        ; If TempMode is 111 + 000 = (XXX).W
000017EA                           689     * BEQ     PRINTMOVEM  
000017EA                           690  
000017EA                           691     * CMP.B   #$8,TempMode        ; If TempMode is 111 + 001 = (XXX).L
000017EA                           692     * BEQ     PRINTMOVEM  
000017EA                           693                 
000017EA                           694     * CMP.B   #$4,DstMode         ; If DstMode is 100 = '-(An)'
000017EA                           695     * BEQ     PRINTMOVEM  
000017EA                           696  
000017EA                           697     * CMP.B   #$3,SrcMode         ; If SrcMode is 011 = '(An)+'
000017EA                           698     * BEQ     PRINTMOVEM  
000017EA                           699      
000017EA                           700     * BRA     SET_INVALID_EA      ; flag for invalid EA
000017EA                           701     * BRA     PRINTMOVEM
000017EA                           702      
000017EA                           703  *CHECK_MOVEM_1100     
000017EA                           704   *   MOVE.B      #1,XBIT
000017EA                           705  
000017EA                           706  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
000017EA  13FC 0002 00003594       707      MOVE.B  #2,Bits
000017F2  4EB8 13DA                708      JSR     READ_BITS
000017F6                           709      
000017F6  B83C 0002                710      CMP.B   #%10,D4
000017FA  6700 000E                711      BEQ     CHECK_JSR           ; goes to JSR
000017FE                           712      
000017FE  B83C 0001                713      CMP.B   #%01,D4 
00001802  6700 0068                714      BEQ     CHECK_NOP_RTS       ; goes to NOP and RTS
00001806                           715  
00001806  6600 1384                716      BNE     PRINT_DATA
0000180A                           717  
0000180A                           718  CHECK_JSR 
0000180A  13FC 0003 00003594       719      MOVE.B  #3,Bits
00001812  4EB8 13DA                720      JSR     READ_BITS
00001816  13C4 000035A7            721      MOVE.B  D4,DEST_MODE
0000181C                           722      
0000181C  13FC 0003 00003594       723      MOVE.B  #3,Bits
00001824  4EB8 13DA                724      JSR     READ_BITS
00001828  13C4 000035A6            725      MOVE.B  D4,DEST_REG
0000182E                           726  
0000182E  4EB9 00002C70            727      JSR     CHECK_DESTINATION
00001834                           728      
00001834  0C39 000F 000035C4       729      CMP.B   #$F,DstMode         ; if invalid print DATA
0000183C  6700 134E                730      BEQ     PRINT_DATA
00001840                           731      
00001840  0C39 0002 000035C4       732      CMP.B   #$2,DstMode         ; if DstMode 010        
00001848  6700 0F74                733      BEQ     PRINTJSR
0000184C                           734      
0000184C  0C39 0007 000035C4       735      CMP.B   #$7,DstMode         ; if DstMode 111 + 000
00001854  6700 0F68                736      BEQ     PRINTJSR
00001858                           737      
00001858  0C39 0008 000035C4       738      CMP.B   #$8,DstMode         ; if DstMode 111 + 001
00001860  6700 0F5C                739      BEQ     PRINTJSR
00001864                           740      
00001864  6000 15F0                741      BRA     SET_INVALID_EA      ; flag for invalid EA
00001868  6000 0F54                742      BRA     PRINTJSR
0000186C                           743      
0000186C                           744  CHECK_NOP_RTS
0000186C  13FC 0006 00003594       745      MOVE.B  #6,Bits
00001874  4EB8 13DA                746      JSR     READ_BITS
00001878                           747      
00001878  B83C 0031                748      CMP.B   #%110001,D4
0000187C  6700 0E7E                749      BEQ     PRINTNOP            
00001880                           750      
00001880  B83C 0035                751      CMP.B   #%110101,D4
00001884  6700 0F7C                752      BEQ     PRINTRTS       
00001888                           753          
00001888  6600 1302                754      BNE     PRINT_DATA
0000188C                           755  
0000188C                           756  ************************** ADDQ ***************************
0000188C                           757  CHECK_ADDQ
0000188C  13FC 0003 00003594       758      MOVE.B  #3,Bits 
00001894  4EB8 13DA                759      JSR     READ_BITS
00001898  13C4 000035AC            760      MOVE.B  D4,DATA_FIELD
0000189E                           761      
0000189E  4EB9 00002E38            762      JSR     FORMAT_DATA     
000018A4                           763      
000018A4  13FC 0001 00003594       764      MOVE.B  #1,Bits
000018AC  4EB8 13DA                765      JSR     READ_BITS
000018B0  B83C 0000                766      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
000018B4  6600 12D6                767      BNE     PRINT_DATA          * goes to PRINT_DATA
000018B8                           768  
000018B8  13FC 0002 00003594       769      MOVE.B  #2,Bits
000018C0  4EB8 13DA                770      JSR     READ_BITS
000018C4  13C4 000035B0            771      MOVE.B  D4,SIZE             * store size into SIZE
000018CA  0C39 0003 000035B0       772      CMP.B   #%11,SIZE           * cannot be #%11
000018D2  6700 12B8                773      BEQ     PRINT_DATA
000018D6                           774  
000018D6  13FC 0003 00003594       775      MOVE.B  #3,Bits
000018DE  4EB8 13DA                776      JSR     READ_BITS
000018E2  13C4 000035A7            777      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
000018E8                           778      
000018E8  13FC 0003 00003594       779      MOVE.B  #3,Bits
000018F0  4EB8 13DA                780      JSR     READ_BITS
000018F4  13C4 000035A6            781      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
000018FA                           782      
000018FA  4EB9 00002C70            783      JSR     CHECK_DESTINATION    
00001900                           784      
00001900  0C39 000F 000035A7       785      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
00001908  6700 1282                786      BEQ     PRINT_DATA         
0000190C                           787      
0000190C  0C39 000E 000035A7       788      CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
00001914  6700 1540                789      BEQ     SET_INVALID_EA      
00001918                           790      
00001918  0C39 000B 000035A7       791      CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
00001920  6700 1534                792      BEQ     SET_INVALID_EA      
00001924                           793      
00001924  6000 0EEC                794      BRA     PRINTADDQ
00001928                           795  
00001928                           796  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
00001928                           797  COMPARE_0110  * TODO : store condition and 8-bit displacement 
00001928  13FC 0004 00003594       798      MOVE.B  #4,Bits 
00001930  4EB8 13DA                799      JSR     READ_BITS
00001934                           800      
00001934  B83C 000E                801      CMP.B   #%1110,D4
00001938  6700 0F3C                802      BEQ     PRINTBGT 
0000193C                           803      
0000193C  B83C 000F                804      CMP.B   #%1111,D4
00001940  6700 0F44                805      BEQ     PRINTBLE 
00001944                           806      
00001944  B83C 0007                807      CMP.B   #%0111,D4
00001948  6700 0F4C                808      BEQ     PRINTBEQ  
0000194C                           809      
0000194C  B83C 0000                810      CMP.B   #%0000,D4
00001950  6700 0F54                811      BEQ     PRINTBRA
00001954                           812      
00001954  6000 1236                813      BRA     PRINT_DATA 
00001958                           814  
00001958                           815  ************************** ADD, ADDA **********************
00001958                           816  COMPARE_1101    * ADD and ADDA 
00001958  13FC 0003 00003594       817      MOVE.B  #3,Bits
00001960  4EB8 13DA                818      JSR     READ_BITS
00001964  13C4 000035AB            819      MOVE.B  D4,TEMP_REG
0000196A  13C4 000035A6            820      MOVE.B  D4,DEST_REG
00001970                           821      
00001970  13FC 0001 00003594       822      MOVE.B  #1,Bits
00001978  4EB8 13DA                823      JSR     READ_BITS
0000197C  13C4 000035C2            824      MOVE.B  D4,XBit
00001982                           825      
00001982  13FC 0002 00003594       826      MOVE.B  #2,Bits
0000198A  4EB8 13DA                827      JSR     READ_BITS
0000198E  13C4 000035B0            828      MOVE.B  D4,SIZE
00001994                           829  
00001994  4EB9 00002DF0            830      JSR     CHECK_XBIT
0000199A                           831  
0000199A  13FC 0003 00003594       832      MOVE.B  #3,Bits
000019A2  4EB8 13DA                833      JSR     READ_BITS
000019A6  13C4 000035AA            834      MOVE.B  D4,TEMP_MODE
000019AC                           835      
000019AC  13FC 0003 00003594       836      MOVE.B  #3,Bits
000019B4  4EB8 13DA                837      JSR     READ_BITS
000019B8  13C4 000035AB            838      MOVE.B  D4,TEMP_REG   
000019BE                           839      
000019BE  4EB9 00002CF0            840      JSR     CHECK_TEMP   
000019C4  0C39 000F 000035C5       841      CMP.B   #$F, TempMode
000019CC  6700 11BE                842      BEQ     PRINT_DATA
000019D0                           843      
000019D0  0C39 000E 000035C5       844      CMP.B   #$E,TempMode    
000019D8  6700 147C                845      BEQ     SET_INVALID_EA 
000019DC                           846      
000019DC                           847    *  MOVE.B  #%001,TEMP_MODE
000019DC  0C39 0003 000035B0       848      CMP.B   #%11,SIZE 
000019E4  6700 0022                849      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
000019E8                           850      
000019E8  6000 0002                851      BRA     CHECK_ADD
000019EC                           852      
000019EC                           853  CHECK_ADD    
000019EC  0C39 0003 000035B0       854      CMP.B   #%11,SIZE
000019F4  6700 1196                855      BEQ     PRINT_DATA
000019F8                           856     * CMP.B   #%00,SIZE
000019F8                           857     * BNE     PRINTADD  
000019F8                           858      
000019F8  0C39 0001 000035C5       859      CMP.B   #$1,TempMode       * if TempMode is invalid
00001A00  6700 1454                860      BEQ     SET_INVALID_EA       
00001A04  6000 0FB4                861      BRA     PRINTADD  
00001A08                           862  
00001A08                           863  CHECK_ADDA
00001A08  13FC 0001 000035B0       864      MOVE.B  #%01,SIZE
00001A10                           865      
00001A10  4EB9 00002D70            866      JSR     CHECK_SOURCE   
00001A16  0C39 000F 000035C6       867      CMP.B   #$F,SrcMode
00001A1E  6700 116C                868      BEQ     PRINT_DATA
00001A22  0C39 000E 000035C6       869      CMP.B   #$E,SrcMode
00001A2A  6700 142A                870      BEQ     SET_INVALID_EA 
00001A2E                           871     
00001A2E  0C39 0000 000035C2       872      CMP.B   #%0,XBIT
00001A36  6700 0FBC                873      BEQ     PRINTADDA   
00001A3A                           874                 
00001A3A  13FC 0002 000035B0       875      MOVE.B  #%10,SIZE
00001A42  6000 0FB0                876      BRA     PRINTADDA 
00001A46                           877   
00001A46                           878  ************************** MOVEQ ********************************
00001A46                           879  CHECK_MOVEQ
00001A46  13FC 0003 00003594       880      MOVE.B  #3,Bits         * read next 3 bits
00001A4E  4EB8 13DA                881      JSR     READ_BITS       * store them in D4
00001A52  13C4 000035A6            882      MOVE.B  D4,DEST_REG     * move register value (used in EA)
00001A58  1439 000035A6            883      MOVE.B  DEST_REG,D2
00001A5E  163C 0000                884      MOVE.B  #%000,D3
00001A62                           885      
00001A62  13FC 0001 00003594       886      MOVE.B  #1,Bits         * read the next bit into D4
00001A6A  4EB8 13DA                887      JSR     READ_BITS
00001A6E  B83C 0000                888      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
00001A72  6600 1118                889      BNE     PRINT_DATA      * goes to PRINT_DATA ?
00001A76                           890      
00001A76  13FC 0008 00003594       891      MOVE.B  #8,Bits        
00001A7E  4EB8 13DA                892      JSR     READ_BITS
00001A82  23C4 000035AC            893      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
00001A88                           894      
00001A88  13FC 0007 000035A8       895      MOVE.B  #%111,SRC_MODE  * 
00001A90  13FC 0004 000035A9       896      MOVE.B  #%100,SRC_REG   * 
00001A98  13FC 0004 00002A66       897      MOVE.B  #4,SizeSplit
00001AA0  6000 0E14                898      BRA     PRINTMOVEQ 
00001AA4                           899      
00001AA4                           900  ************************* OR *********************************
00001AA4                           901  CHECK_OR
00001AA4  13FC 0003 00003594       902      MOVE.B  #3,Bits
00001AAC  4EB8 13DA                903      JSR     READ_BITS
00001AB0  13C4 000035AB            904      MOVE.B  D4,TEMP_REG
00001AB6                           905      
00001AB6  13FC 0001 00003594       906      MOVE.B  #1,Bits
00001ABE  4EB8 13DA                907      JSR     READ_BITS
00001AC2  13C4 000035C2            908      MOVE.B  D4,XBit
00001AC8                           909      
00001AC8  13FC 0002 00003594       910      MOVE.B  #2,Bits
00001AD0  4EB8 13DA                911      JSR     READ_BITS
00001AD4  13C4 000035B0            912      MOVE.B  D4,SIZE
00001ADA                           913  
00001ADA  4EB9 00002DF0            914      JSR     CHECK_XBIT
00001AE0                           915      
00001AE0  13FC 0003 00003594       916      MOVE.B  #3,Bits
00001AE8  4EB8 13DA                917      JSR     READ_BITS
00001AEC  13C4 000035AA            918      MOVE.B  D4,TEMP_MODE    * store TEMP_MODE
00001AF2                           919      
00001AF2  13FC 0003 00003594       920      MOVE.B  #3,Bits
00001AFA  4EB8 13DA                921      JSR     READ_BITS
00001AFE  13C4 000035AB            922      MOVE.B  D4,TEMP_REG    * store TEMP_REG    
00001B04                           923      
00001B04  4EB9 00002CF0            924      JSR     CHECK_TEMP   
00001B0A  0C39 000F 000035C5       925      CMP.B   #$F, TempMode
00001B12  6700 1078                926      BEQ     PRINT_DATA
00001B16  0C39 0003 000035B0       927      CMP.B   #%11,SIZE
00001B1E  6700 106C                928      BEQ     PRINT_DATA
00001B22  0C39 000E 000035C5       929      CMP.B   #$E,TempMode    
00001B2A  6700 132A                930      BEQ     SET_INVALID_EA  
00001B2E                           931      
00001B2E  6000 0DDC                932      BRA     PRINTOR
00001B32                           933  
00001B32                           934  ********************* SUB **********************
00001B32                           935  CHECK_SUB
00001B32  13FC 0003 00003594       936      MOVE.B  #3,Bits
00001B3A  4EB8 13DA                937      JSR     READ_BITS
00001B3E  13C4 000035AB            938      MOVE.B  D4,TEMP_REG
00001B44                           939      
00001B44  13FC 0001 00003594       940      MOVE.B  #1,Bits
00001B4C  4EB8 13DA                941      JSR     READ_BITS
00001B50  13C4 000035C2            942      MOVE.B  D4,XBit
00001B56                           943      
00001B56  13FC 0002 00003594       944      MOVE.B  #2,Bits
00001B5E  4EB8 13DA                945      JSR     READ_BITS
00001B62  13C4 000035B0            946      MOVE.B  D4,SIZE
00001B68                           947  
00001B68  4EB9 00002DF0            948      JSR     CHECK_XBIT
00001B6E                           949      
00001B6E  13FC 0003 00003594       950      MOVE.B  #3,Bits
00001B76  4EB8 13DA                951      JSR     READ_BITS
00001B7A  13C4 000035AA            952      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001B80                           953      
00001B80  13FC 0003 00003594       954      MOVE.B  #3,Bits
00001B88  4EB8 13DA                955      JSR     READ_BITS
00001B8C  13C4 000035AB            956      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001B92                           957      
00001B92  4EB9 00002CF0            958      JSR     CHECK_TEMP   
00001B98  0C39 000F 000035C5       959      CMP.B   #$F, TempMode
00001BA0  6700 0FEA                960      BEQ     PRINT_DATA
00001BA4  0C39 000E 000035C5       961      CMP.B   #$E,TempMode    
00001BAC  6700 12A8                962      BEQ     SET_INVALID_EA
00001BB0                           963      
00001BB0  6000 0D94                964      BRA     PRINTSUB
00001BB4                           965  
00001BB4                           966  
00001BB4                           967  ******************* AND ***********************
00001BB4                           968  CHECK_AND
00001BB4  13FC 0003 00003594       969      MOVE.B  #3,Bits
00001BBC  4EB8 13DA                970      JSR     READ_BITS
00001BC0  13C4 000035AB            971      MOVE.B  D4,TEMP_REG
00001BC6                           972      
00001BC6  13FC 0001 00003594       973      MOVE.B  #1,Bits
00001BCE  4EB8 13DA                974      JSR     READ_BITS
00001BD2  13C4 000035C2            975      MOVE.B  D4,XBit
00001BD8                           976      
00001BD8  13FC 0002 00003594       977      MOVE.B  #2,Bits
00001BE0  4EB8 13DA                978      JSR     READ_BITS
00001BE4  13C4 000035B0            979      MOVE.B  D4,SIZE
00001BEA                           980  
00001BEA  4EB9 00002DF0            981      JSR     CHECK_XBIT
00001BF0                           982      
00001BF0  13FC 0003 00003594       983      MOVE.B  #3,Bits
00001BF8  4EB8 13DA                984      JSR     READ_BITS
00001BFC  13C4 000035AA            985      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001C02                           986      
00001C02  13FC 0003 00003594       987      MOVE.B  #3,Bits
00001C0A  4EB8 13DA                988      JSR     READ_BITS
00001C0E  13C4 000035AB            989      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001C14                           990      
00001C14  4EB9 00002CF0            991      JSR     CHECK_TEMP   
00001C1A  0C39 000F 000035C5       992      CMP.B   #$F, TempMode
00001C22  6700 0F68                993      BEQ     PRINT_DATA
00001C26                           994      
00001C26  0C39 0003 000035B0       995      CMP.B   #%11,SIZE
00001C2E  6700 0F5C                996      BEQ     PRINT_DATA
00001C32                           997      
00001C32  0C39 000E 000035C5       998      CMP.B   #$E,TempMode    
00001C3A  6700 121A                999      BEQ     SET_INVALID_EA
00001C3E                          1000      
00001C3E  6000 0D40               1001      BRA     PRINTAND
00001C42                          1002  
00001C42                          1003      
00001C42                          1004  ******************************************
00001C42                          1005  *        THE GROUP 14
00001C42                          1006  *        LS,AS AND ROTATION
00001C42                          1007  *        
00001C42                          1008  ******************************************
00001C42                          1009  COMPARE_1110 
00001C42  4245                    1010              CLR D5     ;STORING ISOLATED BITS
00001C44  4244                    1011              CLR D4
00001C46  3839 00003592           1012              MOVE.W COMMANDDATA,D4
00001C4C  2A04                    1013              MOVE.L   D4,D5
00001C4E  0285 000000C0           1014              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001C54  EC8D                    1015              LSR.L    #6,D5            ;NORMALIZE
00001C56  13C5 000035B0           1016              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001C5C  BA3C 0003               1017              CMP.B    #%11,D5    
00001C60  6700 0298               1018              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001C64  4245                    1019              CLR D5
00001C66  2A04                    1020              MOVE.L   D4,D5      
00001C68  0285 00000018           1021              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001C6E  E68D                    1022              LSR.L   #3,D5
00001C70  BA3C 0001               1023              CMP.B   #%001,D5
00001C74  6700 0020               1024              BEQ     G_LS    ;LOGICAL SHIFTS
00001C78  BA3C 0003               1025              CMP.B   #%011,D5
00001C7C  6700 00E4               1026              BEQ     G_RO    ;ROTAIONS
00001C80  BA3C 0000               1027              CMP.B   #%000,D5
00001C84  6700 01A8               1028              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001C88                          1029              
00001C88  13FC 0001 00000001      1030              MOVE.B #1,BAD_FLAG
00001C90  4EF9 00002B8C           1031              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001C96                          1032  
00001C96                          1033  G_LS               ;GROUP LOGICAL SHIFT
00001C96  4245                    1034       CLR   D5
00001C98  23C4 000035D8           1035       MOVE.L D4,IR_IL
00001C9E  02B9 00000020 000035D8  1036       ANDI.L  #$0020,IR_IL
00001CA8  2A39 000035D8           1037       MOVE.L  IR_IL,D5
00001CAE  EA8D                    1038       LSR.L   #5,D5
00001CB0  BA3C 0001               1039       CMP.B   #$1,D5
00001CB4  6700 0056               1040       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001CB8  4245                    1041       CLR D5
00001CBA  2A04                    1042       MOVE.L  D4,D5
00001CBC  0285 00000100           1043       ANDI.L  #$0100,D5
00001CC2  E08D                    1044       LSR.L  #8,D5
00001CC4  23C5 000035D0           1045       MOVE.L  D5,DR
00001CCA  4245                    1046       CLR D5
00001CCC  2A04                    1047       MOVE.L  D4,D5
00001CCE  0285 00000E00           1048       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001CD4  E08D                    1049       LSR.L   #8,D5
00001CD6  E28D                    1050       LSR.L   #1,D5
00001CD8  BABC 00000007           1051       CMP.L   #7,D5
00001CDE  6E00 0EAC               1052       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001CE2  BABC 00000000           1053       CMP.L   #0,D5
00001CE8  6D00 0EA2               1054       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001CEC  13C5 000035DC           1055       MOVE.B  D5,S_COUNT
00001CF2  4EB9 00002628           1056       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001CF8  4245                    1057       CLR     D5
00001CFA  2A04                    1058       MOVE.L  D4,D5
00001CFC  0285 00000007           1059       ANDI.L   #$0007,D5
00001D02  13C5 000035E1           1060       MOVE.B   D5,dRN
00001D08  6000 07D0               1061       BRA      PR_LS             
00001D0C                          1062       
00001D0C                          1063  GLS_EA 
00001D0C  4245                    1064       CLR D5
00001D0E  4244                    1065       CLR D4
00001D10  3839 00003592           1066       MOVE.W COMMANDDATA,D4
00001D16                          1067  
00001D16  2A04                    1068       MOVE.L  D4,D5
00001D18  0285 00000100           1069       ANDI.L  #$0100,D5
00001D1E  E08D                    1070       LSR.L  #8,D5
00001D20  23C5 000035D0           1071       MOVE.L  D5,DR     ;DIRECTION
00001D26  4245                    1072       CLR D5
00001D28  2A04                    1073       MOVE.L  D4,D5
00001D2A  0285 00000E00           1074       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001D30  E08D                    1075       LSR.L   #8,D5
00001D32  E28D                    1076       LSR.L   #1,D5
00001D34  BABC 00000007           1077       CMP.L   #7,D5
00001D3A  6E00 0E50               1078       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D3E  BABC 00000000           1079       CMP.L   #0,D5
00001D44  6D00 0E46               1080       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D48  13C5 000035E0           1081       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001D4E  4245                    1082       CLR     D5
00001D50  2A04                    1083       MOVE.L   D4,D5
00001D52  0285 00000007           1084       ANDI.L   #$0007,D5
00001D58  13C5 000035E1           1085       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001D5E  6000 0550               1086       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001D62                          1087  G_RO            ;GROUP ROTATION
00001D62  4245                    1088       CLR   D5
00001D64  23C4 000035D8           1089       MOVE.L D4,IR_IL
00001D6A  02B9 00000020 000035D8  1090       ANDI.L  #$0020,IR_IL
00001D74  2A39 000035D8           1091       MOVE.L  IR_IL,D5
00001D7A  EA8D                    1092       LSR.L   #5,D5
00001D7C  BA3C 0001               1093       CMP.B   #$1,D5
00001D80  6700 0056               1094       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001D84  4245                    1095       CLR D5
00001D86  2A04                    1096       MOVE.L  D4,D5
00001D88  0285 00000100           1097       ANDI.L  #$0100,D5
00001D8E  E08D                    1098       LSR.L  #8,D5
00001D90  23C5 000035D0           1099       MOVE.L  D5,DR
00001D96  4245                    1100       CLR D5
00001D98  2A04                    1101       MOVE.L  D4,D5
00001D9A  0285 00000E00           1102       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001DA0  E08D                    1103       LSR.L   #8,D5
00001DA2  E28D                    1104       LSR.L   #1,D5
00001DA4  BABC 00000007           1105       CMP.L   #7,D5
00001DAA  6E00 0DE0               1106       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001DAE  BABC 00000000           1107       CMP.L   #0,D5
00001DB4  6D00 0DD6               1108       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001DB8  13C5 000035DC           1109       MOVE.B  D5,S_COUNT
00001DBE  4EB9 00002628           1110       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001DC4  4245                    1111       CLR     D5
00001DC6  2A04                    1112       MOVE.L  D4,D5
00001DC8  0285 00000007           1113       ANDI.L   #$0007,D5
00001DCE  13C5 000035E1           1114       MOVE.B   D5,dRN
00001DD4  6000 0648               1115       BRA      PR_RO    ;PRINT ROTATION   
00001DD8                          1116  
00001DD8                          1117  GRO_EA 
00001DD8  4245                    1118       CLR D5
00001DDA  4244                    1119       CLR D4
00001DDC  3839 00003592           1120       MOVE.W COMMANDDATA,D4
00001DE2                          1121  
00001DE2  2A04                    1122       MOVE.L  D4,D5
00001DE4  0285 00000100           1123       ANDI.L  #$0100,D5
00001DEA  E08D                    1124       LSR.L  #8,D5
00001DEC  23C5 000035D0           1125       MOVE.L  D5,DR     ;DIRECTION
00001DF2  4245                    1126       CLR D5
00001DF4  2A04                    1127       MOVE.L  D4,D5
00001DF6  0285 00000E00           1128       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001DFC  E08D                    1129       LSR.L   #8,D5
00001DFE  E28D                    1130       LSR.L   #1,D5
00001E00  BABC 00000007           1131       CMP.L   #7,D5
00001E06  6E00 0D84               1132       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E0A  BABC 00000000           1133       CMP.L   #0,D5
00001E10  6D00 0D7A               1134       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E14  13C5 000035E0           1135       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001E1A  4245                    1136       CLR     D5
00001E1C  2A04                    1137       MOVE.L   D4,D5
00001E1E  0285 00000007           1138       ANDI.L   #$0007,D5
00001E24  13C5 000035E1           1139       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001E2A  6000 053E               1140       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001E2E                          1141  
00001E2E                          1142  
00001E2E                          1143  
00001E2E                          1144  G_AS         ;GROUP ARITHMATIC SHIFT
00001E2E  4245                    1145       CLR   D5
00001E30  23C4 000035D8           1146       MOVE.L D4,IR_IL
00001E36  02B9 00000020 000035D8  1147       ANDI.L  #$0020,IR_IL
00001E40  2A39 000035D8           1148       MOVE.L  IR_IL,D5
00001E46  EA8D                    1149       LSR.L   #5,D5
00001E48  BA3C 0001               1150       CMP.B   #$1,D5
00001E4C  6700 0056               1151       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001E50  4245                    1152       CLR D5
00001E52  2A04                    1153       MOVE.L  D4,D5
00001E54  0285 00000100           1154       ANDI.L  #$0100,D5
00001E5A  E08D                    1155       LSR.L  #8,D5
00001E5C  23C5 000035D0           1156       MOVE.L  D5,DR
00001E62  4245                    1157       CLR D5
00001E64  2A04                    1158       MOVE.L  D4,D5
00001E66  0285 00000E00           1159       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001E6C  E08D                    1160       LSR.L   #8,D5
00001E6E  E28D                    1161       LSR.L   #1,D5
00001E70  BABC 00000007           1162       CMP.L   #7,D5
00001E76  6E00 0D14               1163       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E7A  BABC 00000000           1164       CMP.L   #0,D5
00001E80  6D00 0D0A               1165       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E84  13C5 000035DC           1166       MOVE.B  D5,S_COUNT
00001E8A  4EB9 00002628           1167       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001E90  4245                    1168       CLR     D5
00001E92  2A04                    1169       MOVE.L  D4,D5
00001E94  0285 00000007           1170       ANDI.L   #$0007,D5
00001E9A  13C5 000035E1           1171       MOVE.B   D5,dRN
00001EA0  6000 05DA               1172       BRA      PR_AS    ;PRINT ROTATION 
00001EA4                          1173  
00001EA4                          1174  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001EA4  4245                    1175       CLR D5
00001EA6  4244                    1176       CLR D4
00001EA8  3839 00003592           1177       MOVE.W COMMANDDATA,D4
00001EAE                          1178  
00001EAE  2A04                    1179       MOVE.L  D4,D5
00001EB0  0285 00000100           1180       ANDI.L  #$0100,D5
00001EB6  E08D                    1181       LSR.L  #8,D5
00001EB8  23C5 000035D0           1182       MOVE.L  D5,DR     ;DIRECTION
00001EBE  4245                    1183       CLR D5
00001EC0  2A04                    1184       MOVE.L  D4,D5
00001EC2  0285 00000E00           1185       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001EC8  E08D                    1186       LSR.L   #8,D5
00001ECA  E28D                    1187       LSR.L   #1,D5
00001ECC  BABC 00000007           1188       CMP.L   #7,D5
00001ED2  6E00 0CB8               1189       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001ED6  BABC 00000000           1190       CMP.L   #0,D5
00001EDC  6D00 0CAE               1191       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001EE0  13C5 000035E0           1192       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001EE6  4245                    1193       CLR     D5
00001EE8  2A04                    1194       MOVE.L   D4,D5
00001EEA  0285 00000007           1195       ANDI.L   #$0007,D5
00001EF0  13C5 000035E1           1196       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001EF6  6000 02FE               1197       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001EFA                          1198  
00001EFA                          1199  G14_MEMS 
00001EFA  4245                    1200         CLR D5
00001EFC  2A04                    1201         MOVE.L  D4,D5
00001EFE  CABC 00000E00           1202         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001F04  E08D                    1203         LSR.L   #8,D5
00001F06  E28D                    1204         LSR.L   #1,D5
00001F08  BA3C 0001               1205         CMP.B   #%001,D5
00001F0C  6700 0012               1206         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001F10  BA3C 0003               1207         CMP.B   #%011,D5
00001F14  6700 0070               1208         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001F18  BA3C 0000               1209         CMP.B   #%000,D5
00001F1C  6700 00CE               1210         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001F20                          1211  
00001F20                          1212  G14_MEMS_LS 
00001F20  4245                    1213             CLR D5
00001F22  2A04                    1214             MOVE.L  D4,D5
00001F24  0285 00000100           1215             ANDI.L  #$0100,D5
00001F2A  E08D                    1216             LSR.L  #8,D5
00001F2C  13C5 000035D0           1217             MOVE.B  D5,DR     ;DIRECTION
00001F32  4245                    1218             CLR D5
00001F34  2A04                    1219             MOVE.L D4,D5
00001F36  0285 00000038           1220             ANDI.L  #$0038,D5
00001F3C  E68D                    1221             LSR.L  #3,D5
00001F3E  13C5 000035E4           1222             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001F44  4245                    1223             CLR D5
00001F46  2A04                    1224             MOVE.L D4,D5
00001F48  0285 00000007           1225             ANDI.L  #$0007,D5
00001F4E  13C5 000035E1           1226             MOVE.B  D5,dRN
00001F54  0CB9 00000000 000035E4  1227             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001F5E  6700 0C2C               1228             BEQ    PRINT_DATA
00001F62  0CB9 00000001 000035E4  1229             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001F6C  6700 0C1E               1230             BEQ     PRINT_DATA
00001F70  13C5 000035E3           1231             MOVE.B  D5,dRG     ;DESTINATION REG
00001F76  0C39 0007 000035E4      1232             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001F7E  6700 00F2               1233             BEQ     CHECK_ID_LS 
00001F82  6000 017A               1234             BRA     PR_G14_MEMS_LS             
00001F86                          1235       
00001F86                          1236  
00001F86                          1237  G14_MEMS_RO
00001F86  4245                    1238             CLR D5
00001F88  2A04                    1239             MOVE.L  D4,D5
00001F8A  0285 00000100           1240             ANDI.L  #$0100,D5
00001F90  E08D                    1241             LSR.L  #8,D5
00001F92  13C5 000035D0           1242             MOVE.B  D5,DR     ;DIRECTION
00001F98  4245                    1243             CLR D5
00001F9A  2A04                    1244             MOVE.L D4,D5
00001F9C  0285 00000038           1245             ANDI.L  #$0038,D5
00001FA2  E68D                    1246             LSR.L  #3,D5
00001FA4  13C5 000035E4           1247             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001FAA  4245                    1248             CLR D5
00001FAC  2A04                    1249             MOVE.L D4,D5
00001FAE  0285 00000007           1250             ANDI.L  #$0007,D5
00001FB4  13C5 000035E1           1251             MOVE.B  D5,dRN
00001FBA  0CB9 00000000 000035E4  1252             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001FC4  6700 0BC6               1253             BEQ    PRINT_DATA
00001FC8  0CB9 00000001 000035E4  1254             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001FD2  6700 0BB8               1255             BEQ     PRINT_DATA
00001FD6  13C5 000035E3           1256             MOVE.B  D5,dRG     ;DESTINATION REG
00001FDC  0C39 0007 000035E4      1257             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001FE4  6700 007C               1258             BEQ     CHECK_ID_RO 
00001FE8  6000 0190               1259             BRA     PR_G14_MEMS_RO         
00001FEC                          1260  
00001FEC                          1261  G14_MEMS_AS
00001FEC  4245                    1262             CLR D5
00001FEE  2A04                    1263             MOVE.L  D4,D5
00001FF0  0285 00000100           1264             ANDI.L  #$0100,D5
00001FF6  E08D                    1265             LSR.L  #8,D5
00001FF8  13C5 000035D0           1266             MOVE.B  D5,DR     ;DIRECTION
00001FFE  4245                    1267             CLR D5
00002000  2A04                    1268             MOVE.L D4,D5
00002002  0285 00000038           1269             ANDI.L  #$0038,D5
00002008  E68D                    1270             LSR.L  #3,D5
0000200A  13C5 000035E4           1271             MOVE.B  D5,dMODE     ;DESTINATION MODE
00002010  4245                    1272             CLR D5
00002012  2A04                    1273             MOVE.L D4,D5
00002014  0285 00000007           1274             ANDI.L  #$0007,D5
0000201A  13C5 000035E1           1275             MOVE.B  D5,dRN
00002020  0CB9 00000000 000035E4  1276             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
0000202A  6700 0B60               1277             BEQ    PRINT_DATA
0000202E  0CB9 00000001 000035E4  1278             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00002038  6700 0B52               1279             BEQ     PRINT_DATA
0000203C  13C5 000035E3           1280             MOVE.B  D5,dRG     ;DESTINATION REG
00002042  0C39 0007 000035E4      1281             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
0000204A  6700 0006               1282             BEQ     CHECK_ID_AS 
0000204E  6000 0032               1283             BRA     PR_G14_MEMS_AS                          
00002052                          1284             
00002052                          1285  
00002052                          1286  
00002052  0C39 0004 000035E3      1287  CHECK_ID_AS  CMP.B #$4,dRG
0000205A  6700 0B30               1288               BEQ   PRINT_DATA
0000205E  6000 0022               1289               BRA     PR_G14_MEMS_AS
00002062                          1290               
00002062  0C39 0004 000035E3      1291  CHECK_ID_RO  CMP.B #$4,dRG
0000206A  6700 0B20               1292               BEQ   PRINT_DATA
0000206E  6000 010A               1293               BRA     PR_G14_MEMS_RO
00002072                          1294    
00002072  0C39 0004 000035E3      1295  CHECK_ID_LS  CMP.B #$4,dRG
0000207A  6700 0B10               1296               BEQ   PRINT_DATA
0000207E  6000 007E               1297               BRA    PR_G14_MEMS_LS
00002082                          1298                               
00002082                          1299  PR_G14_MEMS_AS
00002082  0C39 0000 000035D0      1300       CMP.B #$0,DR 
0000208A  6700 003A               1301       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
0000208E                          1302      
0000208E                          1303      *******PRINT LSL*******
0000208E  43F9 00003566           1304       LEA       PASL,A1   MEM LEFT SHIF
00002094  103C 000E               1305       MOVE.B   #14,D0     ; moves #14 into data register D0
00002098  4E4F                    1306       TRAP     #15
0000209A  4EB9 00002B1E           1307       JSR     PRINTCLRSPOT      * print space
000020A0  4EB9 00002B1E           1308       JSR     PRINTCLRSPOT      * print space
000020A6  4EB9 00002B1E           1309       JSR     PRINTCLRSPOT      * print space
000020AC                          1310   
000020AC  4243                    1311       CLR D3
000020AE  4242                    1312       CLR D2
000020B0  1439 000035E4           1313       MOVE.B  dMODE,D2
000020B6  1639 000035E1           1314       MOVE.B  dRN,D3
000020BC  4EB9 00002EFC           1315       JSR     EA_START
000020C2                          1316       
000020C2  6000 F1F0               1317       BRA MEMORYGRABBER
000020C6                          1318  
000020C6                          1319       
000020C6                          1320  PR_ASR_MEM   ;MEM RIGHT SHIFT
000020C6  43F9 00003562           1321       LEA       PASR,A1   MEM RIGHT SHIF
000020CC  103C 000E               1322       MOVE.B   #14,D0     ; moves #14 into data register D0
000020D0  4E4F                    1323       TRAP     #15
000020D2  4EB9 00002B1E           1324       JSR     PRINTCLRSPOT      * print space
000020D8  4EB9 00002B1E           1325      JSR     PRINTCLRSPOT      * print space
000020DE  4EB9 00002B1E           1326       JSR     PRINTCLRSPOT      * print space
000020E4  4243                    1327       CLR D3
000020E6  4242                    1328       CLR D2
000020E8  1439 000035E4           1329       MOVE.B  dMODE,D2
000020EE  1639 000035E1           1330       MOVE.B  dRN,D3
000020F4  4EB9 00002EFC           1331       JSR     EA_START
000020FA                          1332       
000020FA  6000 F1B8               1333       BRA MEMORYGRABBER
000020FE                          1334               
000020FE                          1335  
000020FE                          1336  PR_G14_MEMS_LS 
000020FE  0C39 0000 000035D0      1337       CMP.B #$0,DR 
00002106  6700 003A               1338       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
0000210A                          1339      
0000210A                          1340      *******PRINT LSL*******
0000210A  43F9 0000355A           1341       LEA       PLSL,A1   MEM LEFT SHIF
00002110  103C 000E               1342       MOVE.B   #14,D0     ; moves #14 into data register D0
00002114  4E4F                    1343       TRAP     #15 
00002116                          1344       
00002116  4EB9 00002B1E           1345       JSR     PRINTCLRSPOT      * print space
0000211C  4EB9 00002B1E           1346       JSR     PRINTCLRSPOT      * print space
00002122  4EB9 00002B1E           1347       JSR     PRINTCLRSPOT      * print space
00002128                          1348       
00002128  4243                    1349       CLR D3
0000212A  4242                    1350       CLR D2
0000212C  1439 000035E4           1351       MOVE.B  dMODE,D2
00002132  1639 000035E1           1352       MOVE.B  dRN,D3
00002138  4EB9 00002EFC           1353       JSR     EA_START
0000213E                          1354       
0000213E  6000 F174               1355       BRA MEMORYGRABBER
00002142                          1356       
00002142                          1357  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00002142  43F9 0000355E           1358       LEA       PLSR,A1   MEM RIGHT SHIF
00002148  103C 000E               1359       MOVE.B   #14,D0     ; moves #14 into data register D0
0000214C  4E4F                    1360       TRAP     #15
0000214E  4EB9 00002B1E           1361       JSR     PRINTCLRSPOT      * print space
00002154  4EB9 00002B1E           1362       JSR     PRINTCLRSPOT      * print space
0000215A  4EB9 00002B1E           1363       JSR     PRINTCLRSPOT      * print space
00002160  4243                    1364       CLR D3
00002162  4242                    1365       CLR D2
00002164  1439 000035E4           1366       MOVE.B  dMODE,D2
0000216A  1639 000035E1           1367       MOVE.B  dRN,D3
00002170  4EB9 00002EFC           1368       JSR     EA_START
00002176                          1369       
00002176  6000 F13C               1370       BRA    MEMORYGRABBER
0000217A                          1371  
0000217A                          1372  PR_G14_MEMS_RO
0000217A  0C39 0000 000035D0      1373       CMP.B #$0,DR 
00002182  6700 003A               1374       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
00002186                          1375      
00002186                          1376      *******PRINT ASL*******
00002186  43F9 0000356A           1377       LEA       PROL,A1   ROTATE MEM LEFT SHIF
0000218C  103C 000E               1378       MOVE.B   #14,D0     ; moves #14 into data register D0
00002190  4E4F                    1379       TRAP     #15
00002192                          1380  
00002192  4EB9 00002B1E           1381       JSR     PRINTCLRSPOT
00002198  4EB9 00002B1E           1382       JSR     PRINTCLRSPOT      * print space
0000219E  4EB9 00002B1E           1383       JSR     PRINTCLRSPOT      * print space
000021A4                          1384        
000021A4  4243                    1385       CLR D3
000021A6  4242                    1386       CLR D2
000021A8  1439 000035E4           1387       MOVE.B  dMODE,D2
000021AE  1639 000035E1           1388       MOVE.B  dRN,D3
000021B4  4EB9 00002EFC           1389       JSR     EA_START
000021BA                          1390       
000021BA  6000 F0F8               1391       BRA MEMORYGRABBER
000021BE                          1392  
000021BE                          1393  PR_ROR_MEM   ;ROTATE MEM RIGHT 
000021BE  43F9 0000356E           1394       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
000021C4  103C 000E               1395       MOVE.B   #14,D0     ; moves #14 into data register D0
000021C8  4E4F                    1396       TRAP     #15
000021CA  4EB9 00002B1E           1397       JSR     PRINTCLRSPOT      * print space
000021D0  4EB9 00002B1E           1398       JSR     PRINTCLRSPOT      * print space
000021D6  4EB9 00002B1E           1399       JSR     PRINTCLRSPOT      * print space
000021DC                          1400  
000021DC  4243                    1401       CLR D3
000021DE  4242                    1402       CLR D2
000021E0  1439 000035E4           1403       MOVE.B  dMODE,D2
000021E6  1639 000035E1           1404       MOVE.B  dRN,D3
000021EC  4EB9 00002EFC           1405       JSR     EA_START
000021F2                          1406       
000021F2  6000 F0C0               1407       BRA MEMORYGRABBER
000021F6                          1408  
000021F6                          1409  
000021F6                          1410  PR_G_AS_EA
000021F6  0CB9 00000000 000035D0  1411          CMP.L #$0,DR 
00002200  6700 0058               1412          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002204                          1413       
00002204                          1414          *******PRINT ASL*******
00002204  43F9 00003566           1415          LEA       PASL,A1
0000220A  103C 000E               1416          MOVE.B   #14,D0     ; moves #14 into data register D0
0000220E  4E4F                    1417          TRAP     #15 
00002210  4EB9 00002A94           1418          JSR      SIZEPRINT
00002216                          1419          
00002216  4EB9 00002B1E           1420          JSR     PRINTCLRSPOT
0000221C  4EB9 00002B1E           1421          JSR     PRINTCLRSPOT      * print space
00002222  4EB9 00002B1E           1422          JSR     PRINTCLRSPOT      * print space
00002228                          1423          
00002228  4242                    1424          CLR D2
0000222A  4243                    1425          CLR D3
0000222C  143C 0000               1426          MOVE.B  #%000,D2     ; mode data register
00002230  1639 000035E0           1427          MOVE.B  sRN,D3       ; source register number
00002236  4EB9 00002EFC           1428          JSR     EA_START
0000223C                          1429          
0000223C  4EB9 00002B2C           1430          JSR     PRINTCOMA   ; print coma
00002242                          1431          
00002242  4243                    1432          CLR D3
00002244  4242                    1433          CLR D2
00002246  143C 0000               1434          MOVE.B  #%000,D2      ; mode data register
0000224A  1639 000035E1           1435          MOVE.B  dRN,D3        ; destination register
00002250  4EB9 00002EFC           1436          JSR     EA_START
00002256                          1437          
00002256  6000 F05C               1438          BRA   MEMORYGRABBER
0000225A                          1439  
0000225A                          1440          
0000225A                          1441  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
0000225A  43F9 00003562           1442           LEA       PASR,A1
00002260  103C 000E               1443          MOVE.B   #14,D0     ; moves #14 into data register D0
00002264  4E4F                    1444          TRAP     #15 
00002266  4EB9 00002A66           1445          JSR      SIZESPLIT
0000226C  4EB9 00002B1E           1446          JSR     PRINTCLRSPOT      * print space
00002272  4EB9 00002B1E           1447       JSR     PRINTCLRSPOT      * print space
00002278  4EB9 00002B1E           1448       JSR     PRINTCLRSPOT      * print space
0000227E                          1449  
0000227E  4242                    1450          CLR D2
00002280  4243                    1451          CLR D3
00002282  143C 0000               1452          MOVE.B  #%000,D2     ; mode data register
00002286  1639 000035E0           1453          MOVE.B  sRN,D3       ; source register number
0000228C  4EB9 00002EFC           1454          JSR     EA_START
00002292  4EB9 00002B2C           1455          JSR     PRINTCOMA   ; print coma
00002298  4243                    1456          CLR D3
0000229A  4242                    1457          CLR D2
0000229C  143C 0000               1458          MOVE.B  #%000,D2      ; mode data register
000022A0  1639 000035E1           1459          MOVE.B  dRN,D3        ; destination register
000022A6  4EB9 00002EFC           1460          JSR     EA_START
000022AC                          1461          
000022AC  6000 F006               1462          BRA   MEMORYGRABBER
000022B0                          1463  
000022B0                          1464  
000022B0                          1465  PR_G_LS_EA
000022B0  0CB9 00000000 000035D0  1466          CMP.L #$0,DR 
000022BA  6700 0058               1467          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000022BE                          1468       
000022BE                          1469          *******PRINT LSL*******
000022BE  43F9 0000355A           1470          LEA       PLSL,A1
000022C4  103C 000E               1471          MOVE.B   #14,D0     ; moves #14 into data register D0
000022C8  4E4F                    1472          TRAP     #15 
000022CA  4EB9 00002A94           1473          JSR      SIZEPRINT
000022D0                          1474          
000022D0  4EB9 00002B1E           1475          JSR     PRINTCLRSPOT
000022D6  4EB9 00002B1E           1476          JSR     PRINTCLRSPOT      * print space
000022DC  4EB9 00002B1E           1477       JSR     PRINTCLRSPOT      * print space
000022E2                          1478          
000022E2  4242                    1479          CLR D2
000022E4  4243                    1480          CLR D3
000022E6  143C 0000               1481          MOVE.B  #%000,D2     ; mode data register
000022EA  1639 000035E0           1482          MOVE.B  sRN,D3       ; source register number
000022F0  4EB9 00002EFC           1483          JSR     EA_START
000022F6                          1484          
000022F6  4EB9 00002B2C           1485          JSR     PRINTCOMA   ; print coma
000022FC                          1486          
000022FC  4243                    1487          CLR D3
000022FE  4242                    1488          CLR D2
00002300  143C 0000               1489          MOVE.B  #%000,D2      ; mode data register
00002304  1639 000035E1           1490          MOVE.B  dRN,D3        ; destination register
0000230A  4EB9 00002EFC           1491          JSR     EA_START
00002310                          1492          
00002310  6000 EFA2               1493          BRA   MEMORYGRABBER
00002314                          1494          
00002314                          1495  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
00002314  43F9 0000355E           1496           LEA       PLSR,A1
0000231A  103C 000E               1497           MOVE.B   #14,D0     ; moves #14 into data register D0
0000231E  4E4F                    1498          TRAP     #15 
00002320  4EB9 00002A94           1499          JSR      SIZEPRINT
00002326  4EB9 00002B1E           1500          JSR     PRINTCLRSPOT      * print space
0000232C  4EB9 00002B1E           1501          JSR     PRINTCLRSPOT      * print space
00002332  4EB9 00002B1E           1502          JSR     PRINTCLRSPOT      * print space
00002338                          1503      
00002338  4242                    1504          CLR D2
0000233A  4243                    1505          CLR D3
0000233C  143C 0000               1506          MOVE.B  #%000,D2     ; mode data register
00002340  1639 000035E0           1507          MOVE.B  sRN,D3       ; source register number
00002346  4EB9 00002EFC           1508          JSR     EA_START
0000234C  4EB9 00002B2C           1509          JSR     PRINTCOMA   ; print coma
00002352  4243                    1510          CLR D3
00002354  4242                    1511          CLR D2
00002356  143C 0000               1512          MOVE.B  #%000,D2      ; mode data register
0000235A  1639 000035E1           1513          MOVE.B  dRN,D3        ; destination register
00002360  4EB9 00002EFC           1514          JSR     EA_START
00002366                          1515          
00002366  6000 EF4C               1516          BRA   MEMORYGRABBER
0000236A                          1517  
0000236A                          1518  
0000236A                          1519  PR_G_RO_EA        
0000236A  0CB9 00000000 000035D0  1520          CMP.L #$0,DR 
00002374  6700 0058               1521          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002378                          1522       
00002378                          1523          *******PRINT LSL*******
00002378  43F9 0000356A           1524          LEA       PROL,A1
0000237E  103C 000E               1525          MOVE.B   #14,D0     ; moves #14 into data register D0
00002382  4E4F                    1526          TRAP     #15 
00002384  4EB9 00002A94           1527          JSR      SIZEPRINT
0000238A                          1528          
0000238A  4EB9 00002B1E           1529          JSR     PRINTCLRSPOT
00002390  4EB9 00002B1E           1530          JSR     PRINTCLRSPOT      * print space
00002396  4EB9 00002B1E           1531          JSR     PRINTCLRSPOT      * print space
0000239C                          1532          
0000239C  4242                    1533          CLR D2
0000239E  4243                    1534          CLR D3
000023A0  143C 0000               1535          MOVE.B  #%000,D2     ; mode data register
000023A4  1639 000035E0           1536          MOVE.B  sRN,D3       ; source register number
000023AA  4EB9 00002EFC           1537          JSR     EA_START
000023B0  4EB9 00002B2C           1538          JSR     PRINTCOMA   ; print coma
000023B6  4243                    1539          CLR D3
000023B8  4242                    1540          CLR D2
000023BA  143C 0000               1541          MOVE.B  #%000,D2      ; mode data register
000023BE  1639 000035E1           1542          MOVE.B  dRN,D3        ; destination register
000023C4  4EB9 00002EFC           1543          JSR     EA_START
000023CA                          1544          
000023CA  6000 EEE8               1545          BRA   MEMORYGRABBER
000023CE                          1546  
000023CE                          1547          
000023CE                          1548  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
000023CE  43F9 0000356E           1549          LEA       PROR,A1
000023D4  103C 000E               1550          MOVE.B   #14,D0     ; moves #14 into data register D0
000023D8  4E4F                    1551          TRAP     #15 
000023DA  4EB9 00002A94           1552          JSR      SIZEPRINT
000023E0  4EB9 00002B1E           1553          JSR     PRINTCLRSPOT      * print space
000023E6  4EB9 00002B1E           1554          JSR     PRINTCLRSPOT      * print space
000023EC  4242                    1555          CLR D2
000023EE  4243                    1556          CLR D3
000023F0  143C 0000               1557          MOVE.B  #%000,D2     ; mode data register
000023F4  1639 000035E0           1558          MOVE.B  sRN,D3       ; source register number
000023FA  4EB9 00002EFC           1559          JSR     EA_START
00002400  4EB9 00002B2C           1560          JSR     PRINTCOMA   ; print coma
00002406  4243                    1561          CLR D3
00002408  4242                    1562          CLR D2
0000240A  143C 0000               1563          MOVE.B  #%000,D2      ; mode data register
0000240E  1639 000035E1           1564          MOVE.B  dRN,D3        ; destination register
00002414  4EB9 00002EFC           1565          JSR     EA_START
0000241A                          1566          
0000241A  6000 EE98               1567          BRA   MEMORYGRABBER
0000241E                          1568  
0000241E                          1569  PR_RO 
0000241E  0CB9 00000000 000035D0  1570       CMP.L #$0,DR 
00002428  6700 01AE               1571       BEQ   PR_ROR   ;RIGHT SHIFT
0000242C                          1572      
0000242C                          1573      *******PRINT ASL*******
0000242C  43F9 0000356A           1574       LEA       PROL,A1
00002432  103C 000E               1575       MOVE.B   #14,D0     ; moves #14 into data register D0
00002436  4E4F                    1576       TRAP     #15 
00002438                          1577  
00002438  4EB9 00002A94           1578       JSR      SIZEPRINT
0000243E  4EB9 00002B1E           1579       JSR     PRINTCLRSPOT      * print space
00002444  4EB9 00002B1E           1580       JSR     PRINTCLRSPOT      * print space
0000244A                          1581  
0000244A  4EB9 00002B3A           1582       JSR     PRINTHASH   * print hash
00002450                          1583  
00002450  4241                    1584      CLR D1
00002452  1239 000035DC           1585      MOVE.B   S_COUNT,D1
00002458  103C 0003               1586      MOVE.B   #3,D0
0000245C  4E4F                    1587      TRAP     #15
0000245E  4EB9 00002B2C           1588      JSR     PRINTCOMA   ; print coma
00002464  4243                    1589      CLR D3
00002466  4242                    1590      CLR D2
00002468  143C 0000               1591      MOVE.B  #%000,D2
0000246C  1639 000035E1           1592      MOVE.B  dRN,D3
00002472  4EB9 00002EFC           1593      JSR     EA_START
00002478                          1594      
00002478  6000 EE3A               1595      BRA    MEMORYGRABBER
0000247C                          1596  
0000247C                          1597  
0000247C                          1598  PR_AS 
0000247C  0CB9 00000000 000035D0  1599      CMP.L #$0,DR 
00002486  6700 0100               1600      BEQ   PR_ASR   ;RIGHT SHIFT
0000248A                          1601      
0000248A                          1602      *******PRINT ASL*******
0000248A  43F9 00003566           1603       LEA       PASL,A1
00002490  103C 000E               1604       MOVE.B   #14,D0     ; moves #14 into data register D0
00002494  4E4F                    1605       TRAP     #15 
00002496                          1606  
00002496  4EB9 00002A94           1607      JSR      SIZEPRINT
0000249C  4EB9 00002B1E           1608      JSR     PRINTCLRSPOT      * print space
000024A2  4EB9 00002B1E           1609       JSR     PRINTCLRSPOT      * print space
000024A8                          1610  
000024A8  4EB9 00002B3A           1611      JSR     PRINTHASH   ; print hash
000024AE                          1612      
000024AE  4241                    1613      CLR D1
000024B0  1239 000035DC           1614      MOVE.B   S_COUNT,D1
000024B6  103C 0003               1615      MOVE.B   #3,D0
000024BA  4E4F                    1616      TRAP     #15
000024BC  4EB9 00002B2C           1617      JSR     PRINTCOMA   ; print coma
000024C2  4243                    1618      CLR D3
000024C4  4242                    1619      CLR D2
000024C6  143C 0000               1620      MOVE.B  #%000,D2
000024CA  1639 000035E1           1621      MOVE.B  dRN,D3
000024D0  4EB9 00002EFC           1622      JSR     EA_START
000024D6                          1623  
000024D6  6000 EDDC               1624      BRA    MEMORYGRABBER
000024DA                          1625                        
000024DA                          1626                          
000024DA                          1627  PR_LS 
000024DA  0CB9 00000000 000035D0  1628      CMP.L #$0,DR 
000024E4  6700 0052               1629      BEQ   PR_LSR   ;RIGHT SHIFT
000024E8                          1630      
000024E8                          1631      *******PRINT LSL*******
000024E8  43F9 0000355A           1632       LEA       PLSL,A1
000024EE  103C 000E               1633       MOVE.B   #14,D0     ; moves #14 into data register D0
000024F2  4E4F                    1634       TRAP     #15 
000024F4  4EB9 00002A94           1635      JSR      SIZEPRINT
000024FA  4EB9 00002B1E           1636      JSR     PRINTCLRSPOT      * print space
00002500  4EB9 00002B1E           1637       JSR     PRINTCLRSPOT      * print space
00002506                          1638  
00002506  4EB9 00002B3A           1639      JSR     PRINTHASH   ; print hash
0000250C                          1640      
0000250C  4241                    1641      CLR D1
0000250E  1239 000035DC           1642      MOVE.B   S_COUNT,D1
00002514  103C 0003               1643      MOVE.B   #3,D0
00002518  4E4F                    1644      TRAP     #15
0000251A                          1645      
0000251A  4EB9 00002B2C           1646      JSR     PRINTCOMA   ; print coma
00002520                          1647      
00002520  4243                    1648      CLR D3
00002522  4242                    1649      CLR D2
00002524  143C 0000               1650      MOVE.B  #%000,D2
00002528  1639 000035E1           1651      MOVE.B  dRN,D3
0000252E  4EB9 00002EFC           1652      JSR     EA_START
00002534                          1653      
00002534  6000 ED7E               1654      BRA    MEMORYGRABBER
00002538                          1655      
00002538                          1656            
00002538                          1657  PR_LSR 
00002538  43F9 0000355E           1658      LEA   PLSR,A1
0000253E  103C 000E               1659        MOVE.B   #14,D0     ; moves #14 into data register D0
00002542  4E4F                    1660        TRAP     #15       ; Displays message via trap 14 
00002544  4EB9 00002A94           1661        JSR      SIZEPRINT
0000254A  4EB9 00002B1E           1662      JSR     PRINTCLRSPOT      * print space
00002550  4EB9 00002B1E           1663       JSR     PRINTCLRSPOT      * print space
00002556  4EB9 00002B3A           1664        JSR     PRINTHASH   ; print hash
0000255C                          1665        
0000255C  4241                    1666        CLR D1
0000255E  1239 000035DC           1667        MOVE.B   S_COUNT,D1
00002564  103C 0003               1668        MOVE.B   #3,D0
00002568  4E4F                    1669        TRAP     #15
0000256A  4EB9 00002B2C           1670        JSR     PRINTCOMA   ; print coma
00002570  4243                    1671        CLR D3
00002572  4242                    1672        CLR D2
00002574  143C 0000               1673        MOVE.B #%000,D2
00002578  1639 000035E1           1674        MOVE.B  dRN,D3
0000257E  4EB9 00002EFC           1675        JSR   EA_START
00002584                          1676        
00002584  6000 ED2E               1677        BRA MEMORYGRABBER
00002588                          1678        
00002588                          1679        
00002588                          1680  PR_ASR 
00002588  43F9 00003562           1681      LEA   PASR,A1
0000258E  103C 000E               1682         MOVE.B   #14,D0     ; moves #14 into data register D0
00002592  4E4F                    1683        TRAP     #15       ; Displays message via trap 14 
00002594  4EB9 00002A94           1684        JSR      SIZEPRINT
0000259A  4EB9 00002B1E           1685          JSR     PRINTCLRSPOT      * print space
000025A0  4EB9 00002B1E           1686       JSR     PRINTCLRSPOT      * print space
000025A6  4EB9 00002B3A           1687        JSR     PRINTHASH   ; print hash
000025AC                          1688        
000025AC  4241                    1689        CLR D1
000025AE  1239 000035DC           1690        MOVE.B   S_COUNT,D1
000025B4  103C 0003               1691        MOVE.B   #3,D0
000025B8  4E4F                    1692        TRAP     #15
000025BA  4EB9 00002B2C           1693        JSR     PRINTCOMA   ; print coma
000025C0  4243                    1694        CLR D3
000025C2  4242                    1695        CLR D2
000025C4  143C 0000               1696        MOVE.B #%000,D2
000025C8  1639 000035E1           1697        MOVE.B  dRN,D3
000025CE  4EB9 00002EFC           1698        JSR   EA_START
000025D4                          1699  
000025D4  6000 ECDE               1700        BRA MEMORYGRABBER
000025D8                          1701  
000025D8                          1702        
000025D8                          1703  PR_ROR 
000025D8  43F9 0000356E           1704        LEA   PROR,A1
000025DE  103C 000E               1705        MOVE.B   #14,D0     ; moves #14 into data register D0
000025E2  4E4F                    1706        TRAP     #15       ; Displays message via trap 14 
000025E4  4EB9 00002A94           1707        JSR      SIZEPRINT
000025EA  4EB9 00002B1E           1708          JSR     PRINTCLRSPOT      * print space
000025F0  4EB9 00002B1E           1709       JSR     PRINTCLRSPOT      * print space
000025F6  4EB9 00002B3A           1710        JSR     PRINTHASH   ; print hash
000025FC                          1711        
000025FC  4241                    1712        CLR D1
000025FE  1239 000035DC           1713        MOVE.B   S_COUNT,D1
00002604  103C 0003               1714        MOVE.B   #3,D0
00002608  4E4F                    1715        TRAP     #15
0000260A  4EB9 00002B2C           1716        JSR     PRINTCOMA   ; print coma
00002610  4243                    1717        CLR D3
00002612  4242                    1718        CLR D2
00002614  143C 0000               1719        MOVE.B #%000,D2
00002618  1639 000035E1           1720        MOVE.B  dRN,D3
0000261E  4EB9 00002EFC           1721        JSR   EA_START
00002624                          1722        
00002624  6000 EC8E               1723        BRA MEMORYGRABBER
00002628                          1724        
00002628                          1725        
00002628                          1726  ;-----------------------extra parts for above code to function
00002628                          1727        
00002628                          1728  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
00002628  0C39 0000 000035DC      1729           CMP.B #$0,S_COUNT
00002630  6700 0004               1730           BEQ   IS_EIGHT
00002634  4E75                    1731           RTS
00002636                          1732           
00002636  13FC 0008 000035DC      1733  IS_EIGHT  MOVE.B #8,S_COUNT
0000263E  4E75                    1734            RTS
00002640                          1735  
00002640                          1736  ;------------------------- printing --------------------------------
00002640                          1737                  
00002640                          1738  PRINTMOVE 
00002640  43F9 00003506           1739      LEA     PMOVE,A1
00002646  103C 000E               1740      MOVE.B  #14,D0     ; moves #14 into data register D0
0000264A  4E4F                    1741      TRAP    #15       ; Displays message via trap 14
0000264C  4EB9 00002A66           1742      JSR     SIZESPLIT
00002652  4EB9 00002B1E           1743      JSR     PRINTCLRSPOT      * print space
00002658  4EB9 00002B1E           1744       JSR     PRINTCLRSPOT      * print space
0000265E                          1745      * EA Part
0000265E  4242                    1746       CLR     D2                      * Source to EA
00002660  4243                    1747       CLR     D3
00002662  13F9 000035F8 000035B0  1748       MOVE.B  opDta1T, SIZE
0000266C  1439 000035F2           1749       MOVE.B  SrcMod, D2              
00002672  2639 000035F4           1750       MOVE.L  opDta1, D3
00002678  4EB9 00002EFC           1751       JSR     EA_start
0000267E                          1752  
0000267E  4EB9 00002B2C           1753       JSR     PRINTCOMA
00002684                          1754  
00002684  4242                    1755       CLR     D2                       * Destination to EA
00002686  4243                    1756       CLR     D3
00002688  1439 000035F0           1757       MOVE.B  DstMod, D2
0000268E  1639 000035EF           1758       MOVE.B  DstReg, D3
00002694  4EB9 00002EFC           1759       JSR     EA_start
0000269A                          1760  
0000269A  6000 EC18               1761       BRA     MEMORYGRABBER
0000269E                          1762      
0000269E                          1763  PRINTMOVEA 
0000269E  43F9 00003511           1764      LEA     PMOVEA,A1
000026A4  103C 000E               1765      MOVE.B   #14,D0     ; moves #14 into data register D0
000026A8  4E4F                    1766      TRAP     #15       ; Displays message via trap 14
000026AA  4EB9 00002A66           1767      JSR     SIZESPLIT
000026B0  4EB9 00002B1E           1768      JSR     PRINTCLRSPOT      * print space
000026B6  4EB9 00002B1E           1769       JSR     PRINTCLRSPOT      * print space
000026BC                          1770       * EA Part
000026BC  4242                    1771       CLR     D2                      * Source to EA
000026BE  4243                    1772       CLR     D3
000026C0  13F9 000035F8 000035B0  1773       MOVE.B  opDta1T, SIZE
000026CA  1439 000035F2           1774       MOVE.B  SrcMod, D2              
000026D0  2639 000035F4           1775       MOVE.L  opDta1, D3
000026D6  4EB9 00002EFC           1776       JSR     EA_start
000026DC                          1777  
000026DC  4EB9 00002B2C           1778       JSR     PRINTCOMA
000026E2                          1779  
000026E2  4242                    1780       CLR     D2                       * Destination to EA
000026E4  4243                    1781       CLR     D3
000026E6  1439 000035F0           1782       MOVE.B  DstMod, D2
000026EC  1639 000035EF           1783       MOVE.B  DstReg, D3
000026F2  4EB9 00002EFC           1784       JSR     EA_start
000026F8                          1785  
000026F8  6000 EBBA               1786       BRA     MEMORYGRABBER
000026FC                          1787      
000026FC                          1788                      ;First set of commands
000026FC                          1789  PRINTNOP    
000026FC  43F9 0000351D           1790      LEA     PNOP,A1
00002702  103C 000E               1791      MOVE.B  #14,D0 
00002706  4E4F                    1792      TRAP    #15  
00002708                          1793      
00002708  6000 EBAA               1794      BRA     MEMORYGRABBER
0000270C                          1795  
0000270C                          1796  PRINTMOVEM  
0000270C  43F9 0000350B           1797      LEA     PMOVEM,A1
00002712  103C 000E               1798      MOVE.B  #14,D0 
00002716  4E4F                    1799      TRAP    #15 
00002718                          1800     * JSR     SIZEPRINT3 
00002718                          1801      
00002718                          1802  *    CLR.L   D4
00002718                          1803  *    MOVE.W  (A0)+,D4            * Move list mask into D4
00002718                          1804      
00002718                          1805      * TODO : CHECK THE INVELID_EA FLAG
00002718                          1806      
00002718                          1807  * TODO:     
00002718                          1808  *    CMP.B   #%0,XBit
00002718                          1809  *    BEQ     PRINT_REG_TO_MEM
00002718                          1810  *    BRA     PRINT_MEM_TO_REG
00002718  6000 EB9A               1811       BRA    MEMORYGRABBER
0000271C                          1812  
0000271C                          1813  PRINTLEA
0000271C  43F9 00003521           1814      LEA     PLEA,A1
00002722  103C 000E               1815      MOVE.B  #14,D0 
00002726  4E4F                    1816      TRAP    #15 
00002728  4EB9 00002B1E           1817      JSR     PRINTCLRSPOT
0000272E  4EB9 00002B1E           1818      JSR     PRINTCLRSPOT      * print space
00002734  4EB9 00002B1E           1819       JSR     PRINTCLRSPOT      * print space
0000273A  0C39 0001 000035C3      1820      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002742  6700 047C               1821      BEQ     PRINTINVALIDEA
00002746                          1822      
00002746  4243                    1823      CLR     D3
00002748  4242                    1824      CLR     D2
0000274A  1439 000035A8           1825      MOVE.B  SRC_MODE,D2
00002750  1639 000035A9           1826      MOVE.B  SRC_REG,D3
00002756  4EB9 00002EFC           1827      JSR     EA_START
0000275C                          1828  
0000275C  4EB9 00002B2C           1829      JSR     PRINTCOMA           ; print coma
00002762                          1830  
00002762  4243                    1831      CLR     D3
00002764  4242                    1832      CLR     D2
00002766  143C 0001               1833      MOVE.B  #%001,D2
0000276A  1639 000035A6           1834      MOVE.B  DEST_REG,D3
00002770  4EB9 00002EFC           1835      JSR     EA_START
00002776                          1836  
00002776  6000 EB3C               1837      BRA     MEMORYGRABBER
0000277A                          1838  
0000277A                          1839  PRINTNOT
0000277A  43F9 00003525           1840      LEA     PNOT,A1
00002780  103C 000E               1841      MOVE.B  #14,D0
00002784  4E4F                    1842      TRAP    #15
00002786  4EB9 00002AB8           1843      JSR     SIZEPRINT2
0000278C  4EB9 00002B1E           1844      JSR     PRINTCLRSPOT      * print space
00002792  4EB9 00002B1E           1845       JSR     PRINTCLRSPOT      * print space
00002798  0C39 0001 000035C3      1846      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000027A0  6700 041E               1847      BEQ     PRINTINVALIDEA    
000027A4                          1848      
000027A4  4243                    1849      CLR     D3
000027A6  4242                    1850      CLR     D2
000027A8  1439 000035A7           1851      MOVE.B  DEST_MODE,D2
000027AE  1639 000035A6           1852      MOVE.B  DEST_REG,D3    
000027B4  4EB9 00002EFC           1853      JSR     EA_START
000027BA                          1854      
000027BA  6000 EAF8               1855      BRA     MEMORYGRABBER
000027BE                          1856  
000027BE                          1857  PRINTJSR    
000027BE  43F9 00003529           1858      LEA     PJSR,A1
000027C4  103C 000E               1859      MOVE.B  #14,D0 
000027C8  4E4F                    1860      TRAP    #15      
000027CA  4EB9 00002B1E           1861      JSR     PRINTCLRSPOT
000027D0  4EB9 00002B1E           1862      JSR     PRINTCLRSPOT      * print space
000027D6  4EB9 00002B1E           1863       JSR     PRINTCLRSPOT      * print space
000027DC  0C39 0001 000035C3      1864      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000027E4  6700 03DA               1865      BEQ     PRINTINVALIDEA
000027E8                          1866      
000027E8  4243                    1867      CLR     D3
000027EA  4242                    1868      CLR     D2
000027EC  1439 000035A7           1869      MOVE.B  DEST_MODE,D2
000027F2  1639 000035A6           1870      MOVE.B  DEST_REG,D3    
000027F8  4EB9 00002EFC           1871      JSR     EA_START
000027FE                          1872      
000027FE  6000 EAB4               1873      BRA     MEMORYGRABBER
00002802                          1874  
00002802                          1875  
00002802  43F9 0000352D           1876  PRINTRTS    LEA PRTS,A1
00002808  103C 000E               1877      MOVE.B   #14,D0     ; moves #14 into data register D0
0000280C  4E4F                    1878      TRAP     #15       ; Displays message via trap 14
0000280E                          1879      
0000280E  6000 EAA4               1880      BRA     MEMORYGRABBER
00002812                          1881      
00002812                          1882                  ;ADDQ SECTION
00002812                          1883  PRINTADDQ 
00002812  43F9 00003555           1884      LEA     PADDQ,A1
00002818  103C 000E               1885      MOVE.B  #14,D0     ; moves #14 into data register D0
0000281C  4E4F                    1886      TRAP    #15       ; Displays message via trap 14
0000281E  4EB9 00002AB8           1887      JSR     SIZEPRINT2
00002824  4EB9 00002B1E           1888      JSR     PRINTCLRSPOT      * print space
0000282A  4EB9 00002B1E           1889       JSR     PRINTCLRSPOT      * print space
00002830  0C39 0001 000035C3      1890      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002838  6700 0386               1891      BEQ     PRINTINVALIDEA
0000283C                          1892      
0000283C  4EB9 00002B3A           1893      JSR     PRINTHASH   ; print hash
00002842  4EB9 00002B46           1894      JSR     PRINTDOLLARSIGN     ; print dollar sign
00002848                          1895      
00002848  4241                    1896      CLR     D1
0000284A  1239 000035AC           1897      MOVE.B  DATA_FIELD,D1
00002850  103C 0003               1898      MOVE.B  #3,D0     
00002854  4E4F                    1899      TRAP    #15 
00002856                          1900      
00002856  4EB9 00002B2C           1901      JSR     PRINTCOMA   ; print coma
0000285C                          1902      
0000285C  4243                    1903      CLR     D3
0000285E  4242                    1904      CLR     D2
00002860  1439 000035A7           1905      MOVE.B  DEST_MODE,D2
00002866  1639 000035A6           1906      MOVE.B  DEST_REG,D3    
0000286C  4EB9 00002EFC           1907      JSR     EA_START
00002872                          1908  
00002872  6000 EA40               1909      BRA      MEMORYGRABBER
00002876                          1910  
00002876                          1911                  ;SECOND SET OF COMMANDS
00002876                          1912  PRINTBGT 
00002876  43F9 00003531           1913      LEA     PBGT,A1
0000287C  103C 000E               1914      MOVE.B   #14,D0     ; moves #14 into data register D0
00002880  4E4F                    1915      TRAP     #15       ; Displays message via trap 14
00002882  6000 EA30               1916      BRA     MEMORYGRABBER
00002886                          1917  
00002886                          1918  PRINTBLE 
00002886  43F9 00003539           1919      LEA     PBLE,A1
0000288C  103C 000E               1920      MOVE.B   #14,D0     ; moves #14 into data register D0
00002890  4E4F                    1921      TRAP     #15       ; Displays message via trap 14
00002892  6000 EA20               1922      BRA     MEMORYGRABBER
00002896                          1923  
00002896                          1924  PRINTBEQ 
00002896  43F9 00003535           1925      LEA     PBEQ,A1
0000289C  103C 000E               1926      MOVE.B   #14,D0     ; moves #14 into data register D0
000028A0  4E4F                    1927      TRAP     #15       ; Displays message via trap 14
000028A2  6000 EA10               1928      BRA     MEMORYGRABBER
000028A6                          1929  
000028A6                          1930  PRINTBRA 
000028A6  43F9 0000353D           1931      LEA PBRA,A1
000028AC  103C 000E               1932      MOVE.B   #14,D0     ; moves #14 into data register D0
000028B0  4E4F                    1933      TRAP     #15       ; Displays message via trap 14
000028B2  6000 EA00               1934      BRA     MEMORYGRABBER
000028B6                          1935      
000028B6                          1936                  ;MOVEQ SECTION
000028B6                          1937  PRINTMOVEQ 
000028B6  43F9 00003517           1938      LEA PMOVEQ,A1
000028BC  103C 000E               1939      MOVE.B   #14,D0     ; moves #14 into data register D0
000028C0  4E4F                    1940      TRAP     #15       ; Displays message via trap 14
000028C2                          1941      
000028C2  4EB9 00002B1E           1942      JSR     PRINTCLRSPOT
000028C8  4EB9 00002B1E           1943      JSR     PRINTCLRSPOT      * print space
000028CE  4EB9 00002B1E           1944       JSR     PRINTCLRSPOT      * print space
000028D4  4EB9 00002B3A           1945      JSR     PRINTHASH   ; print hash
000028DA  4EB9 00002B46           1946      JSR     PRINTDOLLARSIGN     ; print dollar sign  
000028E0                          1947   
000028E0  2239 000035AC           1948      MOVE.L      DATA_FIELD,D1
000028E6  143C 0010               1949      MOVE.B      #16,D2
000028EA  103C 000F               1950      MOVE.B      #15,D0     ; moves #14 into data register D0
000028EE  4E4F                    1951      TRAP        #15 
000028F0                          1952      
000028F0  4EB9 00002B2C           1953      JSR     PRINTCOMA   ; print coma
000028F6  1E3C 0000               1954      MOVE.B #0,D7
000028FA  7400                    1955      MOVE.L #%000,D2
000028FC  1639 000035A6           1956      MOVE.B DEST_REG,D3
00002902  4EB9 00002EFC           1957      JSR     EA_START
00002908                          1958  
00002908  6000 E9AA               1959      BRA     MEMORYGRABBER
0000290C                          1960  
0000290C                          1961  
0000290C                          1962                  ;OR SECTION
0000290C                          1963  PRINTOR 
0000290C  43F9 00003541           1964      LEA     POR,A1
00002912  103C 000E               1965      MOVE.B  #14,D0     ; moves #14 into data register D0
00002916  4E4F                    1966      TRAP    #15       ; Displays message via trap 14
00002918  4EB9 00002AB8           1967      JSR     SIZEPRINT2 
0000291E  4EB9 00002B1E           1968      JSR     PRINTCLRSPOT      * print space
00002924  4EB9 00002B1E           1969       JSR     PRINTCLRSPOT      * print space
0000292A  0C39 0001 000035C3      1970      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002932  6700 028C               1971      BEQ     PRINTINVALIDEA
00002936                          1972      
00002936  0C39 0000 000035C2      1973      CMP.B   #%0,XBit
0000293E  6700 028E               1974      BEQ     PRINT_EA_TO_DN
00002942  6000 02D2               1975      BRA     PRINT_DN_TO_EA
00002946                          1976      
00002946                          1977  
00002946                          1978                  ;SUB SECTION
00002946                          1979  PRINTSUB 
00002946  43F9 00003544           1980      LEA PSUB,A1
0000294C  103C 000E               1981      MOVE.B   #14,D0     ; moves #14 into data register D0
00002950  4E4F                    1982      TRAP     #15       ; Displays message via trap 14 
00002952  4EB9 00002AB8           1983      JSR     SIZEPRINT2 
00002958  4EB9 00002B1E           1984      JSR     PRINTCLRSPOT      * print space
0000295E  4EB9 00002B1E           1985       JSR     PRINTCLRSPOT      * print space
00002964  0C39 0001 000035C3      1986      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
0000296C  6700 0252               1987      BEQ     PRINTINVALIDEA
00002970                          1988      
00002970  0C39 0000 000035C2      1989      CMP.B   #%0,XBit
00002978  6700 0254               1990      BEQ     PRINT_EA_TO_DN
0000297C  6000 0298               1991      BRA     PRINT_DN_TO_EA
00002980                          1992      
00002980                          1993  
00002980                          1994                  ;AND SECTION
00002980                          1995  PRINTAND 
00002980  43F9 00003548           1996      LEA PAND,A1
00002986  103C 000E               1997      MOVE.B   #14,D0
0000298A  4E4F                    1998      TRAP     #15 
0000298C  4EB9 00002AB8           1999      JSR     SIZEPRINT2 
00002992  4EB9 00002B1E           2000      JSR     PRINTCLRSPOT      * print space
00002998  4EB9 00002B1E           2001       JSR     PRINTCLRSPOT      * print space
0000299E  0C39 0001 000035C3      2002      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000029A6  6700 0218               2003      BEQ     PRINTINVALIDEA
000029AA                          2004      
000029AA  0C39 0000 000035C2      2005      CMP.B   #%0,XBit
000029B2  6700 021A               2006      BEQ     PRINT_EA_TO_DN
000029B6  6000 025E               2007      BRA     PRINT_DN_TO_EA
000029BA                          2008      
000029BA                          2009  *    BRA     MEMORYGRABBER
000029BA                          2010  
000029BA                          2011                  ;ADD SPLIT              
000029BA                          2012  PRINTADD 
000029BA  43F9 0000354C           2013      LEA PADD,A1
000029C0  103C 000E               2014      MOVE.B   #14,D0     ; moves #14 into data register D0
000029C4  4E4F                    2015      TRAP     #15       ; Displays message via trap 14
000029C6                          2016      
000029C6  4EB9 00002AB8           2017      JSR     SIZEPRINT2 
000029CC  4EB9 00002B1E           2018      JSR     PRINTCLRSPOT      * print space
000029D2  4EB9 00002B1E           2019       JSR     PRINTCLRSPOT      * print space
000029D8  0C39 0001 000035C3      2020      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000029E0  6700 01DE               2021      BEQ     PRINTINVALIDEA
000029E4                          2022      
000029E4  0C39 0000 000035C2      2023      CMP.B   #%0,XBit
000029EC  6700 01E0               2024      BEQ     PRINT_EA_TO_DN
000029F0  6000 0224               2025      BRA     PRINT_DN_TO_EA
000029F4                          2026      
000029F4                          2027  PRINTADDA 
000029F4  43F9 00003550           2028      LEA PADDA,A1
000029FA  103C 000E               2029      MOVE.B   #14,D0
000029FE  4E4F                    2030      TRAP     #15
00002A00  4EB9 00002AB8           2031      JSR     SIZEPRINT2 
00002A06  4EB9 00002B1E           2032      JSR     PRINTCLRSPOT      * print space
00002A0C  4EB9 00002B1E           2033       JSR     PRINTCLRSPOT      * print space
00002A12  0C39 0001 000035C3      2034      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002A1A  6700 01A4               2035      BEQ     PRINTINVALIDEA
00002A1E                          2036      
00002A1E  13F9 000035AA 000035A8  2037      MOVE.B  TEMP_MODE,SRC_MODE
00002A28  13F9 000035AB 000035A9  2038      MOVE.B  TEMP_REG,SRC_REG
00002A32  4243                    2039      CLR     D3
00002A34  4242                    2040      CLR     D2
00002A36  1439 000035A8           2041      MOVE.B  SRC_MODE,D2
00002A3C  1639 000035A9           2042      MOVE.B  SRC_REG,D3
00002A42  4EB9 00002EFC           2043      JSR     EA_START
00002A48                          2044  
00002A48  4EB9 00002B2C           2045      JSR     PRINTCOMA   ; print coma
00002A4E                          2046  
00002A4E  4243                    2047      CLR     D3
00002A50  4242                    2048      CLR     D2
00002A52  143C 0001               2049      MOVE.B  #%001,D2
00002A56  1639 000035A6           2050      MOVE.B  DEST_REG,D3
00002A5C  4EB9 00002EFC           2051      JSR     EA_START
00002A62                          2052  
00002A62  6000 E850               2053      BRA     MEMORYGRABBER
00002A66                          2054      
00002A66                          2055  
00002A66                          2056  
00002A66                          2057                  ;SIZE PRINTER
00002A66                          2058  SIZESPLIT   
00002A66  0CB9 00000001 00003596  2059      CMP.L #1,SizeValue
00002A70  6700 0082               2060      BEQ PRINTB
00002A74  0CB9 00000002 00003596  2061      CMP.L #2,SizeValue
00002A7E  6700 0082               2062      BEQ PRINTW
00002A82  0CB9 00000003 00003596  2063      CMP.L #3,SizeValue
00002A8C  6700 0082               2064      BEQ PRINTL
00002A90  6000 008C               2065      BRA PRINTCLRSPOT ; go to EA/DN section
00002A94                          2066  
00002A94                          2067  SIZEPRINT 
00002A94  0C39 0000 000035B0      2068       CMP.B  #$0,SIZE
00002A9C  6700 0056               2069       BEQ    PRINTB
00002AA0  0C39 0001 000035B0      2070       CMP.B  #$1,SIZE
00002AA8  6700 0058               2071       BEQ    PRINTW      
00002AAC  0C39 0002 000035B0      2072       CMP.B  #$2,SIZE
00002AB4  6700 005A               2073       BEQ    PRINTL 
00002AB8                          2074  
00002AB8                          2075  SIZEPRINT2   
00002AB8  0C39 0000 000035B0      2076      CMP.B   #$00,SIZE
00002AC0  6700 0032               2077      BEQ     PRINTB
00002AC4  0C39 0001 000035B0      2078      CMP.B   #$01,SIZE
00002ACC  6700 0034               2079      BEQ     PRINTW
00002AD0  0C39 0010 000035B0      2080      CMP.B   #$10,SIZE
00002AD8  6000 0036               2081      BRA     PRINTL
00002ADC                          2082  
00002ADC                          2083  SIZEPRINT3
00002ADC  0C39 0000 000035B0      2084      CMP.B   #$0,SIZE
00002AE4  6700 001C               2085      BEQ     PRINTW
00002AE8  0C39 0001 000035B0      2086      CMP.B   #$1,SIZE
00002AF0  6700 001E               2087      BEQ     PRINTL
00002AF4                          2088  
00002AF4                          2089  PRINTB  
00002AF4  43F9 0000359A           2090      LEA     PB,A1
00002AFA  103C 000E               2091      MOVE.B  #14,D0     ; moves #14 into data register D0
00002AFE  4E4F                    2092      TRAP    #15       ; Displays message via trap 14
00002B00  4E75                    2093      RTS
00002B02                          2094  
00002B02                          2095  PRINTW      
00002B02  43F9 0000359E           2096      LEA     PW,A1
00002B08  103C 000E               2097      MOVE.B  #14,D0     ; moves #14 into data register D0
00002B0C  4E4F                    2098      TRAP    #15       ; Displays message via trap 14
00002B0E  4E75                    2099      RTS
00002B10                          2100      
00002B10                          2101  PRINTL 
00002B10  43F9 000035A2           2102      LEA     PL,A1
00002B16  103C 000E               2103      MOVE.B  #14,D0     ; moves #14 into data register D0
00002B1A  4E4F                    2104      TRAP    #15       ; Displays message via trap 14
00002B1C  4E75                    2105      RTS
00002B1E                          2106  
00002B1E                          2107  PRINTCLRSPOT 
00002B1E  43F9 000035B1           2108      LEA     CLRSPOT,A1
00002B24  103C 000E               2109      MOVE.B  #14,D0     ; moves #14 into data register D0
00002B28  4E4F                    2110      TRAP    #15       ; Displays message via trap 14
00002B2A  4E75                    2111      RTS
00002B2C                          2112  
00002B2C                          2113  PRINTCOMA   
00002B2C  43F9 000035B7           2114      LEA     COMA,A1
00002B32  103C 000E               2115      MOVE.B  #14,D0     
00002B36  4E4F                    2116      TRAP    #15
00002B38  4E75                    2117      RTS
00002B3A                          2118  
00002B3A                          2119  PRINTHASH 
00002B3A  43F9 000035B3           2120      LEA     HASH,A1         ; print hash
00002B40  700E                    2121      MOVEQ   #14,D0
00002B42  4E4F                    2122      TRAP    #15
00002B44  4E75                    2123      RTS
00002B46                          2124  
00002B46                          2125  PRINTDOLLARSIGN   
00002B46  43F9 000035B5           2126      LEA     DOLLARSIGN,A1   ; print dollar sign
00002B4C  103C 000E               2127      MOVE.B  #14,D0
00002B50  4E4F                    2128      TRAP    #15 
00002B52  4E75                    2129      RTS
00002B54                          2130      
00002B54                          2131  PRINTNEG
00002B54  43F9 000035BB           2132      LEA     NEG,A1          ; print "-"
00002B5A  103C 000E               2133      MOVE.B  #14,D0
00002B5E  4E4F                    2134      TRAP    #15
00002B60  4E75                    2135      RTS
00002B62                          2136      
00002B62                          2137  PRINTPLUS
00002B62  43F9 000035B9           2138      LEA     PLUS,A1      * print "+"
00002B68  103C 000E               2139      MOVE.B  #14,D0
00002B6C  4E4F                    2140      TRAP    #15
00002B6E  4E75                    2141      RTS  
00002B70                          2142  
00002B70                          2143  PRINTOPEN
00002B70  43F9 000035BD           2144      LEA     OPEN,A1      * print "("
00002B76  103C 000E               2145      MOVE.B  #14,D0
00002B7A  4E4F                    2146      TRAP    #15
00002B7C  4E75                    2147      RTS 
00002B7E                          2148      
00002B7E                          2149  PRINTCLOSED  
00002B7E  43F9 000035BF           2150      LEA     CLOSED,A1      * print ")"
00002B84  103C 000E               2151      MOVE.B  #14,D0
00002B88  4E4F                    2152      TRAP    #15
00002B8A  4E75                    2153      RTS 
00002B8C                          2154  
00002B8C                          2155  PRINT_DATA
00002B8C  43F9 00003572           2156      LEA     PDATA,A1
00002B92  103C 000E               2157      MOVE.B  #14,D0
00002B96  4E4F                    2158      TRAP    #15
00002B98                          2159      
00002B98  4EB8 2B1E               2160      JSR     PRINTCLRSPOT      * print space
00002B9C  4EB8 2B1E               2161      JSR     PRINTCLRSPOT      * print space
00002BA0  4EB8 2B1E               2162      JSR     PRINTCLRSPOT      * print space
00002BA4  4EB8 2B3A               2163      JSR PRINTHASH
00002BA8  4EB8 2B46               2164      JSR PRINTDOLLARSIGN
00002BAC  3239 00003592           2165      MOVE.W      COMMANDDATA,D1
00002BB2  143C 0010               2166      MOVE.B      #16,D2
00002BB6  103C 000F               2167      MOVE.B      #15,D0     ; moves #14 into data register D0
00002BBA  4E4F                    2168      TRAP        #15  
00002BBC                          2169      
00002BBC  6000 E6F6               2170      BRA     MEMORYGRABBER  
00002BC0                          2171  
00002BC0                          2172  PRINTINVALIDEA
00002BC0  43F9 00003577           2173      LEA     PINVALIDEA,A1
00002BC6  103C 000E               2174      MOVE.B  #14,D0
00002BCA  4E4F                    2175      TRAP    #15
00002BCC  4E75                    2176      RTS
00002BCE                          2177      
00002BCE                          2178  PRINT_EA_TO_DN
00002BCE  13F9 000035AA 000035A8  2179      MOVE.B  TEMP_MODE,SRC_MODE
00002BD8  13F9 000035AB 000035A9  2180      MOVE.B  TEMP_REG,SRC_REG
00002BE2  4243                    2181      CLR     D3
00002BE4  4242                    2182      CLR     D2
00002BE6  1439 000035A8           2183      MOVE.B  SRC_MODE,D2
00002BEC  1639 000035A9           2184      MOVE.B  SRC_REG,D3
00002BF2  4EB9 00002EFC           2185      JSR     EA_START
00002BF8                          2186  
00002BF8  4EB8 2B2C               2187      JSR     PRINTCOMA   ; print coma
00002BFC                          2188   
00002BFC  4243                    2189      CLR     D3
00002BFE  4242                    2190      CLR     D2
00002C00  1439 000035A7           2191      MOVE.B  DEST_MODE,D2
00002C06  1639 000035A6           2192      MOVE.B  DEST_REG,D3
00002C0C  4EB9 00002EFC           2193      JSR     EA_START
00002C12                          2194  
00002C12  6000 E6A0               2195      BRA     MEMORYGRABBER
00002C16                          2196      
00002C16                          2197  PRINT_DN_TO_EA    
00002C16  4243                    2198      CLR     D3
00002C18  4242                    2199      CLR     D2
00002C1A  1439 000035A7           2200      MOVE.B  DEST_MODE,D2
00002C20  1639 000035A9           2201      MOVE.B  SRC_REG,D3
00002C26  4EB9 00002EFC           2202      JSR     EA_START
00002C2C                          2203      
00002C2C  4EB8 2B2C               2204      JSR     PRINTCOMA   ; print coma
00002C30                          2205      
00002C30  13F9 000035AA 000035A8  2206      MOVE.B  TEMP_MODE,SRC_MODE
00002C3A  13F9 000035AB 000035A9  2207      MOVE.B  TEMP_REG,SRC_REG
00002C44  4243                    2208      CLR     D3
00002C46  4242                    2209      CLR     D2
00002C48  1439 000035A8           2210      MOVE.B  SRC_MODE,D2
00002C4E  1639 000035A9           2211      MOVE.B  SRC_REG,D3
00002C54  4EB9 00002EFC           2212      JSR     EA_START
00002C5A                          2213      
00002C5A  6000 E658               2214      BRA     MEMORYGRABBER
00002C5E                          2215  
00002C5E                          2216  
00002C5E                          2217  CLOSINGSTATEMENTS     
00002C5E  43F9 00003500           2218      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002C64  103C 000E               2219      MOVE.B   #14,D0     ; moves #14 into data register D0
00002C68  4E4F                    2220      TRAP     #15       ; Displays message via trap 14
00002C6A                          2221     
00002C6A                          2222  STOP    
00002C6A  103C 0009               2223      MOVE.B #9,D0        ; moves #9 into data register D0
00002C6E  4E4F                    2224      TRAP     #15       ; halt simulator via trap 9
00002C70                          2225   
00002C70                          2226  
00002C70                          2227  
00002C70                          2228  
00002C70                          2229      
00002C70                          2230  ;----------------------------- ADDED THIS FOR OP CODE PART 
00002C70                          2231  ********* CHECK DESTINATION ***********
00002C70                          2232  CHECK_DESTINATION
00002C70  13FC 000F 000035C4      2233      MOVE.B  #$F,DstMode
00002C78                          2234      
00002C78  0C39 0007 000035A7      2235      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
00002C80  6700 0026               2236      BEQ     CHECK_DEST_REG             * Checks registers
00002C84                          2237      
00002C84  0C39 0005 000035A7      2238      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
00002C8C  6700 0058               2239      BEQ     R_CHECK_DEST    * Print DATA instead 
00002C90                          2240      
00002C90  0C39 0006 000035A7      2241      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002C98  6700 004C               2242      BEQ     R_CHECK_DEST    * Print DATA instead
00002C9C                          2243      
00002C9C  13F9 000035A7 000035C4  2244      MOVE.B  DEST_MODE,DstMode
00002CA6  4E75                    2245      RTS
00002CA8                          2246  CHECK_DEST_REG
00002CA8  0C39 0002 000035A6      2247      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002CB0  6700 0034               2248      BEQ     R_CHECK_DEST
00002CB4                          2249  
00002CB4  0C39 0003 000035A6      2250      CMP.B   #3,DEST_REG         * if DEST_REG = 011
00002CBC  6700 0028               2251      BEQ     R_CHECK_DEST
00002CC0                          2252      
00002CC0  0C39 0005 000035A6      2253      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002CC8  6C00 016C               2254      BGE     RETURN
00002CCC                          2255      
00002CCC  13F9 000035A7 000035C4  2256      MOVE.B  DEST_MODE,DstMode
00002CD6  4286                    2257      CLR.L   D6
00002CD8  1C39 000035A6           2258      MOVE.B  DEST_REG,D6
00002CDE  DD39 000035C4           2259      ADD.B   D6,DstMode
00002CE4  4E75                    2260      RTS
00002CE6                          2261  R_CHECK_DEST
00002CE6  13FC 000E 000035C4      2262      MOVE.B  #$E,DstMode
00002CEE  4E75                    2263      RTS
00002CF0                          2264  ********* CHECK TEMP ***********
00002CF0                          2265  CHECK_TEMP
00002CF0                          2266  
00002CF0  13FC 000F 000035C5      2267      MOVE.B  #$F,TempMode
00002CF8                          2268      
00002CF8  0C39 0007 000035AA      2269      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
00002D00  6700 0026               2270      BEQ     CHECK_TEMP_REG      * Checks registers
00002D04                          2271  
00002D04  0C39 0005 000035AA      2272      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
00002D0C  6700 0058               2273      BEQ     R_CHECK_TEMP    * 
00002D10                          2274      
00002D10  0C39 0006 000035AA      2275      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
00002D18  6700 004C               2276      BEQ     R_CHECK_TEMP    * 
00002D1C                          2277      
00002D1C  13F9 000035AA 000035C5  2278      MOVE.B  TEMP_MODE,TempMode
00002D26  4E75                    2279      RTS
00002D28                          2280  CHECK_TEMP_REG
00002D28  0C39 0002 000035AB      2281      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
00002D30  6700 0034               2282      BEQ     R_CHECK_TEMP
00002D34                          2283  
00002D34  0C39 0003 000035AB      2284      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
00002D3C  6700 0028               2285      BEQ     R_CHECK_TEMP
00002D40                          2286      
00002D40  0C39 0005 000035AB      2287      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002D48  6700 00EC               2288      BEQ     RETURN
00002D4C                          2289      
00002D4C  13F9 000035AA 000035C5  2290      MOVE.B  TEMP_MODE,TempMode
00002D56  4286                    2291      CLR.L   D6
00002D58  1C39 000035AB           2292      MOVE.B  TEMP_REG,D6
00002D5E  DD39 000035C5           2293      ADD.B   D6,TempMode
00002D64  4E75                    2294      RTS
00002D66                          2295  R_CHECK_TEMP
00002D66  13FC 000E 000035C5      2296      MOVE.B  #$E,TempMode
00002D6E  4E75                    2297      RTS
00002D70                          2298  ******************** CHECK_SOURCE ******************** 
00002D70                          2299  CHECK_SOURCE    * TODO
00002D70  13FC 000F 000035C6      2300      MOVE.B  #$F,SrcMode
00002D78                          2301      
00002D78  0C39 0007 000035A8      2302      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002D80  6700 0026               2303      BEQ     CHECK_SOURCE_REG    * Checks registers
00002D84                          2304  
00002D84  0C39 0005 000035A8      2305      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
00002D8C  6700 0058               2306      BEQ     R_CHECK_SOURCE 
00002D90                          2307      
00002D90  0C39 0006 000035A8      2308      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002D98  6700 004C               2309      BEQ     R_CHECK_SOURCE 
00002D9C                          2310      
00002D9C  13F9 000035A8 000035C6  2311      MOVE.B  SRC_MODE,SrcMode
00002DA6  4E75                    2312      RTS
00002DA8                          2313  CHECK_SOURCE_REG
00002DA8  0C39 0002 000035A9      2314      CMP.B   #2,SRC_REG             * if RRRS = 010
00002DB0  6700 0034               2315      BEQ     R_CHECK_SOURCE
00002DB4                          2316  
00002DB4  0C39 0003 000035A9      2317      CMP.B   #3,SRC_REG          * if RRRS = 011
00002DBC  6700 0028               2318      BEQ     R_CHECK_SOURCE
00002DC0                          2319      
00002DC0  0C39 0005 000035A9      2320      CMP.B   #5,SRC_REG      * if RRRS = 101
00002DC8  6C00 006C               2321      BGE     RETURN
00002DCC                          2322      
00002DCC  13F9 000035A8 000035C6  2323      MOVE.B  SRC_MODE,SrcMode
00002DD6  4286                    2324      CLR.L   D6
00002DD8  1C39 000035A9           2325      MOVE.B  SRC_REG,D6
00002DDE  DD39 000035C6           2326      ADD.B   D6,SrcMode
00002DE4  4E75                    2327      RTS
00002DE6                          2328  R_CHECK_SOURCE
00002DE6  13FC 000E 000035C6      2329      MOVE.B  #$E,SrcMode
00002DEE  4E75                    2330      RTS
00002DF0                          2331  ******************** XBIT ********************
00002DF0                          2332  CHECK_XBIT      
00002DF0  0C39 0000 000035C2      2333      CMP.B   #%0,XBit
00002DF8  6700 0008               2334      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002DFC  6600 001E               2335      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002E00  4E75                    2336      RTS
00002E02                          2337  TEMP_TO_DEST
00002E02  13F9 000035AB 000035A6  2338      MOVE.B  TEMP_REG,DEST_REG
00002E0C  13F9 000035AA 000035A7  2339      MOVE.B  TEMP_MODE,DEST_MODE
00002E16  4EB8 2C70               2340      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002E1A  4E75                    2341      RTS
00002E1C                          2342  TEMP_TO_SRC
00002E1C  13F9 000035AB 000035A9  2343      MOVE.B  TEMP_REG,SRC_REG
00002E26  13F9 000035AA 000035A8  2344      MOVE.B  TEMP_MODE,SRC_MODE
00002E30  4EB8 2D70               2345      JSR     CHECK_SOURCE                 
00002E34  4E75                    2346      RTS
00002E36                          2347    
00002E36                          2348  ******************** OTHER COMMANDS ********************
00002E36                          2349  RETURN
00002E36  4E75                    2350      RTS
00002E38                          2351  
00002E38                          2352  FORMAT_DATA
00002E38  0C39 0000 000035AC      2353      CMP.B   #0,DATA_FIELD
00002E40  66F4                    2354      BNE     RETURN
00002E42  13FC 0008 000035AC      2355      MOVE.B  #8,DATA_FIELD
00002E4A  4E75                    2356      RTS
00002E4C                          2357  
00002E4C                          2358  CHECK_DATA_NEG
00002E4C  BC3C 0080               2359      CMP.B   #128,D6
00002E50  6700 FD02               2360      BEQ     PRINTNEG
00002E54  4E75                    2361      RTS
00002E56                          2362      
00002E56                          2363      
00002E56                          2364  SET_INVALID_EA
00002E56  13FC 0001 000035C3      2365      MOVE.B  #%1,INVALID_EA 
00002E5E                          2366      
00002E5E                          2367  CLEARMR
00002E5E  13FC 0000 000035A6      2368      MOVE.B  #0,DEST_REG 
00002E66  13FC 0000 000035A7      2369      MOVE.B  #0,DEST_MODE
00002E6E  13FC 0000 000035A8      2370      MOVE.B  #0,SRC_MODE
00002E76  13FC 0000 000035A9      2371      MOVE.B  #0,SRC_REG
00002E7E  13FC 0000 000035AA      2372      MOVE.B  #0,TEMP_MODE
00002E86  13FC 0000 000035AB      2373      MOVE.B  #0,TEMP_REG 
00002E8E  23FC 00000000 000035AC  2374      MOVE.L  #0,DATA_FIELD
00002E98  13FC 0000 000035B0      2375      MOVE.B  #0,SIZE
00002EA0  13FC 0000 000035C2      2376      MOVE.B  #0,XBIT
00002EA8  13FC 0000 000035C3      2377      MOVE.B  #0,INVALID_EA
00002EB0  23FC 00000000 00003596  2378      MOVE.L  #0,SizeValue
00002EBA  23FC 00000000 000035AC  2379      MOVE.L  #0,DATA_FIELD
00002EC4                          2380      
00002EC4  33FC 0000 00003592      2381      MOVE.W  #0,COMMANDDATA
00002ECC  13FC 0000 000035C4      2382      MOVE.B  #0,DstMode
00002ED4  13FC 0000 000035C5      2383      MOVE.B  #0,TempMode        
00002EDC  13FC 0000 000035C6      2384      MOVE.B  #0,SrcMode         
00002EE4  13FC 0000 00003594      2385      MOVE.B  #0,Bits
00002EEC  7200                    2386      MOVE.L #0,D1
00002EEE  7400                    2387      MOVE.L #0,D2
00002EF0  7600                    2388      MOVE.L #0,D3
00002EF2  7800                    2389      MOVE.L #0,D4
00002EF4  7A00                    2390      MOVE.L #0,D5
00002EF6  7C00                    2391      MOVE.L #0,D6
00002EF8  7E00                    2392      MOVE.L #0,D7
00002EFA                          2393  
00002EFA  4E75                    2394      RTS  
00002EFC                          2395  
00002EFC                          2396  *************    
00002EFC                          2397  
00002EFC                          2398  *******************************************************
00002EFC                          2399  * EA subroutine
00002EFC                          2400  * Purpose: Generate EA
00002EFC                          2401  *         Addresses used: 
00002EFC                          2402  *            D2 FOR MODE
00002EFC                          2403  *            D3 FOR REGISTER
00002EFC                          2404  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002EFC                          2405  *            D1 FOR PRINTING
00002EFC                          2406  *            A6 MIMICKS INSTRUCTION BUFFER
00002EFC                          2407  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002EFC                          2408  ***************************************************
00002EFC                          2409  
00002EFC                          2410  EA_start        
00002EFC                          2411  
00002EFC  0C39 000F 000035C7      2412                  CMP.B      #$F,STATE
00002F04  6700 0352               2413                  BEQ        EA_FINISH
00002F08  4EF9 0000325A           2414                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002F0E                          2415  
00002F0E  B47C 0000               2416  Continue_EA     CMP.W       #MODE000,D2             
00002F12  6700 0036               2417                  BEQ         DATA_REGISTER                 
00002F16  B47C 0001               2418                  CMP.W       #MODE001,D2               
00002F1A  6700 004A               2419                  BEQ         ADDRESS_REGISTER                 
00002F1E  B47C 0002               2420                  CMP.W       #MODE010,D2              
00002F22  6700 005E               2421                  BEQ         ADDRESS_REGISTER_DIRECT               
00002F26  B47C 0003               2422                  CMP.W       #MODE011,D2              
00002F2A  6700 007A               2423                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002F2E  B47C 0004               2424                  CMP.W       #MODE100,D2          
00002F32  6700 009A               2425                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002F36  B47C 0007               2426                  CMP.W       #MODE111,D2          
00002F3A  6700 00BA               2427                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002F3E  13FC 0001 000035C7      2428                  MOVE.B      #BAD_FLAG,STATE               
00002F46  6000 0310               2429                  BRA         EA_FINISH              
00002F4A                          2430                  
00002F4A                          2431  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002F4A  123C 0044               2432                  MOVE.B   #D,D1
00002F4E  103C 0006               2433                  MOVE.B  #6,D0
00002F52  4E4F                    2434                  TRAP    #15
00002F54  0685 00000030           2435                  ADDI.L   #$30,D5
00002F5A  1205                    2436                  MOVE.B   D5,D1
00002F5C  103C 0006               2437                  MOVE.B  #6,D0
00002F60  4E4F                    2438                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002F62  6000 02F4               2439                  BRA      EA_FINISH
00002F66                          2440                      
00002F66                          2441  
00002F66  123C 0041               2442  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002F6A  103C 0006               2443                   MOVE.B  #6,D0
00002F6E  4E4F                    2444                   TRAP    #15
00002F70  0685 00000030           2445                   ADDI.L   #$30,D5
00002F76  1205                    2446                   MOVE.B   D5,D1
00002F78  103C 0006               2447                   MOVE.B  #6,D0
00002F7C  4E4F                    2448                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002F7E  6000 02D8               2449                   BRA      EA_FINISH
00002F82                          2450  
00002F82                          2451                   
00002F82                          2452  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002F82  4EB8 2B70               2453                          JSR     PRINTOPEN   
00002F86  123C 0041               2454                          MOVE.B   #A,D1
00002F8A  103C 0006               2455                          MOVE.B  #6,D0
00002F8E  4E4F                    2456                          TRAP    #15
00002F90  0685 00000030           2457                          ADDI.L   #$30,D5
00002F96  1205                    2458                          MOVE.B   D5,D1
00002F98  103C 0006               2459                          MOVE.B  #6,D0
00002F9C  4E4F                    2460                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002F9E  4EB8 2B7E               2461                          JSR     PRINTCLOSED
00002FA2  6000 02B4               2462                          BRA      EA_FINISH
00002FA6                          2463  
00002FA6                          2464  
00002FA6                          2465  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002FA6  4EB8 2B70               2466                             JSR     PRINTOPEN
00002FAA  123C 0041               2467                             MOVE.B   #A,D1
00002FAE  103C 0006               2468                             MOVE.B  #6,D0
00002FB2  4E4F                    2469                             TRAP    #15
00002FB4  0685 00000030           2470                             ADDI.L   #$30,D5
00002FBA  1205                    2471                             MOVE.B   D5,D1
00002FBC  103C 0006               2472                             MOVE.B  #6,D0
00002FC0  4E4F                    2473                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002FC2  4EB8 2B7E               2474                             JSR     PRINTCLOSED
00002FC6  4EB8 2B62               2475                             JSR      PRINTPLUS
00002FCA  6000 028C               2476                             BRA      EA_FINISH
00002FCE                          2477  
00002FCE                          2478  
00002FCE                          2479  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002FCE  4EB8 2B54               2480                             JSR      PRINTNEG
00002FD2  4EB8 2B70               2481                             JSR     PRINTOPEN
00002FD6  123C 0041               2482                             MOVE.B   #A,D1
00002FDA  103C 0006               2483                             MOVE.B  #6,D0
00002FDE  4E4F                    2484                             TRAP    #15
00002FE0  0685 00000030           2485                             ADDI.L   #$30,D5
00002FE6  1205                    2486                             MOVE.B   D5,D1
00002FE8  103C 0006               2487                             MOVE.B  #6,D0
00002FEC  4E4F                    2488                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002FEE  4EB8 2B7E               2489                             JSR     PRINTCLOSED
00002FF2  6000 0264               2490                             BRA      EA_FINISH
00002FF6                          2491  
00002FF6                          2492  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002FF6  6000 0002               2493                                BRA  CONTINUE_A_I_A
00002FFA                          2494                                
00002FFA                          2495                                
00002FFA                          2496  CONTINUE_A_I_A                
00002FFA  BA3C 0004               2497                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002FFE  6700 001E               2498                                BEQ         IMMIDIATE_REGISTER                
00003002  BA3C 0000               2499                                CMP.B       #0,D5                ; WORD ADDRESSING
00003006  6700 0042               2500                                BEQ         WORD_ADDRESSING                
0000300A  BA3C 0001               2501                                CMP.B       #1,D5                ; LONG ADDRESSIN 
0000300E  6700 0048               2502                                BEQ         LONG_ADDRESSING              
00003012  13FC 0001 000035C7      2503                                MOVE.B      #BAD_FLAG,STATE              
0000301A  6000 023C               2504                                BRA         EA_FINISH                * jump to end   
0000301E                          2505                                
0000301E                          2506                                
0000301E  4EB8 2B3A               2507  IMMIDIATE_REGISTER            JSR     PRINTHASH   * print hashtag
00003022  0C39 0001 000035B0      2508                                CMP.B #1,SIZE   ;BYTE
0000302A  6700 003A               2509                                BEQ   GETBYTE
0000302E  0C39 0002 000035B0      2510                                CMP.B #2,SIZE   ;BYTE
00003036  6700 0038               2511                                BEQ   GETWORD
0000303A  0C39 0003 000035B0      2512                                CMP.B #3,SIZE   ;BYTE
00003042  6700 0036               2513                                BEQ   GETLONG
00003046  6000 0032               2514                                BRA   GETLONG
0000304A                          2515                                
0000304A                          2516  
0000304A  4EB8 2B46               2517  WORD_ADDRESSING              JSR    PRINTDOLLARSIGN
0000304E  3E1E                    2518                               MOVE.W  (A6)+,D7
00003050  6000 00B2               2519                               BRA   PRINT_WORD
00003054  6000 0202               2520                               BRA   EA_FINISH
00003058                          2521  
00003058  4EB8 2B46               2522  LONG_ADDRESSING              JSR    PRINTDOLLARSIGN
0000305C  2E1E                    2523                               MOVE.L  (A6)+,D7
0000305E  6000 0122               2524                               BRA   PRINT_LONG
00003062  6000 01F4               2525                               BRA   EA_FINISH                            
00003066                          2526  
00003066                          2527  GETBYTE      
00003066  1E1E                    2528                  MOVE.B   (A6)+,D7    
00003068  6B00 001A               2529                  BMI     ADD_NEGATIVE
0000306C  6000 001E               2530                  BRA     PRINT_BRANCHING
00003070                          2531  GETWORD                
00003070  3E1E                    2532                  MOVE.W   (A6)+,D7
00003072  6B00 0010               2533                  BMI     ADD_NEGATIVE
00003076  6000 0014               2534                  BRA     PRINT_BRANCHING
0000307A                          2535  GETLONG                
0000307A                          2536                  
0000307A  2E1E                    2537                  MOVE.L   (A6)+,D7
0000307C  6B00 0006               2538                  BMI     ADD_NEGATIVE
00003080  6000 000A               2539                  BRA     PRINT_BRANCHING
00003084                          2540                  
00003084  4EB8 2B54               2541  ADD_NEGATIVE    JSR     PRINTNEG
00003088  6000 0002               2542                  BRA    PRINT_BRANCHING
0000308C                          2543  
0000308C                          2544  
0000308C  0C39 0001 000035B0      2545  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00003094  6700 001C               2546                  BEQ    PRINT_BYTE    
00003098  0C39 0002 000035B0      2547                  CMP.B #2,SIZE   ;WORD
000030A0  6700 0062               2548                  BEQ    PRINT_WORD
000030A4  0C39 0003 000035B0      2549                  CMP.B  #3,SIZE  ;LONG
000030AC  6700 00D4               2550                  BEQ    PRINT_LONG
000030B0  60DA                    2551                  BRA    PRINT_BRANCHING
000030B2                          2552  
000030B2                          2553  
000030B2                          2554  
000030B2                          2555  
000030B2                          2556                  
000030B2                          2557  **** BYTE DATA PRINTING***********************
000030B2  4241                    2558  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
000030B4                          2559                 
000030B4                          2560  
000030B4  BEBC 0000000F           2561                 CMP.L   #$F,D7              
000030BA  6F00 0006               2562                 BLE     BYTE_ONE_LOOP                  
000030BE  6000 000E               2563                 BRA     READ_BYTE
000030C2                          2564  
000030C2                          2565  BYTE_ONE_LOOP
000030C2  13FC 0001 000035E2      2566                  MOVE.B  #1,NUMBER_OF_HEX  
000030CA  6000 0002               2567                  BRA     READ_BYTE
000030CE                          2568      
000030CE                          2569  READ_BYTE                           
000030CE  0C39 0000 000035E2      2570      CMP.B   #0,NUMBER_OF_HEX               
000030D6  6700 0014               2571      BEQ     COPYBYTE
000030DA                          2572      
000030DA  123C 0030               2573      MOVE.B  #$30,D1             
000030DE  103C 0006               2574      MOVE.B  #6,D0               
000030E2  4E4F                    2575      TRAP    #15
000030E4                          2576  
000030E4  5339 000035E2           2577      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
000030EA  60E2                    2578      BRA     READ_BYTE           ; LOOP
000030EC                          2579      
000030EC                          2580  COPYBYTE
000030EC  2207                    2581      MOVE.L  D7,D1               ; COPY DATA 
000030EE  143C 0010               2582      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
000030F2  103C 000F               2583      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
000030F6  4E4F                    2584      TRAP    #15
000030F8  13FC 0000 000035E2      2585      MOVE.B  #0,NUMBER_OF_HEX
00003100  6000 0156               2586      BRA  EA_FINISH
00003104                          2587  
00003104                          2588  
00003104                          2589  
00003104                          2590  
00003104                          2591  
00003104                          2592  ******PRINT WORD DATA******************
00003104  4241                    2593  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00003106                          2594                 
00003106                          2595  
00003106  BEBC 0000000F           2596                 CMP.L   #$F,D7              
0000310C  6F00 001A               2597                 BLE     WORD_ONE_LOOP
00003110  BEBC 000000FF           2598                 CMP.L   #$FF,D7              
00003116  6F00 001C               2599                 BLE     WORD_TWO_LOOP
0000311A  BEBC 00000FFF           2600                 CMP.L   #$FFF,D7              
00003120  6F00 001E               2601                 BLE     WORD_THREE_LOOP                  
00003124  6000 0026               2602                 BRA     READ_WORD
00003128                          2603  
00003128                          2604  WORD_ONE_LOOP
00003128  13FC 0001 000035E2      2605                  MOVE.B  #1,NUMBER_OF_HEX  
00003130  6000 001A               2606                  BRA     READ_WORD
00003134                          2607                  
00003134                          2608  WORD_TWO_LOOP
00003134  13FC 0002 000035E2      2609                  MOVE.B  #2,NUMBER_OF_HEX  
0000313C  6000 000E               2610                  BRA     READ_WORD
00003140                          2611                  
00003140                          2612  WORD_THREE_LOOP
00003140  13FC 0003 000035E2      2613                  MOVE.B  #3,NUMBER_OF_HEX  
00003148  6000 0002               2614                  BRA     READ_WORD                
0000314C                          2615      
0000314C                          2616  READ_WORD                           
0000314C  0C39 0000 000035E2      2617      CMP.B   #0,NUMBER_OF_HEX               
00003154  6700 0014               2618      BEQ     COPYWORD
00003158                          2619      
00003158  123C 0030               2620      MOVE.B  #$30,D1             
0000315C  103C 0006               2621      MOVE.B  #6,D0               
00003160  4E4F                    2622      TRAP    #15
00003162                          2623  
00003162  5339 000035E2           2624      SUBI.B  #1,NUMBER_OF_HEX              
00003168  60E2                    2625      BRA     READ_WORD                   ; LOOP
0000316A                          2626  
0000316A                          2627  COPYWORD
0000316A  2207                    2628      MOVE.L  D7,D1               ; COPY DATA 
0000316C  143C 0010               2629      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00003170  103C 000F               2630      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00003174  4E4F                    2631      TRAP    #15
00003176  13FC 0000 000035E2      2632      MOVE.B  #0,NUMBER_OF_HEX
0000317E  6000 00D8               2633      BRA  EA_FINISH
00003182                          2634  
00003182                          2635  ****************PRINT LONG DATA*****************
00003182  4241                    2636  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00003184                          2637                 
00003184                          2638  
00003184  BEBC 0000000F           2639                 CMP.L   #$F,D7              
0000318A  6F00 0042               2640                 BLE     LONG_ONE_LOOP
0000318E  BEBC 000000FF           2641                 CMP.L   #$FF,D7              
00003194  6F00 0044               2642                 BLE     LONG_TWO_LOOP
00003198  BEBC 00000FFF           2643                 CMP.L   #$FFF,D7              
0000319E  6F00 0046               2644                 BLE     LONG_THREE_LOOP
000031A2  BEBC 0000FFFF           2645                 CMP.L   #$FFFF,D7              
000031A8  6F00 0048               2646                 BLE     LONG_FOUR_LOOP
000031AC  BEBC 000FFFFF           2647                 CMP.L   #$FFFFF,D7              
000031B2  6F00 004A               2648                 BLE     LONG_FIVE_LOOP
000031B6  BEBC 00FFFFFF           2649                 CMP.L   #$FFFFFF,D7              
000031BC  6F00 004C               2650                 BLE     LONG_SIX_LOOP
000031C0  BEBC 0FFFFFFF           2651                 CMP.L   #$FFFFFFF,D7              
000031C6  6F00 004E               2652                 BLE     LONG_SEVEN_LOOP                  
000031CA  6000 0056               2653                 BRA     READ_LONG
000031CE                          2654  
000031CE                          2655  LONG_ONE_LOOP
000031CE  13FC 0001 000035E2      2656                  MOVE.B  #1,NUMBER_OF_HEX  
000031D6  6000 004A               2657                  BRA     READ_LONG
000031DA                          2658                  
000031DA                          2659  LONG_TWO_LOOP
000031DA  13FC 0002 000035E2      2660                  MOVE.B  #2,NUMBER_OF_HEX  
000031E2  6000 003E               2661                  BRA     READ_LONG
000031E6                          2662                  
000031E6                          2663  LONG_THREE_LOOP
000031E6  13FC 0003 000035E2      2664                  MOVE.B  #3,NUMBER_OF_HEX  
000031EE  6000 0032               2665                  BRA     READ_LONG                
000031F2                          2666  LONG_FOUR_LOOP
000031F2  13FC 0004 000035E2      2667                  MOVE.B  #4,NUMBER_OF_HEX  
000031FA  6000 0026               2668                  BRA     READ_LONG
000031FE                          2669                  
000031FE                          2670  LONG_FIVE_LOOP
000031FE  13FC 0005 000035E2      2671                  MOVE.B  #5,NUMBER_OF_HEX  
00003206  6000 001A               2672                  BRA     READ_LONG
0000320A                          2673                  
0000320A                          2674  LONG_SIX_LOOP
0000320A  13FC 0006 000035E2      2675                  MOVE.B  #6,NUMBER_OF_HEX  
00003212  6000 000E               2676                  BRA     READ_LONG
00003216                          2677  LONG_SEVEN_LOOP
00003216  13FC 0007 000035E2      2678                  MOVE.B  #7,NUMBER_OF_HEX  
0000321E  6000 0002               2679                  BRA     READ_LONG
00003222                          2680  
00003222                          2681       
00003222                          2682  READ_LONG                           
00003222  0C39 0000 000035E2      2683      CMP.B   #0,NUMBER_OF_HEX               
0000322A  6700 0014               2684      BEQ     COPYLONG
0000322E  123C 0030               2685      MOVE.B  #$30,D1             
00003232  103C 0006               2686      MOVE.B  #6,D0               
00003236  4E4F                    2687      TRAP    #15
00003238                          2688  
00003238  5339 000035E2           2689      SUBI.B  #1,NUMBER_OF_HEX               
0000323E  60E2                    2690      BRA     READ_LONG                   ; LOOP
00003240                          2691  
00003240                          2692  COPYLONG
00003240  2207                    2693      MOVE.L  D7,D1               ; COPY DATA 
00003242  143C 0010               2694      MOVE.B  #16,D2              ; USIGN BASE TO 16
00003246  103C 000F               2695      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
0000324A  4E4F                    2696      TRAP    #15
0000324C  13FC 0000 000035E2      2697      MOVE.B  #0,NUMBER_OF_HEX
00003254  6000 0002               2698      BRA  EA_FINISH
00003258                          2699  
00003258                          2700    
00003258                          2701  
00003258  4E75                    2702  EA_FINISH      RTS
0000325A                          2703  
0000325A                          2704  
0000325A                          2705  
0000325A                          2706  
0000325A                          2707  ************************************************
0000325A                          2708  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
0000325A                          2709  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
0000325A                          2710  ************************************************
0000325A                          2711  REGISTER_NUMBER_TO_DECIMAL 
0000325A  B67C 0000               2712                             CMP.W       #REG_0,D3
0000325E  6700 0046               2713                             BEQ         RG0
00003262  B67C 0001               2714                             CMP.W       #REG_1,D3
00003266  6700 0046               2715                             BEQ         RG1
0000326A  B67C 0002               2716                             CMP.W       #REG_2,D3
0000326E  6700 0046               2717                             BEQ         RG2
00003272  B67C 0003               2718                             CMP.W       #REG_3,D3
00003276  6700 0046               2719                             BEQ         RG3
0000327A  B67C 0004               2720                             CMP.W       #REG_4,D3
0000327E  6700 0046               2721                             BEQ         RG4
00003282  B67C 0005               2722                             CMP.W       #REG_5,D3
00003286  6700 0046               2723                             BEQ         RG5
0000328A  B67C 0006               2724                             CMP.W       #REG_6,D3
0000328E  6700 0046               2725                             BEQ         RG6
00003292  B67C 0007               2726                             CMP.W       #REG_7,D3
00003296  6700 0046               2727                             BEQ         RG7
0000329A  13FC 0001 000035C7      2728                             MOVE.B      #BAD_FLAG,STATE
000032A2  4EF8 2F0E               2729                             JMP         CONTINUE_EA
000032A6                          2730   
000032A6  1A3C 0000               2731  RG0    MOVE.B   #0,D5
000032AA  4EF8 2F0E               2732         JMP      Continue_EA
000032AE  1A3C 0001               2733  RG1    MOVE.B   #1,D5
000032B2  4EF8 2F0E               2734         JMP      Continue_EA
000032B6  1A3C 0002               2735  RG2    MOVE.B   #2,D5
000032BA  4EF8 2F0E               2736         JMP      Continue_EA
000032BE  1A3C 0003               2737  RG3    MOVE.B   #3,D5
000032C2  4EF8 2F0E               2738         JMP      Continue_EA
000032C6  1A3C 0004               2739  RG4    MOVE.B   #4,D5
000032CA  4EF8 2F0E               2740         JMP      Continue_EA
000032CE  1A3C 0005               2741  RG5    MOVE.B   #5,D5
000032D2  4EF8 2F0E               2742         JMP      Continue_EA
000032D6  1A3C 0006               2743  RG6    MOVE.B   #6,D5
000032DA  4EF8 2F0E               2744         JMP      Continue_EA
000032DE  1A3C 0007               2745  RG7    MOVE.B   #7,D5
000032E2  4EF8 2F0E               2746         JMP      Continue_EA 
000032E6                          2747      
000032E6                          2748  ;------------------------------------------------
000032E6                          2749      
000032E6                          2750  Float   DS.L 1 #0
000032EA                          2751  
000032EA                          2752  ValOne    DS.B 1 #0
000032EB                          2753  ValTwo    DS.B 1 #0
000032EC                          2754  ValThree    DS.B 1 #0
000032ED                          2755  ValFour    DS.B 1 #0
000032EE                          2756  ValFive    DS.B 1 #0
000032EF                          2757  ValSix    DS.B 1 #0
000032F0                          2758  ValSeven    DS.B 1 #0
000032F1                          2759  ValEight    DS.B 1 #0
000032F2                          2760  
000032F2                          2761  Addsum DS.W 1 #0
000032F4                          2762  CarryBit DS.B 1 #0   
000032F5                          2763  
000032F5                          2764  Trailers DS.B 1 #0
000032F6                          2765  Source DS.L 1 #0
000032FA                          2766  Destination DS.L 1 #0
000032FE                          2767  
000032FE                          2768          ;generic command lines
000032FE= 57 65 6C 63 6F 6D ...   2769  WELCOME             DC.B    'Welcome to our decoder!',CR,LF
00003317= 41 64 64 72 65 73 ...   2770                      DC.B    'Addresses must be exactly 8 hexadecimal characters,',CR,LF
0000334C= 54 68 65 20 45 6E ...   2771                      DC.B    'The Ending Address must be greater that Starting Address',CR,LF,0
00003387= 50 6C 65 61 73 65 ...   2772  USERPAGEBREAK       DC.B    'Please press "Enter" to see next page (25 codes)',CR,LF,0
000033BA= 41 64 64 72 65 73 ...   2773  BADVAL              DC.B    'Address value is out of range of acceptable values ',CR,LF,0
000033F0= 54 68 65 20 53 74 ...   2774  OUTOFORDER          DC.B    'The Starting Address must be less than or equal to the Ending Address',CR,LF,0
00003438= 50 6C 65 61 73 65 ...   2775  MESSAGEFIRSTADRESS  DC.B    'Please enter Starting Memory Address: ',0 
0000345F= 50 6C 65 61 73 65 ...   2776  MESSAGESECONDADRESS DC.B    'Please enter Ending Memory Address: ',0 
00003484= 59 6F 75 20 68 61 ...   2777  FINALMESSAGE1       DC.B    'You have reached the end of the program',CR,LF,0
000034AE= 50 6C 65 61 73 65 ...   2778  FINALMESSAGE2       DC.B    'Please enter 0 to exit, or 1 to restart: ',0
000034D8= 45 78 69 74 69 6E ...   2779  GOODBYEMESSAGE      DC.B    'Exiting, have a good rest of your day',CR,LF,0
00003500= 20 0D 0A 00             2780  CLEAR               DC.B    ' ',CR,LF,0
00003504                          2781  
00003504                          2782          ;the collection of actual command lines to print
00003504                          2783  CommandPrinter      DS.B 1 #0
00003505                          2784  CommandDetail       DS.B 1 #0
00003506= 4D 4F 56 45 00          2785  PMOVE               DC.B      'MOVE',0
0000350B= 4D 4F 56 45 4D 00       2786  PMOVEM              DC.B      'MOVEM',0
00003511= 4D 4F 56 45 41 00       2787  PMOVEA              DC.B      'MOVEA',0
00003517= 4D 4F 56 45 51 00       2788  PMOVEQ              DC.B      'MOVEQ',0
0000351D= 4E 4F 50 00             2789  PNOP                DC.B      'NOP',0
00003521= 4C 45 41 00             2790  PLEA                DC.B      'LEA',0
00003525= 4E 4F 54 00             2791  PNOT                DC.B      'NOT',0
00003529= 4A 53 52 00             2792  PJSR                DC.B      'JSR',0
0000352D= 52 54 53 00             2793  PRTS                DC.B      'RTS',0
00003531= 42 47 54 00             2794  PBGT                DC.B      'BGT',0
00003535= 42 45 51 00             2795  PBEQ                DC.B      'BEQ',0
00003539= 42 4C 45 00             2796  PBLE                DC.B      'BLE',0
0000353D= 42 52 41 00             2797  PBRA                DC.B      'BRA',0
00003541= 4F 52 00                2798  POR                 DC.B      'OR',0
00003544= 53 55 42 00             2799  PSUB                DC.B      'SUB',0
00003548= 41 4E 44 00             2800  PAND                DC.B      'AND',0
0000354C= 41 44 44 00             2801  PADD                DC.B      'ADD',0
00003550= 41 44 44 41 00          2802  PADDA               DC.B      'ADDA',0
00003555= 41 44 44 51 00          2803  PADDQ               DC.B      'ADDQ',0
0000355A= 4C 53 4C 00             2804  PLSL                DC.B      'LSL',0
0000355E= 4C 53 52 00             2805  PLSR                DC.B      'LSR',0
00003562= 41 53 52 00             2806  PASR                DC.B      'ASR',0
00003566= 41 53 4C 00             2807  PASL                DC.B      'ASL',0
0000356A= 52 4F 4C 00             2808  PROL                DC.B      'ROL',0
0000356E= 52 4F 52 00             2809  PROR                DC.B      'ROR',0
00003572                          2810  
00003572= 44 41 54 41 00          2811  PDATA   DC.B    'DATA',0
00003577= 49 4E 56 41 4C 49 ...   2812  PINVALIDEA  DC.B    'INVALID EA',0
00003582                          2813  
00003582= 00                      2814  INPUT   DC.B    0
00003583                          2815  
00003584= 00000000                2816  STARTINGADDRESS     DC.L 0
00003588= 00000000                2817  CURRENTADDRESS      DC.L 0
0000358C= 00000000                2818  ENDINGADDRESS       DC.L 0
00003590= 0000                    2819  CYCLECOUNTER        DC.W 0
00003592= 0000                    2820  COMMANDDATA         DC.W 0
00003594= 00                      2821  Bits                DC.B 0
00003595                          2822  
00003595                          2823          ;the sizes to print
00003596                          2824  SizeValue           DS.L 1 #0
0000359A= 2E 42 20 00             2825  PB DC.B      '.B ',0
0000359E= 2E 57 20 00             2826  PW DC.B      '.W ',0
000035A2= 2E 4C 20 00             2827  PL DC.B      '.L ',0
000035A6                          2828  
000035A6                          2829  ;----- ADDED FOR THE OP CODE PART
000035A6                          2830  
000035A6= 00                      2831  DEST_REG        DC.B    0
000035A7= 00                      2832  DEST_MODE       DC.B    0
000035A8                          2833  
000035A8= 00                      2834  SRC_MODE        DC.B    0
000035A9= 00                      2835  SRC_REG         DC.B    0
000035AA                          2836  
000035AA= 00                      2837  TEMP_MODE       DC.B    0
000035AB= 00                      2838  TEMP_REG        DC.B    0
000035AC                          2839  
000035AC                          2840  DATA_FIELD      DS.L    1 #0
000035B0= 00                      2841  SIZE            DC.B    0
000035B1                          2842  
000035B1= 20 00                   2843  CLRSPOT         DC.B    ' ',0
000035B3= 23 00                   2844  HASH            DC.B    '#',0
000035B5= 24 00                   2845  DOLLARSIGN      DC.B    '$',0
000035B7= 2C 00                   2846  COMA            DC.B    ',',0
000035B9= 2B 00                   2847  PLUS            DC.B    '+',0
000035BB= 2D 00                   2848  NEG             DC.B    '-',0
000035BD= 28 00                   2849  OPEN            DC.B    '(',0
000035BF= 29 00                   2850  CLOSED          DC.B    ')',0
000035C1                          2851  
000035C1= 00                      2852  INDEX           DC.B    0
000035C2                          2853  
000035C2= 00                      2854  XBIT            DC.B    0
000035C3= 00                      2855  INVALID_EA      DC.B    0
000035C4                          2856  
000035C4= 00                      2857  DstMode         DC.B    0
000035C5= 00                      2858  TempMode        DC.B    0
000035C6= 00                      2859  SrcMode         DC.B    0
000035C7                          2860  
000035C7                          2861  ;------ ADDED FOR EA CODE PART
000035C7                          2862  
000035C7  =00000000               2863  REG_0  EQU         %000
000035C7  =00000001               2864  REG_1  EQU         %001
000035C7  =00000002               2865  REG_2  EQU         %010
000035C7  =00000003               2866  REG_3  EQU         %011
000035C7  =00000004               2867  REG_4  EQU         %100
000035C7  =00000005               2868  REG_5  EQU         %101
000035C7  =00000006               2869  REG_6  EQU         %110
000035C7  =00000007               2870  REG_7  EQU         %111
000035C7                          2871  
000035C7  =00000000               2872  MODE000       EQU         %000                   * MODE Dn
000035C7  =00000001               2873  MODE001       EQU         %001                   * MODE An
000035C7  =00000002               2874  MODE010       EQU         %010                   * MODE (An)
000035C7  =00000003               2875  MODE011       EQU         %011                   * MODE (An)+
000035C7  =00000004               2876  MODE100       EQU         %100                   * MODE -(An)
000035C7  =00000007               2877  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
000035C7                          2878  
000035C7= 00                      2879  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
000035C8  =00000001               2880  BAD_FLAG      EQU         1
000035C8= 00008000                2881  word          DC.L        $8000
000035CC                          2882  SIZE_IL       DS.L        1             ;SIZE ISOLATION
000035D0                          2883  DR            DS.L        1             ;DIRECTION ISOLATION
000035D4                          2884  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
000035D8                          2885  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
000035DC                          2886  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
000035E0                          2887  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
000035E1                          2888  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
000035E2= 00                      2889  NUMBER_OF_HEX DC.B        0
000035E3                          2890  dRG           DS.B        1
000035E4                          2891  dMODE         DS.B        1
000035E5                          2892  sRG           DS.B        1
000035E6                          2893  
000035E6= 00000100                2894  print_buffer  DC.l       $100
000035EA                          2895  
000035EA                          2896  ******************************MOVE and MOVEA values******************
000035EA                          2897  
000035EA= 00                      2898  OpName            DC.B     $00                     * 0 = MOVE, 1 = MOVEA
000035EB                          2899  
000035EC= 0000                    2900  myWord              DC.W     $0000                   * 16 bit instruction Word
000035EE= 00                      2901  ID                DC.B     $00                     * First 4 bit value ID
000035EF= FF                      2902  DstReg            DC.B     $FF                     * Destination Register Value D3
000035F0= FF                      2903  DstMod            DC.B     $FF                     * Destination Mode Value D2
000035F1= FF                      2904  SrcReg            DC.B     $FF                     * Source Register Value D3 JUMP EA_start
000035F2= FF                      2905  SrcMod            DC.B     $FF                     * Source Register Mode D2
000035F3                          2906  
000035F4= 00000000                2907  opDta1            DC.L     $00000000               * Data value one (most likely source)
000035F8= FF                      2908  opDta1T           DC.B     $FF                     * Data value one type ($FF not set, 0=byte, 1=word, 2=long)
000035FA= 00000000                2909  opDta2            DC.L     $00000000               * Data value two (most likely destination)
000035FE= FF                      2910  opDta2T           DC.B     $FF                     * Data value two type ($FF not set, 0=byte, 1=word, 2=long)
000035FF                          2911  
000035FF= 01                      2912  Err               DC.B     $01                     * Error byte, 1 = OK, 0 = Error                 
00003600                          2913  
00003600= 2C 00                   2914  Comma             DC.B     ',', 0
00003602                          2915  
00003602                          2916  ***** ASCII VALUES FOR EA CHARACTERS**************
00003602  =00000044               2917  D                       EQU      $44
00003602  =00000041               2918  A                       EQU      $41
00003602                          2919  
00003602                          2920      
00003602                          2921      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2FF6
ADDRESS_REGISTER    2F66
ADDRESS_REGISTER_DECREMENT  2FCE
ADDRESS_REGISTER_DIRECT  2F82
ADDRESS_REGISTER_INCREMENT  2FA6
ADDSUM              32F2
ADD_NEGATIVE        3084
BADVAL              33BA
BAD_FLAG            1
BITS                3594
BYTE_ONE_LOOP       30C2
CARRYBIT            32F4
CEHCK_DESTREG       164E
CHAR1               1184
CHAR2               119C
CHARSUB             11B4
CHECK_ADD           19EC
CHECK_ADDA          1A08
CHECK_ADDQ          188C
CHECK_AND           1BB4
CHECK_DATA_NEG      2E4C
CHECK_DESTINATION   2C70
CHECK_DESTMOD       163E
CHECK_DEST_REG      2CA8
CHECK_ID_AS         2052
CHECK_ID_LS         2072
CHECK_ID_RO         2062
CHECK_JSR           180A
CHECK_LEA           16EA
CHECK_MOVE          1472
CHECK_MOVEM         17E6
CHECK_MOVEQ         1A46
CHECK_NOP_JSR_RTS   17EA
CHECK_NOP_RTS       186C
CHECK_NOT           176E
CHECK_OR            1AA4
CHECK_SOURCE        2D70
CHECK_SOURCE_REG    2DA8
CHECK_SRCMOD        1570
CHECK_SRCREG        1580
CHECK_SUB           1B32
CHECK_TEMP          2CF0
CHECK_TEMP_REG      2D28
CHECK_XBIT          2DF0
CLEAR               3500
CLEARMR             2E5E
CLOSED              35BF
CLOSINGSTATEMENTS   2C5E
CLRSPOT             35B1
CMP_SIZE            1522
COMA                35B7
COMMA               3600
COMMANDDATA         3592
COMMANDDETAIL       3505
COMMANDPRINTER      3504
COMPARE_0100        16C2
COMPARE_0110        1928
COMPARE_1101        1958
COMPARE_1110        1C42
COMPARE_GROUPS      1402
CONTINUE_A_I_A      2FFA
CONTINUE_EA         2F0E
COPYBYTE            30EC
COPYLONG            3240
COPYWORD            316A
CR                  D
CURRENTADDRESS      3588
CYCLECOUNTER        3590
D                   44
DATA_FIELD          35AC
DATA_REGISTER       2F4A
DESTINATION         32FA
DEST_MODE           35A7
DEST_REG            35A6
DMODE               35E4
DOLLARSIGN          35B5
DONE                11DE
DR                  35D0
DRG                 35E3
DRN                 35E1
DSTMOD              35F0
DSTMODE             35C4
DSTREG              35EF
DS_MOVE             14FE
DS_MOVEA            150A
DTADSTLNG           1680
DTADSTWRD           166A
DTASRCIMD           15A8
DTASRCIMDB          15D0
DTASRCIMDL          15FC
DTASRCIMDW          15E6
DTASRCLNG           1628
DTASRCWRD           1612
EA_FINISH           3258
EA_START            2EFC
EIGHT_SHIFT         2628
ENDING              1350
ENDINGADDRESS       358C
ENTRYLOOP           11CC
ERR                 35FF
ERROR               1696
EXIT                122C
FINALMESSAGE1       3484
FINALMESSAGE2       34AE
FLOAT               32E6
FORMAT_DATA         2E38
G14_MEMS            1EFA
G14_MEMS_AS         1FEC
G14_MEMS_LS         1F20
G14_MEMS_RO         1F86
G14_TYPE            35D4
GAS_EA              1EA4
GETBYTE             3066
GETLONG             307A
GETWORD             3070
GLS_EA              1D0C
GOODBYE             13B2
GOODBYEMESSAGE      34D8
GRO_EA              1DD8
G_AS                1E2E
G_LS                1C96
G_RO                1D62
HASH                35B3
ID                  35EE
IMMIDIATE_REGISTER  301E
INDEX               35C1
INPUT               3582
INT2                1164
INTSUB              117C
INVALID             11BC
INVALID_EA          35C3
IR_IL               35D8
IS_EIGHT            2636
LARGERISSUE         128A
LARGERTHAN          12A8
LF                  A
LOADDATAONE         101E
LOADDATATWO         107C
LONG_ADDRESSING     3058
LONG_FIVE_LOOP      31FE
LONG_FOUR_LOOP      31F2
LONG_ONE_LOOP       31CE
LONG_SEVEN_LOOP     3216
LONG_SIX_LOOP       320A
LONG_THREE_LOOP     31E6
LONG_TWO_LOOP       31DA
LOOP_READ_BITS      13E4
MEMORYGRABBER       12B4
MESSAGEFIRSTADRESS  3438
MESSAGESECONDADRESS  345F
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
MYDONE              16A2
MYWORD              35EC
NEG                 35BB
NUMBER_OF_HEX       35E2
OPDTA1              35F4
OPDTA1T             35F8
OPDTA2              35FA
OPDTA2T             35FE
OPEN                35BD
OPNAME              35EA
OUTOFORDER          33F0
PADD                354C
PADDA               3550
PADDQ               3555
PAGEBREAK           1320
PAND                3548
PASL                3566
PASR                3562
PB                  359A
PBEQ                3535
PBGT                3531
PBLE                3539
PBRA                353D
PDATA               3572
PINVALIDEA          3577
PJSR                3529
PL                  35A2
PLEA                3521
PLSL                355A
PLSR                355E
PLUS                35B9
PMOVE               3506
PMOVEA              3511
PMOVEM              350B
PMOVEQ              3517
PNOP                351D
PNOT                3525
POR                 3541
PRINTADD            29BA
PRINTADDA           29F4
PRINTADDQ           2812
PRINTAND            2980
PRINTB              2AF4
PRINTBEQ            2896
PRINTBGT            2876
PRINTBLE            2886
PRINTBRA            28A6
PRINTCLOSED         2B7E
PRINTCLRSPOT        2B1E
PRINTCOMA           2B2C
PRINTDOLLARSIGN     2B46
PRINTHASH           2B3A
PRINTINVALIDEA      2BC0
PRINTJSR            27BE
PRINTL              2B10
PRINTLEA            271C
PRINTMOVE           2640
PRINTMOVEA          269E
PRINTMOVEM          270C
PRINTMOVEQ          28B6
PRINTNEG            2B54
PRINTNOP            26FC
PRINTNOT            277A
PRINTOPEN           2B70
PRINTOR             290C
PRINTPLUS           2B62
PRINTRTS            2802
PRINTSUB            2946
PRINTW              2B02
PRINT_BRANCHING     308C
PRINT_BUFFER        35E6
PRINT_BYTE          30B2
PRINT_DATA          2B8C
PRINT_DN_TO_EA      2C16
PRINT_EA_TO_DN      2BCE
PRINT_LONG          3182
PRINT_WORD          3104
PROL                356A
PROR                356E
PRTS                352D
PR_AS               247C
PR_ASR              2588
PR_ASR_EA           225A
PR_ASR_MEM          20C6
PR_G14_MEMS_AS      2082
PR_G14_MEMS_LS      20FE
PR_G14_MEMS_RO      217A
PR_G_AS_EA          21F6
PR_G_LS_EA          22B0
PR_G_RO_EA          236A
PR_LS               24DA
PR_LSR              2538
PR_LSR_EA           2314
PR_LSR_MEM          2142
PR_RO               241E
PR_ROR              25D8
PR_ROR_EA           23CE
PR_ROR_MEM          21BE
PSUB                3544
PW                  359E
READ_BITS           13DA
READ_BYTE           30CE
READ_LONG           3222
READ_WORD           314C
REGISTER_NUMBER_TO_DECIMAL  325A
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2E36
RG0                 32A6
RG1                 32AE
RG2                 32B6
RG3                 32BE
RG4                 32C6
RG5                 32CE
RG6                 32D6
RG7                 32DE
R_CHECK_DEST        2CE6
R_CHECK_SOURCE      2DE6
R_CHECK_TEMP        2D66
SET                 13FA
SET_INVALID_EA      2E56
SIZE                35B0
SIZEPRINT           2A94
SIZEPRINT2          2AB8
SIZEPRINT3          2ADC
SIZESPLIT           2A66
SIZEVALUE           3596
SIZE_B              1546
SIZE_IL             35CC
SIZE_L              1562
SIZE_W              1554
SOURCE              32F6
SRCMOD              35F2
SRCMODE             35C6
SRCREG              35F1
SRC_MODE            35A8
SRC_REG             35A9
SRG                 35E5
SRN                 35E0
START               1000
STARTCHECK          114C
STARTINGADDRESS     3584
STATE               35C7
STOP                2C6A
STOREADRESSES       129C
S_COUNT             35DC
TEMPMODE            35C5
TEMP_MODE           35AA
TEMP_REG            35AB
TEMP_TO_DEST        2E02
TEMP_TO_SRC         2E1C
TRAILERS            32F5
USERPAGEBREAK       3387
VAL1                10D2
VAL2                10DC
VAL3                10EC
VAL4                10FC
VAL5                110C
VAL6                111C
VAL7                112C
VAL8                113C
VALEIGHT            32F1
VALFIVE             32EE
VALFOUR             32ED
VALONE              32EA
VALSEVEN            32F0
VALSIX              32EF
VALTHREE            32EC
VALTWO              32EB
WELCOME             32FE
WORD                35C8
WORD_ADDRESSING     304A
WORD_ONE_LOOP       3128
WORD_THREE_LOOP     3140
WORD_TWO_LOOP       3134
XBIT                35C2
