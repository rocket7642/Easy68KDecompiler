00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/8/2021 11:54:28 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 000033CB             13      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001006  103C 000E                 14      MOVE.B   #14,D0     ; moves #14 into data register D0
0000100A  4E4F                      15      TRAP     #15
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 00003176             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22  * TODO: a welcome message with format message 
0000101E                            23      
0000101E                            24  LOADDATAONE
0000101E  43F9 00003224             25      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001024  103C 000E                 26      MOVE.B   #14,D0     ; moves #14 into data register D0
00001028  4E4F                      27      TRAP     #15       ; Displays message via trap 14    
0000102A                            28      
0000102A  43F9 0000339B             29      LEA     INPUT,A1
00001030  103C 0002                 30      MOVE.B  #2,D0 *takes the string of what the user enters
00001034  4E4F                      31      TRAP    #15
00001036                            32      
00001036  4280                      33      CLR.L   D0
00001038                            34      
00001038                            35      * TODO: check if the input if odd - invalid imput
00001038                            36      
00001038                            37  
00001038                            38      
00001038  1A3C 0000                 39      MOVE.B  #0,D5
0000103C                            40      
0000103C  13D9 0000A000             41      MOVE.B (A1)+,$A000
00001042  13D9 0000A010             42      MOVE.B (A1)+,$A010
00001048  13D9 0000A020             43      MOVE.B (A1)+,$A020
0000104E  13D9 0000A030             44      MOVE.B (A1)+,$A030
00001054  13D9 0000A040             45      MOVE.B (A1)+,$A040
0000105A  13D9 0000A050             46      MOVE.B (A1)+,$A050
00001060  13D9 0000A060             47      MOVE.B (A1)+,$A060
00001066  13D9 0000A070             48      MOVE.B (A1)+,$A070
0000106C                            49      
0000106C  6000 0058                 50      BRA VAL1
00001070                            51  
00001070                            52  LOADDATATWO    
00001070  43F9 00003267             53      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001076  103C 000E                 54      MOVE.B   #14,D0     ; moves #14 into data register D0
0000107A  4E4F                      55      TRAP     #15       ; Displays message via trap 14    
0000107C                            56      
0000107C  43F9 0000339B             57      LEA     INPUT,A1
00001082  103C 0002                 58      MOVE.B  #2,D0 *takes the string of what the user enters
00001086  4E4F                      59      TRAP    #15
00001088                            60      
00001088  1A3C 0000                 61      MOVE.B  #0,D5
0000108C                            62      
0000108C  13D9 0000A000             63      MOVE.B (A1)+,$A000
00001092  13D9 0000A010             64      MOVE.B (A1)+,$A010
00001098  13D9 0000A020             65      MOVE.B (A1)+,$A020
0000109E  13D9 0000A030             66      MOVE.B (A1)+,$A030
000010A4  13D9 0000A040             67      MOVE.B (A1)+,$A040
000010AA  13D9 0000A050             68      MOVE.B (A1)+,$A050
000010B0  13D9 0000A060             69      MOVE.B (A1)+,$A060
000010B6  13D9 0000A070             70      MOVE.B (A1)+,$A070
000010BC                            71      
000010BC  43F9 00003267             72      LEA MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010C2                            73      
000010C2  6000 0002                 74      BRA VAL1
000010C6                            75  
000010C6                            76      
000010C6                            77  VAL1    
000010C6  1839 0000A000             78      MOVE.B $A000,D4
000010CC  6000 0072                 79      BRA STARTCHECK
000010D0  13C4 0000A000             80  VAL2    MOVE.B D4,$A000
000010D6  1839 0000A010             81      MOVE.B $A010,D4
000010DC  6000 0062                 82      BRA STARTCHECK
000010E0  13C4 0000A010             83  VAL3    MOVE.B D4,$A010
000010E6  1839 0000A020             84      MOVE.B $A020,D4
000010EC  6000 0052                 85      BRA STARTCHECK
000010F0  13C4 0000A020             86  VAL4    MOVE.B D4,$A020
000010F6  1839 0000A030             87      MOVE.B $A030,D4
000010FC  6000 0042                 88      BRA STARTCHECK
00001100  13C4 0000A030             89  VAL5    MOVE.B D4,$A030
00001106  1839 0000A040             90      MOVE.B $A040,D4
0000110C  6000 0032                 91      BRA STARTCHECK
00001110  13C4 0000A040             92  VAL6    MOVE.B D4,$A040
00001116  1839 0000A050             93      MOVE.B $A050,D4
0000111C  6000 0022                 94      BRA STARTCHECK
00001120  13C4 0000A050             95  VAL7    MOVE.B D4,$A050
00001126  1839 0000A060             96      MOVE.B $A060,D4
0000112C  6000 0012                 97      BRA STARTCHECK
00001130  13C4 0000A060             98  VAL8    MOVE.B D4,$A060
00001136  1839 0000A070             99      MOVE.B $A070,D4
0000113C  6000 0002                100      BRA STARTCHECK
00001140                           101    
00001140                           102  STARTCHECK  
00001140  B83C 0030                103      CMP.B   #48,D4
00001144  6D00 006A                104      BLT INVALID
00001148  B83C 0030                105      CMP.B   #48,D4
0000114C  6700 0022                106      BEQ INTSUB
00001150  B83C 0030                107      CMP.B   #48,D4
00001154  6E00 0002                108      BGT INT2
00001158                           109      
00001158                           110  
00001158                           111  INT2 
00001158                           112      
00001158  B83C 0039                113      CMP.B   #57,D4
0000115C  6D00 0012                114      BLT INTSUB
00001160  B83C 0039                115      CMP.B   #57,D4
00001164  6700 000A                116      BEQ INTSUB
00001168  B83C 0039                117      CMP.B   #57,D4
0000116C  6E00 000A                118      BGT CHAR1
00001170                           119      
00001170                           120  INTSUB 
00001170  0404 0030                121      SUB.B #$30,D4
00001174  6000 005C                122      BRA     DONE
00001178                           123  
00001178                           124  CHAR1 
00001178                           125      
00001178  B83C 0041                126      CMP.B   #65,D4
0000117C  6D00 0032                127      BLT INVALID
00001180  B83C 0041                128      CMP.B   #65,D4
00001184  6700 0022                129      BEQ CHARSUB
00001188  B83C 0041                130      CMP.B   #65,D4
0000118C  6E00 0002                131      BGT CHAR2
00001190                           132      
00001190                           133  CHAR2 
00001190                           134      
00001190  B83C 0046                135      CMP.B   #70,D4
00001194  6D00 0012                136      BLT CHARSUB
00001198  B83C 0046                137      CMP.B   #70,D4
0000119C  6700 000A                138      BEQ CHARSUB
000011A0  B83C 0046                139      CMP.B   #70,D4
000011A4  6E00 000A                140      BGT INVALID
000011A8                           141      
000011A8                           142  CHARSUB 
000011A8  0404 0037                143      SUB.B #$37,D4
000011AC  6000 0024                144      BRA DONE
000011B0                           145      
000011B0                           146  INVALID 
000011B0  43F9 000031B7            147      LEA BADVAL,A1
000011B6  103C 000E                148      MOVE.B   #14,D0     ; moves #14 into data register D0
000011BA  4E4F                     149      TRAP     #15       ; Displays message via trap 14
000011BC  6000 0002                150      BRA     ENTRYLOOP
000011C0                           151      
000011C0                           152  ENTRYLOOP
000011C0  B43C 0000                153      CMP.B #0,D2
000011C4  6700 FE58                154      BEQ LOADDATAONE
000011C8  B43C 0001                155      CMP.B #1,D2
000011CC  6700 FEA2                156      BEQ LOADDATATWO
000011D0  4E75                     157      RTS
000011D2                           158      
000011D2                           159  DONE    
000011D2  5205                     160          ADD.B #1,D5
000011D4  BA3C 0000                161          CMP.B #0,D5
000011D8  6700 FEEC                162          BEQ VAL1
000011DC  BA3C 0001                163          CMP.B #1,D5
000011E0  6700 FEEE                164          BEQ VAL2
000011E4  BA3C 0002                165          CMP.B #2,D5
000011E8  6700 FEF6                166          BEQ VAL3
000011EC  BA3C 0003                167          CMP.B #3,D5
000011F0  6700 FEFE                168          BEQ VAL4
000011F4  BA3C 0004                169          CMP.B #4,D5
000011F8  6700 FF06                170          BEQ VAL5
000011FC  BA3C 0005                171          CMP.B #5,D5
00001200  6700 FF0E                172          BEQ VAL6
00001204  BA3C 0006                173          CMP.B #6,D5
00001208  6700 FF16                174          BEQ VAL7
0000120C  BA3C 0007                175          CMP.B #7,D5
00001210  6700 FF1E                176          BEQ VAL8
00001214  BA3C 0008                177          CMP.B #8,D5
00001218  6700 0006                178          BEQ EXIT
0000121C                           179          
0000121C  6000 FF22                180          BRA     STARTCHECK
00001220                           181  
00001220                           182  
00001220                           183  
00001220  13C4 0000A070            184  EXIT    MOVE.B D4,$A070
00001226                           185      
00001226  4284                     186      CLR.L D4
00001228  D839 0000A000            187      ADD.B $A000,D4
0000122E  E98C                     188      LSL.L #4,D4
00001230  D839 0000A010            189      ADD.B $A010,D4
00001236  E98C                     190      LSL.L #4,D4
00001238  D839 0000A020            191      ADD.B $A020,D4
0000123E  E98C                     192      LSL.L #4,D4
00001240  D839 0000A030            193      ADD.B $A030,D4
00001246  E98C                     194      LSL.L #4,D4
00001248  D839 0000A040            195      ADD.B $A040,D4
0000124E  E98C                     196      LSL.L #4,D4
00001250  D839 0000A050            197      ADD.B $A050,D4
00001256  E98C                     198      LSL.L #4,D4
00001258  D839 0000A060            199      ADD.B $A060,D4
0000125E  E98C                     200      LSL.L #4,D4
00001260  D839 0000A070            201      ADD.B $A070,D4
00001266                           202      
00001266  2E04                     203      MOVE.L D4,D7
00001268  4244                     204      CLR D4
0000126A  B43C 0001                205      CMP.B #1,D2
0000126E  6700 0020                206      BEQ STOREADRESSES
00001272  2C07                     207      MOVE.L D7,D6
00001274  143C 0001                208      MOVE.B #1,D2
00001278  7A00                     209      MOVE.L #0,D5
0000127A  6000 FDF4                210      BRA LOADDATATWO
0000127E                           211      
0000127E                           212  ;---------------------------------------------------------
0000127E                           213  
0000127E                           214  LARGERISSUE
0000127E  43F9 000031E3            215      LEA     OUTOFORDER,A1
00001284  103C 000E                216      MOVE.B  #14,D0     ; moves #14 into data register D0
00001288  4E4F                     217      TRAP    #15       ; Displays message via trap 14
0000128A  7400                     218      MOVE.L  #0,D2
0000128C  6000 FD90                219      BRA     LOADDATAONE
00001290                           220  
00001290                           221  STOREADRESSES
00001290  23C7 000033A4            222      MOVE.L  D7,ENDINGADDRESS
00001296  23C6 0000339C            223      MOVE.L  D6,STARTINGADDRESS
0000129C                           224  LARGERTHAN    
0000129C  BE86                     225      CMP.L D6,D7
0000129E  6DDE                     226      BLT LARGERISSUE
000012A0  4247                     227      CLR     D7
000012A2  2C79 0000339C            228      MOVE.L   STARTINGADDRESS,A6
000012A8                           229      
000012A8                           230  MEMORYGRABBER
000012A8  43F9 00003324            231      LEA     CLEAR,A1 
000012AE  103C 000E                232      MOVE.B  #14,D0  
000012B2  4E4F                     233      TRAP    #15 
000012B4                           234  
000012B4  2879 000033A4            235      MOVE.L  ENDINGADDRESS,A4
000012BA  BDCC                     236      CMPA.L  A4,A6
000012BC  6C00 0066                237      BGE     ENDING 
000012C0                           238      
000012C0  0C79 0019 000033A8       239      CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
000012C8  6C00 0038                240      BGE     PAGEBREAK
000012CC  5279 000033A8            241      ADD.W   #1,CYCLECOUNTER
000012D2                           242  
000012D2  4EB9 00002CD2            243      JSR CLEARMR     * CLEAR MODES AND REGISTERS
000012D8                           244      
000012D8  23CE 000033A0            245      MOVE.L      A6,CURRENTADDRESS   
000012DE  2239 000033A0            246      MOVE.L      CURRENTADDRESS,D1
000012E4  143C 0010                247      MOVE.B      #16,D2
000012E8  103C 000F                248      MOVE.B      #15,D0     ; moves #14 into data register D0
000012EC  4E4F                     249      TRAP        #15  
000012EE                           250      
000012EE  4EB9 0000299A            251      JSR     PRINTCLRSPOT      * print space
000012F4                           252      
000012F4  361E                     253      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012F6  33C3 000033AA            254      MOVE.W      D3, COMMANDDATA
000012FC                           255   
000012FC  6000 00B4                256      BRA         COMPARE_GROUPS
00001300                           257      
00001300  60A6                     258      BRA MEMORYGRABBER
00001302                           259      
00001302                           260  PAGEBREAK
00001302  43F9 0000318F            261      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
00001308  103C 000E                262      MOVE.B   #14,D0     ; moves #14 into data register D0
0000130C  4E4F                     263      TRAP     #15       ; Displays message via trap 14
0000130E  43F9 0000339B            264      LEA     INPUT,A1
00001314  103C 0002                265      MOVE.B  #2,D0 *takes the string of what the user enters
00001318  4E4F                     266      TRAP    #15
0000131A  33FC 0000 000033A8       267      MOVE.W #0,CYCLECOUNTER
00001322  6084                     268      BRA MEMORYGRABBER
00001324                           269   
00001324                           270  ENDING 
00001324  33FC 0000 000033A8       271      MOVE.W #0,CYCLECOUNTER
0000132C  43F9 000032A8            272      LEA     FINALMESSAGE1,A1     * Prints End of Program message
00001332  103C 000E                273      MOVE.B  #14,D0
00001336  4E4F                     274      TRAP    #15
00001338  43F9 000032D2            275      LEA     FINALMESSAGE2,A1     * Prints End of Program message
0000133E  103C 000E                276      MOVE.B  #14,D0
00001342  4E4F                     277      TRAP    #15
00001344  43F9 0000339B            278      LEA     INPUT,A1
0000134A  103C 0005                279      MOVE.B  #5,D0 *takes the single charater the user enters
0000134E  4E4F                     280      TRAP    #15
00001350  B23C 0031                281      CMP.B #49,D1
00001354  6700 FCAA                282      BEQ START
00001358  B23C 0030                283      CMP.B #48,D1
0000135C  6700 0010                284      BEQ GOODBYE
00001360  43F9 000031B7            285      LEA     BADVAL,A1     * Prints End of Program message
00001366  103C 000E                286      MOVE.B  #14,D0
0000136A  4E4F                     287      TRAP    #15
0000136C  60B6                     288      BRA ENDING
0000136E                           289  
0000136E                           290  GOODBYE
0000136E  43F9 000033CB            291      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001374  103C 000E                292      MOVE.B   #14,D0     ; moves #14 into data register D0
00001378  4E4F                     293      TRAP     #15  
0000137A  43F9 000032FC            294      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
00001380  103C 000E                295      MOVE.B  #14,D0
00001384  4E4F                     296      TRAP    #15
00001386  FFFF FFFF                297      SIMHALT             ; halt simulator   
0000138A                           298      
0000138A                           299  ;-------------------------- OP CODE SECTION -------------------------------
0000138A                           300  
0000138A                           301  READ_BITS
0000138A  4287                     302      CLR.L   D7
0000138C  4284                     303      CLR.L   D4
0000138E  1E39 000033AC            304      MOVE.B  Bits,D7
00001394                           305      
00001394                           306  LOOP_READ_BITS    
00001394  BE3C 0000                307      CMP.B   #0,D7           * counter
00001398  6700 18DE                308      BEQ     RETURN
0000139C                           309      
0000139C  E34C                     310      LSL.W   #1,D4           * make space for new bit
0000139E  E34B                     311      LSL.W   #1,D3          
000013A0                           312  
000013A0  6500 0008                313      BCS     SET             * if 1, then branch to SET
000013A4  5307                     314      SUBI.B  #1,D7          
000013A6  4EF8 1394                315      JMP     LOOP_READ_BITS
000013AA                           316  SET
000013AA  5244                     317      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013AC  5307                     318      SUBI.B  #1, D7
000013AE  4EF8 1394                319      JMP     LOOP_READ_BITS  
000013B2                           320      
000013B2                           321  
000013B2                           322  
000013B2                           323  COMPARE_GROUPS              * comapres the 4 bits of the instruction
000013B2  13FC 0004 000033AC       324      MOVE.B  #4,Bits         
000013BA  4EB8 138A                325      JSR     READ_BITS       * get the first 4 bits and store it in D4
000013BE                           326  
000013BE  B87C 0001                327      CMP.W   #%0001,D4      
000013C2  6700 005E                328      BEQ     CHECK_MOVE    * if equal, goes to CHECK_MOVE.B
000013C6                           329      
000013C6  B87C 0002                330      CMP.W   #%0010,D4      
000013CA  6700 0056                331      BEQ     CHECK_MOVE    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
000013CE                           332      
000013CE  B87C 0003                333      CMP.W   #%0011,D4      
000013D2  6700 004E                334      BEQ     CHECK_MOVE    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
000013D6                           335      
000013D6  B87C 0004                336      CMP.W   #%0100,D4      
000013DA  6700 02DA                337      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
000013DE                           338      
000013DE  B87C 0005                339      CMP.W   #%0101,D4      
000013E2  6700 0576                340      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
000013E6                           341      
000013E6  B87C 0006                342      CMP.W   #%0110,D4      
000013EA  6700 05F2                343      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
000013EE                           344      
000013EE  B87C 0007                345      CMP.W   #%0111,D4      
000013F2  6700 06DC                346      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
000013F6                           347      
000013F6  B87C 0008                348      CMP.W   #%1000,D4      
000013FA  6700 0732                349      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
000013FE                           350      
000013FE  B87C 0009                351      CMP.W   #%1001,D4      
00001402  6700 07A0                352      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
00001406                           353      
00001406  B87C 000C                354      CMP.W   #%1100,D4      
0000140A  6700 0810                355      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
0000140E                           356      
0000140E  B87C 000D                357      CMP.W   #%1101,D4      
00001412  6700 05FA                358      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
00001416                           359      
00001416  B87C 000E                360      CMP.W   #%1110,D4      
0000141A  6700 0878                361      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
0000141E                           362      
0000141E  6600 1886                363      BNE     PRINT_DATA      * all other instructions are not supported 
00001422                           364  
00001422                           365  *************************************MOVE MOVEA*************************
00001422                           366  
00001422                           367  CHECK_MOVE
00001422                           368  
00001422  33F9 000033AA 000033FE   369      MOVE.W COMMANDDATA, myWord  * grab 16 bit instruction from main           
0000142C                           370      
0000142C                           371      * grab ID (first 4 bits), use D3, D4 as temp
0000142C  3639 000033FE            372      MOVE.W  myWord, D3                  
00001432  183C 000C                373      MOVE.B  #12,D4
00001436  E86B                     374      LSR.W   D4,D3                       
00001438  13C3 00003400            375      MOVE.B  D3, ID
0000143E                           376  
0000143E                           377      * grab DestReg (next 3 bits)
0000143E  3639 000033FE            378      MOVE.W  myWord, D3
00001444  183C 0004                379      MOVE.B  #4, D4
00001448  E96B                     380      LSL.W   D4, D3                     
0000144A  183C 000D                381      MOVE.B  #13,D4
0000144E  E86B                     382      LSR.W   D4,D3                       
00001450  13C3 00003401            383      MOVE.B  D3, DstReg
00001456                           384  
00001456                           385      * grab DestMod (next 3 bits)
00001456  3639 000033FE            386      MOVE.W  myWord, D3                  
0000145C  183C 0007                387      MOVE.B  #7, D4
00001460  E96B                     388      LSL.W   D4, D3                      
00001462  183C 000D                389      MOVE.B  #13,D4
00001466  E86B                     390      LSR.W   D4,D3                       
00001468  13C3 00003402            391      MOVE.B  D3, DstMod
0000146E                           392  
0000146E                           393      * grab SrcReg (next 3 bits)
0000146E  3639 000033FE            394      MOVE.W  myWord, D3                  
00001474  183C 000A                395      MOVE.B  #10, D4
00001478  E96B                     396      LSL.W   D4, D3                      
0000147A  183C 000D                397      MOVE.B  #13,D4
0000147E  E86B                     398      LSR.W   D4,D3                       
00001480  13C3 00003404            399      MOVE.B  D3, SrcMod
00001486                           400      
00001486                           401      * grab SrcMod (next 3 bits)
00001486  3639 000033FE            402      MOVE.W  myWord, D3                  
0000148C  183C 000D                403      MOVE.B  #13, D4
00001490  E96B                     404      LSL.W   D4, D3                      
00001492  183C 000D                405      MOVE.B  #13,D4
00001496  E86B                     406      LSR.W   D4,D3                       
00001498  13C3 00003403            407      MOVE.B  D3, SrcReg
0000149E                           408  
0000149E                           409  
0000149E                           410      * check if MOVE or MOVEA using DestMod
0000149E  0C39 0001 00003402       411      CMP.B   #1, DstMod                  * DestMod == 1: MOVEA
000014A6  6700 0012                412      BEQ     DS_MOVEA                  
000014AA  6000 0002                413      BRA     DS_MOVE                     * Else: MOVE
000014AE                           414      
000014AE                           415  DS_MOVE        
000014AE  13FC 0000 000033FC       416      MOVE.B  #0,OpName                   * OpName = 0 for MOVE
000014B6  6000 001A                417      BRA     CMP_SIZE
000014BA                           418  
000014BA                           419  DS_MOVEA        
000014BA  0C39 0001 00003400       420      CMP.B   #1, ID
000014C2  6700 0182                421      BEQ     ERROR                       * MOVEA cannot have ID = 1
000014C6  13FC 0001 000033FC       422      MOVE.B  #01,OpName                  * OpName = 1 for MOVEA
000014CE  6000 0002                423      BRA     CMP_SIZE
000014D2                           424      
000014D2                           425  CMP_SIZE   
000014D2  0C39 0001 00003400       426      CMP.B   #1, ID                    
000014DA  6700 001A                427      BEQ     SIZE_B
000014DE  0C39 0003 00003400       428      CMP.B   #3, ID                    
000014E6  6700 001C                429      BEQ     SIZE_W
000014EA  0C39 0002 00003400       430      CMP.B   #2, ID                   
000014F2  6700 001E                431      BEQ     SIZE_L
000014F6                           432      
000014F6                           433  
000014F6                           434  SIZE_B        
000014F6  23FC 00000001 000033AE   435      MOVE.L  #1,SizeValue                 * Set size to 1=Byte
00001500  6000 001E                436      BRA     CHECK_SRCMOD
00001504                           437      
00001504                           438  SIZE_W         
00001504  23FC 00000002 000033AE   439      MOVE.L  #2,SizeValue                 * Set size to 2=Word
0000150E  6000 0010                440      BRA     CHECK_SRCMOD
00001512                           441      
00001512                           442  SIZE_L         
00001512  23FC 00000003 000033AE   443      MOVE.L  #3,SizeValue                 * Set size to 3=Long
0000151C  6000 0002                444      BRA     CHECK_SRCMOD
00001520                           445  
00001520                           446  CHECK_SRCMOD
00001520  0C39 0007 00003404       447      CMP.B   #7, SrcMod                * Check if source mode is 7
00001528  6700 0006                448      BEQ     CHECK_SRCREG              * Check source register
0000152C  6000 00C0                449      BRA     CHECK_DESTMOD             * Source not 7, now check destination Mod
00001530                           450      
00001530                           451  CHECK_SRCREG    
00001530  0C39 0000 00003403       452      CMP.B   #0, SrcReg                * Check is source register is 0
00001538  6700 0088                453      BEQ     DtaSrcWrd                 * Load next word
0000153C  0C39 0001 00003403       454      CMP.B   #1, SrcReg                * Check if source register is 1
00001544  6700 0092                455      BEQ     DtaSrcLng                 * Load next long
00001548  0C39 0004 00003403       456      CMP.B   #4, SrcReg                * Check if source register is 4 (immediate value)
00001550  6700 0006                457      BEQ     DtaSrcImd                 * Load first word into word one
00001554  6000 00F0                458      BRA     ERROR                     * Invalid register value
00001558                           459  
00001558                           460  DtaSrcImd    
00001558  0C39 0001 00003400       461      CMP.B   #1, ID                    * ID = 1 - size is byte
00001560  6700 001E                462      BEQ     DtaSrcImdB                * Load next byte
00001564  0C39 0002 00003400       463      CMP.B   #2, ID                    * ID = 2 - size is word
0000156C  6700 0028                464      BEQ     DtaSrcImdW                * Load next word
00001570  0C39 0003 00003400       465      CMP.B   #3, ID                    * ID = 3 - size is long
00001578  6700 0032                466      BEQ     DtaSrcImdL                * Load next long
0000157C  6000 00C8                467      BRA     ERROR                     * Invalid opID (this should never happen)  
00001580                           468      
00001580                           469      
00001580                           470  DtaSrcImdB   
00001580  4283                     471      CLR.L   D3
00001582  361A                     472      MOVE.W  (A2)+,D3
00001584  23C3 00003406            473      MOVE.L  D3,opDta1
0000158A  13FC 0003 0000340A       474      MOVE.B  #3, opDta1T               * Set Data 1 type as 0=Byte
00001592  6000 005A                475      BRA     CHECK_DESTMOD             * Check destination mode
00001596                           476  
00001596                           477  DtaSrcImdW  
00001596  4283                     478      CLR.L   D3
00001598  361A                     479      MOVE.W  (A2)+,D3
0000159A  23C3 00003406            480      MOVE.L  D3,opDta1
000015A0  13FC 0003 0000340A       481      MOVE.B  #3, opDta1T               * Set Data 1 type as 1=Word
000015A8  6000 0044                482      BRA     CHECK_DESTMOD             * Check destination mode
000015AC                           483  
000015AC                           484  DtaSrcImdL   
000015AC  4283                     485      CLR.L   D3
000015AE  261A                     486      MOVE.L  (A2)+,D3
000015B0  23C3 00003406            487      MOVE.L  D3,opDta1
000015B6  13FC 0003 0000340A       488      MOVE.B  #3, opDta1T               * Set Data 1 type as 2=Long
000015BE  6000 002E                489      BRA     CHECK_DESTMOD             * Check destination mode
000015C2                           490  
000015C2                           491  DtaSrcWrd    
000015C2  4283                     492      CLR.L   D3
000015C4  361A                     493      MOVE.W  (A2)+,D3
000015C6  23C3 00003406            494      MOVE.L  D3,opDta1
000015CC  13FC 0001 0000340A       495      MOVE.B  #1, opDta1T               * Set Data 1 type as 1=Word
000015D4  6000 0018                496      BRA     CHECK_DESTMOD             * Check destination mode
000015D8                           497  
000015D8                           498  DtaSrcLng                        
000015D8  4283                     499      CLR.L   D3
000015DA  261A                     500      MOVE.L  (A2)+,D3
000015DC  23C3 00003406            501      MOVE.L  D3,opDta1
000015E2  13FC 0002 0000340A       502      MOVE.B  #2, opDta1T               * Set Data 1 type as 2=Long
000015EA  6000 0002                503      BRA     CHECK_DESTMOD             * Check destination mode
000015EE                           504  
000015EE                           505  CHECK_DESTMOD
000015EE  0C39 0007 00003402       506      CMP.B   #7, DstMod                * Check if destination mode is 7
000015F6  6700 0006                507      BEQ     CEHCK_DESTREG             * Check destination register
000015FA  6000 0054                508      BRA     myDONE                      * Destination not 7, done with data
000015FE                           509                      
000015FE                           510  CEHCK_DESTREG    
000015FE  0C39 0000 00003401       511      CMP.B   #0, DstReg                * Check if destination register is 0
00001606  6700 0012                512      BEQ     DtaDstWrd                 * Load next word
0000160A  0C39 0001 00003401       513      CMP.B   #1, DstReg                * Check if destination register is 1
00001612  6700 001C                514      BEQ     DtaDstLng                 * Load next long
00001616  6000 002E                515      BRA     ERROR                     * Invalid registration Mode
0000161A                           516  
0000161A                           517  DtaDstWrd    
0000161A  4283                     518      CLR.L   D3
0000161C  361A                     519      MOVE.W  (A2)+,D3
0000161E  23C3 0000340C            520      MOVE.L  D3,opDta2
00001624  13FC 0001 00003410       521      MOVE.B  #1, opDta2T               * Set Data2 type as 1=Word
0000162C  6000 0022                522      BRA     myDONE
00001630                           523      
00001630                           524  DtaDstLng    
00001630  4283                     525      CLR.L   D3
00001632  261A                     526      MOVE.L  (A2)+,D3
00001634  23C3 0000340C            527      MOVE.L  D3,opDta2
0000163A  13FC 0002 00003410       528      MOVE.B  #2, opDta2T               * Set Data2 type as 2=Long
00001642  6000 000C                529      BRA     myDONE
00001646                           530  
00001646                           531  ERROR
00001646  13FC 0000 00003411       532      MOVE.B  #0, ERR                  * Error 1 = A-OK; 0 = Invalid EA
0000164E  4E75                     533      RTS
00001650                           534  
00001650                           535  myDONE
00001650  13FC 0001 00003411       536       MOVE.B  #1, ERR                 * Clear error flag
00001658  0C39 0000 000033FC       537       CMP.B   #0, OpName              * 0 = OpName for MOVE
00001660  43F9 0000332A            538       LEA PMOVE,A1
00001666  103C 000E                539        MOVE.B   #14,D0                 ; moves #14 into data register D0
0000166A  4E4F                     540        TRAP     #15                    ; Displays message via trap 14
0000166C  0C39 0001 000033FC       541       CMP.B   #1, OpName              * 1 = OpName for MOVEA
00001674  6700 0F54                542       BEQ     PRINTMOVEA
00001678  4EB9 000028E2            543       JSR     SIZESPLIT               * Print size, variable SizeValue has to be set
0000167E                           544       
0000167E                           545       * EA Part
0000167E  4242                     546       CLR     D2                      * Source to EA
00001680  4243                     547       CLR     D3
00001682  3439 00003404            548       MOVE.W  SrcMod, D2              **************PROBLEM****************
00001688  1639 00003403            549       MOVE.B  SrcReg, D3
0000168E  4EB9 00002D2C            550       JSR     EA_start
00001694                           551       
00001694  43F9 00003412            552       LEA     Comma, A1                * Print comma
0000169A  103C 000E                553       MOVE.B  #14, D0
0000169E  4E4F                     554       TRAP    #15
000016A0                           555       
000016A0  4242                     556       CLR     D2                       * Destination to EA
000016A2  4243                     557       CLR     D3
000016A4  3439 00003402            558       MOVE.W  DstMod, D2
000016AA  3639 00003401            559       MOVE.W  DstReg, D3
000016B0  4EB9 00002D2C            560       JSR     EA_start
000016B6                           561       
000016B6                           562       
000016B6                           563  
000016B6                           564  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
000016B6                           565  
000016B6                           566  COMPARE_0100
000016B6  0803 000C                567      BTST.L  #$0C,D3             * compare bit 8 for LEA
000016BA  6600 0032                568      BNE     CHECK_LEA
000016BE                           569      
000016BE  13FC 0004 000033AC       570      MOVE.B  #4,Bits
000016C6  4EB8 138A                571      JSR     READ_BITS
000016CA                           572      
000016CA  B87C 0006                573      CMP.W   #%0110,D4
000016CE  6700 00AA                574      BEQ     CHECK_NOT           * goes to NOT
000016D2                           575      
000016D2  B87C 0008                576      CMP.W   #%1000,D4
000016D6  6700 0126                577      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
000016DA                           578      
000016DA  B87C 000C                579      CMP.W   #%1100,D4       
000016DE  6700 01CC                580      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
000016E2                           581      
000016E2  B87C 000E                582      CMP.W   #%1110,D4
000016E6  6700 01CC                583      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
000016EA                           584      
000016EA  6600 15BA                585      BNE     PRINT_DATA
000016EE                           586  
000016EE                           587  CHECK_LEA
000016EE  13FC 0003 000033AC       588      MOVE.B  #3,Bits  
000016F6  4EB8 138A                589      JSR     READ_BITS 
000016FA  13C4 000033BE            590      MOVE.B  D4,DEST_REG  
00001700                           591  
00001700  13FC 0003 000033AC       592      MOVE.B  #3,Bits
00001708  4EB8 138A                593      JSR     READ_BITS
0000170C  B83C 0007                594      CMP.B   #7,D4               * if mode = 111 = continue
00001710  6600 1594                595      BNE     PRINT_DATA
00001714                           596  
00001714  13FC 0003 000033AC       597      MOVE.B  #3,Bits
0000171C  4EB8 138A                598      JSR     READ_BITS 
00001720  13C4 000033C0            599      MOVE.B  D4,SRC_MODE           
00001726                           600  
00001726  13FC 0003 000033AC       601      MOVE.B  #3,Bits 
0000172E  4EB8 138A                602      JSR     READ_BITS 
00001732  13C4 000033C1            603      MOVE.B  D4,SRC_REG 
00001738                           604      
00001738                           605      *MOVE.B  #3,CmdIndex         
00001738  4EB9 00002BB2            606      JSR     CHECK_SOURCE                * Check Source Mode
0000173E                           607      
0000173E  0C39 000F 000033D8       608      CMP.B   #$F,SrcMode         * If SrcMode is invalid
00001746  6700 155E                609      BEQ     PRINT_DATA
0000174A                           610      
0000174A  0C39 0002 000033D8       611      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
00001752  6700 0EB2                612      BEQ     PRINTLEA        
00001756                           613      
00001756  0C39 0007 000033D8       614      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
0000175E  6700 0EA6                615      BEQ     PRINTLEA    
00001762                           616      
00001762  0C39 0008 000033D8       617      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
0000176A  6700 0E9A                618      BEQ     PRINTLEA
0000176E                           619              
0000176E  13FC 0001 000033D5       620      MOVE.B  #1,INVALID_EA   
00001776  6000 0E8E                621      BRA     PRINTLEA    
0000177A                           622      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
0000177A                           623  
0000177A                           624      
0000177A                           625  CHECK_NOT 
0000177A                           626      * TODO : TEST
0000177A  13FC 0002 000033AC       627      MOVE.B  #2,Bits             
00001782  4EB8 138A                628      JSR     READ_BITS             
00001786  13C4 000033C8            629      MOVE.B  D4,SIZE              * Stores size 
0000178C                           630      
0000178C  B83C 0003                631      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
00001790  6700 1514                632      BEQ     PRINT_DATA          * Else, If 11 size invalid
00001794                           633      
00001794  13FC 0003 000033AC       634      MOVE.B  #3,Bits       
0000179C  4EB8 138A                635      JSR     READ_BITS       
000017A0  13C4 000033BF            636      MOVE.B  D4,DEST_MODE             
000017A6                           637  
000017A6  13FC 0003 000033AC       638      MOVE.B  #3,Bits       
000017AE  4EB8 138A                639      JSR     READ_BITS
000017B2  13C4 000033BE            640      MOVE.B  D4,DEST_REG             
000017B8                           641      
000017B8                           642      *MOVE.B  #2,CmdIndex 
000017B8  4EB9 00002AB2            643      JSR     CHECK_DESTINATION               * Check Destination Mode
000017BE                           644  
000017BE  0C39 000F 000033D6       645      CMP.B   #$F,DstMode         * If DstMode is invalid
000017C6  6700 14DE                646      BEQ     PRINT_DATA      
000017CA                           647  
000017CA  0C39 000E 000033D6       648      CMP.B   #$E,DstMode         * If DstMode is invalid EA
000017D2  13FC 0001 000033D5       649      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000017DA                           650      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000017DA                           651  
000017DA  0C39 0001 000033D6       652      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
000017E2  13FC 0001 000033D5       653      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000017EA                           654      
000017EA  0C39 000B 000033D6       655      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
000017F2  13FC 0001 000033D5       656      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000017FA  6000 0E50                657      BRA     PRINTNOT
000017FE                           658  
000017FE                           659  CHECK_MOVEM_1000 
000017FE                           660      * TODO : TEST WITH EA 
000017FE  13FC 0001 000033AC       661      MOVE.B  #1,Bits
00001806  4EB8 138A                662      JSR     READ_BITS
0000180A  B83C 0001                663      CMP.B   #%1,D4
0000180E  6600 1496                664      BNE     PRINT_DATA
00001812                           665      
00001812  13FC 0001 000033AC       666      MOVE.B  #1,Bits
0000181A  4EB8 138A                667      JSR     READ_BITS
0000181E  13C4 000033C8            668      MOVE.B  D4,SIZE
00001824                           669      
00001824                           670    *  JSR     SETSIZE1
00001824                           671  
00001824  13FC 0003 000033AC       672      MOVE.B  #3,Bits
0000182C  4EB8 138A                673      JSR     READ_BITS
00001830  13C4 000033C2            674      MOVE.B  D4,TEMP_MODE
00001836                           675      
00001836  13FC 0003 000033AC       676      MOVE.B  #3,Bits
0000183E  4EB8 138A                677      JSR     READ_BITS
00001842  13C4 000033C3            678      MOVE.B  D4,TEMP_REG
00001848                           679      
00001848  4EB9 00002B32            680      JSR     CHECK_TEMP
0000184E  4EB9 00002C32            681      JSR     CHECK_XBIT
00001854                           682      
00001854  0C39 000F 000033D7       683      CMP.B   #$F,TempMode        * If TempMode is invalid
0000185C  6700 1448                684      BEQ     PRINT_DATA              * Print DATA instead
00001860                           685  
00001860  0C39 000E 000033D7       686      CMP.B   #$E,TempMode        * If TempMode is invalid EA
00001868                           687    *  BEQ     SETINVEA           * 
00001868  13FC 0001 000033D5       688      MOVE.B  #1,INVALID_EA
00001870                           689     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001870                           690  
00001870  0C39 0002 000033D7       691      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
00001878  6700 0D76                692      BEQ     PRINTMOVEM              
0000187C                           693  
0000187C  0C39 0007 000033D7       694      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
00001884  6700 0D6A                695      BEQ     PRINTMOVEM   
00001888                           696  
00001888  0C39 0008 000033D7       697      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
00001890  6700 0D5E                698      BEQ     PRINTMOVEM   
00001894                           699                 
00001894  0C39 0004 000033D6       700      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
0000189C  6700 0D52                701      BEQ     PRINTMOVEM   
000018A0                           702  
000018A0  0C39 0003 000033D8       703      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
000018A8  6700 0D46                704      BEQ     PRINTMOVEM   
000018AC                           705     * BRA     SETINVEA
000018AC                           706      
000018AC                           707  CHECK_MOVEM_1100     
000018AC  13FC 0001 000033D4       708      MOVE.B      #1,XBIT
000018B4                           709      
000018B4                           710  
000018B4                           711  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
000018B4  13FC 0002 000033AC       712      MOVE.B  #2,Bits
000018BC  4EB8 138A                713      JSR     READ_BITS
000018C0                           714      
000018C0  B83C 0002                715      CMP.B   #%10,D4
000018C4  6700 000E                716      BEQ     CHECK_JSR           * goes to JSR
000018C8                           717      
000018C8  B83C 0001                718      CMP.B   #%01,D4 
000018CC  6700 006C                719      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
000018D0                           720  
000018D0  6600 13D4                721      BNE     PRINT_DATA
000018D4                           722  
000018D4                           723  CHECK_JSR       * TODO: TEST
000018D4                           724  
000018D4  13FC 0003 000033AC       725      MOVE.B  #3,Bits
000018DC  4EB8 138A                726      JSR     READ_BITS
000018E0  13C4 000033BF            727      MOVE.B  D4,DEST_MODE
000018E6                           728      
000018E6  13FC 0003 000033AC       729      MOVE.B  #3,Bits
000018EE  4EB8 138A                730      JSR     READ_BITS
000018F2  13C4 000033BE            731      MOVE.B  D4,DEST_REG
000018F8                           732      
000018F8                           733      *MOVE.B  #4,INDEX
000018F8  4EB9 00002AB2            734      JSR     CHECK_DESTINATION
000018FE                           735      
000018FE  0C39 000F 000033D6       736      CMP.B   #$F,DstMode         * if invalid print DATA
00001906  6700 139E                737      BEQ     PRINT_DATA
0000190A                           738      
0000190A  0C39 0002 000033D6       739      CMP.B   #$2,DstMode         * if DstMode 010        
00001912  6700 0D64                740      BEQ     PRINTJSR
00001916                           741      
00001916  0C39 0007 000033D6       742      CMP.B   #$7,DstMode         * if DstMode 111 + 000
0000191E  6700 0D58                743      BEQ     PRINTJSR
00001922                           744      
00001922  0C39 0008 000033D6       745      CMP.B   #$8,DstMode         * if DstMode 111 + 001
0000192A  6700 0D4C                746      BEQ     PRINTJSR
0000192E                           747      
0000192E  13FC 0001 000033D5       748      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
00001936                           749      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001936  6000 0D40                750      BRA     PRINTJSR
0000193A                           751      
0000193A                           752  CHECK_NOP_RTS
0000193A  13FC 0006 000033AC       753      MOVE.B  #6,Bits
00001942  4EB8 138A                754      JSR     READ_BITS
00001946                           755      
00001946  B83C 0031                756      CMP.B   #%110001,D4
0000194A  6700 0C94                757      BEQ     PRINTNOP            
0000194E                           758      
0000194E  B83C 0035                759      CMP.B   #%110101,D4
00001952  6700 0D50                760      BEQ     PRINTRTS       
00001956                           761          
00001956  6600 134E                762      BNE     PRINT_DATA
0000195A                           763  
0000195A                           764  ************************** ADDQ ***************************
0000195A                           765  CHECK_ADDQ
0000195A  13FC 0003 000033AC       766      MOVE.B  #3,Bits 
00001962  4EB8 138A                767      JSR     READ_BITS
00001966  13C4 000033C4            768      MOVE.B  D4,DATA_FIELD
0000196C                           769      
0000196C  4EB9 00002C7A            770      JSR     FORMAT_DATA     
00001972                           771      
00001972  13FC 0001 000033AC       772      MOVE.B  #1,Bits
0000197A  4EB8 138A                773      JSR     READ_BITS
0000197E  B83C 0000                774      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
00001982  6600 1322                775      BNE     PRINT_DATA          * goes to PRINT_DATA
00001986                           776  
00001986  13FC 0002 000033AC       777      MOVE.B  #2,Bits
0000198E  4EB8 138A                778      JSR     READ_BITS
00001992  13C4 000033C8            779      MOVE.B  D4,SIZE             * store size into SIZE
00001998  0C39 0003 000033C8       780      CMP.B   #%11,SIZE           * cannot be #%11
000019A0  6700 1304                781      BEQ     PRINT_DATA
000019A4                           782  
000019A4  13FC 0003 000033AC       783      MOVE.B  #3,Bits
000019AC  4EB8 138A                784      JSR     READ_BITS
000019B0  13C4 000033BF            785      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
000019B6                           786      
000019B6  13FC 0003 000033AC       787      MOVE.B  #3,Bits
000019BE  4EB8 138A                788      JSR     READ_BITS
000019C2  13C4 000033BE            789      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
000019C8                           790      
000019C8  4EB9 00002AB2            791      JSR     CHECK_DESTINATION    
000019CE                           792      
000019CE  0C39 000F 000033BF       793      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
000019D6  6700 12CE                794      BEQ     PRINT_DATA         
000019DA                           795      
000019DA                           796   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
000019DA                           797   *   BEQ     INVALID_EA          * TODO 
000019DA                           798      
000019DA                           799   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
000019DA                           800   *   BEQ     INVALID_EA         * TODO
000019DA                           801      
000019DA  6000 0CD8                802      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
000019DE                           803  
000019DE                           804  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
000019DE                           805  COMPARE_0110  * TODO : store condition and 8-bit displacement 
000019DE  13FC 0004 000033AC       806      MOVE.B  #4,Bits 
000019E6  4EB8 138A                807      JSR     READ_BITS
000019EA                           808      
000019EA  B83C 000E                809      CMP.B   #%1110,D4
000019EE  6700 0D10                810      BEQ     PRINTBGT 
000019F2                           811      
000019F2  B83C 000F                812      CMP.B   #%1111,D4
000019F6  6700 0D34                813      BEQ     PRINTBLE 
000019FA                           814      
000019FA  B83C 0007                815      CMP.B   #%0111,D4
000019FE  6700 0D16                816      BEQ     PRINTBEQ  
00001A02                           817      
00001A02  B83C 0000                818      CMP.B   #%0000,D4
00001A06  6700 0D3A                819      BEQ     PRINTBRA
00001A0A                           820      
00001A0A  6000 129A                821      BRA     PRINT_DATA 
00001A0E                           822  
00001A0E                           823  ************************** ADD, ADDA **********************
00001A0E                           824  COMPARE_1101    * ADD and ADDA 
00001A0E  13FC 0003 000033AC       825      MOVE.B  #3,Bits
00001A16  4EB8 138A                826      JSR     READ_BITS
00001A1A  13C4 000033C3            827      MOVE.B  D4,TEMP_REG
00001A20  13C4 000033BE            828      MOVE.B  D4,DEST_REG
00001A26                           829      
00001A26  13FC 0001 000033AC       830      MOVE.B  #1,Bits
00001A2E  4EB8 138A                831      JSR     READ_BITS
00001A32  13C4 000033D4            832      MOVE.B  D4,XBit
00001A38                           833      
00001A38  13FC 0002 000033AC       834      MOVE.B  #2,Bits
00001A40  4EB8 138A                835      JSR     READ_BITS
00001A44  13C4 000033C8            836      MOVE.B  D4,SIZE
00001A4A                           837  
00001A4A  4EB9 00002C32            838      JSR     CHECK_XBIT
00001A50                           839  
00001A50  13FC 0003 000033AC       840      MOVE.B  #3,Bits
00001A58  4EB8 138A                841      JSR     READ_BITS
00001A5C  13C4 000033C2            842      MOVE.B  D4,TEMP_MODE
00001A62                           843      
00001A62  13FC 0003 000033AC       844      MOVE.B  #3,Bits
00001A6A  4EB8 138A                845      JSR     READ_BITS
00001A6E  13C4 000033C3            846      MOVE.B  D4,TEMP_REG   
00001A74                           847      
00001A74  4EB9 00002B32            848      JSR     CHECK_TEMP   
00001A7A  0C39 000F 000033D7       849      CMP.B   #$F, TempMode
00001A82  6700 1222                850      BEQ     PRINT_DATA
00001A86                           851    *  CMP.B   #$E,TempMode    
00001A86                           852    *  BEQ     INVALID_EA              * TODO
00001A86                           853      
00001A86  0C39 0003 000033C8       854      CMP.B   #%11,SIZE 
00001A8E  6700 0020                855      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
00001A92                           856      
00001A92  4EF9 00001A98            857      JMP          CHECK_ADD
00001A98                           858      
00001A98                           859  CHECK_ADD    
00001A98  0C39 0000 000033C8       860      CMP.B   #%00,SIZE
00001AA0  6600 000A                861      BNE     CCHECK_ADD  
00001AA4                           862      
00001AA4  0C39 0001 000033D7       863      CMP.B   #$1,TempMode       * if TempMode is invalid
00001AAC                           864    *  BEQ     INVALID_EA              * TODO 
00001AAC                           865  CCHECK_ADD
00001AAC  6000 0D54                866      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
00001AB0                           867  
00001AB0                           868  
00001AB0                           869  CHECK_ADDA
00001AB0  13FC 0001 000033C8       870      MOVE.B  #%01,SIZE
00001AB8                           871      
00001AB8                           872  *    JSR     CHECK_SOUCE   
00001AB8                           873  *    CMP.B   #$F,SrcMde
00001AB8                           874  *    BEQ     PRINT_DATA
00001AB8                           875  *    CMP.B   #$E,SrcMode
00001AB8                           876  *    BEQ     INVALID_EA                  * TODO
00001AB8                           877     
00001AB8  0C39 0000 000033D4       878      CMP.B   #%0,XBIT
00001AC0  6700 0D62                879      BEQ     PRINTADDA   
00001AC4                           880                 
00001AC4  13FC 0002 000033C8       881      MOVE.B  #%10,SIZE
00001ACC  6000 0D56                882      BRA     PRINTADDA 
00001AD0                           883   
00001AD0                           884  ************************** MOVEQ ********************************
00001AD0                           885  CHECK_MOVEQ
00001AD0  13FC 0003 000033AC       886      MOVE.B  #3,Bits         * read next 3 bits
00001AD8  4EB8 138A                887      JSR     READ_BITS       * store them in D4
00001ADC  13C4 000033BE            888      MOVE.B  D4,DEST_REG     * move register value (used in EA)
00001AE2  1439 000033BE            889      MOVE.B  DEST_REG,D2
00001AE8  163C 0000                890      MOVE.B  #%000,D3
00001AEC                           891      
00001AEC  13FC 0001 000033AC       892      MOVE.B  #1,Bits         * read the next bit into D4
00001AF4  4EB8 138A                893      JSR     READ_BITS
00001AF8  B83C 0000                894      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
00001AFC  6600 11A8                895      BNE     PRINT_DATA      * goes to PRINT_DATA ?
00001B00                           896      
00001B00  13FC 0008 000033AC       897      MOVE.B  #8,Bits        
00001B08  4EB8 138A                898      JSR     READ_BITS
00001B0C  23C4 000033C4            899      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
00001B12                           900      
00001B12  13FC 0007 000033C0       901      MOVE.B  #%111,SRC_MODE  * 
00001B1A  13FC 0004 000033C1       902      MOVE.B  #%100,SRC_REG   * 
00001B22  13FC 0004 000028E2       903      MOVE.B  #4,SizeSplit
00001B2A  6000 0C2C                904      BRA     PRINTMOVEQ 
00001B2E                           905      
00001B2E                           906  ************************* OR *********************************
00001B2E                           907  CHECK_OR
00001B2E  13FC 0003 000033AC       908      MOVE.B  #3,Bits
00001B36  4EB8 138A                909      JSR     READ_BITS
00001B3A  13C4 000033C3            910      MOVE.B  D4,TEMP_REG
00001B40                           911      
00001B40  13FC 0001 000033AC       912      MOVE.B  #1,Bits
00001B48  4EB8 138A                913      JSR     READ_BITS
00001B4C  13C4 000033D4            914      MOVE.B  D4,XBit
00001B52                           915      
00001B52  13FC 0002 000033AC       916      MOVE.B  #2,Bits
00001B5A  4EB8 138A                917      JSR     READ_BITS
00001B5E  13C4 000033C8            918      MOVE.B  D4,SIZE
00001B64                           919  
00001B64  4EB9 00002C32            920      JSR     CHECK_XBIT
00001B6A                           921      
00001B6A  13FC 0003 000033AC       922      MOVE.B  #3,Bits
00001B72  4EB8 138A                923      JSR     READ_BITS
00001B76  13C4 000033C2            924      MOVE.B  D4,TEMP_MODE    * store TEMP_MODE
00001B7C                           925      
00001B7C  13FC 0003 000033AC       926      MOVE.B  #3,Bits
00001B84  4EB8 138A                927      JSR     READ_BITS
00001B88  13C4 000033C3            928      MOVE.B  D4,TEMP_REG    * store TEMP_REG    
00001B8E                           929      
00001B8E  4EB9 00002B32            930      JSR     CHECK_TEMP   
00001B94  0C39 000F 000033D7       931      CMP.B   #$F, TempMode
00001B9C  6700 1108                932      BEQ     PRINT_DATA
00001BA0                           933    *  CMP.B   #$E,TempMode    
00001BA0                           934    *  BEQ     INVALID_EA              * TODO
00001BA0                           935      
00001BA0  6000 0BFA                936      BRA     PRINTOR
00001BA4                           937  
00001BA4                           938  ********************* SUB **********************
00001BA4                           939  CHECK_SUB
00001BA4  13FC 0003 000033AC       940      MOVE.B  #3,Bits
00001BAC  4EB8 138A                941      JSR     READ_BITS
00001BB0  13C4 000033C3            942      MOVE.B  D4,TEMP_REG
00001BB6                           943      
00001BB6  13FC 0001 000033AC       944      MOVE.B  #1,Bits
00001BBE  4EB8 138A                945      JSR     READ_BITS
00001BC2  13C4 000033D4            946      MOVE.B  D4,XBit
00001BC8                           947      
00001BC8  13FC 0002 000033AC       948      MOVE.B  #2,Bits
00001BD0  4EB8 138A                949      JSR     READ_BITS
00001BD4  13C4 000033C8            950      MOVE.B  D4,SIZE
00001BDA                           951  
00001BDA                           952    *  MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
00001BDA                           953          
00001BDA                           954    *  MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001BDA  4EB9 00002C32            955      JSR     CHECK_XBIT
00001BE0                           956      
00001BE0  13FC 0003 000033AC       957      MOVE.B  #3,Bits
00001BE8  4EB8 138A                958      JSR     READ_BITS
00001BEC  13C4 000033C2            959      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001BF2                           960      
00001BF2  13FC 0003 000033AC       961      MOVE.B  #3,Bits
00001BFA  4EB8 138A                962      JSR     READ_BITS
00001BFE  13C4 000033C3            963      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001C04                           964      
00001C04                           965      *MOVE.B  #7,INDEX
00001C04  4EB9 00002B32            966      JSR     CHECK_TEMP   
00001C0A  0C39 000F 000033D7       967      CMP.B   #$F, TempMode
00001C12  6700 1092                968      BEQ     PRINT_DATA
00001C16                           969    *  CMP.B   #$E,TempMode    
00001C16                           970    *  BEQ     INVALID_EA              * TODO
00001C16                           971      
00001C16  4EF9 000027BE            972      JMP     PRINTSUB
00001C1C                           973  
00001C1C                           974  
00001C1C                           975  ******************* AND ***********************
00001C1C                           976  CHECK_AND
00001C1C  13FC 0003 000033AC       977      MOVE.B  #3,Bits
00001C24  4EB8 138A                978      JSR     READ_BITS
00001C28  13C4 000033C3            979      MOVE.B  D4,TEMP_REG
00001C2E                           980      
00001C2E  13FC 0001 000033AC       981      MOVE.B  #1,Bits
00001C36  4EB8 138A                982      JSR     READ_BITS
00001C3A  13C4 000033D4            983      MOVE.B  D4,XBit
00001C40                           984      
00001C40  13FC 0002 000033AC       985      MOVE.B  #2,Bits
00001C48  4EB8 138A                986      JSR     READ_BITS
00001C4C  13C4 000033C8            987      MOVE.B  D4,SIZE
00001C52                           988  
00001C52  4EB9 00002C32            989      JSR     CHECK_XBIT
00001C58                           990      
00001C58  13FC 0003 000033AC       991      MOVE.B  #3,Bits
00001C60  4EB8 138A                992      JSR     READ_BITS
00001C64  13C4 000033C2            993      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001C6A                           994      
00001C6A  13FC 0003 000033AC       995      MOVE.B  #3,Bits
00001C72  4EB8 138A                996      JSR     READ_BITS
00001C76  13C4 000033C3            997      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001C7C                           998      
00001C7C  4EB9 00002B32            999      JSR     CHECK_TEMP   
00001C82  0C39 000F 000033D7      1000      CMP.B   #$F, TempMode
00001C8A  6700 101A               1001      BEQ     PRINT_DATA
00001C8E                          1002    *  CMP.B   #$E,TempMode    
00001C8E                          1003    *  BEQ     INVALID_EA              * TODO
00001C8E                          1004      
00001C8E  4EF9 000027E0           1005      JMP     PRINTAND
00001C94                          1006  
00001C94                          1007      
00001C94                          1008  ******************************************
00001C94                          1009  *        THE GROUP 14
00001C94                          1010  *        LS,AS AND ROTATION
00001C94                          1011  *        
00001C94                          1012  ******************************************
00001C94                          1013  COMPARE_1110 
00001C94  4245                    1014              CLR D5     ;STORING ISOLATED BITS
00001C96  4244                    1015              CLR D4
00001C98  3839 000033AA           1016              MOVE.W COMMANDDATA,D4
00001C9E  2A04                    1017              MOVE.L   D4,D5
00001CA0  0285 000000C0           1018              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001CA6  EC8D                    1019              LSR.L    #6,D5            ;NORMALIZE
00001CA8  13C5 000033C8           1020              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001CAE  BA3C 0003               1021              CMP.B    #%11,D5    
00001CB2  6700 0298               1022              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001CB6  4245                    1023              CLR D5
00001CB8  2A04                    1024              MOVE.L   D4,D5      
00001CBA  0285 00000018           1025              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001CC0  E68D                    1026              LSR.L   #3,D5
00001CC2  BA3C 0001               1027              CMP.B   #%001,D5
00001CC6  6700 0020               1028              BEQ     G_LS    ;LOGICAL SHIFTS
00001CCA  BA3C 0003               1029              CMP.B   #%011,D5
00001CCE  6700 00E4               1030              BEQ     G_RO    ;ROTAIONS
00001CD2  BA3C 0000               1031              CMP.B   #%000,D5
00001CD6  6700 01A8               1032              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001CDA                          1033              
00001CDA  13FC 0001 00000001      1034              MOVE.B #1,BAD_FLAG
00001CE2  4EF9 00002CA6           1035              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001CE8                          1036  
00001CE8                          1037  G_LS               ;GROUP LOGICAL SHIFT
00001CE8  4245                    1038       CLR   D5
00001CEA  23C4 000033EA           1039       MOVE.L D4,IR_IL
00001CF0  02B9 00000020 000033EA  1040       ANDI.L  #$0020,IR_IL
00001CFA  2A39 000033EA           1041       MOVE.L  IR_IL,D5
00001D00  EA8D                    1042       LSR.L   #5,D5
00001D02  BA3C 0001               1043       CMP.B   #$1,D5
00001D06  6700 0056               1044       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001D0A  4245                    1045       CLR D5
00001D0C  2A04                    1046       MOVE.L  D4,D5
00001D0E  0285 00000100           1047       ANDI.L  #$0100,D5
00001D14  E08D                    1048       LSR.L  #8,D5
00001D16  23C5 000033E2           1049       MOVE.L  D5,DR
00001D1C  4245                    1050       CLR D5
00001D1E  2A04                    1051       MOVE.L  D4,D5
00001D20  0285 00000E00           1052       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001D26  E08D                    1053       LSR.L   #8,D5
00001D28  E28D                    1054       LSR.L   #1,D5
00001D2A  BABC 00000007           1055       CMP.L   #7,D5
00001D30  6E00 0F74               1056       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D34  BABC 00000000           1057       CMP.L   #0,D5
00001D3A  6D00 0F6A               1058       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D3E  13C5 000033EE           1059       MOVE.B  D5,S_COUNT
00001D44  4EB9 0000259C           1060       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001D4A  4245                    1061       CLR     D5
00001D4C  2A04                    1062       MOVE.L  D4,D5
00001D4E  0285 00000007           1063       ANDI.L   #$0007,D5
00001D54  13C5 000033F3           1064       MOVE.B   D5,dRN
00001D5A  6000 0722               1065       BRA      PR_LS             
00001D5E                          1066       
00001D5E                          1067  GLS_EA 
00001D5E  4245                    1068       CLR D5
00001D60  4244                    1069       CLR D4
00001D62  3839 000033AA           1070       MOVE.W COMMANDDATA,D4
00001D68                          1071  
00001D68  2A04                    1072       MOVE.L  D4,D5
00001D6A  0285 00000100           1073       ANDI.L  #$0100,D5
00001D70  E08D                    1074       LSR.L  #8,D5
00001D72  23C5 000033E2           1075       MOVE.L  D5,DR     ;DIRECTION
00001D78  4245                    1076       CLR D5
00001D7A  2A04                    1077       MOVE.L  D4,D5
00001D7C  0285 00000E00           1078       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001D82  E08D                    1079       LSR.L   #8,D5
00001D84  E28D                    1080       LSR.L   #1,D5
00001D86  BABC 00000007           1081       CMP.L   #7,D5
00001D8C  6E00 0F18               1082       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D90  BABC 00000000           1083       CMP.L   #0,D5
00001D96  6D00 0F0E               1084       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D9A  13C5 000033F2           1085       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001DA0  4245                    1086       CLR     D5
00001DA2  2A04                    1087       MOVE.L   D4,D5
00001DA4  0285 00000007           1088       ANDI.L   #$0007,D5
00001DAA  13C5 000033F3           1089       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001DB0  6000 04F0               1090       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001DB4                          1091  G_RO            ;GROUP ROTATION
00001DB4  4245                    1092       CLR   D5
00001DB6  23C4 000033EA           1093       MOVE.L D4,IR_IL
00001DBC  02B9 00000020 000033EA  1094       ANDI.L  #$0020,IR_IL
00001DC6  2A39 000033EA           1095       MOVE.L  IR_IL,D5
00001DCC  EA8D                    1096       LSR.L   #5,D5
00001DCE  BA3C 0001               1097       CMP.B   #$1,D5
00001DD2  6700 0056               1098       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001DD6  4245                    1099       CLR D5
00001DD8  2A04                    1100       MOVE.L  D4,D5
00001DDA  0285 00000100           1101       ANDI.L  #$0100,D5
00001DE0  E08D                    1102       LSR.L  #8,D5
00001DE2  23C5 000033E2           1103       MOVE.L  D5,DR
00001DE8  4245                    1104       CLR D5
00001DEA  2A04                    1105       MOVE.L  D4,D5
00001DEC  0285 00000E00           1106       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001DF2  E08D                    1107       LSR.L   #8,D5
00001DF4  E28D                    1108       LSR.L   #1,D5
00001DF6  BABC 00000007           1109       CMP.L   #7,D5
00001DFC  6E00 0EA8               1110       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E00  BABC 00000000           1111       CMP.L   #0,D5
00001E06  6D00 0E9E               1112       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E0A  13C5 000033EE           1113       MOVE.B  D5,S_COUNT
00001E10  4EB9 0000259C           1114       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001E16  4245                    1115       CLR     D5
00001E18  2A04                    1116       MOVE.L  D4,D5
00001E1A  0285 00000007           1117       ANDI.L   #$0007,D5
00001E20  13C5 000033F3           1118       MOVE.B   D5,dRN
00001E26  6000 05B2               1119       BRA      PR_RO    ;PRINT ROTATION   
00001E2A                          1120  
00001E2A                          1121  GRO_EA 
00001E2A  4245                    1122       CLR D5
00001E2C  4244                    1123       CLR D4
00001E2E  3839 000033AA           1124       MOVE.W COMMANDDATA,D4
00001E34                          1125  
00001E34  2A04                    1126       MOVE.L  D4,D5
00001E36  0285 00000100           1127       ANDI.L  #$0100,D5
00001E3C  E08D                    1128       LSR.L  #8,D5
00001E3E  23C5 000033E2           1129       MOVE.L  D5,DR     ;DIRECTION
00001E44  4245                    1130       CLR D5
00001E46  2A04                    1131       MOVE.L  D4,D5
00001E48  0285 00000E00           1132       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001E4E  E08D                    1133       LSR.L   #8,D5
00001E50  E28D                    1134       LSR.L   #1,D5
00001E52  BABC 00000007           1135       CMP.L   #7,D5
00001E58  6E00 0E4C               1136       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E5C  BABC 00000000           1137       CMP.L   #0,D5
00001E62  6D00 0E42               1138       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E66  13C5 000033F2           1139       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001E6C  4245                    1140       CLR     D5
00001E6E  2A04                    1141       MOVE.L   D4,D5
00001E70  0285 00000007           1142       ANDI.L   #$0007,D5
00001E76  13C5 000033F3           1143       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001E7C  6000 04C0               1144       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001E80                          1145  
00001E80                          1146  
00001E80                          1147  
00001E80                          1148  G_AS         ;GROUP ARITHMATIC SHIFT
00001E80  4245                    1149       CLR   D5
00001E82  23C4 000033EA           1150       MOVE.L D4,IR_IL
00001E88  02B9 00000020 000033EA  1151       ANDI.L  #$0020,IR_IL
00001E92  2A39 000033EA           1152       MOVE.L  IR_IL,D5
00001E98  EA8D                    1153       LSR.L   #5,D5
00001E9A  BA3C 0001               1154       CMP.B   #$1,D5
00001E9E  6700 0056               1155       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001EA2  4245                    1156       CLR D5
00001EA4  2A04                    1157       MOVE.L  D4,D5
00001EA6  0285 00000100           1158       ANDI.L  #$0100,D5
00001EAC  E08D                    1159       LSR.L  #8,D5
00001EAE  23C5 000033E2           1160       MOVE.L  D5,DR
00001EB4  4245                    1161       CLR D5
00001EB6  2A04                    1162       MOVE.L  D4,D5
00001EB8  0285 00000E00           1163       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001EBE  E08D                    1164       LSR.L   #8,D5
00001EC0  E28D                    1165       LSR.L   #1,D5
00001EC2  BABC 00000007           1166       CMP.L   #7,D5
00001EC8  6E00 0DDC               1167       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001ECC  BABC 00000000           1168       CMP.L   #0,D5
00001ED2  6D00 0DD2               1169       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001ED6  13C5 000033EE           1170       MOVE.B  D5,S_COUNT
00001EDC  4EB9 0000259C           1171       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001EE2  4245                    1172       CLR     D5
00001EE4  2A04                    1173       MOVE.L  D4,D5
00001EE6  0285 00000007           1174       ANDI.L   #$0007,D5
00001EEC  13C5 000033F3           1175       MOVE.B   D5,dRN
00001EF2  6000 0538               1176       BRA      PR_AS    ;PRINT ROTATION 
00001EF6                          1177  
00001EF6                          1178  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001EF6  4245                    1179       CLR D5
00001EF8  4244                    1180       CLR D4
00001EFA  3839 000033AA           1181       MOVE.W COMMANDDATA,D4
00001F00                          1182  
00001F00  2A04                    1183       MOVE.L  D4,D5
00001F02  0285 00000100           1184       ANDI.L  #$0100,D5
00001F08  E08D                    1185       LSR.L  #8,D5
00001F0A  23C5 000033E2           1186       MOVE.L  D5,DR     ;DIRECTION
00001F10  4245                    1187       CLR D5
00001F12  2A04                    1188       MOVE.L  D4,D5
00001F14  0285 00000E00           1189       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001F1A  E08D                    1190       LSR.L   #8,D5
00001F1C  E28D                    1191       LSR.L   #1,D5
00001F1E  BABC 00000007           1192       CMP.L   #7,D5
00001F24  6E00 0D80               1193       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001F28  BABC 00000000           1194       CMP.L   #0,D5
00001F2E  6D00 0D76               1195       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001F32  13C5 000033F2           1196       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001F38  4245                    1197       CLR     D5
00001F3A  2A04                    1198       MOVE.L   D4,D5
00001F3C  0285 00000007           1199       ANDI.L   #$0007,D5
00001F42  13C5 000033F3           1200       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001F48  6000 02BC               1201       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001F4C                          1202  
00001F4C                          1203  G14_MEMS 
00001F4C  4245                    1204         CLR D5
00001F4E  2A04                    1205         MOVE.L  D4,D5
00001F50  CABC 00000E00           1206         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001F56  E08D                    1207         LSR.L   #8,D5
00001F58  E28D                    1208         LSR.L   #1,D5
00001F5A  BA3C 0001               1209         CMP.B   #%001,D5
00001F5E  6700 0012               1210         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001F62  BA3C 0003               1211         CMP.B   #%011,D5
00001F66  6700 0070               1212         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001F6A  BA3C 0000               1213         CMP.B   #%000,D5
00001F6E  6700 00CE               1214         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001F72                          1215  
00001F72                          1216  G14_MEMS_LS 
00001F72  4245                    1217             CLR D5
00001F74  2A04                    1218             MOVE.L  D4,D5
00001F76  0285 00000100           1219             ANDI.L  #$0100,D5
00001F7C  E08D                    1220             LSR.L  #8,D5
00001F7E  13C5 000033E2           1221             MOVE.B  D5,DR     ;DIRECTION
00001F84  4245                    1222             CLR D5
00001F86  2A04                    1223             MOVE.L D4,D5
00001F88  0285 00000038           1224             ANDI.L  #$0038,D5
00001F8E  E68D                    1225             LSR.L  #3,D5
00001F90  13C5 000033F6           1226             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001F96  4245                    1227             CLR D5
00001F98  2A04                    1228             MOVE.L D4,D5
00001F9A  0285 00000007           1229             ANDI.L  #$0007,D5
00001FA0  13C5 000033F3           1230             MOVE.B  D5,dRN
00001FA6  0CB9 00000000 000033F6  1231             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001FB0  6700 0CF4               1232             BEQ    PRINT_DATA
00001FB4  0CB9 00000001 000033F6  1233             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001FBE  6700 0CE6               1234             BEQ     PRINT_DATA
00001FC2  13C5 000033F5           1235             MOVE.B  D5,dRG     ;DESTINATION REG
00001FC8  0C39 0007 000033F6      1236             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001FD0  6700 00F2               1237             BEQ     CHECK_ID_LS 
00001FD4  6000 0168               1238             BRA     PR_G14_MEMS_LS             
00001FD8                          1239       
00001FD8                          1240  
00001FD8                          1241  G14_MEMS_RO
00001FD8  4245                    1242             CLR D5
00001FDA  2A04                    1243             MOVE.L  D4,D5
00001FDC  0285 00000100           1244             ANDI.L  #$0100,D5
00001FE2  E08D                    1245             LSR.L  #8,D5
00001FE4  13C5 000033E2           1246             MOVE.B  D5,DR     ;DIRECTION
00001FEA  4245                    1247             CLR D5
00001FEC  2A04                    1248             MOVE.L D4,D5
00001FEE  0285 00000038           1249             ANDI.L  #$0038,D5
00001FF4  E68D                    1250             LSR.L  #3,D5
00001FF6  13C5 000033F6           1251             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001FFC  4245                    1252             CLR D5
00001FFE  2A04                    1253             MOVE.L D4,D5
00002000  0285 00000007           1254             ANDI.L  #$0007,D5
00002006  13C5 000033F3           1255             MOVE.B  D5,dRN
0000200C  0CB9 00000000 000033F6  1256             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00002016  6700 0C8E               1257             BEQ    PRINT_DATA
0000201A  0CB9 00000001 000033F6  1258             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00002024  6700 0C80               1259             BEQ     PRINT_DATA
00002028  13C5 000033F5           1260             MOVE.B  D5,dRG     ;DESTINATION REG
0000202E  0C39 0007 000033F6      1261             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00002036  6700 007C               1262             BEQ     CHECK_ID_RO 
0000203A  6000 0166               1263             BRA     PR_G14_MEMS_RO         
0000203E                          1264  
0000203E                          1265  G14_MEMS_AS
0000203E  4245                    1266             CLR D5
00002040  2A04                    1267             MOVE.L  D4,D5
00002042  0285 00000100           1268             ANDI.L  #$0100,D5
00002048  E08D                    1269             LSR.L  #8,D5
0000204A  13C5 000033E2           1270             MOVE.B  D5,DR     ;DIRECTION
00002050  4245                    1271             CLR D5
00002052  2A04                    1272             MOVE.L D4,D5
00002054  0285 00000038           1273             ANDI.L  #$0038,D5
0000205A  E68D                    1274             LSR.L  #3,D5
0000205C  13C5 000033F6           1275             MOVE.B  D5,dMODE     ;DESTINATION MODE
00002062  4245                    1276             CLR D5
00002064  2A04                    1277             MOVE.L D4,D5
00002066  0285 00000007           1278             ANDI.L  #$0007,D5
0000206C  13C5 000033F3           1279             MOVE.B  D5,dRN
00002072  0CB9 00000000 000033F6  1280             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
0000207C  6700 0C28               1281             BEQ    PRINT_DATA
00002080  0CB9 00000001 000033F6  1282             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
0000208A  6700 0C1A               1283             BEQ     PRINT_DATA
0000208E  13C5 000033F5           1284             MOVE.B  D5,dRG     ;DESTINATION REG
00002094  0C39 0007 000033F6      1285             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
0000209C  6700 0006               1286             BEQ     CHECK_ID_AS 
000020A0  6000 0032               1287             BRA     PR_G14_MEMS_AS                          
000020A4                          1288             
000020A4                          1289  
000020A4                          1290  
000020A4  0C39 0004 000033F5      1291  CHECK_ID_AS  CMP.B #$4,dRG
000020AC  6700 0BF8               1292               BEQ   PRINT_DATA
000020B0  6000 0022               1293               BRA     PR_G14_MEMS_AS
000020B4                          1294               
000020B4  0C39 0004 000033F5      1295  CHECK_ID_RO  CMP.B #$4,dRG
000020BC  6700 0BE8               1296               BEQ   PRINT_DATA
000020C0  6000 00E0               1297               BRA     PR_G14_MEMS_RO
000020C4                          1298    
000020C4  0C39 0004 000033F5      1299  CHECK_ID_LS  CMP.B #$4,dRG
000020CC  6700 0BD8               1300               BEQ   PRINT_DATA
000020D0  6000 006C               1301               BRA    PR_G14_MEMS_LS
000020D4                          1302                               
000020D4                          1303  PR_G14_MEMS_AS
000020D4  4EB9 0000299A           1304       JSR     PRINTCLRSPOT      * print space
000020DA                          1305   
000020DA  0C39 0000 000033E2      1306       CMP.B #$0,DR 
000020E2  6700 002E               1307       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
000020E6                          1308      
000020E6                          1309      *******PRINT LSL*******
000020E6  43F9 0000338A           1310       LEA       PASL,A1   MEM LEFT SHIF
000020EC  103C 000E               1311       MOVE.B   #14,D0     ; moves #14 into data register D0
000020F0  4E4F                    1312       TRAP     #15
000020F2                          1313  
000020F2  4EB9 0000299A           1314       JSR     PRINTCLRSPOT      * print space
000020F8                          1315   
000020F8  4243                    1316       CLR D3
000020FA  4242                    1317       CLR D2
000020FC  1439 000033F6           1318       MOVE.B  dMODE,D2
00002102  1639 000033F3           1319       MOVE.B  dRN,D3
00002108  4EB9 00002D2C           1320       JSR     EA_START
0000210E                          1321       
0000210E  6000 F198               1322       BRA MEMORYGRABBER
00002112                          1323  
00002112                          1324       
00002112                          1325  PR_ASR_MEM   ;MEM RIGHT SHIFT
00002112  43F9 00003386           1326       LEA       PASR,A1   MEM RIGHT SHIF
00002118  103C 000E               1327       MOVE.B   #14,D0     ; moves #14 into data register D0
0000211C  4E4F                    1328       TRAP     #15
0000211E  4EB9 0000299A           1329       JSR     PRINTCLRSPOT      * print space
00002124                          1330  
00002124  4243                    1331       CLR D3
00002126  4242                    1332       CLR D2
00002128  1439 000033F6           1333       MOVE.B  dMODE,D2
0000212E  1639 000033F3           1334       MOVE.B  dRN,D3
00002134  4EB9 00002D2C           1335       JSR     EA_START
0000213A                          1336       
0000213A  6000 F16C               1337       BRA MEMORYGRABBER
0000213E                          1338               
0000213E                          1339  
0000213E                          1340  PR_G14_MEMS_LS 
0000213E  0C39 0000 000033E2      1341       CMP.B #$0,DR 
00002146  6700 002E               1342       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
0000214A                          1343      
0000214A                          1344      *******PRINT LSL*******
0000214A  43F9 0000337E           1345       LEA       PLSL,A1   MEM LEFT SHIF
00002150  103C 000E               1346       MOVE.B   #14,D0     ; moves #14 into data register D0
00002154  4E4F                    1347       TRAP     #15 
00002156                          1348       
00002156  4EB9 0000299A           1349       JSR     PRINTCLRSPOT      * print space
0000215C                          1350       
0000215C  4243                    1351       CLR D3
0000215E  4242                    1352       CLR D2
00002160  1439 000033F6           1353       MOVE.B  dMODE,D2
00002166  1639 000033F3           1354       MOVE.B  dRN,D3
0000216C  4EB9 00002D2C           1355       JSR     EA_START
00002172                          1356       
00002172  6000 F134               1357       BRA MEMORYGRABBER
00002176                          1358       
00002176                          1359  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00002176  43F9 00003382           1360       LEA       PLSR,A1   MEM RIGHT SHIF
0000217C  103C 000E               1361       MOVE.B   #14,D0     ; moves #14 into data register D0
00002180  4E4F                    1362       TRAP     #15
00002182  4EB9 0000299A           1363       JSR     PRINTCLRSPOT      * print space
00002188  4243                    1364       CLR D3
0000218A  4242                    1365       CLR D2
0000218C  1439 000033F6           1366       MOVE.B  dMODE,D2
00002192  1639 000033F3           1367       MOVE.B  dRN,D3
00002198  4EB9 00002D2C           1368       JSR     EA_START
0000219E                          1369       
0000219E  6000 F108               1370       BRA    MEMORYGRABBER
000021A2                          1371  
000021A2                          1372  PR_G14_MEMS_RO
000021A2  0C39 0000 000033E2      1373       CMP.B #$0,DR 
000021AA  6700 002E               1374       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
000021AE                          1375      
000021AE                          1376      *******PRINT ASL*******
000021AE  43F9 0000338E           1377       LEA       PROL,A1   ROTATE MEM LEFT SHIF
000021B4  103C 000E               1378       MOVE.B   #14,D0     ; moves #14 into data register D0
000021B8  4E4F                    1379       TRAP     #15
000021BA                          1380  
000021BA  4EB9 0000299A           1381       JSR     PRINTCLRSPOT
000021C0                          1382        
000021C0  4243                    1383       CLR D3
000021C2  4242                    1384       CLR D2
000021C4  1439 000033F6           1385       MOVE.B  dMODE,D2
000021CA  1639 000033F3           1386       MOVE.B  dRN,D3
000021D0  4EB9 00002D2C           1387       JSR     EA_START
000021D6                          1388       
000021D6  6000 F0D0               1389       BRA MEMORYGRABBER
000021DA                          1390  
000021DA                          1391  PR_ROR_MEM   ;ROTATE MEM RIGHT 
000021DA  43F9 00003392           1392       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
000021E0  103C 000E               1393       MOVE.B   #14,D0     ; moves #14 into data register D0
000021E4  4E4F                    1394       TRAP     #15
000021E6  4EB9 0000299A           1395       JSR     PRINTCLRSPOT      * print space
000021EC                          1396  
000021EC  4243                    1397       CLR D3
000021EE  4242                    1398       CLR D2
000021F0  1439 000033F6           1399       MOVE.B  dMODE,D2
000021F6  1639 000033F3           1400       MOVE.B  dRN,D3
000021FC  4EB9 00002D2C           1401       JSR     EA_START
00002202                          1402       
00002202  6000 F0A4               1403       BRA MEMORYGRABBER
00002206                          1404  
00002206                          1405  
00002206                          1406  PR_G_AS_EA
00002206  0CB9 00000000 000033E2  1407          CMP.L #$0,DR 
00002210  6700 004C               1408          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002214                          1409       
00002214                          1410          *******PRINT ASL*******
00002214  43F9 0000338A           1411          LEA       PASL,A1
0000221A  103C 000E               1412          MOVE.B   #14,D0     ; moves #14 into data register D0
0000221E  4E4F                    1413          TRAP     #15 
00002220  4EB9 00002910           1414          JSR      SIZEPRINT
00002226                          1415          
00002226  4EB9 0000299A           1416          JSR     PRINTCLRSPOT
0000222C                          1417          
0000222C  4242                    1418          CLR D2
0000222E  4243                    1419          CLR D3
00002230  143C 0000               1420          MOVE.B  #%000,D2     ; mode data register
00002234  1639 000033F2           1421          MOVE.B  sRN,D3       ; source register number
0000223A  4EB9 00002D2C           1422          JSR     EA_START
00002240                          1423          
00002240  4EB9 000029A8           1424          JSR     PRINTCOMA   ; print coma
00002246                          1425          
00002246  4243                    1426          CLR D3
00002248  4242                    1427          CLR D2
0000224A  143C 0000               1428          MOVE.B  #%000,D2      ; mode data register
0000224E  1639 000033F3           1429          MOVE.B  dRN,D3        ; destination register
00002254  4EB9 00002D2C           1430          JSR     EA_START
0000225A                          1431          
0000225A  6000 F04C               1432          BRA   MEMORYGRABBER
0000225E                          1433  
0000225E                          1434          
0000225E                          1435  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
0000225E  43F9 00003386           1436           LEA       PASR,A1
00002264  103C 000E               1437          MOVE.B   #14,D0     ; moves #14 into data register D0
00002268  4E4F                    1438          TRAP     #15 
0000226A  4EB9 000028E2           1439          JSR      SIZESPLIT
00002270                          1440          
00002270  4242                    1441          CLR D2
00002272  4243                    1442          CLR D3
00002274  143C 0000               1443          MOVE.B  #%000,D2     ; mode data register
00002278  1639 000033F2           1444          MOVE.B  sRN,D3       ; source register number
0000227E  4EB9 00002D2C           1445          JSR     EA_START
00002284  4EB9 000029A8           1446          JSR     PRINTCOMA   ; print coma
0000228A  4243                    1447          CLR D3
0000228C  4242                    1448          CLR D2
0000228E  143C 0000               1449          MOVE.B  #%000,D2      ; mode data register
00002292  1639 000033F3           1450          MOVE.B  dRN,D3        ; destination register
00002298  4EB9 00002D2C           1451          JSR     EA_START
0000229E                          1452          
0000229E  6000 F008               1453          BRA   MEMORYGRABBER
000022A2                          1454  
000022A2                          1455  
000022A2                          1456  PR_G_LS_EA
000022A2  0CB9 00000000 000033E2  1457          CMP.L #$0,DR 
000022AC  6700 004C               1458          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000022B0                          1459       
000022B0                          1460          *******PRINT LSL*******
000022B0  43F9 0000337E           1461          LEA       PLSL,A1
000022B6  103C 000E               1462          MOVE.B   #14,D0     ; moves #14 into data register D0
000022BA  4E4F                    1463          TRAP     #15 
000022BC  4EB9 00002910           1464          JSR      SIZEPRINT
000022C2                          1465          
000022C2  4EB9 0000299A           1466          JSR     PRINTCLRSPOT
000022C8                          1467          
000022C8  4242                    1468          CLR D2
000022CA  4243                    1469          CLR D3
000022CC  143C 0000               1470          MOVE.B  #%000,D2     ; mode data register
000022D0  1639 000033F2           1471          MOVE.B  sRN,D3       ; source register number
000022D6  4EB9 00002D2C           1472          JSR     EA_START
000022DC                          1473          
000022DC  4EB9 000029A8           1474          JSR     PRINTCOMA   ; print coma
000022E2                          1475          
000022E2  4243                    1476          CLR D3
000022E4  4242                    1477          CLR D2
000022E6  143C 0000               1478          MOVE.B  #%000,D2      ; mode data register
000022EA  1639 000033F3           1479          MOVE.B  dRN,D3        ; destination register
000022F0  4EB9 00002D2C           1480          JSR     EA_START
000022F6                          1481          
000022F6  6000 EFB0               1482          BRA   MEMORYGRABBER
000022FA                          1483          
000022FA                          1484  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
000022FA  43F9 00003382           1485           LEA       PLSR,A1
00002300  103C 000E               1486           MOVE.B   #14,D0     ; moves #14 into data register D0
00002304  4E4F                    1487          TRAP     #15 
00002306  4EB9 00002910           1488          JSR      SIZEPRINT
0000230C                          1489          
0000230C  4242                    1490          CLR D2
0000230E  4243                    1491          CLR D3
00002310  143C 0000               1492          MOVE.B  #%000,D2     ; mode data register
00002314  1639 000033F2           1493          MOVE.B  sRN,D3       ; source register number
0000231A  4EB9 00002D2C           1494          JSR     EA_START
00002320  4EB9 000029A8           1495          JSR     PRINTCOMA   ; print coma
00002326  4243                    1496          CLR D3
00002328  4242                    1497          CLR D2
0000232A  143C 0000               1498          MOVE.B  #%000,D2      ; mode data register
0000232E  1639 000033F3           1499          MOVE.B  dRN,D3        ; destination register
00002334  4EB9 00002D2C           1500          JSR     EA_START
0000233A                          1501          
0000233A  6000 EF6C               1502          BRA   MEMORYGRABBER
0000233E                          1503  
0000233E                          1504  
0000233E                          1505  PR_G_RO_EA        
0000233E  0CB9 00000000 000033E2  1506          CMP.L #$0,DR 
00002348  6700 004C               1507          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000234C                          1508       
0000234C                          1509          *******PRINT LSL*******
0000234C  43F9 0000338E           1510          LEA       PROL,A1
00002352  103C 000E               1511          MOVE.B   #14,D0     ; moves #14 into data register D0
00002356  4E4F                    1512          TRAP     #15 
00002358  4EB9 00002910           1513          JSR      SIZEPRINT
0000235E                          1514          
0000235E  4EB9 0000299A           1515          JSR     PRINTCLRSPOT
00002364                          1516          
00002364  4242                    1517          CLR D2
00002366  4243                    1518          CLR D3
00002368  143C 0000               1519          MOVE.B  #%000,D2     ; mode data register
0000236C  1639 000033F2           1520          MOVE.B  sRN,D3       ; source register number
00002372  4EB9 00002D2C           1521          JSR     EA_START
00002378  4EB9 000029A8           1522          JSR     PRINTCOMA   ; print coma
0000237E  4243                    1523          CLR D3
00002380  4242                    1524          CLR D2
00002382  143C 0000               1525          MOVE.B  #%000,D2      ; mode data register
00002386  1639 000033F3           1526          MOVE.B  dRN,D3        ; destination register
0000238C  4EB9 00002D2C           1527          JSR     EA_START
00002392                          1528          
00002392  6000 EF14               1529          BRA   MEMORYGRABBER
00002396                          1530  
00002396                          1531          
00002396                          1532  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
00002396  43F9 00003392           1533          LEA       PROR,A1
0000239C  103C 000E               1534          MOVE.B   #14,D0     ; moves #14 into data register D0
000023A0  4E4F                    1535          TRAP     #15 
000023A2  4EB9 00002910           1536          JSR      SIZEPRINT
000023A8                          1537  
000023A8  4242                    1538          CLR D2
000023AA  4243                    1539          CLR D3
000023AC  143C 0000               1540          MOVE.B  #%000,D2     ; mode data register
000023B0  1639 000033F2           1541          MOVE.B  sRN,D3       ; source register number
000023B6  4EB9 00002D2C           1542          JSR     EA_START
000023BC  4EB9 000029A8           1543          JSR     PRINTCOMA   ; print coma
000023C2  4243                    1544          CLR D3
000023C4  4242                    1545          CLR D2
000023C6  143C 0000               1546          MOVE.B  #%000,D2      ; mode data register
000023CA  1639 000033F3           1547          MOVE.B  dRN,D3        ; destination register
000023D0  4EB9 00002D2C           1548          JSR     EA_START
000023D6                          1549          
000023D6  6000 EED0               1550          BRA   MEMORYGRABBER
000023DA                          1551  
000023DA                          1552  PR_RO 
000023DA  0CB9 00000000 000033E2  1553       CMP.L #$0,DR 
000023E4  6700 0172               1554       BEQ   PR_ROR   ;RIGHT SHIFT
000023E8                          1555      
000023E8                          1556      *******PRINT ASL*******
000023E8  43F9 0000338E           1557       LEA       PROL,A1
000023EE  103C 000E               1558       MOVE.B   #14,D0     ; moves #14 into data register D0
000023F2  4E4F                    1559       TRAP     #15 
000023F4                          1560  
000023F4  4EB9 00002910           1561       JSR      SIZEPRINT
000023FA                          1562  
000023FA  4EB9 000029B6           1563       JSR     PRINTHASH   * print hash
00002400                          1564  
00002400  4241                    1565      CLR D1
00002402  1239 000033EE           1566      MOVE.B   S_COUNT,D1
00002408  103C 0003               1567      MOVE.B   #3,D0
0000240C  4E4F                    1568      TRAP     #15
0000240E  4EB9 000029A8           1569      JSR     PRINTCOMA   ; print coma
00002414  4243                    1570      CLR D3
00002416  4242                    1571      CLR D2
00002418  143C 0000               1572      MOVE.B  #%000,D2
0000241C  1639 000033F3           1573      MOVE.B  dRN,D3
00002422  4EB9 00002D2C           1574      JSR     EA_START
00002428                          1575      
00002428  6000 EE7E               1576      BRA    MEMORYGRABBER
0000242C                          1577  
0000242C                          1578  
0000242C                          1579  PR_AS 
0000242C  0CB9 00000000 000033E2  1580      CMP.L #$0,DR 
00002436  6700 00DC               1581      BEQ   PR_ASR   ;RIGHT SHIFT
0000243A                          1582      
0000243A                          1583      *******PRINT ASL*******
0000243A  43F9 0000338A           1584       LEA       PASL,A1
00002440  103C 000E               1585       MOVE.B   #14,D0     ; moves #14 into data register D0
00002444  4E4F                    1586       TRAP     #15 
00002446                          1587  
00002446  4EB9 00002910           1588      JSR      SIZEPRINT
0000244C                          1589  
0000244C  4EB9 000029B6           1590      JSR     PRINTHASH   ; print hash
00002452                          1591      
00002452  4241                    1592      CLR D1
00002454  1239 000033EE           1593      MOVE.B   S_COUNT,D1
0000245A  103C 0003               1594      MOVE.B   #3,D0
0000245E  4E4F                    1595      TRAP     #15
00002460  4EB9 000029A8           1596      JSR     PRINTCOMA   ; print coma
00002466  4243                    1597      CLR D3
00002468  4242                    1598      CLR D2
0000246A  143C 0000               1599      MOVE.B  #%000,D2
0000246E  1639 000033F3           1600      MOVE.B  dRN,D3
00002474  4EB9 00002D2C           1601      JSR     EA_START
0000247A                          1602  
0000247A  6000 EE2C               1603      BRA    MEMORYGRABBER
0000247E                          1604                        
0000247E                          1605                          
0000247E                          1606  PR_LS 
0000247E  0CB9 00000000 000033E2  1607      CMP.L #$0,DR 
00002488  6700 0046               1608      BEQ   PR_LSR   ;RIGHT SHIFT
0000248C                          1609      
0000248C                          1610      *******PRINT LSL*******
0000248C  43F9 0000337E           1611       LEA       PLSL,A1
00002492  103C 000E               1612       MOVE.B   #14,D0     ; moves #14 into data register D0
00002496  4E4F                    1613       TRAP     #15 
00002498  4EB9 00002910           1614      JSR      SIZEPRINT
0000249E                          1615  
0000249E  4EB9 000029B6           1616      JSR     PRINTHASH   ; print hash
000024A4                          1617      
000024A4  4241                    1618      CLR D1
000024A6  1239 000033EE           1619      MOVE.B   S_COUNT,D1
000024AC  103C 0003               1620      MOVE.B   #3,D0
000024B0  4E4F                    1621      TRAP     #15
000024B2                          1622      
000024B2  4EB9 000029A8           1623      JSR     PRINTCOMA   ; print coma
000024B8                          1624      
000024B8  4243                    1625      CLR D3
000024BA  4242                    1626      CLR D2
000024BC  143C 0000               1627      MOVE.B  #%000,D2
000024C0  1639 000033F3           1628      MOVE.B  dRN,D3
000024C6  4EB9 00002D2C           1629      JSR     EA_START
000024CC                          1630      
000024CC  6000 EDDA               1631      BRA    MEMORYGRABBER
000024D0                          1632      
000024D0                          1633            
000024D0                          1634  PR_LSR 
000024D0  43F9 00003382           1635      LEA   PLSR,A1
000024D6  103C 000E               1636        MOVE.B   #14,D0     ; moves #14 into data register D0
000024DA  4E4F                    1637        TRAP     #15       ; Displays message via trap 14 
000024DC  4EB9 00002910           1638        JSR      SIZEPRINT
000024E2                          1639  
000024E2  4EB9 000029B6           1640        JSR     PRINTHASH   ; print hash
000024E8                          1641        
000024E8  4241                    1642        CLR D1
000024EA  1239 000033EE           1643        MOVE.B   S_COUNT,D1
000024F0  103C 0003               1644        MOVE.B   #3,D0
000024F4  4E4F                    1645        TRAP     #15
000024F6  4EB9 000029A8           1646        JSR     PRINTCOMA   ; print coma
000024FC  4243                    1647        CLR D3
000024FE  4242                    1648        CLR D2
00002500  143C 0000               1649        MOVE.B #%000,D2
00002504  1639 000033F3           1650        MOVE.B  dRN,D3
0000250A  4EB9 00002D2C           1651        JSR   EA_START
00002510                          1652        
00002510  6000 ED96               1653        BRA MEMORYGRABBER
00002514                          1654        
00002514                          1655        
00002514                          1656  PR_ASR 
00002514  43F9 00003386           1657      LEA   PASR,A1
0000251A  103C 000E               1658         MOVE.B   #14,D0     ; moves #14 into data register D0
0000251E  4E4F                    1659        TRAP     #15       ; Displays message via trap 14 
00002520  4EB9 00002910           1660        JSR      SIZEPRINT
00002526                          1661  
00002526  4EB9 000029B6           1662        JSR     PRINTHASH   ; print hash
0000252C                          1663        
0000252C  4241                    1664        CLR D1
0000252E  1239 000033EE           1665        MOVE.B   S_COUNT,D1
00002534  103C 0003               1666        MOVE.B   #3,D0
00002538  4E4F                    1667        TRAP     #15
0000253A  4EB9 000029A8           1668        JSR     PRINTCOMA   ; print coma
00002540  4243                    1669        CLR D3
00002542  4242                    1670        CLR D2
00002544  143C 0000               1671        MOVE.B #%000,D2
00002548  1639 000033F3           1672        MOVE.B  dRN,D3
0000254E  4EB9 00002D2C           1673        JSR   EA_START
00002554                          1674  
00002554  6000 ED52               1675        BRA MEMORYGRABBER
00002558                          1676  
00002558                          1677        
00002558                          1678  PR_ROR 
00002558  43F9 00003392           1679        LEA   PROR,A1
0000255E  103C 000E               1680        MOVE.B   #14,D0     ; moves #14 into data register D0
00002562  4E4F                    1681        TRAP     #15       ; Displays message via trap 14 
00002564  4EB9 00002910           1682        JSR      SIZEPRINT
0000256A                          1683  
0000256A  4EB9 000029B6           1684        JSR     PRINTHASH   ; print hash
00002570                          1685        
00002570  4241                    1686        CLR D1
00002572  1239 000033EE           1687        MOVE.B   S_COUNT,D1
00002578  103C 0003               1688        MOVE.B   #3,D0
0000257C  4E4F                    1689        TRAP     #15
0000257E  4EB9 000029A8           1690        JSR     PRINTCOMA   ; print coma
00002584  4243                    1691        CLR D3
00002586  4242                    1692        CLR D2
00002588  143C 0000               1693        MOVE.B #%000,D2
0000258C  1639 000033F3           1694        MOVE.B  dRN,D3
00002592  4EB9 00002D2C           1695        JSR   EA_START
00002598                          1696        
00002598  6000 ED0E               1697        BRA MEMORYGRABBER
0000259C                          1698        
0000259C                          1699        
0000259C                          1700  ;-----------------------extra parts for above code to function
0000259C                          1701        
0000259C                          1702  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
0000259C  0C39 0000 000033EE      1703           CMP.B #$0,S_COUNT
000025A4  6700 0004               1704           BEQ   IS_EIGHT
000025A8  4E75                    1705           RTS
000025AA                          1706           
000025AA  13FC 0008 000033EE      1707  IS_EIGHT  MOVE.B #8,S_COUNT
000025B2  4E75                    1708            RTS
000025B4                          1709  
000025B4                          1710  ;---------------------------------------------------------
000025B4                          1711                  ;MOVE SECTION
000025B4  43F9 0000332A           1712  PRINTMOVE LEA PMOVE,A1
000025BA  103C 000E               1713      MOVE.B   #14,D0     ; moves #14 into data register D0
000025BE  4E4F                    1714      TRAP     #15       ; Displays message via trap 14
000025C0  4EB9 000028E2           1715      JSR     SIZESPLIT
000025C6  6000 0498               1716      BRA EADN
000025CA                          1717      
000025CA  43F9 00003335           1718  PRINTMOVEA LEA PMOVEA,A1
000025D0  103C 000E               1719      MOVE.B   #14,D0     ; moves #14 into data register D0
000025D4  4E4F                    1720      TRAP     #15       ; Displays message via trap 14
000025D6  4EB9 000028E2           1721      JSR     SIZESPLIT
000025DC  6000 0482               1722      BRA EADN
000025E0                          1723      
000025E0                          1724                      ;First set of commands
000025E0                          1725  PRINTNOP    
000025E0  43F9 00003341           1726      LEA     PNOP,A1
000025E6  103C 000E               1727      MOVE.B  #14,D0 
000025EA  4E4F                    1728      TRAP    #15  
000025EC                          1729      
000025EC  6000 ECBA               1730      BRA     MEMORYGRABBER
000025F0                          1731  
000025F0                          1732  PRINTMOVEM  
000025F0  43F9 0000332F           1733      LEA     PMOVEM,A1
000025F6  103C 000E               1734      MOVE.B  #14,D0 
000025FA  4E4F                    1735      TRAP    #15 
000025FC  4EB9 00002958           1736      JSR     SIZEPRINT3 
00002602                          1737      
00002602  4284                    1738      CLR.L   D4
00002604  3818                    1739      MOVE.W  (A0)+,D4            * Move list mask into D4
00002606                          1740      
00002606                          1741      * TODO : CHECK THE INVELID_EA FLAG
00002606                          1742      
00002606                          1743  * TODO:     
00002606                          1744  *    CMP.B   #%0,XBit
00002606                          1745  *    BEQ     PRINT_REG_TO_MEM
00002606                          1746  *    BRA     PRINT_MEM_TO_REG
00002606                          1747  
00002606                          1748  
00002606                          1749  PRINTLEA    
00002606  43F9 00003345           1750      LEA PLEA,A1
0000260C  103C 000E               1751      MOVE.B   #14,D0     ; moves #14 into data register D0
00002610  4E4F                    1752      TRAP     #15       ; Displays message via trap 14
00002612  4EB9 0000299A           1753      JSR     PRINTCLRSPOT
00002618                          1754      * TODO : CHECK THE INVELID_EA FLAG
00002618                          1755  
00002618  4243                    1756      CLR     D3
0000261A  4242                    1757      CLR     D2
0000261C  1439 000033C0           1758      MOVE.B  SRC_MODE,D2
00002622  1639 000033C1           1759      MOVE.B  SRC_REG,D3
00002628  4EB9 00002D2C           1760      JSR     EA_START
0000262E                          1761  
0000262E  4EB9 000029A8           1762      JSR     PRINTCOMA   ; print coma
00002634                          1763      
00002634                          1764     * MOVE.B  #%001,DEST_MODE
00002634  4243                    1765      CLR     D3
00002636  4242                    1766      CLR     D2
00002638  143C 0001               1767      MOVE.B  #%001,D2
0000263C  1639 000033BE           1768      MOVE.B  DEST_REG,D3
00002642  4EB9 00002D2C           1769      JSR     EA_START
00002648                          1770  
00002648  6000 EC5E               1771      BRA     MEMORYGRABBER
0000264C                          1772  
0000264C                          1773  PRINTNOT    
0000264C  43F9 00003349           1774      LEA PNOT,A1
00002652  103C 000E               1775      MOVE.B   #14,D0
00002656  4E4F                    1776      TRAP     #15
00002658  4EB9 00002934           1777      JSR     SIZEPRINT2    
0000265E                          1778      
0000265E  4243                    1779      CLR     D3
00002660  4242                    1780      CLR     D2
00002662  1439 000033BF           1781      MOVE.B  DEST_MODE,D2
00002668  1639 000033BE           1782      MOVE.B  DEST_REG,D3    
0000266E  4EB9 00002D2C           1783      JSR     EA_START
00002674                          1784      
00002674  6000 EC32               1785      BRA     MEMORYGRABBER
00002678                          1786  
00002678                          1787  PRINTJSR    
00002678  43F9 0000334D           1788      LEA     PJSR,A1
0000267E  103C 000E               1789      MOVE.B  #14,D0 
00002682  4E4F                    1790      TRAP    #15      
00002684  4EB9 0000299A           1791      JSR     PRINTCLRSPOT
0000268A                          1792      
0000268A  4243                    1793      CLR     D3
0000268C  4242                    1794      CLR     D2
0000268E  1439 000033BF           1795      MOVE.B  DEST_MODE,D2
00002694  1639 000033BE           1796      MOVE.B  DEST_REG,D3    
0000269A  4EB9 00002D2C           1797      JSR     EA_START
000026A0                          1798      
000026A0  6000 EC06               1799      BRA     MEMORYGRABBER
000026A4                          1800  
000026A4                          1801  
000026A4  43F9 00003351           1802  PRINTRTS    LEA PRTS,A1
000026AA  103C 000E               1803      MOVE.B   #14,D0     ; moves #14 into data register D0
000026AE  4E4F                    1804      TRAP     #15       ; Displays message via trap 14
000026B0                          1805      
000026B0  6000 EBF6               1806      BRA     MEMORYGRABBER
000026B4                          1807      
000026B4                          1808                  ;ADDQ SECTION
000026B4                          1809  PRINTADDQ 
000026B4  43F9 00003379           1810      LEA     PADDQ,A1
000026BA  103C 000E               1811      MOVE.B  #14,D0     ; moves #14 into data register D0
000026BE  4E4F                    1812      TRAP    #15       ; Displays message via trap 14
000026C0  4EB9 00002934           1813      JSR     SIZEPRINT2
000026C6                          1814  
000026C6  4EB9 000029B6           1815      JSR     PRINTHASH   ; print hash
000026CC  4EB9 000029C2           1816      JSR     PRINTDOLLARSIGN     ; print dollar sign
000026D2                          1817      
000026D2  4241                    1818      CLR     D1
000026D4  1239 000033C4           1819      MOVE.B  DATA_FIELD,D1
000026DA  103C 0003               1820      MOVE.B  #3,D0     
000026DE  4E4F                    1821      TRAP    #15 
000026E0                          1822      
000026E0  4EB9 000029A8           1823      JSR     PRINTCOMA   ; print coma
000026E6                          1824      
000026E6  4243                    1825      CLR     D3
000026E8  4242                    1826      CLR     D2
000026EA  1439 000033BF           1827      MOVE.B  DEST_MODE,D2
000026F0  1639 000033BE           1828      MOVE.B  DEST_REG,D3    
000026F6  4EB9 00002D2C           1829      JSR     EA_START
000026FC                          1830  
000026FC  6000 EBAA               1831      BRA      MEMORYGRABBER
00002700                          1832  
00002700                          1833                  ;SECOND SET OF COMMANDS
00002700  43F9 00003355           1834  PRINTBGT LEA PBGT,A1
00002706  103C 000E               1835      MOVE.B   #14,D0     ; moves #14 into data register D0
0000270A  4E4F                    1836      TRAP     #15       ; Displays message via trap 14
0000270C  4EB9 000028E2           1837      JSR SIZESPLIT
00002712  6000 034C               1838      BRA EADN
00002716                          1839  
00002716  43F9 00003359           1840  PRINTBEQ LEA PBEQ,A1
0000271C  103C 000E               1841      MOVE.B   #14,D0     ; moves #14 into data register D0
00002720  4E4F                    1842      TRAP     #15       ; Displays message via trap 14
00002722  4EB9 000028E2           1843      JSR SIZESPLIT
00002728  6000 0336               1844      BRA EADN
0000272C                          1845  
0000272C  43F9 0000335D           1846  PRINTBLE LEA PBLE,A1
00002732  103C 000E               1847      MOVE.B   #14,D0     ; moves #14 into data register D0
00002736  4E4F                    1848      TRAP     #15       ; Displays message via trap 14
00002738  4EB9 000028E2           1849      JSR SIZESPLIT
0000273E  6000 0320               1850      BRA EADN
00002742                          1851  
00002742  43F9 00003361           1852  PRINTBRA LEA PBRA,A1
00002748  103C 000E               1853      MOVE.B   #14,D0     ; moves #14 into data register D0
0000274C  4E4F                    1854      TRAP     #15       ; Displays message via trap 14
0000274E  4EB9 000028E2           1855      JSR SIZESPLIT
00002754  6000 030A               1856      BRA EADN
00002758                          1857      
00002758                          1858                  ;MOVEQ SECTION
00002758                          1859  PRINTMOVEQ 
00002758  43F9 0000333B           1860      LEA PMOVEQ,A1
0000275E  103C 000E               1861      MOVE.B   #14,D0     ; moves #14 into data register D0
00002762  4E4F                    1862      TRAP     #15       ; Displays message via trap 14
00002764                          1863      
00002764  4EB9 0000299A           1864      JSR     PRINTCLRSPOT
0000276A  4EB9 000029B6           1865      JSR     PRINTHASH   ; print hash
00002770  4EB9 000029C2           1866      JSR     PRINTDOLLARSIGN     ; print dollar sign  
00002776                          1867   
00002776  2239 000033C4           1868      MOVE.L      DATA_FIELD,D1
0000277C  143C 0010               1869      MOVE.B      #16,D2
00002780  103C 000F               1870      MOVE.B      #15,D0     ; moves #14 into data register D0
00002784  4E4F                    1871      TRAP        #15 
00002786                          1872      
00002786  4EB9 000029A8           1873      JSR     PRINTCOMA   ; print coma
0000278C  1E3C 0000               1874      MOVE.B #0,D7
00002790  7400                    1875      MOVE.L #%000,D2
00002792  1639 000033BE           1876      MOVE.B DEST_REG,D3
00002798  6000 02C6               1877      BRA EADN
0000279C                          1878  
0000279C                          1879                  ;OR SECTION
0000279C                          1880  PRINTOR 
0000279C  43F9 00003365           1881      LEA     POR,A1
000027A2  103C 000E               1882      MOVE.B  #14,D0     ; moves #14 into data register D0
000027A6  4E4F                    1883      TRAP    #15       ; Displays message via trap 14
000027A8  4EB9 00002934           1884      JSR     SIZEPRINT2 
000027AE                          1885      
000027AE                          1886      * TODO : CHECK THE INVELID_EA FLAG
000027AE                          1887      
000027AE  0C39 0000 000033D4      1888      CMP.B   #%0,XBit
000027B6  6700 0218               1889      BEQ     PRINT_EA_TO_DN
000027BA  6000 025C               1890      BRA     PRINT_DN_TO_EA
000027BE                          1891      
000027BE                          1892  
000027BE                          1893                  ;SUB SECTION
000027BE                          1894  PRINTSUB 
000027BE  43F9 00003368           1895      LEA PSUB,A1
000027C4  103C 000E               1896      MOVE.B   #14,D0     ; moves #14 into data register D0
000027C8  4E4F                    1897      TRAP     #15       ; Displays message via trap 14 
000027CA  4EB9 00002934           1898      JSR     SIZEPRINT2 
000027D0                          1899      
000027D0                          1900      * TODO : CHECK THE INVELID_EA FLAG
000027D0                          1901      
000027D0  0C39 0000 000033D4      1902      CMP.B   #%0,XBit
000027D8  6700 01F6               1903      BEQ     PRINT_EA_TO_DN
000027DC  6000 023A               1904      BRA     PRINT_DN_TO_EA
000027E0                          1905      
000027E0                          1906  
000027E0                          1907                  ;AND SECTION
000027E0                          1908  PRINTAND 
000027E0  43F9 0000336C           1909      LEA PAND,A1
000027E6  103C 000E               1910      MOVE.B   #14,D0     ; moves #14 into data register D0
000027EA  4E4F                    1911      TRAP     #15       ; Displays message via trap 14
000027EC  4EB9 00002934           1912      JSR     SIZEPRINT2 
000027F2                          1913      
000027F2                          1914      * TODO : CHECK THE INVELID_EA FLAG
000027F2                          1915      
000027F2  0C39 0000 000033D4      1916      CMP.B   #%0,XBit
000027FA  6700 01D4               1917      BEQ     PRINT_EA_TO_DN
000027FE  6000 0218               1918      BRA     PRINT_DN_TO_EA
00002802                          1919  
00002802                          1920                  ;ADD SPLIT              
00002802                          1921  PRINTADD 
00002802  43F9 00003370           1922      LEA PADD,A1
00002808  103C 000E               1923      MOVE.B   #14,D0     ; moves #14 into data register D0
0000280C  4E4F                    1924      TRAP     #15       ; Displays message via trap 14
0000280E                          1925      
0000280E  4EB9 00002934           1926      JSR     SIZEPRINT2 
00002814                          1927      
00002814                          1928      * TODO : CHECK THE INVELID_EA FLAG
00002814                          1929      
00002814  0C39 0000 000033D4      1930      CMP.B   #%0,XBit
0000281C  6700 01B2               1931      BEQ     PRINT_EA_TO_DN
00002820  6000 01F6               1932      BRA     PRINT_DN_TO_EA
00002824                          1933      
00002824                          1934  PRINTADDA 
00002824  43F9 00003374           1935      LEA PADDA,A1
0000282A  103C 000E               1936      MOVE.B   #14,D0     ; moves #14 into data register D0
0000282E  4E4F                    1937      TRAP     #15       ; Displays message via trap 14
00002830  4EB9 00002934           1938      JSR     SIZEPRINT2 
00002836                          1939      
00002836                          1940      * TODO : CHECK THE INVELID_EA FLAG
00002836                          1941      
00002836  13F9 000033C2 000033C0  1942      MOVE.B  TEMP_MODE,SRC_MODE
00002840  13F9 000033C3 000033C1  1943      MOVE.B  TEMP_REG,SRC_REG
0000284A  4243                    1944      CLR     D3
0000284C  4242                    1945      CLR     D2
0000284E  1439 000033C0           1946      MOVE.B  SRC_MODE,D2
00002854  1639 000033C1           1947      MOVE.B  SRC_REG,D3
0000285A  4EB9 00002D2C           1948      JSR     EA_START
00002860                          1949  
00002860  4EB9 000029A8           1950      JSR     PRINTCOMA   ; print coma
00002866                          1951      
00002866                          1952     * MOVE.B  #%001,DEST_MODE
00002866  4243                    1953      CLR     D3
00002868  4242                    1954      CLR     D2
0000286A  143C 0001               1955      MOVE.B  #%001,D2
0000286E  1639 000033BE           1956      MOVE.B  DEST_REG,D3
00002874  4EB9 00002D2C           1957      JSR     EA_START
0000287A                          1958  
0000287A  6000 EA2C               1959      BRA     MEMORYGRABBER
0000287E                          1960      
0000287E                          1961                  ;THIRD ROTATE SPLIT   
0000287E                          1962  PRINTROTATESPLIT 
0000287E  0C79 0000 00003329      1963      CMP #0,CommandDetail   
00002886                          1964      *BEQ PRINTLSL
00002886  0C79 0001 00003329      1965      CMP #1,CommandDetail   
0000288E                          1966      *BEQ PRINTLSLDOUBLE
0000288E  0C79 0002 00003329      1967      CMP #2,CommandDetail   
00002896                          1968      *BEQ PRINTLSR
00002896  0C79 0003 00003329      1969      CMP #3,CommandDetail   
0000289E                          1970      *BEQ PRINTLSRDOUBLE
0000289E  0C79 0004 00003329      1971      CMP #4,CommandDetail   
000028A6                          1972      *BEQ PRINTASR
000028A6  0C79 0005 00003329      1973      CMP #5,CommandDetail   
000028AE                          1974      *BEQ PRINTASRDOUBLE
000028AE  0C79 0006 00003329      1975      CMP #6,CommandDetail   
000028B6                          1976      *BEQ PRINTASL
000028B6  0C79 0007 00003329      1977      CMP #7,CommandDetail   
000028BE                          1978      *BEQ PRINTASLDOUBLE
000028BE  0C79 0008 00003329      1979      CMP #8,CommandDetail   
000028C6                          1980      *BEQ PRINTROL
000028C6  0C79 0009 00003329      1981      CMP #9,CommandDetail   
000028CE                          1982      *BEQ PRINTROLDOUBLE
000028CE  0C79 000A 00003329      1983      CMP #10,CommandDetail
000028D6                          1984      *BEQ PRINTROR     
000028D6  0C79 000B 00003329      1985      CMP #11,CommandDetail
000028DE                          1986      *BEQ PRINTRORDOUBLE            
000028DE  6000 E9C8               1987      BRA MEMORYGRABBER    
000028E2                          1988  
000028E2                          1989  
000028E2                          1990                  ;SIZE PRINTER
000028E2                          1991  SIZESPLIT   
000028E2  0CB9 00000001 000033AE  1992      CMP.L #1,SizeValue
000028EC  6700 0082               1993      BEQ PRINTB
000028F0  0CB9 00000002 000033AE  1994      CMP.L #2,SizeValue
000028FA  6700 0082               1995      BEQ PRINTW
000028FE  0CB9 00000003 000033AE  1996      CMP.L #3,SizeValue
00002908  6700 0082               1997      BEQ PRINTL
0000290C  6000 008C               1998      BRA PRINTCLRSPOT ; go to EA/DN section
00002910                          1999  
00002910                          2000  SIZEPRINT 
00002910  0C39 0000 000033C8      2001       CMP.B  #$0,SIZE
00002918  6700 0056               2002       BEQ    PRINTB
0000291C  0C39 0001 000033C8      2003       CMP.B  #$1,SIZE
00002924  6700 0058               2004       BEQ    PRINTW      
00002928  0C39 0002 000033C8      2005       CMP.B  #$2,SIZE
00002930  6700 005A               2006       BEQ    PRINTL 
00002934                          2007  
00002934                          2008  SIZEPRINT2   
00002934  0C39 0000 000033C8      2009      CMP.B   #$00,SIZE
0000293C  6700 0032               2010      BEQ     PRINTB
00002940  0C39 0001 000033C8      2011      CMP.B   #$01,SIZE
00002948  6700 0034               2012      BEQ     PRINTW
0000294C  0C39 0010 000033C8      2013      CMP.B   #$10,SIZE
00002954  6000 0036               2014      BRA     PRINTL
00002958                          2015  
00002958                          2016  SIZEPRINT3
00002958  0C39 0000 000033C8      2017      CMP.B   #$0,SIZE
00002960  6700 001C               2018      BEQ     PRINTW
00002964  0C39 0001 000033C8      2019      CMP.B   #$1,SIZE
0000296C  6700 001E               2020      BEQ     PRINTL
00002970                          2021  
00002970                          2022  PRINTB  
00002970  43F9 000033B2           2023      LEA     PB,A1
00002976  103C 000E               2024      MOVE.B  #14,D0     ; moves #14 into data register D0
0000297A  4E4F                    2025      TRAP    #15       ; Displays message via trap 14
0000297C  4E75                    2026      RTS
0000297E                          2027  
0000297E                          2028  PRINTW      
0000297E  43F9 000033B6           2029      LEA     PW,A1
00002984  103C 000E               2030      MOVE.B  #14,D0     ; moves #14 into data register D0
00002988  4E4F                    2031      TRAP    #15       ; Displays message via trap 14
0000298A  4E75                    2032      RTS
0000298C                          2033      
0000298C                          2034  PRINTL 
0000298C  43F9 000033BA           2035      LEA     PL,A1
00002992  103C 000E               2036      MOVE.B  #14,D0     ; moves #14 into data register D0
00002996  4E4F                    2037      TRAP    #15       ; Displays message via trap 14
00002998  4E75                    2038      RTS
0000299A                          2039  
0000299A                          2040  PRINTCLRSPOT 
0000299A  43F9 000033CB           2041      LEA     CLRSPOT,A1
000029A0  103C 000E               2042      MOVE.B  #14,D0     ; moves #14 into data register D0
000029A4  4E4F                    2043      TRAP    #15       ; Displays message via trap 14
000029A6  4E75                    2044      RTS
000029A8                          2045  
000029A8                          2046  PRINTCOMA   
000029A8  43F9 000033D1           2047      LEA     COMA,A1
000029AE  103C 000E               2048      MOVE.B  #14,D0     
000029B2  4E4F                    2049      TRAP    #15
000029B4  4E75                    2050      RTS
000029B6                          2051  
000029B6                          2052  PRINTHASH 
000029B6  43F9 000033C9           2053      LEA     HASH,A1    * print hash
000029BC  700E                    2054      MOVEQ   #14,D0
000029BE  4E4F                    2055      TRAP    #15
000029C0  4E75                    2056      RTS
000029C2                          2057  
000029C2                          2058  PRINTDOLLARSIGN   
000029C2  43F9 000033CF           2059      LEA     DOLLARSIGN,A1   * print dollar sign
000029C8  103C 000E               2060      MOVE.B  #14,D0
000029CC  4E4F                    2061      TRAP    #15 
000029CE  4E75                    2062      RTS
000029D0                          2063  
000029D0                          2064  PRINT_EA_TO_DN
000029D0  13F9 000033C2 000033C0  2065      MOVE.B  TEMP_MODE,SRC_MODE
000029DA  13F9 000033C3 000033C1  2066      MOVE.B  TEMP_REG,SRC_REG
000029E4  4243                    2067      CLR     D3
000029E6  4242                    2068      CLR     D2
000029E8  1439 000033C0           2069      MOVE.B  SRC_MODE,D2
000029EE  1639 000033C1           2070      MOVE.B  SRC_REG,D3
000029F4  4EB9 00002D2C           2071      JSR     EA_START
000029FA                          2072  
000029FA  4EB8 29A8               2073      JSR     PRINTCOMA   ; print coma
000029FE                          2074   
000029FE  4243                    2075      CLR     D3
00002A00  4242                    2076      CLR     D2
00002A02  1439 000033BF           2077      MOVE.B  DEST_MODE,D2
00002A08  1639 000033BE           2078      MOVE.B  DEST_REG,D3
00002A0E  4EB9 00002D2C           2079      JSR     EA_START
00002A14                          2080  
00002A14  6000 E892               2081      BRA     MEMORYGRABBER
00002A18                          2082      
00002A18                          2083  PRINT_DN_TO_EA    
00002A18  4243                    2084      CLR     D3
00002A1A  4242                    2085      CLR     D2
00002A1C  1439 000033BF           2086      MOVE.B  DEST_MODE,D2
00002A22  1639 000033C1           2087      MOVE.B  SRC_REG,D3
00002A28  4EB9 00002D2C           2088      JSR     EA_START
00002A2E                          2089      
00002A2E  4EB8 29A8               2090      JSR     PRINTCOMA   ; print coma
00002A32                          2091      
00002A32  13F9 000033C2 000033C0  2092      MOVE.B  TEMP_MODE,SRC_MODE
00002A3C  13F9 000033C3 000033C1  2093      MOVE.B  TEMP_REG,SRC_REG
00002A46  4243                    2094      CLR     D3
00002A48  4242                    2095      CLR     D2
00002A4A  1439 000033C0           2096      MOVE.B  SRC_MODE,D2
00002A50  1639 000033C1           2097      MOVE.B  SRC_REG,D3
00002A56  4EB9 00002D2C           2098      JSR     EA_START
00002A5C                          2099      
00002A5C  6000 E84A               2100      BRA     MEMORYGRABBER
00002A60                          2101  
00002A60                          2102  
00002A60                          2103                  ;PRINT EA/DN
00002A60                          2104  EADN 
00002A60  BE3C 0000               2105      CMP.B   #0,D7
00002A64  6700 0030               2106      BEQ     PRINTNOTRAIL
00002A68  BE3C 0001               2107      CMP.B   #1,D7
00002A6C  6700 000E               2108      BEQ     PRINTONETRAIL 
00002A70  BE3C 0002               2109      CMP.B   #2,D7
00002A74  6700 0010               2110      BEQ     PRINTTWOTRAIL
00002A78                          2111      
00002A78  6000 E82E               2112      BRA     MEMORYGRABBER
00002A7C                          2113      
00002A7C                          2114  PRINTONETRAIL 
00002A7C  4EB9 00002D2C           2115      JSR EA_Start
00002A82  6000 E824               2116      BRA MEMORYGRABBER
00002A86                          2117  
00002A86                          2118  PRINTTWOTRAIL 
00002A86  4EB9 00002D2C           2119      JSR EA_Start
00002A8C  4EB9 00002D2C           2120      JSR EA_Start
00002A92  6000 E814               2121      BRA MEMORYGRABBER
00002A96                          2122      
00002A96                          2123  PRINTNOTRAIL 
00002A96  4EB9 00002D2C           2124      JSR EA_Start
00002A9C  6000 E80A               2125      BRA MEMORYGRABBER
00002AA0                          2126  
00002AA0                          2127  CLOSINGSTATEMENTS     
00002AA0  43F9 00003324           2128      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002AA6  103C 000E               2129      MOVE.B   #14,D0     ; moves #14 into data register D0
00002AAA  4E4F                    2130      TRAP     #15       ; Displays message via trap 14
00002AAC                          2131     
00002AAC                          2132  STOP    
00002AAC  103C 0009               2133      MOVE.B #9,D0        ; moves #9 into data register D0
00002AB0  4E4F                    2134      TRAP     #15       ; halt simulator via trap 9
00002AB2                          2135     
00002AB2                          2136      
00002AB2                          2137  ;----------------------------- ADDED THIS FOR OP CODE PART 
00002AB2                          2138  ********* CHECK DESTINATION ***********
00002AB2                          2139  CHECK_DESTINATION
00002AB2  13FC 000F 000033D6      2140      MOVE.B  #$F,DstMode
00002ABA                          2141      
00002ABA  0C39 0007 000033BF      2142      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
00002AC2  6700 0026               2143      BEQ     CHECK_DEST_REG             * Checks registers
00002AC6                          2144      
00002AC6  0C39 0005 000033BF      2145      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
00002ACE  6700 0058               2146      BEQ     R_CHECK_DEST    * Print DATA instead 
00002AD2                          2147      
00002AD2  0C39 0006 000033BF      2148      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002ADA  6700 004C               2149      BEQ     R_CHECK_DEST    * Print DATA instead
00002ADE                          2150      
00002ADE  13F9 000033BF 000033D6  2151      MOVE.B  DEST_MODE,DstMode
00002AE8  4E75                    2152      RTS
00002AEA                          2153  CHECK_DEST_REG
00002AEA  0C39 0002 000033BE      2154      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002AF2  6700 0034               2155      BEQ     R_CHECK_DEST
00002AF6                          2156  
00002AF6  0C39 0003 000033BE      2157      CMP.B   #3,DEST_REG         * if DEST_REG = 011
00002AFE  6700 0028               2158      BEQ     R_CHECK_DEST
00002B02                          2159      
00002B02  0C39 0005 000033BE      2160      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002B0A  6C00 016C               2161      BGE     RETURN
00002B0E                          2162      
00002B0E  13F9 000033BF 000033D6  2163      MOVE.B  DEST_MODE,DstMode
00002B18  4286                    2164      CLR.L   D6
00002B1A  1C39 000033BE           2165      MOVE.B  DEST_REG,D6
00002B20  DD39 000033D6           2166      ADD.B   D6,DstMode
00002B26  4E75                    2167      RTS
00002B28                          2168  R_CHECK_DEST
00002B28  13FC 000E 000033D6      2169      MOVE.B  #$E,DstMode
00002B30  4E75                    2170      RTS
00002B32                          2171  ********* CHECK TEMP ***********
00002B32                          2172  CHECK_TEMP
00002B32                          2173  
00002B32  13FC 000F 000033D7      2174      MOVE.B  #$F,TempMode
00002B3A                          2175      
00002B3A  0C39 0007 000033C2      2176      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
00002B42  6700 0026               2177      BEQ     CHECK_TEMP_REG      * Checks registers
00002B46                          2178  
00002B46  0C39 0005 000033C2      2179      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
00002B4E  6700 0058               2180      BEQ     R_CHECK_TEMP    * 
00002B52                          2181      
00002B52  0C39 0006 000033C2      2182      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
00002B5A  6700 004C               2183      BEQ     R_CHECK_TEMP    * 
00002B5E                          2184      
00002B5E  13F9 000033C2 000033D7  2185      MOVE.B  TEMP_MODE,TempMode
00002B68  4E75                    2186      RTS
00002B6A                          2187  CHECK_TEMP_REG
00002B6A  0C39 0002 000033C3      2188      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
00002B72  6700 0034               2189      BEQ     R_CHECK_TEMP
00002B76                          2190  
00002B76  0C39 0003 000033C3      2191      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
00002B7E  6700 0028               2192      BEQ     R_CHECK_TEMP
00002B82                          2193      
00002B82  0C39 0005 000033C3      2194      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002B8A  6700 00EC               2195      BEQ     RETURN
00002B8E                          2196      
00002B8E  13F9 000033C2 000033D7  2197      MOVE.B  TEMP_MODE,TempMode
00002B98  4286                    2198      CLR.L   D6
00002B9A  1C39 000033C3           2199      MOVE.B  TEMP_REG,D6
00002BA0  DD39 000033D7           2200      ADD.B   D6,TempMode
00002BA6  4E75                    2201      RTS
00002BA8                          2202  R_CHECK_TEMP
00002BA8  13FC 000E 000033D7      2203      MOVE.B  #$E,TempMode
00002BB0  4E75                    2204      RTS
00002BB2                          2205  ******************** CHECK_SOURCE ******************** 
00002BB2                          2206  CHECK_SOURCE    * TODO
00002BB2  13FC 000F 000033D8      2207      MOVE.B  #$F,SrcMode
00002BBA                          2208      
00002BBA  0C39 0007 000033C0      2209      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002BC2  6700 0026               2210      BEQ     CHECK_SOURCE_REG    * Checks registers
00002BC6                          2211  
00002BC6  0C39 0005 000033C0      2212      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
00002BCE  6700 0058               2213      BEQ     R_CHECK_SOURCE 
00002BD2                          2214      
00002BD2  0C39 0006 000033C0      2215      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002BDA  6700 004C               2216      BEQ     R_CHECK_SOURCE 
00002BDE                          2217      
00002BDE  13F9 000033C0 000033D8  2218      MOVE.B  SRC_MODE,SrcMode
00002BE8  4E75                    2219      RTS
00002BEA                          2220  CHECK_SOURCE_REG
00002BEA  0C39 0002 000033C1      2221      CMP.B   #2,SRC_REG             * if RRRS = 010
00002BF2  6700 0034               2222      BEQ     R_CHECK_SOURCE
00002BF6                          2223  
00002BF6  0C39 0003 000033C1      2224      CMP.B   #3,SRC_REG          * if RRRS = 011
00002BFE  6700 0028               2225      BEQ     R_CHECK_SOURCE
00002C02                          2226      
00002C02  0C39 0005 000033C1      2227      CMP.B   #5,SRC_REG      * if RRRS = 101
00002C0A  6C00 006C               2228      BGE     RETURN
00002C0E                          2229      
00002C0E  13F9 000033C0 000033D8  2230      MOVE.B  SRC_MODE,SrcMode
00002C18  4286                    2231      CLR.L   D6
00002C1A  1C39 000033C1           2232      MOVE.B  SRC_REG,D6
00002C20  DD39 000033D8           2233      ADD.B   D6,SrcMode
00002C26  4E75                    2234      RTS
00002C28                          2235  R_CHECK_SOURCE
00002C28  13FC 000E 000033D8      2236      MOVE.B  #$E,SrcMode
00002C30  4E75                    2237      RTS
00002C32                          2238  ******************** XBIT ********************
00002C32                          2239  CHECK_XBIT      
00002C32  0C39 0000 000033D4      2240      CMP.B   #%0,XBit
00002C3A  6700 0008               2241      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002C3E  6600 001E               2242      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002C42  4E75                    2243      RTS
00002C44                          2244  TEMP_TO_DEST
00002C44  13F9 000033C3 000033BE  2245      MOVE.B  TEMP_REG,DEST_REG
00002C4E  13F9 000033C2 000033BF  2246      MOVE.B  TEMP_MODE,DEST_MODE
00002C58  4EB8 2AB2               2247      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002C5C  4E75                    2248      RTS
00002C5E                          2249  TEMP_TO_SRC
00002C5E  13F9 000033C3 000033C1  2250      MOVE.B  TEMP_REG,SRC_REG
00002C68  13F9 000033C2 000033C0  2251      MOVE.B  TEMP_MODE,SRC_MODE
00002C72  4EB8 2BB2               2252      JSR     CHECK_SOURCE                 
00002C76  4E75                    2253      RTS
00002C78                          2254    
00002C78                          2255  ******************** OTHER COMMANDS ********************
00002C78                          2256  RETURN
00002C78  4E75                    2257      RTS
00002C7A                          2258  
00002C7A                          2259  FORMAT_DATA
00002C7A  0C39 0000 000033C4      2260      CMP.B   #0,DATA_FIELD
00002C82  66F4                    2261      BNE     RETURN
00002C84  13FC 0008 000033C4      2262      MOVE.B  #8,DATA_FIELD
00002C8C  4E75                    2263      RTS
00002C8E                          2264  
00002C8E                          2265  CHECK_DATA_NEG
00002C8E  BC3C 0080               2266      CMP.B   #128,D6
00002C92  6700 0004               2267      BEQ     PRINT_NEG
00002C96  4E75                    2268      RTS
00002C98                          2269      
00002C98                          2270  PRINT_NEG
00002C98  43F9 000033CD           2271      LEA     NEG,A1      * print "-"
00002C9E  103C 000E               2272      MOVE.B  #14,D0
00002CA2  4E4F                    2273      TRAP    #15
00002CA4  4E75                    2274      RTS
00002CA6                          2275  
00002CA6                          2276  PRINT_DATA
00002CA6  43F9 00003396           2277      LEA     PDATA,A1
00002CAC  103C 000E               2278      MOVE.B  #14,D0
00002CB0  4E4F                    2279      TRAP    #15
00002CB2                          2280      
00002CB2  4EB8 299A               2281      JSR     PRINTCLRSPOT      * print space
00002CB6                          2282      
00002CB6  4EB8 29B6               2283      JSR PRINTHASH
00002CBA  4EB8 29C2               2284      JSR PRINTDOLLARSIGN
00002CBE  3239 000033AA           2285      MOVE.W      COMMANDDATA,D1
00002CC4  143C 0010               2286      MOVE.B      #16,D2
00002CC8  103C 000F               2287      MOVE.B      #15,D0     ; moves #14 into data register D0
00002CCC  4E4F                    2288      TRAP        #15  
00002CCE                          2289      * TODO: PRINT #$
00002CCE                          2290      * TODO: PRINT COMMANDDATA 
00002CCE  6000 E5D8               2291      BRA     MEMORYGRABBER
00002CD2                          2292      
00002CD2                          2293      
00002CD2                          2294  *SETINVEA
00002CD2                          2295      *MOVE.B  #1,INVALID_EA
00002CD2                          2296      *RTS     
00002CD2                          2297      
00002CD2                          2298  CLEARMR
00002CD2  13FC 0000 000033BE      2299      MOVE.B  #0,DEST_REG 
00002CDA  13FC 0000 000033BF      2300      MOVE.B  #0,DEST_MODE
00002CE2  13FC 0000 000033C0      2301      MOVE.B  #0,SRC_MODE
00002CEA  13FC 0000 000033C1      2302      MOVE.B  #0,SRC_REG
00002CF2  13FC 0000 000033C2      2303      MOVE.B  #0,TEMP_MODE
00002CFA  13FC 0000 000033C3      2304      MOVE.B  #0,TEMP_REG 
00002D02  13FC 0000 000033C8      2305      MOVE.B  #0,SIZE
00002D0A  13FC 0000 000033AE      2306      MOVE.B  #0,SizeValue
00002D12  23FC 00000000 000033C4  2307      MOVE.L  #0,DATA_FIELD
00002D1C  7200                    2308      MOVE.L #0,D1
00002D1E  7400                    2309      MOVE.L #0,D2
00002D20  7600                    2310      MOVE.L #0,D3
00002D22  7800                    2311      MOVE.L #0,D4
00002D24  7A00                    2312      MOVE.L #0,D5
00002D26  7C00                    2313      MOVE.L #0,D6
00002D28  7E00                    2314      MOVE.L #0,D7
00002D2A  4E75                    2315      RTS  
00002D2C                          2316  
00002D2C                          2317  *************    
00002D2C                          2318  
00002D2C                          2319  *******************************************************
00002D2C                          2320  * EA subroutine
00002D2C                          2321  * Purpose: Generate EA
00002D2C                          2322  *         Addresses used: 
00002D2C                          2323  *            D2 FOR MODE
00002D2C                          2324  *            D3 FOR REGISTER
00002D2C                          2325  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002D2C                          2326  *            D1 FOR PRINTING
00002D2C                          2327  *            A6 MIMICKS INSTRUCTION BUFFER
00002D2C                          2328  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002D2C                          2329  ***************************************************
00002D2C                          2330  
00002D2C  0C39 000F 000033D9      2331  EA_start        CMP.B      #$F,STATE
00002D34  6700 039A               2332                  BEQ        EA_FINISH
00002D38  4EF9 000030D2           2333                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002D3E                          2334  
00002D3E  B47C 0000               2335  Continue_EA     CMP.W       #MODE000,D2             
00002D42  6700 0036               2336                  BEQ         DATA_REGISTER                 
00002D46  B47C 0001               2337                  CMP.W       #MODE001,D2               
00002D4A  6700 004A               2338                  BEQ         ADDRESS_REGISTER                 
00002D4E  B47C 0002               2339                  CMP.W       #MODE010,D2              
00002D52  6700 005E               2340                  BEQ         ADDRESS_REGISTER_DIRECT               
00002D56  B47C 0003               2341                  CMP.W       #MODE011,D2              
00002D5A  6700 0086               2342                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002D5E  B47C 0004               2343                  CMP.W       #MODE100,D2          
00002D62  6700 00B8               2344                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002D66  B47C 0007               2345                  CMP.W       #MODE111,D2          
00002D6A  6700 00EA               2346                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002D6E  13FC 0001 000033D9      2347                  MOVE.B      #BAD_FLAG,STATE               
00002D76  6000 0358               2348                  BRA         EA_FINISH              
00002D7A                          2349                  
00002D7A                          2350  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002D7A  123C 0044               2351                  MOVE.B   #D,D1
00002D7E  103C 0006               2352                  MOVE.B  #6,D0
00002D82  4E4F                    2353                  TRAP    #15
00002D84  0685 00000030           2354                  ADDI.L   #$30,D5
00002D8A  1205                    2355                  MOVE.B   D5,D1
00002D8C  103C 0006               2356                  MOVE.B  #6,D0
00002D90  4E4F                    2357                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002D92  6000 033C               2358                  BRA      EA_FINISH
00002D96                          2359                      
00002D96                          2360  
00002D96  123C 0041               2361  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002D9A  103C 0006               2362                   MOVE.B  #6,D0
00002D9E  4E4F                    2363                   TRAP    #15
00002DA0  0685 00000030           2364                   ADDI.L   #$30,D5
00002DA6  1205                    2365                   MOVE.B   D5,D1
00002DA8  103C 0006               2366                   MOVE.B  #6,D0
00002DAC  4E4F                    2367                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002DAE  6000 0320               2368                   BRA      EA_FINISH
00002DB2                          2369  
00002DB2                          2370                   
00002DB2                          2371  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002DB2  123C 0028               2372                          MOVE.B   #OPEN_PARENTHESIS,D1
00002DB6  103C 0006               2373                          MOVE.B   #6,D0
00002DBA  4E4F                    2374                          TRAP     #15
00002DBC  123C 0041               2375                          MOVE.B   #A,D1
00002DC0  103C 0006               2376                          MOVE.B  #6,D0
00002DC4  4E4F                    2377                          TRAP    #15
00002DC6  0685 00000030           2378                          ADDI.L   #$30,D5
00002DCC  1205                    2379                          MOVE.B   D5,D1
00002DCE  103C 0006               2380                          MOVE.B  #6,D0
00002DD2  4E4F                    2381                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002DD4  123C 0029               2382                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002DD8  103C 0006               2383                          MOVE.B  #6,D0
00002DDC  4E4F                    2384                          TRAP    #15
00002DDE  6000 02F0               2385                          BRA      EA_FINISH
00002DE2                          2386  
00002DE2                          2387  
00002DE2                          2388  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002DE2  123C 0028               2389                             MOVE.B   #OPEN_PARENTHESIS,D1
00002DE6  103C 0006               2390                             MOVE.B   #6,D0
00002DEA  4E4F                    2391                             TRAP     #15
00002DEC  123C 0041               2392                             MOVE.B   #A,D1
00002DF0  103C 0006               2393                             MOVE.B  #6,D0
00002DF4  4E4F                    2394                             TRAP    #15
00002DF6  0685 00000030           2395                             ADDI.L   #$30,D5
00002DFC  1205                    2396                             MOVE.B   D5,D1
00002DFE  103C 0006               2397                             MOVE.B  #6,D0
00002E02  4E4F                    2398                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E04  123C 0029               2399                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002E08  103C 0006               2400                             MOVE.B  #6,D0
00002E0C  4E4F                    2401                             TRAP    #15
00002E0E                          2402                           *  MOVE.B   #PLUS_SIGN,(A4)+
00002E0E  123C 002B               2403                           MOVE.B   #PLUS_SIGN,D1
00002E12  103C 0006               2404                             MOVE.B  #6,D0
00002E16  4E4F                    2405                             TRAP    #15
00002E18  6000 02B6               2406                             BRA      EA_FINISH
00002E1C                          2407  
00002E1C                          2408  
00002E1C                          2409  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002E1C  123C 002D               2410                             MOVE.B   #MINUS_SIGN,D1
00002E20  103C 0006               2411                             MOVE.B   #6,D0
00002E24  4E4F                    2412                             TRAP        #15
00002E26  123C 0028               2413                             MOVE.B   #OPEN_PARENTHESIS,D1
00002E2A  103C 0006               2414                             MOVE.B   #6,D0
00002E2E  4E4F                    2415                             TRAP     #15
00002E30  123C 0041               2416                             MOVE.B   #A,D1
00002E34  103C 0006               2417                             MOVE.B  #6,D0
00002E38  4E4F                    2418                             TRAP    #15
00002E3A  0685 00000030           2419                             ADDI.L   #$30,D5
00002E40  1205                    2420                             MOVE.B   D5,D1
00002E42  103C 0006               2421                             MOVE.B  #6,D0
00002E46  4E4F                    2422                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E48  123C 0029               2423                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002E4C  103C 0006               2424                             MOVE.B  #6,D0
00002E50  4E4F                    2425                             TRAP    #15
00002E52  6000 027C               2426                             BRA      EA_FINISH
00002E56                          2427  
00002E56                          2428  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002E56  6000 0002               2429                                BRA  CONTINUE_A_I_A
00002E5A                          2430                                
00002E5A                          2431                                
00002E5A                          2432  CONTINUE_A_I_A                
00002E5A  BA3C 0004               2433                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002E5E  6700 001E               2434                                BEQ         IMMIDIATE_REGISTER                
00002E62  BA3C 0000               2435                                CMP.B       #0,D5                ; WORD ADDRESSING
00002E66  6700 0048               2436                                BEQ         WORD_ADDRESSING                
00002E6A  BA3C 0001               2437                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002E6E  6700 0054               2438                                BEQ         LONG_ADDRESSING              
00002E72  13FC 0001 000033D9      2439                                MOVE.B      #BAD_FLAG,STATE              
00002E7A  6000 0254               2440                                BRA         EA_FINISH                * jump to end   
00002E7E                          2441                                
00002E7E                          2442                                
00002E7E  123C 0023               2443  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002E82  103C 0006               2444                                MOVE.B #6,D0
00002E86  4E4F                    2445                                TRAP   #15
00002E88  0C39 0001 000033C8      2446                                CMP.B #1,SIZE   ;BYTE
00002E90  6700 0046               2447                                BEQ   GETBYTE
00002E94  0C39 0002 000033C8      2448                                CMP.B #2,SIZE   ;BYTE
00002E9C  6700 0044               2449                                BEQ   GETWORD
00002EA0  0C39 0003 000033C8      2450                                CMP.B #3,SIZE   ;BYTE
00002EA8  6700 0042               2451                                BEQ   GETLONG
00002EAC  6000 003E               2452                                BRA   GETLONG
00002EB0                          2453                                
00002EB0                          2454  
00002EB0  123C 0024               2455  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002EB4  103C 0006               2456                               MOVE.B #6,D0
00002EB8  4E4F                    2457                               TRAP  #15
00002EBA  3E1E                    2458                               MOVE.W  (A6)+,D7
00002EBC  6000 00BE               2459                               BRA   PRINT_WORD
00002EC0  6000 020E               2460                               BRA   EA_FINISH
00002EC4                          2461  
00002EC4  123C 0024               2462  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002EC8  103C 0006               2463                               MOVE.B #6,D0
00002ECC  4E4F                    2464                               TRAP  #15
00002ECE  2E1E                    2465                               MOVE.L  (A6)+,D7
00002ED0  6000 0128               2466                               BRA   PRINT_LONG
00002ED4  6000 01FA               2467                               BRA   EA_FINISH                            
00002ED8                          2468  
00002ED8                          2469  GETBYTE      
00002ED8  1E1E                    2470                  MOVE.B   (A6)+,D7    
00002EDA  6B00 001A               2471                  BMI     ADD_NEGATIVE
00002EDE  6000 0024               2472                  BRA     PRINT_BRANCHING
00002EE2                          2473  GETWORD                
00002EE2  3E1E                    2474                  MOVE.W   (A6)+,D7
00002EE4  6B00 0010               2475                  BMI     ADD_NEGATIVE
00002EE8  6000 001A               2476                  BRA     PRINT_BRANCHING
00002EEC                          2477  GETLONG                
00002EEC                          2478                  
00002EEC  2E1E                    2479                  MOVE.L   (A6)+,D7
00002EEE  6B00 0006               2480                  BMI     ADD_NEGATIVE
00002EF2  6000 0010               2481                  BRA     PRINT_BRANCHING
00002EF6                          2482                  
00002EF6  123C 002D               2483  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00002EFA  123C 0006               2484                  MOVE.B #6,D1
00002EFE  4E4F                    2485                  TRAP   #15
00002F00  6000 0002               2486                  BRA    PRINT_BRANCHING
00002F04                          2487  
00002F04                          2488  
00002F04  0C39 0001 000033C8      2489  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002F0C  6700 001C               2490                  BEQ    PRINT_BYTE    
00002F10  0C39 0002 000033C8      2491                  CMP.B #2,SIZE   ;WORD
00002F18  6700 0062               2492                  BEQ    PRINT_WORD
00002F1C  0C39 0003 000033C8      2493                  CMP.B  #3,SIZE  ;LONG
00002F24  6700 00D4               2494                  BEQ    PRINT_LONG
00002F28  60DA                    2495                  BRA    PRINT_BRANCHING
00002F2A                          2496  
00002F2A                          2497  
00002F2A                          2498  
00002F2A                          2499  
00002F2A                          2500                  
00002F2A                          2501  **** BYTE DATA PRINTING***********************
00002F2A  4241                    2502  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002F2C                          2503                 
00002F2C                          2504  
00002F2C  BEBC 0000000F           2505                 CMP.L   #$F,D7              
00002F32  6F00 0006               2506                 BLE     BYTE_ONE_LOOP                  
00002F36  6000 000E               2507                 BRA     READ_BYTE
00002F3A                          2508  
00002F3A                          2509  BYTE_ONE_LOOP
00002F3A  13FC 0001 000033F4      2510                  MOVE.B  #1,NUMBER_OF_HEX  
00002F42  6000 0002               2511                  BRA     READ_BYTE
00002F46                          2512      
00002F46                          2513  READ_BYTE                           
00002F46  0C39 0000 000033F4      2514      CMP.B   #0,NUMBER_OF_HEX               
00002F4E  6700 0014               2515      BEQ     COPYBYTE
00002F52                          2516      
00002F52  123C 0030               2517      MOVE.B  #$30,D1             
00002F56  103C 0006               2518      MOVE.B  #6,D0               
00002F5A  4E4F                    2519      TRAP    #15
00002F5C                          2520  
00002F5C  5339 000033F4           2521      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002F62  60E2                    2522      BRA     READ_BYTE           ; LOOP
00002F64                          2523      
00002F64                          2524  COPYBYTE
00002F64  2207                    2525      MOVE.L  D7,D1               ; COPY DATA 
00002F66  143C 0010               2526      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002F6A  103C 000F               2527      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002F6E  4E4F                    2528      TRAP    #15
00002F70  13FC 0000 000033F4      2529      MOVE.B  #0,NUMBER_OF_HEX
00002F78  6000 0156               2530      BRA  EA_FINISH
00002F7C                          2531  
00002F7C                          2532  
00002F7C                          2533  
00002F7C                          2534  
00002F7C                          2535  
00002F7C                          2536  ******PRINT WORD DATA******************
00002F7C  4241                    2537  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002F7E                          2538                 
00002F7E                          2539  
00002F7E  BEBC 0000000F           2540                 CMP.L   #$F,D7              
00002F84  6F00 001A               2541                 BLE     WORD_ONE_LOOP
00002F88  BEBC 000000FF           2542                 CMP.L   #$FF,D7              
00002F8E  6F00 001C               2543                 BLE     WORD_TWO_LOOP
00002F92  BEBC 00000FFF           2544                 CMP.L   #$FFF,D7              
00002F98  6F00 001E               2545                 BLE     WORD_THREE_LOOP                  
00002F9C  6000 0026               2546                 BRA     READ_WORD
00002FA0                          2547  
00002FA0                          2548  WORD_ONE_LOOP
00002FA0  13FC 0001 000033F4      2549                  MOVE.B  #1,NUMBER_OF_HEX  
00002FA8  6000 001A               2550                  BRA     READ_WORD
00002FAC                          2551                  
00002FAC                          2552  WORD_TWO_LOOP
00002FAC  13FC 0002 000033F4      2553                  MOVE.B  #2,NUMBER_OF_HEX  
00002FB4  6000 000E               2554                  BRA     READ_WORD
00002FB8                          2555                  
00002FB8                          2556  WORD_THREE_LOOP
00002FB8  13FC 0003 000033F4      2557                  MOVE.B  #3,NUMBER_OF_HEX  
00002FC0  6000 0002               2558                  BRA     READ_WORD                
00002FC4                          2559      
00002FC4                          2560  READ_WORD                           
00002FC4  0C39 0000 000033F4      2561      CMP.B   #0,NUMBER_OF_HEX               
00002FCC  6700 0014               2562      BEQ     COPYWORD
00002FD0                          2563      
00002FD0  123C 0030               2564      MOVE.B  #$30,D1             
00002FD4  103C 0006               2565      MOVE.B  #6,D0               
00002FD8  4E4F                    2566      TRAP    #15
00002FDA                          2567  
00002FDA  5339 000033F4           2568      SUBI.B  #1,NUMBER_OF_HEX              
00002FE0  60E2                    2569      BRA     READ_WORD                   ; LOOP
00002FE2                          2570  
00002FE2                          2571  COPYWORD
00002FE2  2207                    2572      MOVE.L  D7,D1               ; COPY DATA 
00002FE4  143C 0010               2573      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002FE8  103C 000F               2574      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002FEC  4E4F                    2575      TRAP    #15
00002FEE  13FC 0000 000033F4      2576      MOVE.B  #0,NUMBER_OF_HEX
00002FF6  6000 00D8               2577      BRA  EA_FINISH
00002FFA                          2578  
00002FFA                          2579  ****************PRINT LONG DATA*****************
00002FFA  4241                    2580  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00002FFC                          2581                 
00002FFC                          2582  
00002FFC  BEBC 0000000F           2583                 CMP.L   #$F,D7              
00003002  6F00 0042               2584                 BLE     LONG_ONE_LOOP
00003006  BEBC 000000FF           2585                 CMP.L   #$FF,D7              
0000300C  6F00 0044               2586                 BLE     LONG_TWO_LOOP
00003010  BEBC 00000FFF           2587                 CMP.L   #$FFF,D7              
00003016  6F00 0046               2588                 BLE     LONG_THREE_LOOP
0000301A  BEBC 0000FFFF           2589                 CMP.L   #$FFFF,D7              
00003020  6F00 0048               2590                 BLE     LONG_FOUR_LOOP
00003024  BEBC 000FFFFF           2591                 CMP.L   #$FFFFF,D7              
0000302A  6F00 004A               2592                 BLE     LONG_FIVE_LOOP
0000302E  BEBC 00FFFFFF           2593                 CMP.L   #$FFFFFF,D7              
00003034  6F00 004C               2594                 BLE     LONG_SIX_LOOP
00003038  BEBC 0FFFFFFF           2595                 CMP.L   #$FFFFFFF,D7              
0000303E  6F00 004E               2596                 BLE     LONG_SEVEN_LOOP                  
00003042  6000 0056               2597                 BRA     READ_LONG
00003046                          2598  
00003046                          2599  LONG_ONE_LOOP
00003046  13FC 0001 000033F4      2600                  MOVE.B  #1,NUMBER_OF_HEX  
0000304E  6000 004A               2601                  BRA     READ_LONG
00003052                          2602                  
00003052                          2603  LONG_TWO_LOOP
00003052  13FC 0002 000033F4      2604                  MOVE.B  #2,NUMBER_OF_HEX  
0000305A  6000 003E               2605                  BRA     READ_LONG
0000305E                          2606                  
0000305E                          2607  LONG_THREE_LOOP
0000305E  13FC 0003 000033F4      2608                  MOVE.B  #3,NUMBER_OF_HEX  
00003066  6000 0032               2609                  BRA     READ_LONG                
0000306A                          2610  LONG_FOUR_LOOP
0000306A  13FC 0004 000033F4      2611                  MOVE.B  #4,NUMBER_OF_HEX  
00003072  6000 0026               2612                  BRA     READ_LONG
00003076                          2613                  
00003076                          2614  LONG_FIVE_LOOP
00003076  13FC 0005 000033F4      2615                  MOVE.B  #5,NUMBER_OF_HEX  
0000307E  6000 001A               2616                  BRA     READ_LONG
00003082                          2617                  
00003082                          2618  LONG_SIX_LOOP
00003082  13FC 0006 000033F4      2619                  MOVE.B  #6,NUMBER_OF_HEX  
0000308A  6000 000E               2620                  BRA     READ_LONG
0000308E                          2621  LONG_SEVEN_LOOP
0000308E  13FC 0007 000033F4      2622                  MOVE.B  #7,NUMBER_OF_HEX  
00003096  6000 0002               2623                  BRA     READ_LONG
0000309A                          2624  
0000309A                          2625       
0000309A                          2626  READ_LONG                           
0000309A  0C39 0000 000033F4      2627      CMP.B   #0,NUMBER_OF_HEX               
000030A2  6700 0014               2628      BEQ     COPYLONG
000030A6  123C 0030               2629      MOVE.B  #$30,D1             
000030AA  103C 0006               2630      MOVE.B  #6,D0               
000030AE  4E4F                    2631      TRAP    #15
000030B0                          2632  
000030B0  5339 000033F4           2633      SUBI.B  #1,NUMBER_OF_HEX               
000030B6  60E2                    2634      BRA     READ_LONG                   ; LOOP
000030B8                          2635  
000030B8                          2636  COPYLONG
000030B8  2207                    2637      MOVE.L  D7,D1               ; COPY DATA 
000030BA  143C 0010               2638      MOVE.B  #16,D2              ; USIGN BASE TO 16
000030BE  103C 000F               2639      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
000030C2  4E4F                    2640      TRAP    #15
000030C4  13FC 0000 000033F4      2641      MOVE.B  #0,NUMBER_OF_HEX
000030CC  6000 0002               2642      BRA  EA_FINISH
000030D0                          2643  
000030D0                          2644    
000030D0                          2645  
000030D0  4E75                    2646  EA_FINISH      RTS
000030D2                          2647  
000030D2                          2648  
000030D2                          2649  
000030D2                          2650  
000030D2                          2651  ************************************************
000030D2                          2652  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
000030D2                          2653  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
000030D2                          2654  ************************************************
000030D2                          2655  REGISTER_NUMBER_TO_DECIMAL 
000030D2  B67C 0000               2656                             CMP.W       #REG_0,D3
000030D6  6700 0046               2657                             BEQ         RG0
000030DA  B67C 0001               2658                             CMP.W       #REG_1,D3
000030DE  6700 0046               2659                             BEQ         RG1
000030E2  B67C 0002               2660                             CMP.W       #REG_2,D3
000030E6  6700 0046               2661                             BEQ         RG2
000030EA  B67C 0003               2662                             CMP.W       #REG_3,D3
000030EE  6700 0046               2663                             BEQ         RG3
000030F2  B67C 0004               2664                             CMP.W       #REG_4,D3
000030F6  6700 0046               2665                             BEQ         RG4
000030FA  B67C 0005               2666                             CMP.W       #REG_5,D3
000030FE  6700 0046               2667                             BEQ         RG5
00003102  B67C 0006               2668                             CMP.W       #REG_6,D3
00003106  6700 0046               2669                             BEQ         RG6
0000310A  B67C 0007               2670                             CMP.W       #REG_7,D3
0000310E  6700 0046               2671                             BEQ         RG7
00003112  13FC 0001 000033D9      2672                             MOVE.B      #BAD_FLAG,STATE
0000311A  4EF8 2D3E               2673                             JMP         CONTINUE_EA
0000311E                          2674   
0000311E  1A3C 0000               2675  RG0    MOVE.B   #0,D5
00003122  4EF8 2D3E               2676         JMP      Continue_EA
00003126  1A3C 0001               2677  RG1    MOVE.B   #1,D5
0000312A  4EF8 2D3E               2678         JMP      Continue_EA
0000312E  1A3C 0002               2679  RG2    MOVE.B   #2,D5
00003132  4EF8 2D3E               2680         JMP      Continue_EA
00003136  1A3C 0003               2681  RG3    MOVE.B   #3,D5
0000313A  4EF8 2D3E               2682         JMP      Continue_EA
0000313E  1A3C 0004               2683  RG4    MOVE.B   #4,D5
00003142  4EF8 2D3E               2684         JMP      Continue_EA
00003146  1A3C 0005               2685  RG5    MOVE.B   #5,D5
0000314A  4EF8 2D3E               2686         JMP      Continue_EA
0000314E  1A3C 0006               2687  RG6    MOVE.B   #6,D5
00003152  4EF8 2D3E               2688         JMP      Continue_EA
00003156  1A3C 0007               2689  RG7    MOVE.B   #7,D5
0000315A  4EF8 2D3E               2690         JMP      Continue_EA 
0000315E                          2691      
0000315E                          2692  ;------------------------------------------------
0000315E                          2693      
0000315E                          2694  Float   DS.L 1 #0
00003162                          2695  
00003162                          2696  ValOne    DS.B 1 #0
00003163                          2697  ValTwo    DS.B 1 #0
00003164                          2698  ValThree    DS.B 1 #0
00003165                          2699  ValFour    DS.B 1 #0
00003166                          2700  ValFive    DS.B 1 #0
00003167                          2701  ValSix    DS.B 1 #0
00003168                          2702  ValSeven    DS.B 1 #0
00003169                          2703  ValEight    DS.B 1 #0
0000316A                          2704  
0000316A                          2705  Addsum DS.W 1 #0
0000316C                          2706  CarryBit DS.B 1 #0   
0000316D                          2707  
0000316D                          2708  Trailers DS.B 1 #0
0000316E                          2709  Source DS.L 1 #0
00003172                          2710  Destination DS.L 1 #0
00003176                          2711  
00003176                          2712          ;generic command lines
00003176= 57 65 6C 63 6F 6D ...   2713  WELCOME DC.B 'Welcome to our decoder',CR,LF,0
0000318F= 50 6C 65 61 73 65 ...   2714  USERPAGEBREAK DC.B 'Please Press enter to see next 25 codes',0
000031B7= 4E 75 6D 62 65 72 ...   2715  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
000031E3= 53 65 63 6F 6E 64 ...   2716  OUTOFORDER DC.B    'Second Num lower than the first Num, please reenter second Num',CR,LF,0
00003224= 50 6C 65 61 73 65 ...   2717  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory address, perferablly in 8 byte form: ',0 
00003267= 50 6C 65 61 73 65 ...   2718  MESSAGESECONDADRESS DC.B    'Please enter ending memory address, perferablly in 8 byte form: ',0 
000032A8= 59 6F 75 20 68 61 ...   2719  FINALMESSAGE1    DC.B    'You have reached the end of the program',CR,LF,0
000032D2= 50 6C 65 61 73 65 ...   2720  FINALMESSAGE2    DC.B    'Please enter 0 to exit, or 1 to restart: ',0
000032FC= 45 78 69 74 69 6E ...   2721  GOODBYEMESSAGE    DC.B    'Exiting, have a good rest of your day',CR,LF,0
00003324= 20 0D 0A 00             2722  CLEAR DC.B      ' ',CR,LF,0
00003328                          2723  
00003328                          2724          ;the collection of actual command lines to print
00003328                          2725  CommandPrinter    DS.B 1 #0
00003329                          2726  CommandDetail    DS.B 1 #0
0000332A= 4D 4F 56 45 00          2727  PMOVE DC.B      'MOVE',0
0000332F= 4D 4F 56 45 4D 00       2728  PMOVEM DC.B      'MOVEM',0
00003335= 4D 4F 56 45 41 00       2729  PMOVEA DC.B      'MOVEA',0
0000333B= 4D 4F 56 45 51 00       2730  PMOVEQ DC.B      'MOVEQ',0
00003341= 4E 4F 50 00             2731  PNOP DC.B      'NOP',0
00003345= 4C 45 41 00             2732  PLEA DC.B      'LEA',0
00003349= 4E 4F 54 00             2733  PNOT DC.B      'NOT',0
0000334D= 4A 53 52 00             2734  PJSR DC.B      'JSR',0
00003351= 52 54 53 00             2735  PRTS DC.B      'RTS',0
00003355= 42 47 54 00             2736  PBGT DC.B      'BGT',0
00003359= 42 45 51 00             2737  PBEQ DC.B      'BEQ',0
0000335D= 42 4C 45 00             2738  PBLE DC.B      'BLE',0
00003361= 42 52 41 00             2739  PBRA DC.B      'BRA',0
00003365= 4F 52 00                2740  POR DC.B      'OR',0
00003368= 53 55 42 00             2741  PSUB DC.B      'SUB',0
0000336C= 41 4E 44 00             2742  PAND DC.B      'AND',0
00003370= 41 44 44 00             2743  PADD DC.B      'ADD',0
00003374= 41 44 44 41 00          2744  PADDA DC.B      'ADDA',0
00003379= 41 44 44 51 00          2745  PADDQ DC.B      'ADDQ',0
0000337E= 4C 53 4C 00             2746  PLSL DC.B      'LSL',0
00003382= 4C 53 52 00             2747  PLSR DC.B      'LSR',0
00003386= 41 53 52 00             2748  PASR DC.B      'ASR',0
0000338A= 41 53 4C 00             2749  PASL DC.B      'ASL',0
0000338E= 52 4F 4C 00             2750  PROL DC.B      'ROL',0
00003392= 52 4F 52 00             2751  PROR DC.B      'ROR',0
00003396                          2752  
00003396= 44 41 54 41 00          2753  PDATA   DC.B    'DATA',0
0000339B                          2754  
0000339B= 00                      2755  INPUT   DC.B    0
0000339C                          2756  
0000339C= 00000000                2757  STARTINGADDRESS     DC.L 0
000033A0= 00000000                2758  CURRENTADDRESS      DC.L 0
000033A4= 00000000                2759  ENDINGADDRESS       DC.L 0
000033A8= 0000                    2760  CYCLECOUNTER        DC.W 0
000033AA= 0000                    2761  COMMANDDATA         DC.W 0
000033AC= 00                      2762  Bits                DC.B 0
000033AD                          2763  
000033AD                          2764          ;the sizes to print
000033AE                          2765  SizeValue           DS.L 1 #0
000033B2= 2E 42 20 00             2766  PB DC.B      '.B ',0
000033B6= 2E 57 20 00             2767  PW DC.B      '.W ',0
000033BA= 2E 4C 20 00             2768  PL DC.B      '.L ',0
000033BE                          2769  
000033BE                          2770  ;----- ADDED FOR THE OP CODE PART
000033BE                          2771  
000033BE= 00                      2772  DEST_REG        DC.B    0
000033BF= 00                      2773  DEST_MODE       DC.B    0
000033C0                          2774  
000033C0= 00                      2775  SRC_MODE        DC.B    0
000033C1= 00                      2776  SRC_REG         DC.B    0
000033C2                          2777  
000033C2= 00                      2778  TEMP_MODE       DC.B    0
000033C3= 00                      2779  TEMP_REG        DC.B    0
000033C4                          2780  
000033C4                          2781  DATA_FIELD      DS.L    1 #0
000033C8= 00                      2782  SIZE            DC.B    0
000033C9                          2783  
000033C9= 23 00                   2784  HASH            DC.B    '#',0
000033CB= 20 00                   2785  CLRSPOT         DC.B    ' ',0
000033CD= 2D 00                   2786  NEG             DC.B    '-',0
000033CF= 24 00                   2787  DOLLARSIGN      DC.B    '$',0
000033D1= 2C 00                   2788  COMA            DC.B    ',',0
000033D3                          2789  
000033D3= 00                      2790  INDEX           DC.B    0
000033D4                          2791  
000033D4= 00                      2792  XBIT            DC.B    0
000033D5= 00                      2793  INVALID_EA      DC.B    0
000033D6                          2794  
000033D6= 00                      2795  DstMode         DC.B    0
000033D7= 00                      2796  TempMode        DC.B    0
000033D8= 00                      2797  SrcMode         DC.B    0
000033D9                          2798  
000033D9                          2799  ;------ ADDED FOR EA CODE PART
000033D9                          2800  
000033D9  =00000000               2801  REG_0  EQU         %000
000033D9  =00000001               2802  REG_1  EQU         %001
000033D9  =00000002               2803  REG_2  EQU         %010
000033D9  =00000003               2804  REG_3  EQU         %011
000033D9  =00000004               2805  REG_4  EQU         %100
000033D9  =00000005               2806  REG_5  EQU         %101
000033D9  =00000006               2807  REG_6  EQU         %110
000033D9  =00000007               2808  REG_7  EQU         %111
000033D9                          2809  
000033D9  =00000000               2810  MODE000       EQU         %000                   * MODE Dn
000033D9  =00000001               2811  MODE001       EQU         %001                   * MODE An
000033D9  =00000002               2812  MODE010       EQU         %010                   * MODE (An)
000033D9  =00000003               2813  MODE011       EQU         %011                   * MODE (An)+
000033D9  =00000004               2814  MODE100       EQU         %100                   * MODE -(An)
000033D9  =00000007               2815  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
000033D9                          2816  
000033D9= 00                      2817  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
000033DA  =00000001               2818  BAD_FLAG      EQU         1
000033DA= 00008000                2819  word          DC.L        $8000
000033DE                          2820  SIZE_IL       DS.L        1             ;SIZE ISOLATION
000033E2                          2821  DR            DS.L        1             ;DIRECTION ISOLATION
000033E6                          2822  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
000033EA                          2823  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
000033EE                          2824  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
000033F2                          2825  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
000033F3                          2826  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
000033F4= 00                      2827  NUMBER_OF_HEX DC.B        0
000033F5                          2828  dRG           DS.B        1
000033F6                          2829  dMODE         DS.B        1
000033F7                          2830  sRG           DS.B        1
000033F8                          2831  
000033F8= 00000100                2832  print_buffer  DC.l       $100
000033FC                          2833  
000033FC                          2834  ******************************MOVE and MOVEA values******************
000033FC                          2835  
000033FC= 00                      2836  OpName            DC.B     $00                     * 0 = MOVE, 1 = MOVEA
000033FD                          2837  
000033FE= 0000                    2838  myWord              DC.W     $0000                   * 16 bit instruction Word
00003400= 00                      2839  ID                DC.B     $00                     * First 4 bit value ID
00003401= FF                      2840  DstReg            DC.B     $FF                     * Destination Register Value D3
00003402= FF                      2841  DstMod            DC.B     $FF                     * Destination Mode Value D2
00003403= FF                      2842  SrcReg            DC.B     $FF                     * Source Register Value D3 JUMP EA_start
00003404= FF                      2843  SrcMod            DC.B     $FF                     * Source Register Mode D2
00003405                          2844  
00003406= 00000000                2845  opDta1            DC.L     $00000000               * Data value one (most likely source)
0000340A= FF                      2846  opDta1T           DC.B     $FF                     * Data value one type ($FF not set, 0=byte, 1=word, 2=long)
0000340C= 00000000                2847  opDta2            DC.L     $00000000               * Data value two (most likely destination)
00003410= FF                      2848  opDta2T           DC.B     $FF                     * Data value two type ($FF not set, 0=byte, 1=word, 2=long)
00003411                          2849                 
00003411= 01                      2850  Err               DC.B     $01                     * Error byte, 1 = OK, 0 = Error                 
00003412                          2851  
00003412= 2C 00                   2852  Comma             DC.B     ',', 0
00003414                          2853  
00003414                          2854  ***** ASCII VALUES FOR EA CHARACTERS**************
00003414  =00000044               2855  D                       EQU      $44
00003414  =00000041               2856  A                       EQU      $41
00003414  =00000028               2857  OPEN_PARENTHESIS        EQU      $28
00003414  =00000024               2858  DOLLAR_SIGN             EQU      $24
00003414  =00000029               2859  CLOSED_PARENTHESIS      EQU      $29
00003414  =0000002B               2860  PLUS_SIGN               EQU      $2B
00003414  =0000002D               2861  MINUS_SIGN              EQU      $2D
00003414  =00000023               2862  HASH_TAG                EQU      $23
00003414  =00000025               2863  PERCENT_SIGN            EQU      $25
00003414                          2864  
00003414                          2865  
00003414                          2866      
00003414                          2867      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2E56
ADDRESS_REGISTER    2D96
ADDRESS_REGISTER_DECREMENT  2E1C
ADDRESS_REGISTER_DIRECT  2DB2
ADDRESS_REGISTER_INCREMENT  2DE2
ADDSUM              316A
ADD_NEGATIVE        2EF6
BADVAL              31B7
BAD_FLAG            1
BITS                33AC
BYTE_ONE_LOOP       2F3A
CARRYBIT            316C
CCHECK_ADD          1AAC
CEHCK_DESTREG       15FE
CHAR1               1178
CHAR2               1190
CHARSUB             11A8
CHECK_ADD           1A98
CHECK_ADDA          1AB0
CHECK_ADDQ          195A
CHECK_AND           1C1C
CHECK_DATA_NEG      2C8E
CHECK_DESTINATION   2AB2
CHECK_DESTMOD       15EE
CHECK_DEST_REG      2AEA
CHECK_ID_AS         20A4
CHECK_ID_LS         20C4
CHECK_ID_RO         20B4
CHECK_JSR           18D4
CHECK_LEA           16EE
CHECK_MOVE          1422
CHECK_MOVEM_1000    17FE
CHECK_MOVEM_1100    18AC
CHECK_MOVEQ         1AD0
CHECK_NOP_JSR_RTS   18B4
CHECK_NOP_RTS       193A
CHECK_NOT           177A
CHECK_OR            1B2E
CHECK_SOURCE        2BB2
CHECK_SOURCE_REG    2BEA
CHECK_SRCMOD        1520
CHECK_SRCREG        1530
CHECK_SUB           1BA4
CHECK_TEMP          2B32
CHECK_TEMP_REG      2B6A
CHECK_XBIT          2C32
CLEAR               3324
CLEARMR             2CD2
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   2AA0
CLRSPOT             33CB
CMP_SIZE            14D2
COMA                33D1
COMMA               3412
COMMANDDATA         33AA
COMMANDDETAIL       3329
COMMANDPRINTER      3328
COMPARE_0100        16B6
COMPARE_0110        19DE
COMPARE_1101        1A0E
COMPARE_1110        1C94
COMPARE_GROUPS      13B2
CONTINUE_A_I_A      2E5A
CONTINUE_EA         2D3E
COPYBYTE            2F64
COPYLONG            30B8
COPYWORD            2FE2
CR                  D
CURRENTADDRESS      33A0
CYCLECOUNTER        33A8
D                   44
DATA_FIELD          33C4
DATA_REGISTER       2D7A
DESTINATION         3172
DEST_MODE           33BF
DEST_REG            33BE
DMODE               33F6
DOLLARSIGN          33CF
DOLLAR_SIGN         24
DONE                11D2
DR                  33E2
DRG                 33F5
DRN                 33F3
DSTMOD              3402
DSTMODE             33D6
DSTREG              3401
DS_MOVE             14AE
DS_MOVEA            14BA
DTADSTLNG           1630
DTADSTWRD           161A
DTASRCIMD           1558
DTASRCIMDB          1580
DTASRCIMDL          15AC
DTASRCIMDW          1596
DTASRCLNG           15D8
DTASRCWRD           15C2
EADN                2A60
EA_FINISH           30D0
EA_START            2D2C
EIGHT_SHIFT         259C
ENDING              1324
ENDINGADDRESS       33A4
ENTRYLOOP           11C0
ERR                 3411
ERROR               1646
EXIT                1220
FINALMESSAGE1       32A8
FINALMESSAGE2       32D2
FLOAT               315E
FORMAT_DATA         2C7A
G14_MEMS            1F4C
G14_MEMS_AS         203E
G14_MEMS_LS         1F72
G14_MEMS_RO         1FD8
G14_TYPE            33E6
GAS_EA              1EF6
GETBYTE             2ED8
GETLONG             2EEC
GETWORD             2EE2
GLS_EA              1D5E
GOODBYE             136E
GOODBYEMESSAGE      32FC
GRO_EA              1E2A
G_AS                1E80
G_LS                1CE8
G_RO                1DB4
HASH                33C9
HASH_TAG            23
ID                  3400
IMMIDIATE_REGISTER  2E7E
INDEX               33D3
INPUT               339B
INT2                1158
INTSUB              1170
INVALID             11B0
INVALID_EA          33D5
IR_IL               33EA
IS_EIGHT            25AA
LARGERISSUE         127E
LARGERTHAN          129C
LF                  A
LOADDATAONE         101E
LOADDATATWO         1070
LONG_ADDRESSING     2EC4
LONG_FIVE_LOOP      3076
LONG_FOUR_LOOP      306A
LONG_ONE_LOOP       3046
LONG_SEVEN_LOOP     308E
LONG_SIX_LOOP       3082
LONG_THREE_LOOP     305E
LONG_TWO_LOOP       3052
LOOP_READ_BITS      1394
MEMORYGRABBER       12A8
MESSAGEFIRSTADRESS  3224
MESSAGESECONDADRESS  3267
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
MYDONE              1650
MYWORD              33FE
NEG                 33CD
NUMBER_OF_HEX       33F4
OPDTA1              3406
OPDTA1T             340A
OPDTA2              340C
OPDTA2T             3410
OPEN_PARENTHESIS    28
OPNAME              33FC
OUTOFORDER          31E3
PADD                3370
PADDA               3374
PADDQ               3379
PAGEBREAK           1302
PAND                336C
PASL                338A
PASR                3386
PB                  33B2
PBEQ                3359
PBGT                3355
PBLE                335D
PBRA                3361
PDATA               3396
PERCENT_SIGN        25
PJSR                334D
PL                  33BA
PLEA                3345
PLSL                337E
PLSR                3382
PLUS_SIGN           2B
PMOVE               332A
PMOVEA              3335
PMOVEM              332F
PMOVEQ              333B
PNOP                3341
PNOT                3349
POR                 3365
PRINTADD            2802
PRINTADDA           2824
PRINTADDQ           26B4
PRINTAND            27E0
PRINTB              2970
PRINTBEQ            2716
PRINTBGT            2700
PRINTBLE            272C
PRINTBRA            2742
PRINTCLRSPOT        299A
PRINTCOMA           29A8
PRINTDOLLARSIGN     29C2
PRINTHASH           29B6
PRINTJSR            2678
PRINTL              298C
PRINTLEA            2606
PRINTMOVE           25B4
PRINTMOVEA          25CA
PRINTMOVEM          25F0
PRINTMOVEQ          2758
PRINTNOP            25E0
PRINTNOT            264C
PRINTNOTRAIL        2A96
PRINTONETRAIL       2A7C
PRINTOR             279C
PRINTROTATESPLIT    287E
PRINTRTS            26A4
PRINTSUB            27BE
PRINTTWOTRAIL       2A86
PRINTW              297E
PRINT_BRANCHING     2F04
PRINT_BUFFER        33F8
PRINT_BYTE          2F2A
PRINT_DATA          2CA6
PRINT_DN_TO_EA      2A18
PRINT_EA_TO_DN      29D0
PRINT_LONG          2FFA
PRINT_NEG           2C98
PRINT_WORD          2F7C
PROL                338E
PROR                3392
PRTS                3351
PR_AS               242C
PR_ASR              2514
PR_ASR_EA           225E
PR_ASR_MEM          2112
PR_G14_MEMS_AS      20D4
PR_G14_MEMS_LS      213E
PR_G14_MEMS_RO      21A2
PR_G_AS_EA          2206
PR_G_LS_EA          22A2
PR_G_RO_EA          233E
PR_LS               247E
PR_LSR              24D0
PR_LSR_EA           22FA
PR_LSR_MEM          2176
PR_RO               23DA
PR_ROR              2558
PR_ROR_EA           2396
PR_ROR_MEM          21DA
PSUB                3368
PW                  33B6
READ_BITS           138A
READ_BYTE           2F46
READ_LONG           309A
READ_WORD           2FC4
REGISTER_NUMBER_TO_DECIMAL  30D2
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2C78
RG0                 311E
RG1                 3126
RG2                 312E
RG3                 3136
RG4                 313E
RG5                 3146
RG6                 314E
RG7                 3156
R_CHECK_DEST        2B28
R_CHECK_SOURCE      2C28
R_CHECK_TEMP        2BA8
SET                 13AA
SIZE                33C8
SIZEPRINT           2910
SIZEPRINT2          2934
SIZEPRINT3          2958
SIZESPLIT           28E2
SIZEVALUE           33AE
SIZE_B              14F6
SIZE_IL             33DE
SIZE_L              1512
SIZE_W              1504
SOURCE              316E
SRCMOD              3404
SRCMODE             33D8
SRCREG              3403
SRC_MODE            33C0
SRC_REG             33C1
SRG                 33F7
SRN                 33F2
START               1000
STARTCHECK          1140
STARTINGADDRESS     339C
STATE               33D9
STOP                2AAC
STOREADRESSES       1290
S_COUNT             33EE
TEMPMODE            33D7
TEMP_MODE           33C2
TEMP_REG            33C3
TEMP_TO_DEST        2C44
TEMP_TO_SRC         2C5E
TRAILERS            316D
USERPAGEBREAK       318F
VAL1                10C6
VAL2                10D0
VAL3                10E0
VAL4                10F0
VAL5                1100
VAL6                1110
VAL7                1120
VAL8                1130
VALEIGHT            3169
VALFIVE             3166
VALFOUR             3165
VALONE              3162
VALSEVEN            3168
VALSIX              3167
VALTHREE            3164
VALTWO              3163
WELCOME             3176
WORD                33DA
WORD_ADDRESSING     2EB0
WORD_ONE_LOOP       2FA0
WORD_THREE_LOOP     2FB8
WORD_TWO_LOOP       2FAC
XBIT                33D4
