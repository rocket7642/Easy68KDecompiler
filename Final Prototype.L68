00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/7/2021 5:11:53 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000  7400                      12      MOVE.L #0,D2
00001002  6000 0002                 13      BRA LOADDATAONE
00001006                            14      
00001006                            15  * TODO: a welcome message with format message 
00001006                            16      
00001006                            17  LOADDATAONE
00001006  43F9 00002DF7             18      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
0000100C  103C 000E                 19      MOVE.B   #14,D0     ; moves #14 into data register D0
00001010  4E4F                      20      TRAP     #15       ; Displays message via trap 14    
00001012                            21      
00001012  43F9 00002ECD             22      LEA     INPUT,A1
00001018  103C 0002                 23      MOVE.B  #2,D0 *takes the string of what the user enters
0000101C  4E4F                      24      TRAP    #15
0000101E                            25      
0000101E  4280                      26      CLR.L   D0
00001020                            27      
00001020                            28      * TODO: check if the input if odd - invalid imput
00001020                            29      
00001020                            30  
00001020                            31      
00001020  1A3C 0000                 32      MOVE.B  #0,D5
00001024                            33      
00001024  13D9 0000A000             34      MOVE.B (A1)+,$A000
0000102A  13D9 0000A010             35      MOVE.B (A1)+,$A010
00001030  13D9 0000A020             36      MOVE.B (A1)+,$A020
00001036  13D9 0000A030             37      MOVE.B (A1)+,$A030
0000103C  13D9 0000A040             38      MOVE.B (A1)+,$A040
00001042  13D9 0000A050             39      MOVE.B (A1)+,$A050
00001048  13D9 0000A060             40      MOVE.B (A1)+,$A060
0000104E  13D9 0000A070             41      MOVE.B (A1)+,$A070
00001054                            42      
00001054  6000 004C                 43      BRA VAL1
00001058                            44  
00001058                            45  LOADDATATWO    
00001058  43F9 00002E1D             46      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
0000105E  103C 000E                 47      MOVE.B   #14,D0     ; moves #14 into data register D0
00001062  4E4F                      48      TRAP     #15       ; Displays message via trap 14    
00001064                            49      
00001064  103C 0002                 50      MOVE.B  #2,D0 *takes the string of what the user enters
00001068  4E4F                      51      TRAP    #15
0000106A                            52      
0000106A  1A3C 0000                 53      MOVE.B  #0,D5
0000106E                            54      
0000106E  13D9 0000A000             55      MOVE.B (A1)+,$A000
00001074  13D9 0000A010             56      MOVE.B (A1)+,$A010
0000107A  13D9 0000A020             57      MOVE.B (A1)+,$A020
00001080  13D9 0000A030             58      MOVE.B (A1)+,$A030
00001086  13D9 0000A040             59      MOVE.B (A1)+,$A040
0000108C  13D9 0000A050             60      MOVE.B (A1)+,$A050
00001092  13D9 0000A060             61      MOVE.B (A1)+,$A060
00001098  13D9 0000A070             62      MOVE.B (A1)+,$A070
0000109E                            63      
0000109E  6000 0002                 64      BRA VAL1
000010A2                            65  
000010A2                            66      
000010A2                            67  VAL1    
000010A2  1839 0000A000             68      MOVE.B $A000,D4
000010A8  6000 0072                 69      BRA STARTCHECK
000010AC  13C4 0000A000             70  VAL2    MOVE.B D4,$A000
000010B2  1839 0000A010             71      MOVE.B $A010,D4
000010B8  6000 0062                 72      BRA STARTCHECK
000010BC  13C4 0000A010             73  VAL3    MOVE.B D4,$A010
000010C2  1839 0000A020             74      MOVE.B $A020,D4
000010C8  6000 0052                 75      BRA STARTCHECK
000010CC  13C4 0000A020             76  VAL4    MOVE.B D4,$A020
000010D2  1839 0000A030             77      MOVE.B $A030,D4
000010D8  6000 0042                 78      BRA STARTCHECK
000010DC  13C4 0000A030             79  VAL5    MOVE.B D4,$A030
000010E2  1839 0000A040             80      MOVE.B $A040,D4
000010E8  6000 0032                 81      BRA STARTCHECK
000010EC  13C4 0000A040             82  VAL6    MOVE.B D4,$A040
000010F2  1839 0000A050             83      MOVE.B $A050,D4
000010F8  6000 0022                 84      BRA STARTCHECK
000010FC  13C4 0000A050             85  VAL7    MOVE.B D4,$A050
00001102  1839 0000A060             86      MOVE.B $A060,D4
00001108  6000 0012                 87      BRA STARTCHECK
0000110C  13C4 0000A060             88  VAL8    MOVE.B D4,$A060
00001112  1839 0000A070             89      MOVE.B $A070,D4
00001118  6000 0002                 90      BRA STARTCHECK
0000111C                            91    
0000111C                            92  STARTCHECK  
0000111C  B83C 0030                 93      CMP.B   #48,D4
00001120  6D00 006A                 94      BLT INVALID
00001124  B83C 0030                 95      CMP.B   #48,D4
00001128  6700 0022                 96      BEQ INTSUB
0000112C  B83C 0030                 97      CMP.B   #48,D4
00001130  6E00 0002                 98      BGT INT2
00001134                            99      
00001134                           100  
00001134                           101  INT2 
00001134                           102      
00001134  B83C 0039                103      CMP.B   #57,D4
00001138  6D00 0012                104      BLT INTSUB
0000113C  B83C 0039                105      CMP.B   #57,D4
00001140  6700 000A                106      BEQ INTSUB
00001144  B83C 0039                107      CMP.B   #57,D4
00001148  6E00 000A                108      BGT CHAR1
0000114C                           109      
0000114C                           110  INTSUB 
0000114C  0404 0030                111      SUB.B #$30,D4
00001150  6000 005C                112      BRA     DONE
00001154                           113  
00001154                           114  CHAR1 
00001154                           115      
00001154  B83C 0041                116      CMP.B   #65,D4
00001158  6D00 0032                117      BLT INVALID
0000115C  B83C 0041                118      CMP.B   #65,D4
00001160  6700 0022                119      BEQ CHARSUB
00001164  B83C 0041                120      CMP.B   #65,D4
00001168  6E00 0002                121      BGT CHAR2
0000116C                           122      
0000116C                           123  CHAR2 
0000116C                           124      
0000116C  B83C 0046                125      CMP.B   #70,D4
00001170  6D00 0012                126      BLT CHARSUB
00001174  B83C 0046                127      CMP.B   #70,D4
00001178  6700 000A                128      BEQ CHARSUB
0000117C  B83C 0046                129      CMP.B   #70,D4
00001180  6E00 000A                130      BGT INVALID
00001184                           131      
00001184                           132  CHARSUB 
00001184  0404 0037                133      SUB.B #$37,D4
00001188  6000 0024                134      BRA DONE
0000118C                           135      
0000118C                           136  INVALID 
0000118C  43F9 00002DCB            137      LEA BADVAL,A1
00001192  103C 000E                138      MOVE.B   #14,D0     ; moves #14 into data register D0
00001196  4E4F                     139      TRAP     #15       ; Displays message via trap 14
00001198  6000 0002                140      BRA     ENTRYLOOP
0000119C                           141      
0000119C                           142  ENTRYLOOP
0000119C  B43C 0000                143      CMP.B #0,D2
000011A0  6700 FE64                144      BEQ LOADDATAONE
000011A4  B43C 0001                145      CMP.B #1,D2
000011A8  6700 FEAE                146      BEQ LOADDATATWO
000011AC  4E75                     147      RTS
000011AE                           148      
000011AE  5205                     149  DONE    ADD.B #1,D5
000011B0  BA3C 0000                150          CMP.B #0,D5
000011B4  6700 FEEC                151          BEQ VAL1
000011B8  BA3C 0001                152          CMP.B #1,D5
000011BC  6700 FEEE                153          BEQ VAL2
000011C0  BA3C 0002                154          CMP.B #2,D5
000011C4  6700 FEF6                155          BEQ VAL3
000011C8  BA3C 0003                156          CMP.B #3,D5
000011CC  6700 FEFE                157          BEQ VAL4
000011D0  BA3C 0004                158          CMP.B #4,D5
000011D4  6700 FF06                159          BEQ VAL5
000011D8  BA3C 0005                160          CMP.B #5,D5
000011DC  6700 FF0E                161          BEQ VAL6
000011E0  BA3C 0006                162          CMP.B #6,D5
000011E4  6700 FF16                163          BEQ VAL7
000011E8  BA3C 0007                164          CMP.B #7,D5
000011EC  6700 FF1E                165          BEQ VAL8
000011F0  BA3C 0008                166          CMP.B #8,D5
000011F4  6700 0006                167          BEQ EXIT
000011F8                           168          
000011F8  6000 FF22                169          BRA     STARTCHECK
000011FC                           170  
000011FC                           171  
000011FC                           172  
000011FC  13C4 0000A070            173  EXIT    MOVE.B D4,$A070
00001202                           174      
00001202  4284                     175      CLR.L D4
00001204  D839 0000A000            176      ADD.B $A000,D4
0000120A  E98C                     177      LSL.L #4,D4
0000120C  D839 0000A010            178      ADD.B $A010,D4
00001212  E98C                     179      LSL.L #4,D4
00001214  D839 0000A020            180      ADD.B $A020,D4
0000121A  E98C                     181      LSL.L #4,D4
0000121C  D839 0000A030            182      ADD.B $A030,D4
00001222  E98C                     183      LSL.L #4,D4
00001224  D839 0000A040            184      ADD.B $A040,D4
0000122A  E98C                     185      LSL.L #4,D4
0000122C  D839 0000A050            186      ADD.B $A050,D4
00001232  E98C                     187      LSL.L #4,D4
00001234  D839 0000A060            188      ADD.B $A060,D4
0000123A  E98C                     189      LSL.L #4,D4
0000123C  D839 0000A070            190      ADD.B $A070,D4
00001242                           191      
00001242  2E04                     192      MOVE.L D4,D7
00001244  4244                     193      CLR D4
00001246  B43C 0001                194      CMP.B #1,D2
0000124A  6700 000E                195      BEQ STOREADRESSES
0000124E  2C07                     196      MOVE.L D7,D6
00001250  143C 0001                197      MOVE.B #1,D2
00001254  7A00                     198      MOVE.L #0,D5
00001256  6000 FE00                199      BRA LOADDATATWO
0000125A                           200      
0000125A                           201  ;---------------------------------------------------------
0000125A                           202  
0000125A                           203  STOREADRESSES
0000125A  23C7 00002ED6            204      MOVE.L  D7,ENDINGADDRESS
00001260  23C6 00002ECE            205      MOVE.L  D6,STARTINGADDRESS
00001266  4247                     206      CLR     D7
00001268  2E79 00002ED6            207      MOVE.L   ENDINGADDRESS,A7
0000126E  2C79 00002ECE            208      MOVE.L   STARTINGADDRESS,A6
00001274  4EF9 0000127A            209      JMP     MEMORYGRABBER
0000127A                           210      
0000127A                           211  MEMORYGRABBER
0000127A  BDF9 00002ED6            212      CMPA.L  ENDINGADDRESS,A6
00001280  6E00 1428                213      BGT     ENDING 
00001284                           214      
00001284  0C39 0019 00002EDA       215       CMP.B   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
0000128C  6700 0038                216       BEQ     PAGEBREAK
00001290  5239 00002EDA            217       ADD.B   #1,CYCLECOUNTER
00001296                           218      
00001296                           219      * TODO: CLEAR MODES AND REGISTERS
00001296                           220      
00001296  23CE 00002ED2            221      MOVE.L      A6,CURRENTADDRESS   
0000129C  2239 00002ED2            222      MOVE.L      CURRENTADDRESS,D1
000012A2  143C 0010                223      MOVE.B      #16,D2
000012A6  103C 000F                224      MOVE.B      #15,D0     ; moves #14 into data register D0
000012AA  4E4F                     225      TRAP        #15  
000012AC  43F9 00002EFC            226      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
000012B2  103C 000E                227      MOVE.B   #14,D0     ; moves #14 into data register D0
000012B6  4E4F                     228      TRAP     #15  
000012B8                           229      
000012B8  361E                     230      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012BA  33C3 00002EDA            231      MOVE.W      D3, COMMANDDATA
000012C0                           232   
000012C0  6000 0044                233      BRA         COMPARE_GROUPS
000012C4                           234      
000012C4  60B4                     235      BRA MEMORYGRABBER
000012C6                           236      
000012C6                           237  PAGEBREAK
000012C6  43F9 00002DB6            238      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
000012CC  103C 000E                239      MOVE.B   #14,D0     ; moves #14 into data register D0
000012D0  4E4F                     240      TRAP     #15       ; Displays message via trap 14
000012D2  43F9 00002ECD            241      LEA     INPUT,A1
000012D8  103C 0002                242      MOVE.B  #2,D0 *takes the string of what the user enters
000012DC  4E4F                     243      TRAP    #15
000012DE                           244      
000012DE                           245      
000012DE                           246  ;-------------------------- OP CODE SECTION -------------------------------
000012DE                           247  
000012DE                           248  READ_BITS
000012DE  4287                     249      CLR.L   D7
000012E0  4284                     250      CLR.L   D4
000012E2  1E39 00002EDC            251      MOVE.B  Bits,D7
000012E8                           252      
000012E8                           253  LOOP_READ_BITS    
000012E8  BE3C 0000                254      CMP.B   #0,D7           * counter
000012EC  6700 1592                255      BEQ     RETURN
000012F0                           256      
000012F0  E34C                     257      LSL.W   #1,D4           * make space for new bit
000012F2  E34B                     258      LSL.W   #1,D3          
000012F4                           259  
000012F4  6500 0008                260      BCS     SET             * if 1, then branch to SET
000012F8  5307                     261      SUBI.B  #1,D7          
000012FA  4EF8 12E8                262      JMP     LOOP_READ_BITS
000012FE                           263  SET
000012FE  5244                     264      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
00001300  5307                     265      SUBI.B  #1, D7
00001302  4EF8 12E8                266      JMP     LOOP_READ_BITS  
00001306                           267      
00001306                           268  
00001306                           269  
00001306                           270  
00001306                           271  COMPARE_GROUPS              * comapres the 4 bits of the instruction
00001306  13FC 0004 00002EDC       272      MOVE.B  #4,Bits         
0000130E  4EB8 12DE                273      JSR     READ_BITS       * get the first 4 bits and store it in D4
00001312                           274  
00001312  B87C 0001                275      CMP.W   #%0001,D4      
00001316                           276      *BEQ     CHECK_MOVE_B    * if equal, goes to CHECK_MOVE.B
00001316                           277      
00001316  B87C 0002                278      CMP.W   #%0010,D4      
0000131A                           279      *BEQ     COMPARE_0010    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
0000131A                           280      
0000131A  B87C 0003                281      CMP.W   #%0011,D4      
0000131E                           282      *BEQ     COMPARE_0011    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
0000131E                           283      
0000131E  B87C 0004                284      CMP.W   #%0100,D4      
00001322  6700 0036                285      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
00001326                           286      
00001326  B87C 0005                287      CMP.W   #%0101,D4      
0000132A  6700 02DE                288      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
0000132E                           289      
0000132E  B87C 0006                290      CMP.W   #%0110,D4      
00001332                           291      *BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
00001332                           292      
00001332  B87C 0007                293      CMP.W   #%0111,D4      
00001336  6700 0494                294      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
0000133A                           295      
0000133A  B87C 0008                296      CMP.W   #%1000,D4      
0000133E                           297      *BEQ     CHECK_OR        * if equal, goes to CHECK_OR
0000133E                           298      
0000133E  B87C 0009                299      CMP.W   #%1001,D4      
00001342                           300      *BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
00001342                           301      
00001342  B87C 000C                302      CMP.W   #%1100,D4      
00001346                           303      *BEQ     CHECK_AND       * if equal, goes to CHECK_AND
00001346                           304      
00001346  B87C 000D                305      CMP.W   #%1101,D4      
0000134A  6700 0348                306      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
0000134E                           307      
0000134E  B87C 000E                308      CMP.W   #%1110,D4      
00001352  6700 04D6                309      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
00001356                           310      
00001356  6600 1556                311      BNE     PRINT_DATA      * all other instructions are not supported 
0000135A                           312  
0000135A                           313  
0000135A                           314  
0000135A                           315  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
0000135A                           316  
0000135A                           317  COMPARE_0100
0000135A  0803 000C                318      BTST.L  #$0C,D3             * compare bit 8 for LEA
0000135E  6600 0032                319      BNE     CHECK_LEA
00001362                           320      
00001362  13FC 0004 00002EDC       321      MOVE.B  #4,Bits
0000136A  4EB8 12DE                322      JSR     READ_BITS
0000136E                           323      
0000136E  B87C 0006                324      CMP.W   #%0110,D4
00001372  6700 00AA                325      BEQ     CHECK_NOT           * goes to NOT
00001376                           326      
00001376  B87C 0008                327      CMP.W   #%1000,D4
0000137A  6700 012C                328      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
0000137E                           329      
0000137E  B87C 000C                330      CMP.W   #%1100,D4       
00001382  6700 01D8                331      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
00001386                           332      
00001386  B87C 000E                333      CMP.W   #%1110,D4
0000138A  6700 01D8                334      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
0000138E                           335      
0000138E  6600 151E                336      BNE     PRINT_DATA
00001392                           337  
00001392                           338  CHECK_LEA
00001392  13FC 0003 00002EDC       339      MOVE.B  #3,Bits  
0000139A  4EB8 12DE                340      JSR     READ_BITS 
0000139E  13C4 00002EEE            341      MOVE.B  D4,DEST_REG  
000013A4                           342  
000013A4  13FC 0003 00002EDC       343      MOVE.B  #3,Bits
000013AC  4EB8 12DE                344      JSR     READ_BITS
000013B0  B83C 0007                345      CMP.B   #7,D4               * if mode = 111 = continue
000013B4  6600 14F8                346      BNE     PRINT_DATA
000013B8                           347  
000013B8  13FC 0003 00002EDC       348      MOVE.B  #3,Bits
000013C0  4EB8 12DE                349      JSR     READ_BITS 
000013C4  13C4 00002EF0            350      MOVE.B  D4,SRC_MODE           
000013CA                           351  
000013CA  13FC 0003 00002EDC       352      MOVE.B  #3,Bits 
000013D2  4EB8 12DE                353      JSR     READ_BITS 
000013D6  13C4 00002EF1            354      MOVE.B  D4,SRC_REG 
000013DC                           355      
000013DC                           356      *MOVE.B  #3,CmdIndex         
000013DC  4EB9 000027BA            357      JSR     CHECK_SOURCE                * Check Source Mode
000013E2                           358      
000013E2  0C39 000F 00002F09       359      CMP.B   #$F,SrcMode         * If SrcMode is invalid
000013EA  6700 14C2                360      BEQ     PRINT_DATA
000013EE                           361      
000013EE  0C39 0002 00002F09       362      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
000013F6  6700 0FF4                363      BEQ     PRINTLEA        
000013FA                           364      
000013FA  0C39 0007 00002F09       365      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
00001402  6700 0FE8                366      BEQ     PRINTLEA    
00001406                           367      
00001406  0C39 0008 00002F09       368      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
0000140E  6700 0FDC                369      BEQ     PRINTLEA
00001412                           370              
00001412  13FC 0001 00002F06       371      MOVE.B  #1,INVALID_EA   
0000141A  6000 0FD0                372      BRA     PRINTLEA    
0000141E                           373      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
0000141E                           374  
0000141E                           375      
0000141E                           376  CHECK_NOT 
0000141E                           377      * TODO : TEST
0000141E  13FC 0002 00002EDC       378      MOVE.B  #2,Bits             
00001426  4EB8 12DE                379      JSR     READ_BITS             
0000142A  13C4 00002EF9            380      MOVE.B  D4,SIZE_BITS               * Stores size 
00001430                           381      
00001430  4EB9 000028E2            382      JSR     SETSIZE2             * set correct size for printing
00001436                           383      
00001436  B83C 0003                384      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
0000143A  6700 1472                385      BEQ     PRINT_DATA          * Else, If 11 size invalid
0000143E                           386      
0000143E  13FC 0003 00002EDC       387      MOVE.B  #3,Bits       
00001446  4EB8 12DE                388      JSR     READ_BITS       
0000144A  13C4 00002EEF            389      MOVE.B  D4,DEST_MODE             
00001450                           390  
00001450  13FC 0003 00002EDC       391      MOVE.B  #3,Bits       
00001458  4EB8 12DE                392      JSR     READ_BITS
0000145C  13C4 00002EEE            393      MOVE.B  D4,DEST_REG             
00001462                           394      
00001462                           395      *MOVE.B  #2,CmdIndex 
00001462  4EB9 000026BA            396      JSR     CHECK_DESTINATION               * Check Destination Mode
00001468                           397  
00001468  0C39 000F 00002F07       398      CMP.B   #$F,DstMode         * If DstMode is invalid
00001470  6700 143C                399      BEQ     PRINT_DATA      
00001474                           400  
00001474  0C39 000E 00002F07       401      CMP.B   #$E,DstMode         * If DstMode is invalid EA
0000147C  13FC 0001 00002F06       402      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001484                           403      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001484                           404  
00001484  0C39 0001 00002F07       405      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
0000148C  13FC 0001 00002F06       406      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001494                           407      
00001494  0C39 000B 00002F07       408      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
0000149C  13FC 0001 00002F06       409      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000014A4  6000 0F5C                410      BRA     PRINTNOT
000014A8                           411  
000014A8                           412  CHECK_MOVEM_1000 
000014A8                           413      * TODO : TEST WITH EA 
000014A8  13FC 0001 00002EDC       414      MOVE.B  #1,Bits
000014B0  4EB8 12DE                415      JSR     READ_BITS
000014B4  B83C 0001                416      CMP.B   #%1,D4
000014B8  6600 13F4                417      BNE     PRINT_DATA
000014BC                           418      
000014BC  13FC 0001 00002EDC       419      MOVE.B  #1,Bits
000014C4  4EB8 12DE                420      JSR     READ_BITS
000014C8  13C4 00002EF9            421      MOVE.B  D4,SIZE_BITS
000014CE                           422      
000014CE  4EB9 000028C8            423      JSR     SETSIZE1
000014D4                           424  
000014D4  13FC 0003 00002EDC       425      MOVE.B  #3,Bits
000014DC  4EB8 12DE                426      JSR     READ_BITS
000014E0  13C4 00002EF2            427      MOVE.B  D4,TEMP_MODE
000014E6                           428      
000014E6  13FC 0003 00002EDC       429      MOVE.B  #3,Bits
000014EE  4EB8 12DE                430      JSR     READ_BITS
000014F2  13C4 00002EF3            431      MOVE.B  D4,TEMP_REG
000014F8                           432      
000014F8  4EB9 0000273A            433      JSR     CHECK_TEMP
000014FE  4EB9 0000283A            434      JSR     CHECK_XBIT
00001504                           435      
00001504  0C39 000F 00002F08       436      CMP.B   #$F,TempMode        * If TempMode is invalid
0000150C  6700 13A0                437      BEQ     PRINT_DATA              * Print DATA instead
00001510                           438  
00001510  0C39 000E 00002F08       439      CMP.B   #$E,TempMode        * If TempMode is invalid EA
00001518                           440    *  BEQ     SETINVEA           * 
00001518  13FC 0001 00002F06       441      MOVE.B  #1,INVALID_EA
00001520                           442     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001520                           443  
00001520  0C39 0002 00002F08       444      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
00001528  6700 0EAC                445      BEQ     PRINTMOVEM              
0000152C                           446  
0000152C  0C39 0007 00002F08       447      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
00001534  6700 0EA0                448      BEQ     PRINTMOVEM   
00001538                           449  
00001538  0C39 0008 00002F08       450      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
00001540  6700 0E94                451      BEQ     PRINTMOVEM   
00001544                           452                 
00001544  0C39 0004 00002F07       453      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
0000154C  6700 0E88                454      BEQ     PRINTMOVEM   
00001550                           455  
00001550  0C39 0003 00002F09       456      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
00001558  6700 0E7C                457      BEQ     PRINTMOVEM   
0000155C                           458     * BRA     SETINVEA
0000155C                           459      
0000155C                           460  CHECK_MOVEM_1100     
0000155C  13FC 0001 00002F05       461      MOVE.B      #1,XBIT
00001564                           462      
00001564                           463  
00001564                           464  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
00001564  13FC 0002 00002EDC       465      MOVE.B  #2,Bits
0000156C  4EB8 12DE                466      JSR     READ_BITS
00001570                           467      
00001570  B83C 0002                468      CMP.B   #%10,D4
00001574  6700 000E                469      BEQ     CHECK_JSR           * goes to JSR
00001578                           470      
00001578  B83C 0001                471      CMP.B   #%01,D4 
0000157C  6700 006C                472      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
00001580                           473  
00001580  6600 132C                474      BNE     PRINT_DATA
00001584                           475  
00001584                           476  CHECK_JSR       * TODO: TEST
00001584                           477  
00001584  13FC 0003 00002EDC       478      MOVE.B  #3,Bits
0000158C  4EB8 12DE                479      JSR     READ_BITS
00001590  13C4 00002EEF            480      MOVE.B  D4,DEST_MODE
00001596                           481      
00001596  13FC 0003 00002EDC       482      MOVE.B  #3,Bits
0000159E  4EB8 12DE                483      JSR     READ_BITS
000015A2  13C4 00002EEE            484      MOVE.B  D4,DEST_REG
000015A8                           485      
000015A8                           486      *MOVE.B  #4,INDEX
000015A8  4EB9 000026BA            487      JSR     CHECK_DESTINATION
000015AE                           488      
000015AE  0C39 000F 00002F07       489      CMP.B   #$F,DstMode         * if invalid print DATA
000015B6  6700 12F6                490      BEQ     PRINT_DATA
000015BA                           491      
000015BA  0C39 0002 00002F07       492      CMP.B   #$2,DstMode         * if DstMode 010        
000015C2  6700 0E54                493      BEQ     PRINTJSR
000015C6                           494      
000015C6  0C39 0007 00002F07       495      CMP.B   #$7,DstMode         * if DstMode 111 + 000
000015CE  6700 0E48                496      BEQ     PRINTJSR
000015D2                           497      
000015D2  0C39 0008 00002F07       498      CMP.B   #$8,DstMode         * if DstMode 111 + 001
000015DA  6700 0E3C                499      BEQ     PRINTJSR
000015DE                           500      
000015DE  13FC 0001 00002F06       501      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
000015E6                           502      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000015E6  6000 0E30                503      BRA     PRINTJSR
000015EA                           504      
000015EA                           505  CHECK_NOP_RTS
000015EA  13FC 0006 00002EDC       506      MOVE.B  #6,Bits
000015F2  4EB8 12DE                507      JSR READ_BITS
000015F6                           508      
000015F6  B83C 0031                509      CMP.B   #%110001,D4
000015FA  6700 0DCA                510      BEQ     PRINTNOP            
000015FE                           511      
000015FE  B83C 0035                512      CMP.B   #%110101,D4
00001602  6700 0E2A                513      BEQ     PRINTRTS       
00001606                           514          
00001606  6600 12A6                515      BNE     PRINT_DATA
0000160A                           516  
0000160A                           517  ************************** ADDQ ***************************
0000160A                           518  CHECK_ADDQ
0000160A  13FC 0003 00002EDC       519      MOVE.B  #3,Bits 
00001612  4EB8 12DE                520      JSR     READ_BITS
00001616  13C4 00002EF4            521      MOVE.B  D4,DATA_FIELD
0000161C                           522      
0000161C  4EB9 00002882            523      JSR     FORMAT_DATA     
00001622                           524      
00001622  13FC 0001 00002EDC       525      MOVE.B  #1,Bits
0000162A  4EB8 12DE                526      JSR     READ_BITS
0000162E  B83C 0000                527      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
00001632  6600 127A                528      BNE     PRINT_DATA          * goes to PRINT_DATA
00001636                           529  
00001636  13FC 0002 00002EDC       530      MOVE.B  #2,Bits
0000163E  4EB8 12DE                531      JSR     READ_BITS
00001642  13C4 00002EF9            532      MOVE.B  D4,SIZE_BITS             * store size into SIZE
00001648  0C39 0003 00002EF9       533      CMP.B   #%11,SIZE_BITS           * cannot be #%11
00001650  6700 125C                534      BEQ     PRINT_DATA
00001654  4EB9 000028E2            535      JSR     SETSIZE2            * for printing 
0000165A                           536  
0000165A  13FC 0003 00002EDC       537      MOVE.B  #3,Bits
00001662  4EB8 12DE                538      JSR     READ_BITS
00001666  13C4 00002EEF            539      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
0000166C                           540      
0000166C  13FC 0003 00002EDC       541      MOVE.B  #3,Bits
00001674  4EB8 12DE                542      JSR     READ_BITS
00001678  13C4 00002EEE            543      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
0000167E                           544      
0000167E                           545     * MOVE.B  #6,INDEX
0000167E  4EB9 000026BA            546      JSR     CHECK_DESTINATION    
00001684                           547      
00001684  0C39 000F 00002EEF       548      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
0000168C  6700 1220                549      BEQ     PRINT_DATA         
00001690                           550      
00001690                           551   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
00001690                           552   *   BEQ     INVALID_EA          * TODO 
00001690                           553      
00001690                           554   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
00001690                           555   *   BEQ     INVALID_EA         * TODO
00001690                           556      
00001690  6000 0DAC                557      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
00001694                           558  
00001694                           559  ************************** ADD, ADDA **********************
00001694                           560  COMPARE_1101    * ADD and ADDA 
00001694  13FC 0003 00002EDC       561      MOVE.B  #3,Bits
0000169C  4EB8 12DE                562      JSR     READ_BITS
000016A0  13C4 00002EF3            563      MOVE.B  D4,TEMP_REG
000016A6                           564      
000016A6  13FC 0001 00002EDC       565      MOVE.B  #1,Bits
000016AE  4EB8 12DE                566      JSR     READ_BITS
000016B2  13C4 00002F05            567      MOVE.B  D4,XBit
000016B8                           568      
000016B8  13FC 0002 00002EDC       569      MOVE.B  #2,Bits
000016C0  4EB8 12DE                570      JSR     READ_BITS
000016C4  13C4 00002EF9            571      MOVE.B  D4,SIZE_BITS
000016CA                           572      
000016CA  13FC 0001 00002EF2       573      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
000016D2  0C39 0003 00002EF9       574      CMP.B   #%11,SIZE_BITS 
000016DA  6700 0072                575      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
000016DE                           576      
000016DE  13FC 0000 00002EF2       577      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
000016E6  4EB9 0000283A            578      JSR     CHECK_XBIT
000016EC                           579      
000016EC  13FC 0003 00002EDC       580      MOVE.B  #3,Bits
000016F4  4EB8 12DE                581      JSR     READ_BITS
000016F8  13C4 00002EF2            582      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
000016FE                           583      
000016FE  13FC 0003 00002EDC       584      MOVE.B  #3,Bits
00001706  4EB8 12DE                585      JSR     READ_BITS
0000170A  13C4 00002EF3            586      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001710                           587      
00001710  13FC 0007 00002F04       588      MOVE.B  #7,INDEX
00001718  4EB9 0000273A            589      JSR     CHECK_TEMP   
0000171E  0C39 000F 00002EF2       590      CMP.B   #$F, Temp_Mode
00001726  6700 1186                591      BEQ     PRINT_DATA
0000172A                           592    *  CMP.B   #$E,Temp_Mode    
0000172A                           593    *  BEQ     INVALID_EA              * TODO
0000172A                           594      
0000172A  4EF9 00001730            595      JMP     CHECK_ADD
00001730                           596      
00001730                           597  CHECK_ADD
00001730  4EB9 000028E2            598      JSR     SETSIZE2
00001736  0C39 0000 00002EF9       599      CMP.B   #%00,SIZE_BITS
0000173E  6600 000A                600      BNE     CCHECK_ADD  
00001742                           601      
00001742  0C39 0001 00002EF2       602      CMP.B   #$1,Temp_Mode       * if Temp_Mode is invalid
0000174A                           603    *  BEQ     INVALID_EA              * TODO 
0000174A                           604  CCHECK_ADD
0000174A  6000 0DF2                605      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
0000174E                           606  
0000174E                           607  
0000174E                           608  CHECK_ADDA
0000174E  13FC 0001 00002EF9       609      MOVE.B  #%01,SIZE_BITS
00001756                           610  
00001756  0C39 0000 00002F05       611      CMP.B   #%0,XBIT
0000175E  6700 0010                612      BEQ     CCHECK_ADDA
00001762  13FC 0002 00002EF9       613      MOVE.B  #%10,SIZE_BITS
0000176A                           614      
0000176A  4EB9 000028E2            615      JSR     SETSIZE2
00001770                           616  
00001770                           617  CCHECK_ADDA
00001770  4EB9 000028E2            618      JSR     SETSIZE2
00001776                           619      
00001776  13F9 00002EF3 00002EEE   620      MOVE.B  TEMP_REG,DEST_REG
00001780  13F9 00002EF2 00002EEF   621      MOVE.B  TEMP_MODE,DEST_MODE     * set MOVE_DEST to 'An'
0000178A  13FC 0001 00002F07       622      MOVE.B  #$1,DstMode
00001792                           623      
00001792  13FC 0003 00002EDC       624      MOVE.B  #3,Bits        
0000179A  4EB8 12DE                625      JSR     READ_BITS
0000179E  13C4 00002EF0            626      MOVE.B  D4,SRC_MODE    
000017A4                           627      
000017A4  13FC 0003 00002EDC       628      MOVE.B  #3,Bits        
000017AC  4EB8 12DE                629      JSR     READ_BITS
000017B0  13C4 00002EF1            630      MOVE.B  D4,SRC_REG
000017B6                           631      
000017B6                           632     * MOVE.B  #8,INDEX
000017B6  4EB9 000027BA            633      JSR     CHECK_SOURCE
000017BC  0C39 000F 00002F09       634      CMP.B   #$F,SrcMode
000017C4  6700 10E8                635      BEQ     PRINT_DATA
000017C8                           636     * CMP.B   #$E,SrcMode
000017C8                           637     * BEQ     INVALID_EA                  * TODO 
000017C8                           638      
000017C8  6000 0D8A                639      BRA     PRINTADDA                  * TODO: check the name I/O; check what need EA
000017CC                           640  
000017CC                           641  ************************** MOVEQ ********************************
000017CC                           642  CHECK_MOVEQ
000017CC  13FC 0003 00002EDC       643      MOVE.B  #3,Bits         * read next 3 bits
000017D4  4EB8 12DE                644      JSR     READ_BITS       * store them in D4
000017D8  13C4 00002EEE            645      MOVE.B  D4,DEST_REG     * move register value (used in EA)
000017DE  1439 00002EEE            646      MOVE.B DEST_REG,D2
000017E4  163C 0000                647      MOVE.B #%000,D3
000017E8                           648      
000017E8  13FC 0001 00002EDC       649      MOVE.B  #1,Bits         * read the next bit into D4
000017F0  4EB8 12DE                650      JSR     READ_BITS
000017F4  B83C 0000                651      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
000017F8  6600 10B4                652      BNE     PRINT_DATA      * goes to PRINT_DATA ?
000017FC                           653      
000017FC  13FC 0008 00002EDC       654      MOVE.B  #8,Bits        
00001804  4EB8 12DE                655      JSR     READ_BITS
00001808  23C4 00002EF4            656      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
0000180E                           657      
0000180E  13FC 0007 00002EF0       658      MOVE.B  #%111,SRC_MODE  * 
00001816  13FC 0004 00002EF1       659      MOVE.B  #%100,SRC_REG   * 
0000181E  13FC 0004 000025CE       660      MOVE.B  #4,SizeSplit
00001826  6000 0C84                661      BRA     PRINTMOVEQ         * TODO: check the name I/O; call EA from PRINT_MOVEQ FOR DEST_REG
0000182A                           662      
0000182A                           663  **************************************LS,AS and ROTATE section********************************* 
0000182A                           664  COMPARE_1110 
0000182A  4245                     665              CLR D5     ;STORING ISOLATED BITS
0000182C  4244                     666              CLR D4
0000182E  3839 00002EDA            667              MOVE.W COMMANDDATA,D4
00001834  2A04                     668              MOVE.L   D4,D5
00001836  0285 000000C0            669              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
0000183C  EC8D                     670              LSR.L    #6,D5            ;NORMALIZE
0000183E  13C5 00002EF8            671              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001844  13F9 00002EF8 00002EDE   672              MOVE.B   SIZE,SizeValue
0000184E  5239 00002EDE            673              ADD.B    #1,SizeValue
00001854  BA3C 0003                674              CMP.B    #%11,D5    
00001858  6700 0298                675              BEQ      G14_MEMS         ;MEMORY SHIFTING
0000185C  4245                     676              CLR D5
0000185E  2A04                     677              MOVE.L   D4,D5      
00001860  0285 00000018            678              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001866  E68D                     679              LSR.L   #3,D5
00001868  BA3C 0001                680              CMP.B   #%001,D5
0000186C  6700 0020                681              BEQ     G_LS    ;LOGICAL SHIFTS
00001870  BA3C 0003                682              CMP.B   #%011,D5
00001874  6700 00E4                683              BEQ     G_RO    ;ROTAIONS
00001878  BA3C 0000                684              CMP.B   #%000,D5
0000187C  6700 01A8                685              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001880                           686              
00001880  13FC 0001 00000001       687              MOVE.B #1,BAD_FLAG
00001888  4EF9 000028AE            688              JMP   PRINT_DATA   ; PRINT BAD DATA  
0000188E                           689  
0000188E                           690  G_LS               ;GROUP LOGICAL SHIFT
0000188E  4245                     691       CLR   D5
00001890  23C4 00002F1C            692       MOVE.L D4,IR_IL
00001896  02B9 00000020 00002F1C   693       ANDI.L  #$0020,IR_IL
000018A0  2A39 00002F1C            694       MOVE.L  IR_IL,D5
000018A6  EA8D                     695       LSR.L   #5,D5
000018A8  BA3C 0001                696       CMP.B   #$1,D5
000018AC  6700 0056                697       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
000018B0  4245                     698       CLR D5
000018B2  2A04                     699       MOVE.L  D4,D5
000018B4  0285 00000100            700       ANDI.L  #$0100,D5
000018BA  E08D                     701       LSR.L  #8,D5
000018BC  23C5 00002F14            702       MOVE.L  D5,DR
000018C2  4245                     703       CLR D5
000018C4  2A04                     704       MOVE.L  D4,D5
000018C6  0285 00000E00            705       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
000018CC  E08D                     706       LSR.L   #8,D5
000018CE  E28D                     707       LSR.L   #1,D5
000018D0  BABC 00000007            708       CMP.L   #7,D5
000018D6  6E00 0FD6                709       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
000018DA  BABC 00000000            710       CMP.L   #0,D5
000018E0  6D00 0FCC                711       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
000018E4  13C5 00002F20            712       MOVE.B  D5,S_COUNT
000018EA  4EB9 00002382            713       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
000018F0  4245                     714       CLR     D5
000018F2  2A04                     715       MOVE.L  D4,D5
000018F4  0285 00000007            716       ANDI.L   #$0007,D5
000018FA  13C5 00002F25            717       MOVE.B   D5,dRN
00001900  6000 08CE                718       BRA      PR_LS             
00001904                           719       
00001904                           720  GLS_EA 
00001904  4245                     721       CLR D5
00001906  4244                     722       CLR D4
00001908  3839 00002EDA            723       MOVE.W COMMANDDATA,D4
0000190E                           724  
0000190E  2A04                     725       MOVE.L  D4,D5
00001910  0285 00000100            726       ANDI.L  #$0100,D5
00001916  E08D                     727       LSR.L  #8,D5
00001918  23C5 00002F14            728       MOVE.L  D5,DR     ;DIRECTION
0000191E  4245                     729       CLR D5
00001920  2A04                     730       MOVE.L  D4,D5
00001922  0285 00000E00            731       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001928  E08D                     732       LSR.L   #8,D5
0000192A  E28D                     733       LSR.L   #1,D5
0000192C  BABC 00000007            734       CMP.L   #7,D5
00001932  6E00 0F7A                735       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001936  BABC 00000000            736       CMP.L   #0,D5
0000193C  6D00 0F70                737       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001940  13C5 00002F24            738       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001946  4245                     739       CLR     D5
00001948  2A04                     740       MOVE.L   D4,D5
0000194A  0285 00000007            741       ANDI.L   #$0007,D5
00001950  13C5 00002F25            742       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001956  6000 05BC                743       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
0000195A                           744  G_RO            ;GROUP ROTATION
0000195A  4245                     745       CLR   D5
0000195C  23C4 00002F1C            746       MOVE.L D4,IR_IL
00001962  02B9 00000020 00002F1C   747       ANDI.L  #$0020,IR_IL
0000196C  2A39 00002F1C            748       MOVE.L  IR_IL,D5
00001972  EA8D                     749       LSR.L   #5,D5
00001974  BA3C 0001                750       CMP.B   #$1,D5
00001978  6700 0056                751       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
0000197C  4245                     752       CLR D5
0000197E  2A04                     753       MOVE.L  D4,D5
00001980  0285 00000100            754       ANDI.L  #$0100,D5
00001986  E08D                     755       LSR.L  #8,D5
00001988  23C5 00002F14            756       MOVE.L  D5,DR
0000198E  4245                     757       CLR D5
00001990  2A04                     758       MOVE.L  D4,D5
00001992  0285 00000E00            759       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001998  E08D                     760       LSR.L   #8,D5
0000199A  E28D                     761       LSR.L   #1,D5
0000199C  BABC 00000007            762       CMP.L   #7,D5
000019A2  6E00 0F0A                763       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
000019A6  BABC 00000000            764       CMP.L   #0,D5
000019AC  6D00 0F00                765       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
000019B0  13C5 00002F20            766       MOVE.B  D5,S_COUNT
000019B6  4EB9 00002382            767       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
000019BC  4245                     768       CLR     D5
000019BE  2A04                     769       MOVE.L  D4,D5
000019C0  0285 00000007            770       ANDI.L   #$0007,D5
000019C6  13C5 00002F25            771       MOVE.B   D5,dRN
000019CC  6000 0702                772       BRA      PR_RO    ;PRINT ROTATION   
000019D0                           773  
000019D0                           774  GRO_EA 
000019D0  4245                     775       CLR D5
000019D2  4244                     776       CLR D4
000019D4  3839 00002EDA            777       MOVE.W COMMANDDATA,D4
000019DA                           778  
000019DA  2A04                     779       MOVE.L  D4,D5
000019DC  0285 00000100            780       ANDI.L  #$0100,D5
000019E2  E08D                     781       LSR.L  #8,D5
000019E4  23C5 00002F14            782       MOVE.L  D5,DR     ;DIRECTION
000019EA  4245                     783       CLR D5
000019EC  2A04                     784       MOVE.L  D4,D5
000019EE  0285 00000E00            785       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
000019F4  E08D                     786       LSR.L   #8,D5
000019F6  E28D                     787       LSR.L   #1,D5
000019F8  BABC 00000007            788       CMP.L   #7,D5
000019FE  6E00 0EAE                789       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001A02  BABC 00000000            790       CMP.L   #0,D5
00001A08  6D00 0EA4                791       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001A0C  13C5 00002F24            792       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001A12  4245                     793       CLR     D5
00001A14  2A04                     794       MOVE.L   D4,D5
00001A16  0285 00000007            795       ANDI.L   #$0007,D5
00001A1C  13C5 00002F25            796       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001A22  6000 05CE                797       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001A26                           798  
00001A26                           799  
00001A26                           800  
00001A26                           801  G_AS         ;GROUP ARITHMATIC SHIFT
00001A26  4245                     802       CLR   D5
00001A28  23C4 00002F1C            803       MOVE.L D4,IR_IL
00001A2E  02B9 00000020 00002F1C   804       ANDI.L  #$0020,IR_IL
00001A38  2A39 00002F1C            805       MOVE.L  IR_IL,D5
00001A3E  EA8D                     806       LSR.L   #5,D5
00001A40  BA3C 0001                807       CMP.B   #$1,D5
00001A44  6700 0056                808       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001A48  4245                     809       CLR D5
00001A4A  2A04                     810       MOVE.L  D4,D5
00001A4C  0285 00000100            811       ANDI.L  #$0100,D5
00001A52  E08D                     812       LSR.L  #8,D5
00001A54  23C5 00002F14            813       MOVE.L  D5,DR
00001A5A  4245                     814       CLR D5
00001A5C  2A04                     815       MOVE.L  D4,D5
00001A5E  0285 00000E00            816       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001A64  E08D                     817       LSR.L   #8,D5
00001A66  E28D                     818       LSR.L   #1,D5
00001A68  BABC 00000007            819       CMP.L   #7,D5
00001A6E  6E00 0E3E                820       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001A72  BABC 00000000            821       CMP.L   #0,D5
00001A78  6D00 0E34                822       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001A7C  13C5 00002F20            823       MOVE.B  D5,S_COUNT
00001A82  4EB9 00002382            824       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001A88  4245                     825       CLR     D5
00001A8A  2A04                     826       MOVE.L  D4,D5
00001A8C  0285 00000007            827       ANDI.L   #$0007,D5
00001A92  13C5 00002F25            828       MOVE.B   D5,dRN
00001A98  6000 06B6                829       BRA      PR_AS    ;PRINT ROTATION 
00001A9C                           830  
00001A9C                           831  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001A9C  4245                     832       CLR D5
00001A9E  4244                     833       CLR D4
00001AA0  3839 00002EDA            834       MOVE.W COMMANDDATA,D4
00001AA6                           835  
00001AA6  2A04                     836       MOVE.L  D4,D5
00001AA8  0285 00000100            837       ANDI.L  #$0100,D5
00001AAE  E08D                     838       LSR.L  #8,D5
00001AB0  23C5 00002F14            839       MOVE.L  D5,DR     ;DIRECTION
00001AB6  4245                     840       CLR D5
00001AB8  2A04                     841       MOVE.L  D4,D5
00001ABA  0285 00000E00            842       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001AC0  E08D                     843       LSR.L   #8,D5
00001AC2  E28D                     844       LSR.L   #1,D5
00001AC4  BABC 00000007            845       CMP.L   #7,D5
00001ACA  6E00 0DE2                846       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001ACE  BABC 00000000            847       CMP.L   #0,D5
00001AD4  6D00 0DD8                848       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001AD8  13C5 00002F24            849       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001ADE  4245                     850       CLR     D5
00001AE0  2A04                     851       MOVE.L   D4,D5
00001AE2  0285 00000007            852       ANDI.L   #$0007,D5
00001AE8  13C5 00002F25            853       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001AEE  6000 0346                854       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001AF2                           855  
00001AF2                           856  G14_MEMS 
00001AF2  4245                     857         CLR D5
00001AF4  2A04                     858         MOVE.L  D4,D5
00001AF6  CABC 00000E00            859         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001AFC  E08D                     860         LSR.L   #8,D5
00001AFE  E28D                     861         LSR.L   #1,D5
00001B00  BA3C 0001                862         CMP.B   #%001,D5
00001B04  6700 0012                863         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001B08  BA3C 0003                864         CMP.B   #%011,D5
00001B0C  6700 0070                865         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001B10  BA3C 0000                866         CMP.B   #%000,D5
00001B14  6700 00CE                867         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001B18                           868  
00001B18                           869  G14_MEMS_LS 
00001B18  4245                     870             CLR D5
00001B1A  2A04                     871             MOVE.L  D4,D5
00001B1C  0285 00000100            872             ANDI.L  #$0100,D5
00001B22  E08D                     873             LSR.L  #8,D5
00001B24  13C5 00002F14            874             MOVE.B  D5,DR     ;DIRECTION
00001B2A  4245                     875             CLR D5
00001B2C  2A04                     876             MOVE.L D4,D5
00001B2E  0285 00000038            877             ANDI.L  #$0038,D5
00001B34  E68D                     878             LSR.L  #3,D5
00001B36  13C5 00002F28            879             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001B3C  4245                     880             CLR D5
00001B3E  2A04                     881             MOVE.L D4,D5
00001B40  0285 00000007            882             ANDI.L  #$0007,D5
00001B46  13C5 00002F25            883             MOVE.B  D5,dRN
00001B4C  0CB9 00000000 00002F28   884             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001B56  6700 0D56                885             BEQ    PRINT_DATA
00001B5A  0CB9 00000001 00002F28   886             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001B64  6700 0D48                887             BEQ     PRINT_DATA
00001B68  13C5 00002F27            888             MOVE.B  D5,dRG     ;DESTINATION REG
00001B6E  0C39 0007 00002F28       889             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001B76  6700 00F2                890             BEQ     CHECK_ID_LS 
00001B7A  6000 0192                891             BRA     PR_G14_MEMS_LS             
00001B7E                           892             
00001B7E                           893  
00001B7E                           894                
00001B7E                           895   
00001B7E                           896  
00001B7E                           897  G14_MEMS_RO
00001B7E  4245                     898             CLR D5
00001B80  2A04                     899             MOVE.L  D4,D5
00001B82  0285 00000100            900             ANDI.L  #$0100,D5
00001B88  E08D                     901             LSR.L  #8,D5
00001B8A  13C5 00002F14            902             MOVE.B  D5,DR     ;DIRECTION
00001B90  4245                     903             CLR D5
00001B92  2A04                     904             MOVE.L D4,D5
00001B94  0285 00000038            905             ANDI.L  #$0038,D5
00001B9A  E68D                     906             LSR.L  #3,D5
00001B9C  13C5 00002F28            907             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001BA2  4245                     908             CLR D5
00001BA4  2A04                     909             MOVE.L D4,D5
00001BA6  0285 00000007            910             ANDI.L  #$0007,D5
00001BAC  13C5 00002F25            911             MOVE.B  D5,dRN
00001BB2  0CB9 00000000 00002F28   912             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001BBC  6700 0CF0                913             BEQ    PRINT_DATA
00001BC0  0CB9 00000001 00002F28   914             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001BCA  6700 0CE2                915             BEQ     PRINT_DATA
00001BCE  13C5 00002F27            916             MOVE.B  D5,dRG     ;DESTINATION REG
00001BD4  0C39 0007 00002F28       917             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001BDC  6700 007C                918             BEQ     CHECK_ID_RO 
00001BE0  6000 01C0                919             BRA     PR_G14_MEMS_RO         
00001BE4                           920  
00001BE4                           921  G14_MEMS_AS
00001BE4  4245                     922             CLR D5
00001BE6  2A04                     923             MOVE.L  D4,D5
00001BE8  0285 00000100            924             ANDI.L  #$0100,D5
00001BEE  E08D                     925             LSR.L  #8,D5
00001BF0  13C5 00002F14            926             MOVE.B  D5,DR     ;DIRECTION
00001BF6  4245                     927             CLR D5
00001BF8  2A04                     928             MOVE.L D4,D5
00001BFA  0285 00000038            929             ANDI.L  #$0038,D5
00001C00  E68D                     930             LSR.L  #3,D5
00001C02  13C5 00002F28            931             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001C08  4245                     932             CLR D5
00001C0A  2A04                     933             MOVE.L D4,D5
00001C0C  0285 00000007            934             ANDI.L  #$0007,D5
00001C12  13C5 00002F25            935             MOVE.B  D5,dRN
00001C18  0CB9 00000000 00002F28   936             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001C22  6700 0C8A                937             BEQ    PRINT_DATA
00001C26  0CB9 00000001 00002F28   938             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001C30  6700 0C7C                939             BEQ     PRINT_DATA
00001C34  13C5 00002F27            940             MOVE.B  D5,dRG     ;DESTINATION REG
00001C3A  0C39 0007 00002F28       941             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001C42  6700 0006                942             BEQ     CHECK_ID_AS 
00001C46  6000 0032                943             BRA     PR_G14_MEMS_AS                          
00001C4A                           944             
00001C4A                           945  
00001C4A                           946  
00001C4A  0C39 0004 00002F27       947  CHECK_ID_AS  CMP.B #$4,dRG
00001C52  6700 0C5A                948               BEQ   PRINT_DATA
00001C56  6000 0022                949               BRA     PR_G14_MEMS_AS
00001C5A                           950               
00001C5A  0C39 0004 00002F27       951  CHECK_ID_RO  CMP.B #$4,dRG
00001C62  6700 0C4A                952               BEQ   PRINT_DATA
00001C66  6000 013A                953               BRA     PR_G14_MEMS_RO
00001C6A                           954    
00001C6A  0C39 0004 00002F27       955  CHECK_ID_LS  CMP.B #$4,dRG
00001C72  6700 0C3A                956               BEQ   PRINT_DATA
00001C76  6000 0096                957               BRA    PR_G14_MEMS_LS
00001C7A                           958                               
00001C7A                           959  PR_G14_MEMS_AS
00001C7A  43F9 00002EFC            960       LEA CLRSPOT,A1      * print space
00001C80  103C 000E                961       MOVE.B   #14,D0   
00001C84  4E4F                     962       TRAP     #15
00001C86                           963   
00001C86  0C39 0000 00002F14       964       CMP.B #$0,DR 
00001C8E  6700 0040                965       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001C92                           966      
00001C92                           967      *******PRINT LSL*******
00001C92  43F9 00002EBC            968       LEA       PASL,A1   MEM LEFT SHIF
00001C98  103C 000E                969       MOVE.B   #14,D0     ; moves #14 into data register D0
00001C9C  4E4F                     970       TRAP     #15
00001C9E                           971  
00001C9E  43F9 00002EFC            972       LEA CLRSPOT,A1      * print space
00001CA4  103C 000E                973       MOVE.B   #14,D0   
00001CA8  4E4F                     974       TRAP     #15
00001CAA                           975   
00001CAA  4243                     976       CLR D3
00001CAC  4242                     977       CLR D2
00001CAE  1439 00002F28            978       MOVE.B  dMODE,D2
00001CB4  1639 00002F25            979       MOVE.B  dRN,D3
00001CBA  4EB9 0000296C            980       JSR     EA_START
00001CC0                           981       
00001CC0  43F9 00002E54            982       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001CC6  103C 000E                983       MOVE.B   #14,D0     ; moves #14 into data register D0
00001CCA  4E4F                     984       TRAP     #15       ; Displays message via trap 14
00001CCC                           985       
00001CCC  6000 F5AC                986       BRA MEMORYGRABBER
00001CD0                           987  
00001CD0                           988       
00001CD0                           989  PR_ASR_MEM   ;MEM RIGHT SHIFT
00001CD0                           990            
00001CD0  43F9 00002EB8            991       LEA       PASR,A1   MEM RIGHT SHIF
00001CD6  103C 000E                992       MOVE.B   #14,D0     ; moves #14 into data register D0
00001CDA  4E4F                     993       TRAP     #15
00001CDC                           994  
00001CDC  43F9 00002EFC            995       LEA CLRSPOT,A1      * print space
00001CE2  103C 000E                996       MOVE.B   #14,D0   
00001CE6  4E4F                     997       TRAP     #15
00001CE8                           998   
00001CE8  4243                     999       CLR D3
00001CEA  4242                    1000       CLR D2
00001CEC  1439 00002F28           1001       MOVE.B  dMODE,D2
00001CF2  1639 00002F25           1002       MOVE.B  dRN,D3
00001CF8  4EB9 0000296C           1003       JSR     EA_START
00001CFE                          1004       
00001CFE  43F9 00002E54           1005       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001D04  103C 000E               1006       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D08  4E4F                    1007       TRAP     #15       ; Displays message via trap 14
00001D0A                          1008       
00001D0A  6000 F56E               1009       BRA MEMORYGRABBER
00001D0E                          1010  
00001D0E                          1011  
00001D0E                          1012               
00001D0E                          1013  
00001D0E                          1014  PR_G14_MEMS_LS
00001D0E  43F9 00002EFC           1015       LEA CLRSPOT,A1      * print space
00001D14  103C 000E               1016       MOVE.B   #14,D0   
00001D18  4E4F                    1017       TRAP     #15
00001D1A                          1018   
00001D1A  0C39 0000 00002F14      1019       CMP.B #$0,DR 
00001D22  6700 0040               1020       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001D26                          1021      
00001D26                          1022      *******PRINT LSL*******
00001D26  43F9 00002EB0           1023       LEA       PLSL,A1   MEM LEFT SHIF
00001D2C  103C 000E               1024       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D30  4E4F                    1025       TRAP     #15 
00001D32                          1026       
00001D32  43F9 00002EFC           1027       LEA CLRSPOT,A1      * print space
00001D38  103C 000E               1028       MOVE.B   #14,D0   
00001D3C  4E4F                    1029       TRAP     #15
00001D3E                          1030  
00001D3E                          1031       
00001D3E  4243                    1032       CLR D3
00001D40  4242                    1033       CLR D2
00001D42  1439 00002F28           1034       MOVE.B  dMODE,D2
00001D48  1639 00002F25           1035       MOVE.B  dRN,D3
00001D4E  4EB9 0000296C           1036       JSR     EA_START
00001D54                          1037       
00001D54  43F9 00002E54           1038       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001D5A  103C 000E               1039       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D5E  4E4F                    1040       TRAP     #15       ; Displays message via trap 14
00001D60                          1041       
00001D60  6000 F518               1042       BRA MEMORYGRABBER
00001D64                          1043       
00001D64                          1044  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001D64  43F9 00002EB4           1045       LEA       PLSR,A1   MEM RIGHT SHIF
00001D6A  103C 000E               1046       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D6E  4E4F                    1047       TRAP     #15
00001D70                          1048       
00001D70  43F9 00002EFC           1049       LEA CLRSPOT,A1      * print space
00001D76  103C 000E               1050       MOVE.B   #14,D0   
00001D7A  4E4F                    1051       TRAP     #15
00001D7C                          1052   
00001D7C  4243                    1053       CLR D3
00001D7E  4242                    1054       CLR D2
00001D80  1439 00002F28           1055       MOVE.B  dMODE,D2
00001D86  1639 00002F25           1056       MOVE.B  dRN,D3
00001D8C  4EB9 0000296C           1057       JSR     EA_START
00001D92                          1058       
00001D92  43F9 00002E54           1059       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001D98  103C 000E               1060       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D9C  4E4F                    1061       TRAP     #15       ; Displays message via trap 14
00001D9E                          1062       
00001D9E  6000 F4DA               1063       BRA    MEMORYGRABBER
00001DA2                          1064  
00001DA2                          1065  PR_G14_MEMS_RO
00001DA2  43F9 00002EFC           1066       LEA CLRSPOT,A1      * print space
00001DA8  103C 000E               1067       MOVE.B   #14,D0   
00001DAC  4E4F                    1068       TRAP     #15
00001DAE                          1069       
00001DAE  0C39 0000 00002F14      1070       CMP.B #$0,DR 
00001DB6  6700 0040               1071       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001DBA                          1072      
00001DBA                          1073      *******PRINT ASL*******
00001DBA  43F9 00002EC0           1074       LEA       PROL,A1   ROTATE MEM LEFT SHIF
00001DC0  103C 000E               1075       MOVE.B   #14,D0     ; moves #14 into data register D0
00001DC4  4E4F                    1076       TRAP     #15
00001DC6                          1077  
00001DC6  43F9 00002EFC           1078       LEA CLRSPOT,A1      * print space
00001DCC  103C 000E               1079       MOVE.B   #14,D0   
00001DD0  4E4F                    1080       TRAP     #15
00001DD2                          1081  
00001DD2                          1082        
00001DD2  4243                    1083       CLR D3
00001DD4  4242                    1084       CLR D2
00001DD6  1439 00002F28           1085       MOVE.B  dMODE,D2
00001DDC  1639 00002F25           1086       MOVE.B  dRN,D3
00001DE2  4EB9 0000296C           1087       JSR     EA_START
00001DE8                          1088       
00001DE8  43F9 00002E54           1089       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001DEE  103C 000E               1090       MOVE.B   #14,D0     ; moves #14 into data register D0
00001DF2  4E4F                    1091       TRAP     #15       ; Displays message via trap 14
00001DF4                          1092       
00001DF4  6000 F484               1093       BRA MEMORYGRABBER
00001DF8                          1094  
00001DF8                          1095  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001DF8  43F9 00002EC4           1096       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
00001DFE  103C 000E               1097       MOVE.B   #14,D0     ; moves #14 into data register D0
00001E02  4E4F                    1098       TRAP     #15
00001E04                          1099  
00001E04  43F9 00002EFC           1100       LEA CLRSPOT,A1      * print space
00001E0A  103C 000E               1101       MOVE.B   #14,D0   
00001E0E  4E4F                    1102       TRAP     #15
00001E10                          1103   
00001E10  4243                    1104       CLR D3
00001E12  4242                    1105       CLR D2
00001E14  1439 00002F28           1106       MOVE.B  dMODE,D2
00001E1A  1639 00002F25           1107       MOVE.B  dRN,D3
00001E20  4EB9 0000296C           1108       JSR     EA_START
00001E26                          1109       
00001E26  43F9 00002E54           1110       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001E2C  103C 000E               1111       MOVE.B   #14,D0     ; moves #14 into data register D0
00001E30  4E4F                    1112       TRAP     #15       ; Displays message via trap 14
00001E32                          1113       
00001E32  6000 F446               1114       BRA MEMORYGRABBER
00001E36                          1115  
00001E36                          1116  
00001E36                          1117  
00001E36                          1118  
00001E36                          1119  PR_G_AS_EA
00001E36  43F9 00002EFC           1120         LEA CLRSPOT,A1      * print space
00001E3C  103C 000E               1121         MOVE.B   #14,D0   
00001E40  4E4F                    1122         TRAP     #15
00001E42                          1123  
00001E42  0CB9 00000000 00002F14  1124          CMP.L #$0,DR 
00001E4C  6700 0064               1125          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00001E50                          1126       
00001E50                          1127          *******PRINT ASL*******
00001E50  43F9 00002EBC           1128          LEA       PASL,A1
00001E56  103C 000E               1129          MOVE.B   #14,D0     ; moves #14 into data register D0
00001E5A  4E4F                    1130          TRAP     #15 
00001E5C  4EB9 000025CE           1131          JSR      SIZESPLIT
00001E62                          1132          
00001E62  43F9 00002EFC           1133          LEA CLRSPOT,A1      * print space
00001E68  103C 000E               1134          MOVE.B   #14,D0   
00001E6C  4E4F                    1135          TRAP     #15
00001E6E                          1136  
00001E6E                          1137          
00001E6E  4242                    1138          CLR D2
00001E70  4243                    1139          CLR D3
00001E72  143C 0000               1140          MOVE.B  #%000,D2     ; mode data register
00001E76  1639 00002F24           1141          MOVE.B  sRN,D3       ; source register number
00001E7C  4EB9 0000296C           1142          JSR     EA_START
00001E82  43F9 00002F02           1143          LEA      COMA,A1
00001E88  103C 000E               1144          MOVE.B   #14,D0
00001E8C  4E4F                    1145          TRAP     #15
00001E8E  4243                    1146          CLR D3
00001E90  4242                    1147          CLR D2
00001E92  143C 0000               1148          MOVE.B  #%000,D2      ; mode data register
00001E96  1639 00002F25           1149          MOVE.B  dRN,D3        ; destination register
00001E9C  4EB9 0000296C           1150          JSR     EA_START
00001EA2                          1151          
00001EA2  43F9 00002E54           1152          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001EA8  103C 000E               1153          MOVE.B   #14,D0     ; moves #14 into data register D0
00001EAC  4E4F                    1154          TRAP     #15       ; Displays message via trap 14
00001EAE                          1155          
00001EAE  6000 F3CA               1156          BRA   MEMORYGRABBER
00001EB2                          1157  
00001EB2                          1158          
00001EB2                          1159  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
00001EB2  43F9 00002EB8           1160           LEA       PASR,A1
00001EB8  103C 000E               1161          MOVE.B   #14,D0     ; moves #14 into data register D0
00001EBC  4E4F                    1162          TRAP     #15 
00001EBE  4EB9 000025CE           1163          JSR      SIZESPLIT
00001EC4                          1164          
00001EC4  43F9 00002EFC           1165          LEA CLRSPOT,A1      * print space
00001ECA  103C 000E               1166          MOVE.B   #14,D0   
00001ECE  4E4F                    1167          TRAP     #15
00001ED0                          1168  
00001ED0                          1169          
00001ED0  4242                    1170          CLR D2
00001ED2  4243                    1171          CLR D3
00001ED4  143C 0000               1172          MOVE.B  #%000,D2     ; mode data register
00001ED8  1639 00002F24           1173          MOVE.B  sRN,D3       ; source register number
00001EDE  4EB9 0000296C           1174          JSR     EA_START
00001EE4  43F9 00002F02           1175          LEA      COMA,A1
00001EEA  103C 000E               1176          MOVE.B   #14,D0
00001EEE  4E4F                    1177          TRAP     #15
00001EF0  4243                    1178          CLR D3
00001EF2  4242                    1179          CLR D2
00001EF4  143C 0000               1180          MOVE.B  #%000,D2      ; mode data register
00001EF8  1639 00002F25           1181          MOVE.B  dRN,D3        ; destination register
00001EFE  4EB9 0000296C           1182          JSR     EA_START
00001F04                          1183          
00001F04  43F9 00002E54           1184          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F0A  103C 000E               1185          MOVE.B   #14,D0     ; moves #14 into data register D0
00001F0E  4E4F                    1186          TRAP     #15       ; Displays message via trap 14
00001F10                          1187          
00001F10  6000 F368               1188          BRA   MEMORYGRABBER
00001F14                          1189  
00001F14                          1190  
00001F14                          1191  PR_G_LS_EA
00001F14  43F9 00002EFC           1192          LEA CLRSPOT,A1      * print space
00001F1A  103C 000E               1193          MOVE.B   #14,D0   
00001F1E  4E4F                    1194          TRAP     #15
00001F20                          1195  
00001F20  0CB9 00000000 00002F14  1196          CMP.L #$0,DR 
00001F2A  6700 0064               1197          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00001F2E                          1198       
00001F2E                          1199          *******PRINT LSL*******
00001F2E  43F9 00002EB0           1200          LEA       PLSL,A1
00001F34  103C 000E               1201          MOVE.B   #14,D0     ; moves #14 into data register D0
00001F38  4E4F                    1202          TRAP     #15 
00001F3A  4EB9 000025CE           1203          JSR      SIZESPLIT
00001F40                          1204          
00001F40  43F9 00002EFC           1205          LEA CLRSPOT,A1      * print space
00001F46  103C 000E               1206          MOVE.B   #14,D0   
00001F4A  4E4F                    1207          TRAP     #15
00001F4C                          1208  
00001F4C                          1209          
00001F4C  4242                    1210          CLR D2
00001F4E  4243                    1211          CLR D3
00001F50  143C 0000               1212          MOVE.B  #%000,D2     ; mode data register
00001F54  1639 00002F24           1213          MOVE.B  sRN,D3       ; source register number
00001F5A  4EB9 0000296C           1214          JSR     EA_START
00001F60  43F9 00002F02           1215          LEA      COMA,A1
00001F66  103C 000E               1216          MOVE.B   #14,D0
00001F6A  4E4F                    1217          TRAP     #15
00001F6C  4243                    1218          CLR D3
00001F6E  4242                    1219          CLR D2
00001F70  143C 0000               1220          MOVE.B  #%000,D2      ; mode data register
00001F74  1639 00002F25           1221          MOVE.B  dRN,D3        ; destination register
00001F7A  4EB9 0000296C           1222          JSR     EA_START
00001F80                          1223          
00001F80  43F9 00002E54           1224          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F86  103C 000E               1225          MOVE.B   #14,D0     ; moves #14 into data register D0
00001F8A  4E4F                    1226          TRAP     #15       ; Displays message via trap 14
00001F8C                          1227          
00001F8C  6000 F2EC               1228          BRA   MEMORYGRABBER
00001F90                          1229          
00001F90                          1230  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
00001F90  43F9 00002EB4           1231           LEA       PLSR,A1
00001F96  103C 000E               1232           MOVE.B   #14,D0     ; moves #14 into data register D0
00001F9A  4E4F                    1233          TRAP     #15 
00001F9C  4EB9 000025CE           1234          JSR      SIZESPLIT
00001FA2                          1235          
00001FA2  43F9 00002EFC           1236          LEA CLRSPOT,A1      * print space
00001FA8  103C 000E               1237          MOVE.B   #14,D0   
00001FAC  4E4F                    1238          TRAP     #15
00001FAE                          1239  
00001FAE                          1240          
00001FAE  4242                    1241          CLR D2
00001FB0  4243                    1242          CLR D3
00001FB2  143C 0000               1243          MOVE.B  #%000,D2     ; mode data register
00001FB6  1639 00002F24           1244          MOVE.B  sRN,D3       ; source register number
00001FBC  4EB9 0000296C           1245          JSR     EA_START
00001FC2  43F9 00002F02           1246          LEA      COMA,A1
00001FC8  103C 000E               1247          MOVE.B   #14,D0
00001FCC  4E4F                    1248          TRAP     #15
00001FCE  4243                    1249          CLR D3
00001FD0  4242                    1250          CLR D2
00001FD2  143C 0000               1251          MOVE.B  #%000,D2      ; mode data register
00001FD6  1639 00002F25           1252          MOVE.B  dRN,D3        ; destination register
00001FDC  4EB9 0000296C           1253          JSR     EA_START
00001FE2                          1254          
00001FE2  43F9 00002E54           1255          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001FE8  103C 000E               1256          MOVE.B   #14,D0     ; moves #14 into data register D0
00001FEC  4E4F                    1257          TRAP     #15       ; Displays message via trap 14
00001FEE                          1258          
00001FEE  6000 F28A               1259          BRA   MEMORYGRABBER
00001FF2                          1260  
00001FF2                          1261  
00001FF2                          1262  PR_G_RO_EA
00001FF2  43F9 00002EFC           1263          LEA CLRSPOT,A1      * print space
00001FF8  103C 000E               1264          MOVE.B   #14,D0   
00001FFC  4E4F                    1265          TRAP     #15
00001FFE                          1266   
00001FFE                          1267          
00001FFE  0CB9 00000000 00002F14  1268           CMP.L #$0,DR 
00002008  6700 0064               1269          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000200C                          1270       
0000200C                          1271          *******PRINT LSL*******
0000200C  43F9 00002EC0           1272          LEA       PROL,A1
00002012  103C 000E               1273          MOVE.B   #14,D0     ; moves #14 into data register D0
00002016  4E4F                    1274          TRAP     #15 
00002018  4EB9 000025CE           1275          JSR      SIZESPLIT
0000201E                          1276          
0000201E  43F9 00002EFC           1277          LEA CLRSPOT,A1      * print space
00002024  103C 000E               1278          MOVE.B   #14,D0   
00002028  4E4F                    1279          TRAP     #15
0000202A                          1280  
0000202A                          1281          
0000202A  4242                    1282          CLR D2
0000202C  4243                    1283          CLR D3
0000202E  143C 0000               1284          MOVE.B  #%000,D2     ; mode data register
00002032  1639 00002F24           1285          MOVE.B  sRN,D3       ; source register number
00002038  4EB9 0000296C           1286          JSR     EA_START
0000203E  43F9 00002F02           1287          LEA      COMA,A1
00002044  103C 000E               1288          MOVE.B   #14,D0
00002048  4E4F                    1289          TRAP     #15
0000204A  4243                    1290          CLR D3
0000204C  4242                    1291          CLR D2
0000204E  143C 0000               1292          MOVE.B  #%000,D2      ; mode data register
00002052  1639 00002F25           1293          MOVE.B  dRN,D3        ; destination register
00002058  4EB9 0000296C           1294          JSR     EA_START
0000205E                          1295          
0000205E  43F9 00002E54           1296          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002064  103C 000E               1297          MOVE.B   #14,D0     ; moves #14 into data register D0
00002068  4E4F                    1298          TRAP     #15       ; Displays message via trap 14
0000206A                          1299          
0000206A  6000 F20E               1300          BRA   MEMORYGRABBER
0000206E                          1301  
0000206E                          1302          
0000206E                          1303  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
0000206E  43F9 00002EC4           1304          LEA       PROR,A1
00002074  103C 000E               1305          MOVE.B   #14,D0     ; moves #14 into data register D0
00002078  4E4F                    1306          TRAP     #15 
0000207A  4EB9 000025CE           1307          JSR      SIZESPLIT
00002080                          1308          
00002080  43F9 00002EFC           1309          LEA CLRSPOT,A1      * print space
00002086  103C 000E               1310          MOVE.B   #14,D0   
0000208A  4E4F                    1311          TRAP     #15
0000208C                          1312  
0000208C                          1313          
0000208C  4242                    1314          CLR D2
0000208E  4243                    1315          CLR D3
00002090  143C 0000               1316          MOVE.B  #%000,D2     ; mode data register
00002094  1639 00002F24           1317          MOVE.B  sRN,D3       ; source register number
0000209A  4EB9 0000296C           1318          JSR     EA_START
000020A0  43F9 00002F02           1319          LEA      COMA,A1
000020A6  103C 000E               1320          MOVE.B   #14,D0
000020AA  4E4F                    1321          TRAP     #15
000020AC  4243                    1322          CLR D3
000020AE  4242                    1323          CLR D2
000020B0  143C 0000               1324          MOVE.B  #%000,D2      ; mode data register
000020B4  1639 00002F25           1325          MOVE.B  dRN,D3        ; destination register
000020BA  4EB9 0000296C           1326          JSR     EA_START
000020C0                          1327          
000020C0  43F9 00002E54           1328          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000020C6  103C 000E               1329          MOVE.B   #14,D0     ; moves #14 into data register D0
000020CA  4E4F                    1330          TRAP     #15       ; Displays message via trap 14
000020CC                          1331          
000020CC  6000 F1AC               1332          BRA   MEMORYGRABBER
000020D0                          1333  
000020D0                          1334  PR_RO 
000020D0  43F9 00002EFC           1335       LEA CLRSPOT,A1      * print space
000020D6  103C 000E               1336       MOVE.B   #14,D0   
000020DA  4E4F                    1337       TRAP     #15
000020DC                          1338   
000020DC  0CB9 00000000 00002F14  1339       CMP.L #$0,DR 
000020E6  6700 0234               1340       BEQ   PR_ROR   ;RIGHT SHIFT
000020EA                          1341      
000020EA                          1342      *******PRINT ASL*******
000020EA  43F9 00002EC0           1343       LEA       PROL,A1
000020F0  103C 000E               1344       MOVE.B   #14,D0     ; moves #14 into data register D0
000020F4  4E4F                    1345       TRAP     #15 
000020F6                          1346  
000020F6  4EB9 000025CE           1347      JSR      SIZESPLIT
000020FC                          1348      
000020FC  43F9 00002EFC           1349       LEA CLRSPOT,A1      * print space
00002102  103C 000E               1350       MOVE.B   #14,D0   
00002106  4E4F                    1351       TRAP     #15
00002108                          1352  
00002108                          1353      
00002108  43F9 00002EFA           1354      LEA     HASH,A1    * print hash
0000210E  700E                    1355      MOVEQ   #14,D0
00002110  4E4F                    1356      TRAP    #15
00002112                          1357  
00002112                          1358      
00002112  4241                    1359      CLR D1
00002114  1239 00002F20           1360      MOVE.B   S_COUNT,D1
0000211A  103C 0003               1361      MOVE.B   #3,D0
0000211E  4E4F                    1362      TRAP     #15
00002120  43F9 00002F02           1363      LEA      COMA,A1
00002126  103C 000E               1364      MOVE.B   #14,D0
0000212A  4E4F                    1365      TRAP     #15
0000212C  4243                    1366      CLR D3
0000212E  4242                    1367      CLR D2
00002130  143C 0000               1368      MOVE.B  #%000,D2
00002134  1639 00002F25           1369      MOVE.B  dRN,D3
0000213A  4EB9 0000296C           1370      JSR     EA_START
00002140                          1371      
00002140  43F9 00002E54           1372      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002146  103C 000E               1373      MOVE.B   #14,D0     ; moves #14 into data register D0
0000214A  4E4F                    1374      TRAP     #15       ; Displays message via trap 14
0000214C                          1375  
0000214C                          1376      
0000214C  6000 F12C               1377      BRA    MEMORYGRABBER
00002150                          1378  
00002150                          1379  
00002150                          1380  
00002150                          1381  PR_AS 
00002150  43F9 00002EFC           1382       LEA CLRSPOT,A1      * print space
00002156  103C 000E               1383       MOVE.B   #14,D0   
0000215A  4E4F                    1384       TRAP     #15
0000215C                          1385  
0000215C  0CB9 00000000 00002F14  1386       CMP.L #$0,DR 
00002166  6700 014E               1387      BEQ   PR_ASR   ;RIGHT SHIFT
0000216A                          1388      
0000216A                          1389      *******PRINT ASL*******
0000216A  43F9 00002EBC           1390       LEA       PASL,A1
00002170  103C 000E               1391       MOVE.B   #14,D0     ; moves #14 into data register D0
00002174  4E4F                    1392       TRAP     #15 
00002176                          1393  
00002176  4EB9 000025CE           1394      JSR      SIZESPLIT
0000217C                          1395      
0000217C  43F9 00002EFC           1396       LEA CLRSPOT,A1      * print space
00002182  103C 000E               1397       MOVE.B   #14,D0   
00002186  4E4F                    1398       TRAP     #15
00002188                          1399  
00002188                          1400      
00002188  43F9 00002EFA           1401      LEA     HASH,A1    * print hash
0000218E  700E                    1402      MOVEQ   #14,D0
00002190  4E4F                    1403      TRAP    #15
00002192                          1404  
00002192                          1405      
00002192  4241                    1406      CLR D1
00002194  1239 00002F20           1407      MOVE.B   S_COUNT,D1
0000219A  103C 0003               1408      MOVE.B   #3,D0
0000219E  4E4F                    1409      TRAP     #15
000021A0  43F9 00002F02           1410      LEA      COMA,A1
000021A6  103C 000E               1411      MOVE.B   #14,D0
000021AA  4E4F                    1412      TRAP     #15
000021AC  4243                    1413      CLR D3
000021AE  4242                    1414      CLR D2
000021B0  143C 0000               1415      MOVE.B  #%000,D2
000021B4  1639 00002F25           1416      MOVE.B  dRN,D3
000021BA  4EB9 0000296C           1417      JSR     EA_START
000021C0                          1418      
000021C0  43F9 00002E54           1419      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000021C6  103C 000E               1420      MOVE.B   #14,D0     ; moves #14 into data register D0
000021CA  4E4F                    1421      TRAP     #15       ; Displays message via trap 14
000021CC                          1422  
000021CC  6000 F0AC               1423      BRA    MEMORYGRABBER
000021D0                          1424  
000021D0                          1425                        
000021D0                          1426                          
000021D0                          1427  PR_LS 
000021D0  43F9 00002EFC           1428       LEA CLRSPOT,A1      * print space
000021D6  103C 000E               1429       MOVE.B   #14,D0   
000021DA  4E4F                    1430       TRAP     #15
000021DC                          1431  
000021DC  0CB9 00000000 00002F14  1432      CMP.L #$0,DR 
000021E6  6700 0068               1433      BEQ   PR_LSR   ;RIGHT SHIFT
000021EA                          1434      
000021EA                          1435      *******PRINT LSL*******
000021EA  43F9 00002EB0           1436       LEA       PLSL,A1
000021F0  103C 000E               1437       MOVE.B   #14,D0     ; moves #14 into data register D0
000021F4  4E4F                    1438       TRAP     #15 
000021F6                          1439  
000021F6  4EB9 000025CE           1440      JSR      SIZESPLIT
000021FC                          1441      
000021FC  43F9 00002EFC           1442      LEA CLRSPOT,A1      * print space
00002202  103C 000E               1443       MOVE.B   #14,D0   
00002206  4E4F                    1444       TRAP     #15
00002208                          1445  
00002208                          1446      
00002208  43F9 00002EFA           1447      LEA     HASH,A1    * print hash
0000220E  700E                    1448      MOVEQ   #14,D0
00002210  4E4F                    1449      TRAP    #15
00002212                          1450  
00002212                          1451      
00002212  4241                    1452      CLR D1
00002214  1239 00002F20           1453      MOVE.B   S_COUNT,D1
0000221A  103C 0003               1454      MOVE.B   #3,D0
0000221E  4E4F                    1455      TRAP     #15
00002220  43F9 00002F02           1456      LEA      COMA,A1
00002226  103C 000E               1457      MOVE.B   #14,D0
0000222A  4E4F                    1458      TRAP     #15
0000222C  4243                    1459      CLR D3
0000222E  4242                    1460      CLR D2
00002230  143C 0000               1461      MOVE.B  #%000,D2
00002234  1639 00002F25           1462      MOVE.B  dRN,D3
0000223A  4EB9 0000296C           1463      JSR     EA_START
00002240                          1464      
00002240  43F9 00002E54           1465      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002246  103C 000E               1466      MOVE.B   #14,D0     ; moves #14 into data register D0
0000224A  4E4F                    1467      TRAP     #15       ; Displays message via trap 14
0000224C                          1468  
0000224C                          1469      
0000224C  6000 F02C               1470      BRA    MEMORYGRABBER
00002250                          1471            
00002250  43F9 00002EB4           1472  PR_LSR LEA   PLSR,A1
00002256  103C 000E               1473        MOVE.B   #14,D0     ; moves #14 into data register D0
0000225A  4E4F                    1474        TRAP     #15       ; Displays message via trap 14 
0000225C  4EB9 000025CE           1475        JSR      SIZESPLIT
00002262                          1476        
00002262  43F9 00002EFC           1477        LEA CLRSPOT,A1      * print space
00002268  103C 000E               1478       MOVE.B   #14,D0   
0000226C  4E4F                    1479       TRAP     #15
0000226E                          1480  
0000226E                          1481        
0000226E  43F9 00002EFA           1482        LEA     HASH,A1    * print hash
00002274  700E                    1483        MOVEQ   #14,D0
00002276  4E4F                    1484        TRAP    #15
00002278                          1485  
00002278                          1486        
00002278  4241                    1487        CLR D1
0000227A  1239 00002F20           1488        MOVE.B   S_COUNT,D1
00002280  103C 0003               1489        MOVE.B   #3,D0
00002284  4E4F                    1490        TRAP     #15
00002286  43F9 00002F02           1491        LEA      COMA,A1
0000228C  103C 000E               1492        MOVE.B   #14,D0
00002290  4E4F                    1493        TRAP     #15
00002292  4243                    1494        CLR D3
00002294  4242                    1495        CLR D2
00002296  143C 0000               1496        MOVE.B #%000,D2
0000229A  1639 00002F25           1497        MOVE.B  dRN,D3
000022A0  4EB9 0000296C           1498        JSR   EA_START
000022A6                          1499        
000022A6  43F9 00002E54           1500        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000022AC  103C 000E               1501        MOVE.B   #14,D0     ; moves #14 into data register D0
000022B0  4E4F                    1502        TRAP     #15       ; Displays message via trap 14
000022B2                          1503  
000022B2                          1504        
000022B2  6000 EFC6               1505        BRA MEMORYGRABBER
000022B6                          1506        
000022B6  43F9 00002EB8           1507  PR_ASR LEA   PASR,A1
000022BC  103C 000E               1508         MOVE.B   #14,D0     ; moves #14 into data register D0
000022C0  4E4F                    1509        TRAP     #15       ; Displays message via trap 14 
000022C2  4EB9 000025CE           1510        JSR      SIZESPLIT
000022C8                          1511        
000022C8  43F9 00002EFC           1512        LEA CLRSPOT,A1      * print space
000022CE  103C 000E               1513       MOVE.B   #14,D0   
000022D2  4E4F                    1514       TRAP     #15
000022D4                          1515  
000022D4                          1516        
000022D4  43F9 00002EFA           1517        LEA     HASH,A1    * print hash
000022DA  700E                    1518        MOVEQ   #14,D0
000022DC  4E4F                    1519        TRAP    #15
000022DE                          1520  
000022DE                          1521        
000022DE  4241                    1522        CLR D1
000022E0  1239 00002F20           1523        MOVE.B   S_COUNT,D1
000022E6  103C 0003               1524        MOVE.B   #3,D0
000022EA  4E4F                    1525        TRAP     #15
000022EC  43F9 00002F02           1526        LEA      COMA,A1
000022F2  103C 000E               1527        MOVE.B   #14,D0
000022F6  4E4F                    1528        TRAP     #15
000022F8  4243                    1529        CLR D3
000022FA  4242                    1530        CLR D2
000022FC  143C 0000               1531        MOVE.B #%000,D2
00002300  1639 00002F25           1532        MOVE.B  dRN,D3
00002306  4EB9 0000296C           1533        JSR   EA_START
0000230C                          1534        
0000230C  43F9 00002E54           1535        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002312  103C 000E               1536        MOVE.B   #14,D0     ; moves #14 into data register D0
00002316  4E4F                    1537        TRAP     #15       ; Displays message via trap 14
00002318                          1538  
00002318                          1539        
00002318  6000 EF60               1540        BRA MEMORYGRABBER
0000231C                          1541  
0000231C                          1542        
0000231C  43F9 00002EC4           1543  PR_ROR LEA   PROR,A1
00002322  103C 000E               1544        MOVE.B   #14,D0     ; moves #14 into data register D0
00002326  4E4F                    1545        TRAP     #15       ; Displays message via trap 14 
00002328  4EB9 000025CE           1546        JSR      SIZESPLIT
0000232E                          1547        
0000232E  43F9 00002EFC           1548        LEA CLRSPOT,A1      * print space
00002334  103C 000E               1549       MOVE.B   #14,D0   
00002338  4E4F                    1550       TRAP     #15
0000233A                          1551  
0000233A                          1552        
0000233A  43F9 00002EFA           1553        LEA     HASH,A1    * print hash
00002340  700E                    1554        MOVEQ   #14,D0
00002342  4E4F                    1555        TRAP    #15
00002344                          1556  
00002344                          1557        
00002344  4241                    1558        CLR D1
00002346  1239 00002F20           1559        MOVE.B   S_COUNT,D1
0000234C  103C 0003               1560        MOVE.B   #3,D0
00002350  4E4F                    1561        TRAP     #15
00002352  43F9 00002F02           1562        LEA      COMA,A1
00002358  103C 000E               1563        MOVE.B   #14,D0
0000235C  4E4F                    1564        TRAP     #15
0000235E  4243                    1565        CLR D3
00002360  4242                    1566        CLR D2
00002362  143C 0000               1567        MOVE.B #%000,D2
00002366  1639 00002F25           1568        MOVE.B  dRN,D3
0000236C  4EB9 0000296C           1569        JSR   EA_START
00002372                          1570        
00002372  43F9 00002E54           1571        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002378  103C 000E               1572        MOVE.B   #14,D0     ; moves #14 into data register D0
0000237C  4E4F                    1573        TRAP     #15       ; Displays message via trap 14
0000237E                          1574  
0000237E                          1575        
0000237E  6000 EEFA               1576        BRA MEMORYGRABBER
00002382                          1577        
00002382                          1578  ;-----------------------extra parts for above code to function
00002382                          1579  
00002382                          1580  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
00002382  0C39 0000 00002F20      1581           CMP.B #$0,S_COUNT
0000238A  6700 0004               1582           BEQ   IS_EIGHT
0000238E  4E75                    1583           RTS
00002390                          1584           
00002390  13FC 0008 00002F20      1585  IS_EIGHT  MOVE.B #8,S_COUNT
00002398  4E75                    1586            RTS
0000239A                          1587  
0000239A                          1588  ;---------------------------------------------------------
0000239A                          1589                  ;MOVE SECTION
0000239A  43F9 00002E5A           1590  PRINTMOVE LEA PMOVE,A1
000023A0  103C 000E               1591      MOVE.B   #14,D0     ; moves #14 into data register D0
000023A4  4E4F                    1592      TRAP     #15       ; Displays message via trap 14
000023A6  4EB9 000025CE           1593      JSR     SIZESPLIT
000023AC  6000 0286               1594      BRA EADN
000023B0                          1595      
000023B0  43F9 00002E66           1596  PRINTMOVEA LEA PMOVEA,A1
000023B6  103C 000E               1597      MOVE.B   #14,D0     ; moves #14 into data register D0
000023BA  4E4F                    1598      TRAP     #15       ; Displays message via trap 14
000023BC  4EB9 000025CE           1599      JSR     SIZESPLIT
000023C2  6000 0270               1600      BRA EADN
000023C6                          1601      
000023C6                          1602                      ;First set of commands
000023C6  43F9 00002E73           1603  PRINTNOP    LEA PNOP,A1
000023CC  103C 000E               1604      MOVE.B   #14,D0     ; moves #14 into data register D0
000023D0  4E4F                    1605      TRAP     #15       ; Displays message via trap 14
000023D2                          1606      
000023D2  6000 EEA6               1607      BRA     MEMORYGRABBER
000023D6                          1608  
000023D6  43F9 00002E5F           1609  PRINTMOVEM  LEA PMOVEM,A1
000023DC  103C 000E               1610      MOVE.B   #14,D0     ; moves #14 into data register D0
000023E0  4E4F                    1611      TRAP     #15       ; Displays message via trap 14
000023E2  4EB9 000025CE           1612      JSR     SIZESPLIT
000023E8  6000 024A               1613      BRA EADN
000023EC                          1614  
000023EC  43F9 00002E77           1615  PRINTLEA    LEA PLEA,A1
000023F2  103C 000E               1616      MOVE.B   #14,D0     ; moves #14 into data register D0
000023F6  4E4F                    1617      TRAP     #15       ; Displays message via trap 14
000023F8  4EB9 000025CE           1618      JSR     SIZESPLIT
000023FE  6000 0234               1619      BRA EADN
00002402                          1620  
00002402  43F9 00002E7B           1621  PRINTNOT    LEA PNOT,A1
00002408  103C 000E               1622      MOVE.B   #14,D0     ; moves #14 into data register D0
0000240C  4E4F                    1623      TRAP     #15       ; Displays message via trap 14
0000240E  4EB9 000025CE           1624      JSR     SIZESPLIT
00002414  6000 021E               1625      BRA EADN
00002418                          1626  
00002418  43F9 00002E7F           1627  PRINTJSR    LEA PJSR,A1
0000241E  103C 000E               1628      MOVE.B   #14,D0     ; moves #14 into data register D0
00002422  4E4F                    1629      TRAP     #15       ; Displays message via trap 14
00002424  4EB9 000025CE           1630      JSR     SIZESPLIT
0000242A  6000 0208               1631      BRA EADN
0000242E                          1632  
0000242E  43F9 00002E83           1633  PRINTRTS    LEA PRTS,A1
00002434  103C 000E               1634      MOVE.B   #14,D0     ; moves #14 into data register D0
00002438  4E4F                    1635      TRAP     #15       ; Displays message via trap 14
0000243A                          1636      
0000243A  6000 EE3E               1637      BRA     MEMORYGRABBER
0000243E                          1638      
0000243E                          1639                  ;ADDQ SECTION
0000243E  43F9 00002EAB           1640  PRINTADDQ LEA PADDQ,A1
00002444  103C 000E               1641      MOVE.B   #14,D0     ; moves #14 into data register D0
00002448  4E4F                    1642      TRAP     #15       ; Displays message via trap 14
0000244A  4EB9 000025CE           1643      JSR     SIZESPLIT
00002450  6000 01E2               1644      BRA EADN
00002454                          1645  
00002454                          1646                  ;SECOND SET OF COMMANDS
00002454  43F9 00002E87           1647  PRINTBGT LEA PBGT,A1
0000245A  103C 000E               1648      MOVE.B   #14,D0     ; moves #14 into data register D0
0000245E  4E4F                    1649      TRAP     #15       ; Displays message via trap 14
00002460  4EB9 000025CE           1650      JSR SIZESPLIT
00002466  6000 01CC               1651      BRA EADN
0000246A                          1652  
0000246A  43F9 00002E8B           1653  PRINTBEQ LEA PBEQ,A1
00002470  103C 000E               1654      MOVE.B   #14,D0     ; moves #14 into data register D0
00002474  4E4F                    1655      TRAP     #15       ; Displays message via trap 14
00002476  4EB9 000025CE           1656      JSR SIZESPLIT
0000247C  6000 01B6               1657      BRA EADN
00002480                          1658  
00002480  43F9 00002E8F           1659  PRINTBLE LEA PBLE,A1
00002486  103C 000E               1660      MOVE.B   #14,D0     ; moves #14 into data register D0
0000248A  4E4F                    1661      TRAP     #15       ; Displays message via trap 14
0000248C  4EB9 000025CE           1662      JSR SIZESPLIT
00002492  6000 01A0               1663      BRA EADN
00002496                          1664  
00002496  43F9 00002E93           1665  PRINTBRA LEA PBRA,A1
0000249C  103C 000E               1666      MOVE.B   #14,D0     ; moves #14 into data register D0
000024A0  4E4F                    1667      TRAP     #15       ; Displays message via trap 14
000024A2  4EB9 000025CE           1668      JSR SIZESPLIT
000024A8  6000 018A               1669      BRA EADN
000024AC                          1670      
000024AC                          1671                  ;MOVEQ SECTION
000024AC                          1672  PRINTMOVEQ 
000024AC  43F9 00002E6C           1673      LEA PMOVEQ,A1
000024B2  103C 000E               1674      MOVE.B   #14,D0     ; moves #14 into data register D0
000024B6  4E4F                    1675      TRAP     #15       ; Displays message via trap 14
000024B8  43F9 00002EFC           1676      LEA CLRSPOT,A1
000024BE  103C 000E               1677      MOVE.B   #14,D0     ; moves #14 into data register D0
000024C2  4E4F                    1678      TRAP     #15
000024C4  43F9 00002F00           1679      LEA DOLLARSIGN,A1
000024CA  103C 000E               1680      MOVE.B   #14,D0     ; moves #14 into data register D0
000024CE  4E4F                    1681      TRAP     #15    
000024D0  2239 00002EF4           1682      MOVE.L      DATA_FIELD,D1
000024D6  143C 0010               1683      MOVE.B      #16,D2
000024DA  103C 000F               1684      MOVE.B      #15,D0     ; moves #14 into data register D0
000024DE  4E4F                    1685      TRAP        #15 
000024E0  43F9 00002F02           1686      LEA COMA,A1
000024E6  103C 000E               1687      MOVE.B   #14,D0     ; moves #14 into data register D0
000024EA  4E4F                    1688      TRAP     #15
000024EC  1E3C 0000               1689      MOVE.B #0,D7
000024F0  7400                    1690      MOVE.L #%000,D2
000024F2  1639 00002EEE           1691      MOVE.B DEST_REG,D3
000024F8  6000 013A               1692      BRA EADN
000024FC                          1693  
000024FC                          1694                  ;OR SECTION
000024FC  43F9 00002E97           1695  PRINTOR LEA POR,A1
00002502  103C 000E               1696      MOVE.B   #14,D0     ; moves #14 into data register D0
00002506  4E4F                    1697      TRAP     #15       ; Displays message via trap 14
00002508  4EB9 000025CE           1698      JSR SIZESPLIT
0000250E  6000 0124               1699      BRA EADN
00002512                          1700  
00002512                          1701                  ;SUB SECTION
00002512  43F9 00002E9A           1702  PRINTSUB LEA PSUB,A1
00002518  103C 000E               1703      MOVE.B   #14,D0     ; moves #14 into data register D0
0000251C  4E4F                    1704      TRAP     #15       ; Displays message via trap 14
0000251E  4EB9 000025CE           1705      JSR SIZESPLIT
00002524  6000 010E               1706      BRA EADN
00002528                          1707  
00002528                          1708                  ;AND SECTION
00002528  43F9 00002E9E           1709  PRINTAND LEA PAND,A1
0000252E  103C 000E               1710      MOVE.B   #14,D0     ; moves #14 into data register D0
00002532  4E4F                    1711      TRAP     #15       ; Displays message via trap 14
00002534  4EB9 000025CE           1712      JSR SIZESPLIT
0000253A  6000 00F8               1713      BRA EADN
0000253E                          1714  
0000253E                          1715                  ;ADD SPLIT              
0000253E  43F9 00002EA2           1716  PRINTADD LEA PADD,A1
00002544  103C 000E               1717      MOVE.B   #14,D0     ; moves #14 into data register D0
00002548  4E4F                    1718      TRAP     #15       ; Displays message via trap 14
0000254A  4EB9 000025CE           1719      JSR     SIZESPLIT
00002550  6000 00E2               1720      BRA EADN
00002554                          1721      
00002554  43F9 00002EA6           1722  PRINTADDA LEA PADDA,A1
0000255A  103C 000E               1723      MOVE.B   #14,D0     ; moves #14 into data register D0
0000255E  4E4F                    1724      TRAP     #15       ; Displays message via trap 14
00002560  4EB9 000025CE           1725      JSR     SIZESPLIT
00002566  6000 00CC               1726      BRA EADN
0000256A                          1727      
0000256A                          1728                  ;THIRD ROTATE SPLIT   
0000256A                          1729  PRINTROTATESPLIT 
0000256A  0C79 0000 00002E59      1730      CMP #0,CommandDetail   
00002572                          1731      *BEQ PRINTLSL
00002572  0C79 0001 00002E59      1732      CMP #1,CommandDetail   
0000257A                          1733      *BEQ PRINTLSLDOUBLE
0000257A  0C79 0002 00002E59      1734      CMP #2,CommandDetail   
00002582                          1735      *BEQ PRINTLSR
00002582  0C79 0003 00002E59      1736      CMP #3,CommandDetail   
0000258A                          1737      *BEQ PRINTLSRDOUBLE
0000258A  0C79 0004 00002E59      1738      CMP #4,CommandDetail   
00002592                          1739      *BEQ PRINTASR
00002592  0C79 0005 00002E59      1740      CMP #5,CommandDetail   
0000259A                          1741      *BEQ PRINTASRDOUBLE
0000259A  0C79 0006 00002E59      1742      CMP #6,CommandDetail   
000025A2                          1743      *BEQ PRINTASL
000025A2  0C79 0007 00002E59      1744      CMP #7,CommandDetail   
000025AA                          1745      *BEQ PRINTASLDOUBLE
000025AA  0C79 0008 00002E59      1746      CMP #8,CommandDetail   
000025B2                          1747      *BEQ PRINTROL
000025B2  0C79 0009 00002E59      1748      CMP #9,CommandDetail   
000025BA                          1749      *BEQ PRINTROLDOUBLE
000025BA  0C79 000A 00002E59      1750      CMP #10,CommandDetail
000025C2                          1751      *BEQ PRINTROR     
000025C2  0C79 000B 00002E59      1752      CMP #11,CommandDetail
000025CA                          1753      *BEQ PRINTRORDOUBLE            
000025CA  6000 ECAE               1754      BRA MEMORYGRABBER    
000025CE                          1755  
000025CE                          1756  
000025CE                          1757                  ;SIZE PRINTER
000025CE                          1758  SIZESPLIT   
000025CE  0CB9 00000001 00002EDE  1759      CMP.L #1,SizeValue
000025D8  6700 003E               1760      BEQ PRINTB
000025DC  0CB9 00000002 00002EDE  1761      CMP.L #2,SizeValue
000025E6  6700 0022               1762      BEQ PRINTW
000025EA  0CB9 00000003 00002EDE  1763      CMP.L #3,SizeValue
000025F4  6700 0006               1764      BEQ PRINTL
000025F8  6000 002C               1765      BRA PRINTNONE ; go to EA/DN section
000025FC                          1766      
000025FC  43F9 00002EEA           1767  PRINTL LEA PL,A1
00002602  103C 000E               1768      MOVE.B   #14,D0     ; moves #14 into data register D0
00002606  4E4F                    1769      TRAP     #15       ; Displays message via trap 14
00002608  4E75                    1770      RTS
0000260A                          1771  
0000260A  43F9 00002EE6           1772  PRINTW      LEA PW,A1
00002610  103C 000E               1773      MOVE.B   #14,D0     ; moves #14 into data register D0
00002614  4E4F                    1774      TRAP     #15       ; Displays message via trap 14
00002616  4E75                    1775      RTS
00002618                          1776  
00002618  43F9 00002EE2           1777  PRINTB  LEA PB,A1
0000261E  103C 000E               1778      MOVE.B   #14,D0     ; moves #14 into data register D0
00002622  4E4F                    1779      TRAP     #15       ; Displays message via trap 14
00002624  4E75                    1780      RTS
00002626                          1781      
00002626  43F9 00002EFC           1782  PRINTNONE  LEA CLRSPOT,A1
0000262C  103C 000E               1783      MOVE.B   #14,D0     ; moves #14 into data register D0
00002630  4E4F                    1784      TRAP     #15       ; Displays message via trap 14
00002632  4E75                    1785      RTS
00002634                          1786  
00002634                          1787                  ;PRINT EA/DN
00002634                          1788  EADN 
00002634  BE3C 0000               1789      CMP.B   #0,D7
00002638  6700 0048               1790      BEQ     PRINTNOTRAIL
0000263C  BE3C 0001               1791      CMP.B   #1,D7
00002640  6700 000E               1792      BEQ     PRINTONETRAIL 
00002644  BE3C 0002               1793      CMP.B   #2,D7
00002648  6700 001C               1794      BEQ     PRINTTWOTRAIL
0000264C                          1795      
0000264C  6000 EC2C               1796      BRA     MEMORYGRABBER
00002650                          1797      
00002650                          1798  PRINTONETRAIL 
00002650  4EB9 0000296C           1799      JSR EA_Start
00002656  43F9 00002E54           1800      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000265C  103C 000E               1801      MOVE.B   #14,D0     ; moves #14 into data register D0
00002660  4E4F                    1802      TRAP     #15       ; Displays message via trap 14
00002662  6000 EC16               1803      BRA MEMORYGRABBER
00002666                          1804  
00002666                          1805  PRINTTWOTRAIL 
00002666  4EB9 0000296C           1806      JSR EA_Start
0000266C  4EB9 0000296C           1807      JSR EA_Start
00002672  43F9 00002E54           1808      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002678  103C 000E               1809      MOVE.B   #14,D0     ; moves #14 into data register D0
0000267C  4E4F                    1810      TRAP     #15       ; Displays message via trap 14
0000267E  6000 EBFA               1811      BRA MEMORYGRABBER
00002682                          1812      
00002682                          1813  PRINTNOTRAIL 
00002682  4EB9 0000296C           1814      JSR EA_Start
00002688  43F9 00002E54           1815      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000268E  103C 000E               1816      MOVE.B   #14,D0     ; moves #14 into data register D0
00002692  4E4F                    1817      TRAP     #15       ; Displays message via trap 14
00002694  6000 EBE4               1818      BRA MEMORYGRABBER
00002698                          1819  
00002698                          1820  CLOSINGSTATEMENTS     
00002698  43F9 00002E54           1821      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000269E  103C 000E               1822      MOVE.B   #14,D0     ; moves #14 into data register D0
000026A2  4E4F                    1823      TRAP     #15       ; Displays message via trap 14
000026A4                          1824     
000026A4                          1825  STOP    
000026A4  103C 0009               1826      MOVE.B #9,D0        ; moves #9 into data register D0
000026A8  4E4F                    1827      TRAP     #15       ; halt simulator via trap 9
000026AA                          1828  
000026AA                          1829  
000026AA                          1830  ;----------------------------- ADDED THIS FOR THE MEMORYGRABBER (MAIN LOOP) 
000026AA                          1831  ENDING 
000026AA  43F9 00002E41           1832      LEA     FINALMESSAGE,A1     * Prints End of Program message
000026B0  103C 000E               1833      MOVE.B  #14,D0
000026B4  4E4F                    1834      TRAP    #15
000026B6                          1835  
000026B6  FFFF FFFF               1836      SIMHALT             ; halt simulator
000026BA                          1837      
000026BA                          1838      
000026BA                          1839      
000026BA                          1840  ;----------------------------- ADDED THIS FOR OP CODE PART 
000026BA                          1841  ********* CHECK DESTINATION ***********
000026BA                          1842  CHECK_DESTINATION
000026BA  13FC 000F 00002F07      1843      MOVE.B  #$F,DstMode
000026C2                          1844      
000026C2  0C39 0007 00002EEF      1845      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
000026CA  6700 0026               1846      BEQ     CHECK_DEST_REG             * Checks registers
000026CE                          1847      
000026CE  0C39 0005 00002EEF      1848      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
000026D6  6700 0058               1849      BEQ     R_CHECK_DEST    * Print DATA instead 
000026DA                          1850      
000026DA  0C39 0006 00002EEF      1851      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
000026E2  6700 004C               1852      BEQ     R_CHECK_DEST    * Print DATA instead
000026E6                          1853      
000026E6  13F9 00002EEF 00002F07  1854      MOVE.B  DEST_MODE,DstMode
000026F0  4E75                    1855      RTS
000026F2                          1856  CHECK_DEST_REG
000026F2  0C39 0002 00002EEE      1857      CMP.B   #2,DEST_REG             * if DEST_REG = 010
000026FA  6700 0034               1858      BEQ     R_CHECK_DEST
000026FE                          1859  
000026FE  0C39 0003 00002EEE      1860      CMP.B   #3,DEST_REG         * if DEST_REG = 011
00002706  6700 0028               1861      BEQ     R_CHECK_DEST
0000270A                          1862      
0000270A  0C39 0005 00002EEE      1863      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002712  6C00 016C               1864      BGE     RETURN
00002716                          1865      
00002716  13F9 00002EEF 00002F07  1866      MOVE.B  DEST_MODE,DstMode
00002720  4286                    1867      CLR.L   D6
00002722  1C39 00002EEE           1868      MOVE.B  DEST_REG,D6
00002728  DD39 00002F07           1869      ADD.B   D6,DstMode
0000272E  4E75                    1870      RTS
00002730                          1871  R_CHECK_DEST
00002730  13FC 000E 00002F07      1872      MOVE.B  #$E,DstMode
00002738  4E75                    1873      RTS
0000273A                          1874  ********* CHECK TEMP ***********
0000273A                          1875  CHECK_TEMP
0000273A                          1876  
0000273A  13FC 000F 00002F08      1877      MOVE.B  #$F,TempMode
00002742                          1878      
00002742  0C39 0007 00002EF2      1879      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
0000274A  6700 0026               1880      BEQ     CHECK_TEMP_REG      * Checks registers
0000274E                          1881  
0000274E  0C39 0005 00002EF2      1882      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
00002756  6700 0058               1883      BEQ     R_CHECK_TEMP    * 
0000275A                          1884      
0000275A  0C39 0006 00002EF2      1885      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
00002762  6700 004C               1886      BEQ     R_CHECK_TEMP    * 
00002766                          1887      
00002766  13F9 00002EF2 00002F08  1888      MOVE.B  TEMP_MODE,TempMode
00002770  4E75                    1889      RTS
00002772                          1890  CHECK_TEMP_REG
00002772  0C39 0002 00002EF3      1891      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
0000277A  6700 0034               1892      BEQ     R_CHECK_TEMP
0000277E                          1893  
0000277E  0C39 0003 00002EF3      1894      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
00002786  6700 0028               1895      BEQ     R_CHECK_TEMP
0000278A                          1896      
0000278A  0C39 0005 00002EF3      1897      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002792  6700 00EC               1898      BEQ     RETURN
00002796                          1899      
00002796  13F9 00002EF2 00002F08  1900      MOVE.B  TEMP_MODE,TempMode
000027A0  4286                    1901      CLR.L   D6
000027A2  1C39 00002EF3           1902      MOVE.B  TEMP_REG,D6
000027A8  DD39 00002F08           1903      ADD.B   D6,TempMode
000027AE  4E75                    1904      RTS
000027B0                          1905  R_CHECK_TEMP
000027B0  13FC 000E 00002F08      1906      MOVE.B  #$E,TempMode
000027B8  4E75                    1907      RTS
000027BA                          1908  ******************** CHECK_SOURCE ******************** 
000027BA                          1909  CHECK_SOURCE    * TODO
000027BA  13FC 000F 00002F09      1910      MOVE.B  #$F,SrcMode
000027C2                          1911      
000027C2  0C39 0007 00002EF0      1912      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
000027CA  6700 0026               1913      BEQ     CHECK_SOURCE_REG    * Checks registers
000027CE                          1914  
000027CE  0C39 0005 00002EF0      1915      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
000027D6  6700 0058               1916      BEQ     R_CHECK_SOURCE 
000027DA                          1917      
000027DA  0C39 0006 00002EF0      1918      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
000027E2  6700 004C               1919      BEQ     R_CHECK_SOURCE 
000027E6                          1920      
000027E6  13F9 00002EF0 00002F09  1921      MOVE.B  SRC_MODE,SrcMode
000027F0  4E75                    1922      RTS
000027F2                          1923  CHECK_SOURCE_REG
000027F2  0C39 0002 00002EF1      1924      CMP.B   #2,SRC_REG             * if RRRS = 010
000027FA  6700 0034               1925      BEQ     R_CHECK_SOURCE
000027FE                          1926  
000027FE  0C39 0003 00002EF1      1927      CMP.B   #3,SRC_REG          * if RRRS = 011
00002806  6700 0028               1928      BEQ     R_CHECK_SOURCE
0000280A                          1929      
0000280A  0C39 0005 00002EF1      1930      CMP.B   #5,SRC_REG      * if RRRS = 101
00002812  6C00 006C               1931      BGE     RETURN
00002816                          1932      
00002816  13F9 00002EF0 00002F09  1933      MOVE.B  SRC_MODE,SrcMode
00002820  4286                    1934      CLR.L   D6
00002822  1C39 00002EF1           1935      MOVE.B  SRC_REG,D6
00002828  DD39 00002F09           1936      ADD.B   D6,SrcMode
0000282E  4E75                    1937      RTS
00002830                          1938  R_CHECK_SOURCE
00002830  13FC 000E 00002F09      1939      MOVE.B  #$E,SrcMode
00002838  4E75                    1940      RTS
0000283A                          1941  ******************** XBIT ********************
0000283A                          1942  CHECK_XBIT      
0000283A  0C39 0000 00002F05      1943      CMP.B   #%0,XBit
00002842  6700 0008               1944      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002846  6600 001E               1945      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
0000284A  4E75                    1946      RTS
0000284C                          1947  TEMP_TO_DEST
0000284C  13F9 00002EF3 00002EEE  1948      MOVE.B  TEMP_REG,DEST_REG
00002856  13F9 00002EF2 00002EEF  1949      MOVE.B  TEMP_MODE,DEST_MODE
00002860  4EB8 26BA               1950      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002864  4E75                    1951      RTS
00002866                          1952  TEMP_TO_SRC
00002866  13F9 00002EF3 00002EF1  1953      MOVE.B  TEMP_REG,SRC_REG
00002870  13F9 00002EF2 00002EF0  1954      MOVE.B  TEMP_MODE,SRC_MODE
0000287A  4EB8 27BA               1955      JSR     CHECK_SOURCE                 
0000287E  4E75                    1956      RTS
00002880                          1957    
00002880                          1958  ******************** OTHER COMMANDS ********************
00002880                          1959  RETURN
00002880  4E75                    1960      RTS
00002882                          1961  
00002882                          1962  FORMAT_DATA
00002882  0C39 0000 00002EF4      1963      CMP.B   #0,DATA_FIELD
0000288A  66F4                    1964      BNE     RETURN
0000288C  13FC 0008 00002EF4      1965      MOVE.B  #8,DATA_FIELD
00002894  4E75                    1966      RTS
00002896                          1967  
00002896                          1968  CHECK_DATA_NEG
00002896  BC3C 0080               1969      CMP.B   #128,D6
0000289A  6700 0004               1970      BEQ     PRINT_NEG
0000289E  4E75                    1971      RTS
000028A0                          1972      
000028A0                          1973  PRINT_NEG
000028A0  43F9 00002EFE           1974      LEA     NEG,A1      * print "-"
000028A6  103C 000E               1975      MOVE.B  #14,D0
000028AA  4E4F                    1976      TRAP    #15
000028AC  4E75                    1977      RTS
000028AE                          1978  
000028AE                          1979  PRINT_DATA
000028AE  43F9 00002EC8           1980      LEA     PDATA,A1
000028B4  103C 000E               1981      MOVE.B  #14,D0
000028B8  4E4F                    1982      TRAP    #15
000028BA                          1983      
000028BA  43F9 00002EFC           1984      LEA     CLRSPOT,A1      * print space
000028C0  103C 000E               1985      MOVE.B  #14,D0     
000028C4  4E4F                    1986      TRAP    #15 
000028C6                          1987      
000028C6                          1988      * TODO: PRINT #$
000028C6                          1989      * TODO: PRINT COMMANDDATA 
000028C6  4E75                    1990      RTS
000028C8                          1991      
000028C8                          1992  * SET SIZE FOR SIZESPLIT    
000028C8                          1993  SETSIZE1
000028C8  0C39 0000 00002EF9      1994      CMP.B   #%0,SIZE_BITS
000028D0  6700 0040               1995      BEQ     SETSIZEW
000028D4  0C39 0001 00002EF9      1996      CMP.B   #%1,SIZE_BITS
000028DC  6700 0040               1997      BEQ     SETSIZEL
000028E0  4E75                    1998      RTS
000028E2                          1999  SETSIZE2
000028E2  0C39 0000 00002EF9      2000      CMP.B   #%00,SIZE_BITS
000028EA  6700 001A               2001      BEQ     SETSIZEB
000028EE  0C39 0001 00002EF9      2002      CMP.B   #%01,SIZE_BITS
000028F6  6700 001A               2003      BEQ     SETSIZEW
000028FA  0C39 0002 00002EF9      2004      CMP.B   #%10,SIZE_BITS
00002902  6700 001A               2005      BEQ     SETSIZEL
00002906                          2006  SETSIZEB
00002906  23FC 00000001 00002EDE  2007      MOVE.L  #1,SizeValue
00002910  4E75                    2008      RTS
00002912                          2009  SETSIZEW
00002912  23FC 00000002 00002EDE  2010      MOVE.L  #2,SizeValue 
0000291C  4E75                    2011      RTS
0000291E                          2012  SETSIZEL
0000291E  23FC 00000003 00002EDE  2013      MOVE.L  #3,SizeValue
00002928  4E75                    2014      RTS
0000292A                          2015      
0000292A                          2016  *SETINVEA
0000292A                          2017      *MOVE.B  #1,INVALID_EA
0000292A                          2018      *RTS     
0000292A                          2019      
0000292A                          2020  CLEARMR
0000292A  13FC 0000 00002EEE      2021      MOVE.B  #0,DEST_REG 
00002932  13FC 0000 00002EEF      2022      MOVE.B  #0,DEST_MODE
0000293A  13FC 0000 00002EF0      2023      MOVE.B  #0,SRC_MODE
00002942  13FC 0000 00002EF1      2024      MOVE.B  #0,SRC_REG
0000294A  13FC 0000 00002EF2      2025      MOVE.B  #0,TEMP_MODE
00002952  13FC 0000 00002EF3      2026      MOVE.B  #0,TEMP_REG 
0000295A  13FC 0000 00002EF9      2027      MOVE.B  #0,SIZE_BITS
00002962  13FC 0000 00002EDE      2028      MOVE.B  #0,SizeValue
0000296A  4E75                    2029      RTS  
0000296C                          2030  
0000296C                          2031  *************    
0000296C                          2032  
0000296C                          2033  *******************************************************
0000296C                          2034  * EA subroutine
0000296C                          2035  * Purpose: Generate EA
0000296C                          2036  *         Addresses used: 
0000296C                          2037  *            D2 FOR MODE
0000296C                          2038  *            D3 FOR REGISTER
0000296C                          2039  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
0000296C                          2040  *            D1 FOR PRINTING
0000296C                          2041  *            A6 MIMICKS INSTRUCTION BUFFER
0000296C                          2042  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
0000296C                          2043  ***************************************************
0000296C                          2044  
0000296C  0C39 000F 00002F0A      2045  EA_start        CMP.B      #$F,STATE
00002974  6700 039A               2046                  BEQ        EA_FINISH
00002978  4EF9 00002D12           2047                  jmp        REGISTER_NUMBER_TO_DECIMAL
0000297E                          2048  
0000297E  B47C 0000               2049  Continue_EA     CMP.W       #MODE000,D2             
00002982  6700 0036               2050                  BEQ         DATA_REGISTER                 
00002986  B47C 0001               2051                  CMP.W       #MODE001,D2               
0000298A  6700 004A               2052                  BEQ         ADDRESS_REGISTER                 
0000298E  B47C 0002               2053                  CMP.W       #MODE010,D2              
00002992  6700 005E               2054                  BEQ         ADDRESS_REGISTER_DIRECT               
00002996  B47C 0003               2055                  CMP.W       #MODE011,D2              
0000299A  6700 0086               2056                  BEQ         ADDRESS_REGISTER_INCREMENT             
0000299E  B47C 0004               2057                  CMP.W       #MODE100,D2          
000029A2  6700 00B8               2058                  BEQ         ADDRESS_REGISTER_DECREMENT              
000029A6  B47C 0007               2059                  CMP.W       #MODE111,D2          
000029AA  6700 00EA               2060                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
000029AE  13FC 0001 00002F0A      2061                  MOVE.B      #BAD_FLAG,STATE               
000029B6  6000 0358               2062                  BRA         EA_FINISH              
000029BA                          2063                  
000029BA                          2064  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
000029BA  123C 0044               2065                  MOVE.B   #D,D1
000029BE  103C 0006               2066                  MOVE.B  #6,D0
000029C2  4E4F                    2067                  TRAP    #15
000029C4  0685 00000030           2068                  ADDI.L   #$30,D5
000029CA  1205                    2069                  MOVE.B   D5,D1
000029CC  103C 0006               2070                  MOVE.B  #6,D0
000029D0  4E4F                    2071                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
000029D2  6000 033C               2072                  BRA      EA_FINISH
000029D6                          2073                      
000029D6                          2074  
000029D6  123C 0041               2075  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
000029DA  103C 0006               2076                   MOVE.B  #6,D0
000029DE  4E4F                    2077                   TRAP    #15
000029E0  0685 00000030           2078                   ADDI.L   #$30,D5
000029E6  1205                    2079                   MOVE.B   D5,D1
000029E8  103C 0006               2080                   MOVE.B  #6,D0
000029EC  4E4F                    2081                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
000029EE  6000 0320               2082                   BRA      EA_FINISH
000029F2                          2083  
000029F2                          2084                   
000029F2                          2085  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
000029F2  123C 0028               2086                          MOVE.B   #OPEN_PARENTHESIS,D1
000029F6  103C 0006               2087                          MOVE.B   #6,D0
000029FA  4E4F                    2088                          TRAP     #15
000029FC  123C 0041               2089                          MOVE.B   #A,D1
00002A00  103C 0006               2090                          MOVE.B  #6,D0
00002A04  4E4F                    2091                          TRAP    #15
00002A06  0685 00000030           2092                          ADDI.L   #$30,D5
00002A0C  1205                    2093                          MOVE.B   D5,D1
00002A0E  103C 0006               2094                          MOVE.B  #6,D0
00002A12  4E4F                    2095                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002A14  123C 0029               2096                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002A18  103C 0006               2097                          MOVE.B  #6,D0
00002A1C  4E4F                    2098                          TRAP    #15
00002A1E  6000 02F0               2099                          BRA      EA_FINISH
00002A22                          2100  
00002A22                          2101  
00002A22                          2102  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002A22  123C 0028               2103                             MOVE.B   #OPEN_PARENTHESIS,D1
00002A26  103C 0006               2104                             MOVE.B   #6,D0
00002A2A  4E4F                    2105                             TRAP     #15
00002A2C  123C 0041               2106                             MOVE.B   #A,D1
00002A30  103C 0006               2107                             MOVE.B  #6,D0
00002A34  4E4F                    2108                             TRAP    #15
00002A36  0685 00000030           2109                             ADDI.L   #$30,D5
00002A3C  1205                    2110                             MOVE.B   D5,D1
00002A3E  103C 0006               2111                             MOVE.B  #6,D0
00002A42  4E4F                    2112                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002A44  123C 0029               2113                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002A48  103C 0006               2114                             MOVE.B  #6,D0
00002A4C  4E4F                    2115                             TRAP    #15
00002A4E  18FC 002B               2116                             MOVE.B   #PLUS_SIGN,(A4)+
00002A52  103C 0006               2117                             MOVE.B  #6,D0
00002A56  4E4F                    2118                             TRAP    #15
00002A58  6000 02B6               2119                             BRA      EA_FINISH
00002A5C                          2120  
00002A5C                          2121  
00002A5C                          2122  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002A5C  123C 002D               2123                             MOVE.B   #MINUS_SIGN,D1
00002A60  103C 0006               2124                             MOVE.B   #6,D0
00002A64  4E4F                    2125                             TRAP        #15
00002A66  123C 0028               2126                             MOVE.B   #OPEN_PARENTHESIS,D1
00002A6A  103C 0006               2127                             MOVE.B   #6,D0
00002A6E  4E4F                    2128                             TRAP     #15
00002A70  123C 0041               2129                             MOVE.B   #A,D1
00002A74  103C 0006               2130                             MOVE.B  #6,D0
00002A78  4E4F                    2131                             TRAP    #15
00002A7A  0685 00000030           2132                             ADDI.L   #$30,D5
00002A80  1205                    2133                             MOVE.B   D5,D1
00002A82  103C 0006               2134                             MOVE.B  #6,D0
00002A86  4E4F                    2135                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002A88  123C 0029               2136                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002A8C  103C 0006               2137                             MOVE.B  #6,D0
00002A90  4E4F                    2138                             TRAP    #15
00002A92  6000 027C               2139                             BRA      EA_FINISH
00002A96                          2140  
00002A96                          2141  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002A96  6000 0002               2142                                BRA  CONTINUE_A_I_A
00002A9A                          2143                                
00002A9A                          2144                                
00002A9A                          2145  CONTINUE_A_I_A                
00002A9A  BA3C 0004               2146                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002A9E  6700 001E               2147                                BEQ         IMMIDIATE_REGISTER                
00002AA2  BA3C 0000               2148                                CMP.B       #0,D5                ; WORD ADDRESSING
00002AA6  6700 0048               2149                                BEQ         WORD_ADDRESSING                
00002AAA  BA3C 0001               2150                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002AAE  6700 0054               2151                                BEQ         LONG_ADDRESSING              
00002AB2  13FC 0001 00002F0A      2152                                MOVE.B      #BAD_FLAG,STATE              
00002ABA  6000 0254               2153                                BRA         EA_FINISH                * jump to end   
00002ABE                          2154                                
00002ABE                          2155                                
00002ABE  123C 0023               2156  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002AC2  103C 0006               2157                                MOVE.B #6,D0
00002AC6  4E4F                    2158                                TRAP   #15
00002AC8  0C39 0001 00002EF8      2159                                CMP.B #1,SIZE   ;BYTE
00002AD0  6700 0046               2160                                BEQ   GETBYTE
00002AD4  0C39 0002 00002EF8      2161                                CMP.B #2,SIZE   ;BYTE
00002ADC  6700 0044               2162                                BEQ   GETWORD
00002AE0  0C39 0003 00002EF8      2163                                CMP.B #3,SIZE   ;BYTE
00002AE8  6700 0042               2164                                BEQ   GETLONG
00002AEC  6000 003E               2165                                BRA   GETLONG
00002AF0                          2166                                
00002AF0                          2167  
00002AF0  123C 0024               2168  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002AF4  103C 0006               2169                               MOVE.B #6,D0
00002AF8  4E4F                    2170                               TRAP  #15
00002AFA  3E1E                    2171                               MOVE.W  (A6)+,D7
00002AFC  6000 00BE               2172                               BRA   PRINT_WORD
00002B00  6000 020E               2173                               BRA   EA_FINISH
00002B04                          2174  
00002B04  123C 0024               2175  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002B08  103C 0006               2176                               MOVE.B #6,D0
00002B0C  4E4F                    2177                               TRAP  #15
00002B0E  2E1E                    2178                               MOVE.L  (A6)+,D7
00002B10  6000 0128               2179                               BRA   PRINT_LONG
00002B14  6000 01FA               2180                               BRA   EA_FINISH                            
00002B18                          2181  
00002B18                          2182  GETBYTE      
00002B18  1E1E                    2183                  MOVE.B   (A6)+,D7    
00002B1A  6B00 001A               2184                  BMI     ADD_NEGATIVE
00002B1E  6000 0024               2185                  BRA     PRINT_BRANCHING
00002B22                          2186  GETWORD                
00002B22  3E1E                    2187                  MOVE.W   (A6)+,D7
00002B24  6B00 0010               2188                  BMI     ADD_NEGATIVE
00002B28  6000 001A               2189                  BRA     PRINT_BRANCHING
00002B2C                          2190  GETLONG                
00002B2C                          2191                  
00002B2C  2E1E                    2192                  MOVE.L   (A6)+,D7
00002B2E  6B00 0006               2193                  BMI     ADD_NEGATIVE
00002B32  6000 0010               2194                  BRA     PRINT_BRANCHING
00002B36                          2195                  
00002B36  123C 002D               2196  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00002B3A  123C 0006               2197                  MOVE.B #6,D1
00002B3E  4E4F                    2198                  TRAP   #15
00002B40  6000 0002               2199                  BRA    PRINT_BRANCHING
00002B44                          2200  
00002B44                          2201  
00002B44  0C39 0001 00002EF8      2202  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002B4C  6700 001C               2203                  BEQ    PRINT_BYTE    
00002B50  0C39 0002 00002EF8      2204                  CMP.B #2,SIZE   ;WORD
00002B58  6700 0062               2205                  BEQ    PRINT_WORD
00002B5C  0C39 0003 00002EF8      2206                  CMP.B  #3,SIZE  ;LONG
00002B64  6700 00D4               2207                  BEQ    PRINT_LONG
00002B68  60DA                    2208                  BRA    PRINT_BRANCHING
00002B6A                          2209  
00002B6A                          2210  
00002B6A                          2211  
00002B6A                          2212  
00002B6A                          2213                  
00002B6A                          2214  **** BYTE DATA PRINTING***********************
00002B6A  4241                    2215  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002B6C                          2216                 
00002B6C                          2217  
00002B6C  BEBC 0000000F           2218                 CMP.L   #$F,D7              
00002B72  6F00 0006               2219                 BLE     BYTE_ONE_LOOP                  
00002B76  6000 000E               2220                 BRA     READ_BYTE
00002B7A                          2221  
00002B7A                          2222  BYTE_ONE_LOOP
00002B7A  13FC 0001 00002F26      2223                  MOVE.B  #1,NUMBER_OF_HEX  
00002B82  6000 0002               2224                  BRA     READ_BYTE
00002B86                          2225      
00002B86                          2226  READ_BYTE                           
00002B86  0C39 0000 00002F26      2227      CMP.B   #0,NUMBER_OF_HEX               
00002B8E  6700 0014               2228      BEQ     COPYBYTE
00002B92                          2229      
00002B92  123C 0030               2230      MOVE.B  #$30,D1             
00002B96  103C 0006               2231      MOVE.B  #6,D0               
00002B9A  4E4F                    2232      TRAP    #15
00002B9C                          2233  
00002B9C  5339 00002F26           2234      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002BA2  60E2                    2235      BRA     READ_BYTE           ; LOOP
00002BA4                          2236      
00002BA4                          2237  COPYBYTE
00002BA4  2207                    2238      MOVE.L  D7,D1               ; COPY DATA 
00002BA6  143C 0010               2239      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002BAA  103C 000F               2240      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002BAE  4E4F                    2241      TRAP    #15
00002BB0  13FC 0000 00002F26      2242      MOVE.B  #0,NUMBER_OF_HEX
00002BB8  6000 0156               2243      BRA  EA_FINISH
00002BBC                          2244  
00002BBC                          2245  
00002BBC                          2246  
00002BBC                          2247  
00002BBC                          2248  
00002BBC                          2249  ******PRINT WORD DATA******************
00002BBC  4241                    2250  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002BBE                          2251                 
00002BBE                          2252  
00002BBE  BEBC 0000000F           2253                 CMP.L   #$F,D7              
00002BC4  6F00 001A               2254                 BLE     WORD_ONE_LOOP
00002BC8  BEBC 000000FF           2255                 CMP.L   #$FF,D7              
00002BCE  6F00 001C               2256                 BLE     WORD_TWO_LOOP
00002BD2  BEBC 00000FFF           2257                 CMP.L   #$FFF,D7              
00002BD8  6F00 001E               2258                 BLE     WORD_THREE_LOOP                  
00002BDC  6000 0026               2259                 BRA     READ_WORD
00002BE0                          2260  
00002BE0                          2261  WORD_ONE_LOOP
00002BE0  13FC 0001 00002F26      2262                  MOVE.B  #1,NUMBER_OF_HEX  
00002BE8  6000 001A               2263                  BRA     READ_WORD
00002BEC                          2264                  
00002BEC                          2265  WORD_TWO_LOOP
00002BEC  13FC 0002 00002F26      2266                  MOVE.B  #2,NUMBER_OF_HEX  
00002BF4  6000 000E               2267                  BRA     READ_WORD
00002BF8                          2268                  
00002BF8                          2269  WORD_THREE_LOOP
00002BF8  13FC 0003 00002F26      2270                  MOVE.B  #3,NUMBER_OF_HEX  
00002C00  6000 0002               2271                  BRA     READ_WORD                
00002C04                          2272      
00002C04                          2273  READ_WORD                           
00002C04  0C39 0000 00002F26      2274      CMP.B   #0,NUMBER_OF_HEX               
00002C0C  6700 0014               2275      BEQ     COPYWORD
00002C10                          2276      
00002C10  123C 0030               2277      MOVE.B  #$30,D1             
00002C14  103C 0006               2278      MOVE.B  #6,D0               
00002C18  4E4F                    2279      TRAP    #15
00002C1A                          2280  
00002C1A  5339 00002F26           2281      SUBI.B  #1,NUMBER_OF_HEX              
00002C20  60E2                    2282      BRA     READ_WORD                   ; LOOP
00002C22                          2283  
00002C22                          2284  COPYWORD
00002C22  2207                    2285      MOVE.L  D7,D1               ; COPY DATA 
00002C24  143C 0010               2286      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002C28  103C 000F               2287      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002C2C  4E4F                    2288      TRAP    #15
00002C2E  13FC 0000 00002F26      2289      MOVE.B  #0,NUMBER_OF_HEX
00002C36  6000 00D8               2290      BRA  EA_FINISH
00002C3A                          2291  
00002C3A                          2292  ****************PRINT LONG DATA*****************
00002C3A  4241                    2293  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00002C3C                          2294                 
00002C3C                          2295  
00002C3C  BEBC 0000000F           2296                 CMP.L   #$F,D7              
00002C42  6F00 0042               2297                 BLE     LONG_ONE_LOOP
00002C46  BEBC 000000FF           2298                 CMP.L   #$FF,D7              
00002C4C  6F00 0044               2299                 BLE     LONG_TWO_LOOP
00002C50  BEBC 00000FFF           2300                 CMP.L   #$FFF,D7              
00002C56  6F00 0046               2301                 BLE     LONG_THREE_LOOP
00002C5A  BEBC 0000FFFF           2302                 CMP.L   #$FFFF,D7              
00002C60  6F00 0048               2303                 BLE     LONG_FOUR_LOOP
00002C64  BEBC 000FFFFF           2304                 CMP.L   #$FFFFF,D7              
00002C6A  6F00 004A               2305                 BLE     LONG_FIVE_LOOP
00002C6E  BEBC 00FFFFFF           2306                 CMP.L   #$FFFFFF,D7              
00002C74  6F00 004C               2307                 BLE     LONG_SIX_LOOP
00002C78  BEBC 0FFFFFFF           2308                 CMP.L   #$FFFFFFF,D7              
00002C7E  6F00 004E               2309                 BLE     LONG_SEVEN_LOOP                  
00002C82  6000 0056               2310                 BRA     READ_LONG
00002C86                          2311  
00002C86                          2312  LONG_ONE_LOOP
00002C86  13FC 0001 00002F26      2313                  MOVE.B  #1,NUMBER_OF_HEX  
00002C8E  6000 004A               2314                  BRA     READ_LONG
00002C92                          2315                  
00002C92                          2316  LONG_TWO_LOOP
00002C92  13FC 0002 00002F26      2317                  MOVE.B  #2,NUMBER_OF_HEX  
00002C9A  6000 003E               2318                  BRA     READ_LONG
00002C9E                          2319                  
00002C9E                          2320  LONG_THREE_LOOP
00002C9E  13FC 0003 00002F26      2321                  MOVE.B  #3,NUMBER_OF_HEX  
00002CA6  6000 0032               2322                  BRA     READ_LONG                
00002CAA                          2323  LONG_FOUR_LOOP
00002CAA  13FC 0004 00002F26      2324                  MOVE.B  #4,NUMBER_OF_HEX  
00002CB2  6000 0026               2325                  BRA     READ_LONG
00002CB6                          2326                  
00002CB6                          2327  LONG_FIVE_LOOP
00002CB6  13FC 0005 00002F26      2328                  MOVE.B  #5,NUMBER_OF_HEX  
00002CBE  6000 001A               2329                  BRA     READ_LONG
00002CC2                          2330                  
00002CC2                          2331  LONG_SIX_LOOP
00002CC2  13FC 0006 00002F26      2332                  MOVE.B  #6,NUMBER_OF_HEX  
00002CCA  6000 000E               2333                  BRA     READ_LONG
00002CCE                          2334  LONG_SEVEN_LOOP
00002CCE  13FC 0007 00002F26      2335                  MOVE.B  #7,NUMBER_OF_HEX  
00002CD6  6000 0002               2336                  BRA     READ_LONG
00002CDA                          2337  
00002CDA                          2338       
00002CDA                          2339  READ_LONG                           
00002CDA  0C39 0000 00002F26      2340      CMP.B   #0,NUMBER_OF_HEX               
00002CE2  6700 0014               2341      BEQ     COPYLONG
00002CE6  123C 0030               2342      MOVE.B  #$30,D1             
00002CEA  103C 0006               2343      MOVE.B  #6,D0               
00002CEE  4E4F                    2344      TRAP    #15
00002CF0                          2345  
00002CF0  5339 00002F26           2346      SUBI.B  #1,NUMBER_OF_HEX               
00002CF6  60E2                    2347      BRA     READ_LONG                   ; LOOP
00002CF8                          2348  
00002CF8                          2349  COPYLONG
00002CF8  2207                    2350      MOVE.L  D7,D1               ; COPY DATA 
00002CFA  143C 0010               2351      MOVE.B  #16,D2              ; USIGN BASE TO 16
00002CFE  103C 000F               2352      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002D02  4E4F                    2353      TRAP    #15
00002D04  13FC 0000 00002F26      2354      MOVE.B  #0,NUMBER_OF_HEX
00002D0C  6000 0002               2355      BRA  EA_FINISH
00002D10                          2356  
00002D10                          2357    
00002D10                          2358  
00002D10                          2359  
00002D10                          2360  
00002D10                          2361  
00002D10                          2362  
00002D10                          2363  
00002D10                          2364  
00002D10  4E75                    2365  EA_FINISH      RTS
00002D12                          2366  
00002D12                          2367  
00002D12                          2368  
00002D12                          2369  
00002D12                          2370  ************************************************
00002D12                          2371  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
00002D12                          2372  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
00002D12                          2373  ************************************************
00002D12                          2374  REGISTER_NUMBER_TO_DECIMAL 
00002D12  B67C 0000               2375                             CMP.W       #REG_0,D3
00002D16  6700 0046               2376                             BEQ         RG0
00002D1A  B67C 0001               2377                             CMP.W       #REG_1,D3
00002D1E  6700 0046               2378                             BEQ         RG1
00002D22  B67C 0002               2379                             CMP.W       #REG_2,D3
00002D26  6700 0046               2380                             BEQ         RG2
00002D2A  B67C 0003               2381                             CMP.W       #REG_3,D3
00002D2E  6700 0046               2382                             BEQ         RG3
00002D32  B67C 0004               2383                             CMP.W       #REG_4,D3
00002D36  6700 0046               2384                             BEQ         RG4
00002D3A  B67C 0005               2385                             CMP.W       #REG_5,D3
00002D3E  6700 0046               2386                             BEQ         RG5
00002D42  B67C 0006               2387                             CMP.W       #REG_6,D3
00002D46  6700 0046               2388                             BEQ         RG6
00002D4A  B67C 0007               2389                             CMP.W       #REG_7,D3
00002D4E  6700 0046               2390                             BEQ         RG7
00002D52  13FC 0001 00002F0A      2391                             MOVE.B      #BAD_FLAG,STATE
00002D5A  4EF8 297E               2392                             JMP         CONTINUE_EA
00002D5E                          2393   
00002D5E  1A3C 0000               2394  RG0    MOVE.B   #0,D5
00002D62  4EF8 297E               2395         JMP      Continue_EA
00002D66  1A3C 0001               2396  RG1    MOVE.B   #1,D5
00002D6A  4EF8 297E               2397         JMP      Continue_EA
00002D6E  1A3C 0002               2398  RG2    MOVE.B   #2,D5
00002D72  4EF8 297E               2399         JMP      Continue_EA
00002D76  1A3C 0003               2400  RG3    MOVE.B   #3,D5
00002D7A  4EF8 297E               2401         JMP      Continue_EA
00002D7E  1A3C 0004               2402  RG4    MOVE.B   #4,D5
00002D82  4EF8 297E               2403         JMP      Continue_EA
00002D86  1A3C 0005               2404  RG5    MOVE.B   #5,D5
00002D8A  4EF8 297E               2405         JMP      Continue_EA
00002D8E  1A3C 0006               2406  RG6    MOVE.B   #6,D5
00002D92  4EF8 297E               2407         JMP      Continue_EA
00002D96  1A3C 0007               2408  RG7    MOVE.B   #7,D5
00002D9A  4EF8 297E               2409         JMP      Continue_EA 
00002D9E                          2410      
00002D9E                          2411  ;------------------------------------------------
00002D9E                          2412      
00002D9E                          2413  Float   DS.L 1 #0
00002DA2                          2414  
00002DA2                          2415  ValOne    DS.B 1 #0
00002DA3                          2416  ValTwo    DS.B 1 #0
00002DA4                          2417  ValThree    DS.B 1 #0
00002DA5                          2418  ValFour    DS.B 1 #0
00002DA6                          2419  ValFive    DS.B 1 #0
00002DA7                          2420  ValSix    DS.B 1 #0
00002DA8                          2421  ValSeven    DS.B 1 #0
00002DA9                          2422  ValEight    DS.B 1 #0
00002DAA                          2423  
00002DAA                          2424  Addsum DS.W 1 #0
00002DAC                          2425  CarryBit DS.B 1 #0   
00002DAD                          2426  
00002DAD                          2427  Trailers DS.B 1 #0
00002DAE                          2428  Source DS.L 1 #0
00002DB2                          2429  Destination DS.L 1 #0
00002DB6                          2430  
00002DB6                          2431          ;generic command lines
00002DB6= 50 6C 65 61 73 65 ...   2432  USERPAGEBREAK DC.B 'Please Press enter',CR,LF,0
00002DCB= 4E 75 6D 62 65 72 ...   2433  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
00002DF7= 50 6C 65 61 73 65 ...   2434  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory adress: ',0 
00002E1D= 50 6C 65 61 73 65 ...   2435  MESSAGESECONDADRESS DC.B    'Please enter ending memory adress: ',0 
00002E41= 45 4E 44 20 4F 46 ...   2436  FINALMESSAGE    DC.B    'END OF THE PROGRAM',0
00002E54= 20 0D 0A 00             2437  CLEAR DC.B      ' ',CR,LF,0
00002E58                          2438  
00002E58                          2439          ;the collection of actual command lines to print
00002E58                          2440  CommandPrinter    DS.B 1 #0
00002E59                          2441  CommandDetail    DS.B 1 #0
00002E5A= 4D 4F 56 45 00          2442  PMOVE DC.B      'MOVE',0
00002E5F= 4D 4F 56 45 4D 20 00    2443  PMOVEM DC.B      'MOVEM ',0
00002E66= 4D 4F 56 45 41 00       2444  PMOVEA DC.B      'MOVEA',0
00002E6C= 4D 4F 56 45 51 20 00    2445  PMOVEQ DC.B      'MOVEQ ',0
00002E73= 4E 4F 50 00             2446  PNOP DC.B      'NOP',0
00002E77= 4C 45 41 00             2447  PLEA DC.B      'LEA',0
00002E7B= 4E 4F 54 00             2448  PNOT DC.B      'NOT',0
00002E7F= 4A 53 52 00             2449  PJSR DC.B      'JSR',0
00002E83= 52 54 53 00             2450  PRTS DC.B      'RTS',0
00002E87= 42 47 54 00             2451  PBGT DC.B      'BGT',0
00002E8B= 42 45 51 00             2452  PBEQ DC.B      'BEQ',0
00002E8F= 42 4C 45 00             2453  PBLE DC.B      'BLE',0
00002E93= 42 52 41 00             2454  PBRA DC.B      'BRA',0
00002E97= 4F 52 00                2455  POR DC.B      'OR',0
00002E9A= 53 55 42 00             2456  PSUB DC.B      'SUB',0
00002E9E= 41 4E 44 00             2457  PAND DC.B      'AND',0
00002EA2= 41 44 44 00             2458  PADD DC.B      'ADD',0
00002EA6= 41 44 44 41 00          2459  PADDA DC.B      'ADDA',0
00002EAB= 41 44 44 51 00          2460  PADDQ DC.B      'ADDQ',0
00002EB0= 4C 53 4C 00             2461  PLSL DC.B      'LSL',0
00002EB4= 4C 53 52 00             2462  PLSR DC.B      'LSR',0
00002EB8= 41 53 52 00             2463  PASR DC.B      'ASR',0
00002EBC= 41 53 4C 00             2464  PASL DC.B      'ASL',0
00002EC0= 52 4F 4C 00             2465  PROL DC.B      'ROL',0
00002EC4= 52 4F 52 00             2466  PROR DC.B      'ROR',0
00002EC8                          2467  
00002EC8= 44 41 54 41 00          2468  PDATA   DC.B    'DATA',0
00002ECD                          2469  
00002ECD= 00                      2470  INPUT   DC.B    0
00002ECE                          2471  
00002ECE= 00000000                2472  STARTINGADDRESS     DC.L 0
00002ED2= 00000000                2473  CURRENTADDRESS      DC.L 0
00002ED6= 00000000                2474  ENDINGADDRESS       DC.L 0
00002EDA                          2475  CYCLECOUNTER
00002EDA= 0000                    2476  COMMANDDATA         DC.W 0
00002EDC= 00                      2477  Bits                DC.B 0
00002EDD                          2478  
00002EDD                          2479          ;the sizes to print
00002EDE                          2480  SizeValue           DS.L 1 #0
00002EE2= 2E 42 20 00             2481  PB DC.B      '.B ',0
00002EE6= 2E 57 20 00             2482  PW DC.B      '.W ',0
00002EEA= 2E 4C 20 00             2483  PL DC.B      '.L ',0
00002EEE                          2484  
00002EEE                          2485  ;----- ADDED FOR THE OP CODE PART
00002EEE                          2486  
00002EEE= 00                      2487  DEST_REG        DC.B    0
00002EEF= 00                      2488  DEST_MODE       DC.B    0
00002EF0                          2489  
00002EF0= 00                      2490  SRC_MODE        DC.B    0
00002EF1= 00                      2491  SRC_REG         DC.B    0
00002EF2                          2492  
00002EF2= 00                      2493  TEMP_MODE       DC.B    0
00002EF3= 00                      2494  TEMP_REG        DC.B    0
00002EF4                          2495  
00002EF4= 00000000                2496  DATA_FIELD      DC.L    0
00002EF8= 00                      2497  SIZE            DC.B    0
00002EF9= 00                      2498  SIZE_BITS        DC.B    0
00002EFA                          2499  
00002EFA= 23 00                   2500  HASH            DC.B    '#',0
00002EFC= 20 00                   2501  CLRSPOT         DC.B    ' ',0
00002EFE= 2D 00                   2502  NEG             DC.B    '-',0
00002F00= 24 00                   2503  DOLLARSIGN      DC.B    '$',0
00002F02= 2C 00                   2504  COMA            DC.B    ',',0
00002F04                          2505  
00002F04= 00                      2506  INDEX           DC.B    0
00002F05                          2507  
00002F05= 00                      2508  XBIT            DC.B    0
00002F06= 00                      2509  INVALID_EA      DC.B    0
00002F07                          2510  
00002F07= 00                      2511  DstMode         DC.B    0
00002F08= 00                      2512  TempMode        DC.B    0
00002F09= 00                      2513  SrcMode         DC.B    0
00002F0A                          2514  
00002F0A                          2515  ;------ ADDED FOR EA CODE PART
00002F0A                          2516  
00002F0A  =00000000               2517  REG_0  EQU         %000
00002F0A  =00000001               2518  REG_1  EQU         %001
00002F0A  =00000002               2519  REG_2  EQU         %010
00002F0A  =00000003               2520  REG_3  EQU         %011
00002F0A  =00000004               2521  REG_4  EQU         %100
00002F0A  =00000005               2522  REG_5  EQU         %101
00002F0A  =00000006               2523  REG_6  EQU         %110
00002F0A  =00000007               2524  REG_7  EQU         %111
00002F0A                          2525  
00002F0A  =00000000               2526  MODE000       EQU         %000                   * MODE Dn
00002F0A  =00000001               2527  MODE001       EQU         %001                   * MODE An
00002F0A  =00000002               2528  MODE010       EQU         %010                   * MODE (An)
00002F0A  =00000003               2529  MODE011       EQU         %011                   * MODE (An)+
00002F0A  =00000004               2530  MODE100       EQU         %100                   * MODE -(An)
00002F0A  =00000007               2531  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
00002F0A                          2532  
00002F0A= 00                      2533  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
00002F0B  =00000001               2534  BAD_FLAG      EQU         1
00002F0C= 00008000                2535  word          DC.L        $8000
00002F10                          2536  SIZE_IL       DS.L        1             ;SIZE ISOLATION
00002F14                          2537  DR            DS.L        1             ;DIRECTION ISOLATION
00002F18                          2538  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
00002F1C                          2539  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
00002F20                          2540  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
00002F24                          2541  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
00002F25                          2542  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
00002F26= 00                      2543  NUMBER_OF_HEX DC.B        0
00002F27                          2544  dRG           DS.B        1
00002F28                          2545  dMODE         DS.B        1
00002F29                          2546  sRG           DS.B        1
00002F2A                          2547  
00002F2A= 00000100                2548  print_buffer  DC.l       $100
00002F2E                          2549  
00002F2E                          2550  ***** ASCII VALUES FOR EA CHARACTERS**************
00002F2E  =00000044               2551  D                       EQU      $44
00002F2E  =00000041               2552  A                       EQU      $41
00002F2E  =00000028               2553  OPEN_PARENTHESIS        EQU      $28
00002F2E  =00000024               2554  DOLLAR_SIGN             EQU      $24
00002F2E  =00000029               2555  CLOSED_PARENTHESIS      EQU      $29
00002F2E  =0000002B               2556  PLUS_SIGN               EQU      $2B
00002F2E  =0000002D               2557  MINUS_SIGN              EQU      $2D
00002F2E  =00000023               2558  HASH_TAG                EQU      $23
00002F2E  =00000025               2559  PERCENT_SIGN            EQU      $25
00002F2E                          2560  
00002F2E                          2561  
00002F2E                          2562      
00002F2E                          2563      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2A96
ADDRESS_REGISTER    29D6
ADDRESS_REGISTER_DECREMENT  2A5C
ADDRESS_REGISTER_DIRECT  29F2
ADDRESS_REGISTER_INCREMENT  2A22
ADDSUM              2DAA
ADD_NEGATIVE        2B36
BADVAL              2DCB
BAD_FLAG            1
BITS                2EDC
BYTE_ONE_LOOP       2B7A
CARRYBIT            2DAC
CCHECK_ADD          174A
CCHECK_ADDA         1770
CHAR1               1154
CHAR2               116C
CHARSUB             1184
CHECK_ADD           1730
CHECK_ADDA          174E
CHECK_ADDQ          160A
CHECK_DATA_NEG      2896
CHECK_DESTINATION   26BA
CHECK_DEST_REG      26F2
CHECK_ID_AS         1C4A
CHECK_ID_LS         1C6A
CHECK_ID_RO         1C5A
CHECK_JSR           1584
CHECK_LEA           1392
CHECK_MOVEM_1000    14A8
CHECK_MOVEM_1100    155C
CHECK_MOVEQ         17CC
CHECK_NOP_JSR_RTS   1564
CHECK_NOP_RTS       15EA
CHECK_NOT           141E
CHECK_SOURCE        27BA
CHECK_SOURCE_REG    27F2
CHECK_TEMP          273A
CHECK_TEMP_REG      2772
CHECK_XBIT          283A
CLEAR               2E54
CLEARMR             292A
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   2698
CLRSPOT             2EFC
COMA                2F02
COMMANDDATA         2EDA
COMMANDDETAIL       2E59
COMMANDPRINTER      2E58
COMPARE_0100        135A
COMPARE_1101        1694
COMPARE_1110        182A
COMPARE_GROUPS      1306
CONTINUE_A_I_A      2A9A
CONTINUE_EA         297E
COPYBYTE            2BA4
COPYLONG            2CF8
COPYWORD            2C22
CR                  D
CURRENTADDRESS      2ED2
CYCLECOUNTER        2EDA
D                   44
DATA_FIELD          2EF4
DATA_REGISTER       29BA
DESTINATION         2DB2
DEST_MODE           2EEF
DEST_REG            2EEE
DMODE               2F28
DOLLARSIGN          2F00
DOLLAR_SIGN         24
DONE                11AE
DR                  2F14
DRG                 2F27
DRN                 2F25
DSTMODE             2F07
EADN                2634
EA_FINISH           2D10
EA_START            296C
EIGHT_SHIFT         2382
ENDING              26AA
ENDINGADDRESS       2ED6
ENTRYLOOP           119C
EXIT                11FC
FINALMESSAGE        2E41
FLOAT               2D9E
FORMAT_DATA         2882
G14_MEMS            1AF2
G14_MEMS_AS         1BE4
G14_MEMS_LS         1B18
G14_MEMS_RO         1B7E
G14_TYPE            2F18
GAS_EA              1A9C
GETBYTE             2B18
GETLONG             2B2C
GETWORD             2B22
GLS_EA              1904
GRO_EA              19D0
G_AS                1A26
G_LS                188E
G_RO                195A
HASH                2EFA
HASH_TAG            23
IMMIDIATE_REGISTER  2ABE
INDEX               2F04
INPUT               2ECD
INT2                1134
INTSUB              114C
INVALID             118C
INVALID_EA          2F06
IR_IL               2F1C
IS_EIGHT            2390
LF                  A
LOADDATAONE         1006
LOADDATATWO         1058
LONG_ADDRESSING     2B04
LONG_FIVE_LOOP      2CB6
LONG_FOUR_LOOP      2CAA
LONG_ONE_LOOP       2C86
LONG_SEVEN_LOOP     2CCE
LONG_SIX_LOOP       2CC2
LONG_THREE_LOOP     2C9E
LONG_TWO_LOOP       2C92
LOOP_READ_BITS      12E8
MEMORYGRABBER       127A
MESSAGEFIRSTADRESS  2DF7
MESSAGESECONDADRESS  2E1D
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
NEG                 2EFE
NUMBER_OF_HEX       2F26
OPEN_PARENTHESIS    28
PADD                2EA2
PADDA               2EA6
PADDQ               2EAB
PAGEBREAK           12C6
PAND                2E9E
PASL                2EBC
PASR                2EB8
PB                  2EE2
PBEQ                2E8B
PBGT                2E87
PBLE                2E8F
PBRA                2E93
PDATA               2EC8
PERCENT_SIGN        25
PJSR                2E7F
PL                  2EEA
PLEA                2E77
PLSL                2EB0
PLSR                2EB4
PLUS_SIGN           2B
PMOVE               2E5A
PMOVEA              2E66
PMOVEM              2E5F
PMOVEQ              2E6C
PNOP                2E73
PNOT                2E7B
POR                 2E97
PRINTADD            253E
PRINTADDA           2554
PRINTADDQ           243E
PRINTAND            2528
PRINTB              2618
PRINTBEQ            246A
PRINTBGT            2454
PRINTBLE            2480
PRINTBRA            2496
PRINTJSR            2418
PRINTL              25FC
PRINTLEA            23EC
PRINTMOVE           239A
PRINTMOVEA          23B0
PRINTMOVEM          23D6
PRINTMOVEQ          24AC
PRINTNONE           2626
PRINTNOP            23C6
PRINTNOT            2402
PRINTNOTRAIL        2682
PRINTONETRAIL       2650
PRINTOR             24FC
PRINTROTATESPLIT    256A
PRINTRTS            242E
PRINTSUB            2512
PRINTTWOTRAIL       2666
PRINTW              260A
PRINT_BRANCHING     2B44
PRINT_BUFFER        2F2A
PRINT_BYTE          2B6A
PRINT_DATA          28AE
PRINT_LONG          2C3A
PRINT_NEG           28A0
PRINT_WORD          2BBC
PROL                2EC0
PROR                2EC4
PRTS                2E83
PR_AS               2150
PR_ASR              22B6
PR_ASR_EA           1EB2
PR_ASR_MEM          1CD0
PR_G14_MEMS_AS      1C7A
PR_G14_MEMS_LS      1D0E
PR_G14_MEMS_RO      1DA2
PR_G_AS_EA          1E36
PR_G_LS_EA          1F14
PR_G_RO_EA          1FF2
PR_LS               21D0
PR_LSR              2250
PR_LSR_EA           1F90
PR_LSR_MEM          1D64
PR_RO               20D0
PR_ROR              231C
PR_ROR_EA           206E
PR_ROR_MEM          1DF8
PSUB                2E9A
PW                  2EE6
READ_BITS           12DE
READ_BYTE           2B86
READ_LONG           2CDA
READ_WORD           2C04
REGISTER_NUMBER_TO_DECIMAL  2D12
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2880
RG0                 2D5E
RG1                 2D66
RG2                 2D6E
RG3                 2D76
RG4                 2D7E
RG5                 2D86
RG6                 2D8E
RG7                 2D96
R_CHECK_DEST        2730
R_CHECK_SOURCE      2830
R_CHECK_TEMP        27B0
SET                 12FE
SETSIZE1            28C8
SETSIZE2            28E2
SETSIZEB            2906
SETSIZEL            291E
SETSIZEW            2912
SIZE                2EF8
SIZESPLIT           25CE
SIZEVALUE           2EDE
SIZE_BITS           2EF9
SIZE_IL             2F10
SOURCE              2DAE
SRCMODE             2F09
SRC_MODE            2EF0
SRC_REG             2EF1
SRG                 2F29
SRN                 2F24
START               1000
STARTCHECK          111C
STARTINGADDRESS     2ECE
STATE               2F0A
STOP                26A4
STOREADRESSES       125A
S_COUNT             2F20
TEMPMODE            2F08
TEMP_MODE           2EF2
TEMP_REG            2EF3
TEMP_TO_DEST        284C
TEMP_TO_SRC         2866
TRAILERS            2DAD
USERPAGEBREAK       2DB6
VAL1                10A2
VAL2                10AC
VAL3                10BC
VAL4                10CC
VAL5                10DC
VAL6                10EC
VAL7                10FC
VAL8                110C
VALEIGHT            2DA9
VALFIVE             2DA6
VALFOUR             2DA5
VALONE              2DA2
VALSEVEN            2DA8
VALSIX              2DA7
VALTHREE            2DA4
VALTWO              2DA3
WORD                2F0C
WORD_ADDRESSING     2AF0
WORD_ONE_LOOP       2BE0
WORD_THREE_LOOP     2BF8
WORD_TWO_LOOP       2BEC
XBIT                2F05
