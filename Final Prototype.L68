00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/10/2021 1:04:48 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 00003427             13      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001006  103C 000E                 14      MOVE.B   #14,D0     ; moves #14 into data register D0
0000100A  4E4F                      15      TRAP     #15
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 000031C8             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22  * TODO: a welcome message with format message 
0000101E                            23      
0000101E                            24  LOADDATAONE
0000101E  43F9 00003276             25      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001024  103C 000E                 26      MOVE.B   #14,D0     ; moves #14 into data register D0
00001028  4E4F                      27      TRAP     #15       ; Displays message via trap 14    
0000102A                            28      
0000102A  43F9 000033F8             29      LEA     INPUT,A1
00001030  103C 0002                 30      MOVE.B  #2,D0 *takes the string of what the user enters
00001034  4E4F                      31      TRAP    #15
00001036                            32      
00001036  4280                      33      CLR.L   D0
00001038                            34      
00001038                            35      * TODO: check if the input if odd - invalid imput
00001038                            36      
00001038                            37  
00001038                            38      
00001038  1A3C 0000                 39      MOVE.B  #0,D5
0000103C                            40      
0000103C  13D9 0000A000             41      MOVE.B (A1)+,$A000
00001042  13D9 0000A010             42      MOVE.B (A1)+,$A010
00001048  13D9 0000A020             43      MOVE.B (A1)+,$A020
0000104E  13D9 0000A030             44      MOVE.B (A1)+,$A030
00001054  13D9 0000A040             45      MOVE.B (A1)+,$A040
0000105A  13D9 0000A050             46      MOVE.B (A1)+,$A050
00001060  13D9 0000A060             47      MOVE.B (A1)+,$A060
00001066  13D9 0000A070             48      MOVE.B (A1)+,$A070
0000106C                            49      
0000106C  6000 0058                 50      BRA VAL1
00001070                            51  
00001070                            52  LOADDATATWO    
00001070  43F9 000032B9             53      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001076  103C 000E                 54      MOVE.B   #14,D0     ; moves #14 into data register D0
0000107A  4E4F                      55      TRAP     #15       ; Displays message via trap 14    
0000107C                            56      
0000107C  43F9 000033F8             57      LEA     INPUT,A1
00001082  103C 0002                 58      MOVE.B  #2,D0 *takes the string of what the user enters
00001086  4E4F                      59      TRAP    #15
00001088                            60      
00001088  1A3C 0000                 61      MOVE.B  #0,D5
0000108C                            62      
0000108C  13D9 0000A000             63      MOVE.B (A1)+,$A000
00001092  13D9 0000A010             64      MOVE.B (A1)+,$A010
00001098  13D9 0000A020             65      MOVE.B (A1)+,$A020
0000109E  13D9 0000A030             66      MOVE.B (A1)+,$A030
000010A4  13D9 0000A040             67      MOVE.B (A1)+,$A040
000010AA  13D9 0000A050             68      MOVE.B (A1)+,$A050
000010B0  13D9 0000A060             69      MOVE.B (A1)+,$A060
000010B6  13D9 0000A070             70      MOVE.B (A1)+,$A070
000010BC                            71      
000010BC  43F9 000032B9             72      LEA MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010C2                            73      
000010C2  6000 0002                 74      BRA VAL1
000010C6                            75  
000010C6                            76      
000010C6                            77  VAL1    
000010C6  1839 0000A000             78      MOVE.B $A000,D4
000010CC  6000 0072                 79      BRA STARTCHECK
000010D0  13C4 0000A000             80  VAL2    MOVE.B D4,$A000
000010D6  1839 0000A010             81      MOVE.B $A010,D4
000010DC  6000 0062                 82      BRA STARTCHECK
000010E0  13C4 0000A010             83  VAL3    MOVE.B D4,$A010
000010E6  1839 0000A020             84      MOVE.B $A020,D4
000010EC  6000 0052                 85      BRA STARTCHECK
000010F0  13C4 0000A020             86  VAL4    MOVE.B D4,$A020
000010F6  1839 0000A030             87      MOVE.B $A030,D4
000010FC  6000 0042                 88      BRA STARTCHECK
00001100  13C4 0000A030             89  VAL5    MOVE.B D4,$A030
00001106  1839 0000A040             90      MOVE.B $A040,D4
0000110C  6000 0032                 91      BRA STARTCHECK
00001110  13C4 0000A040             92  VAL6    MOVE.B D4,$A040
00001116  1839 0000A050             93      MOVE.B $A050,D4
0000111C  6000 0022                 94      BRA STARTCHECK
00001120  13C4 0000A050             95  VAL7    MOVE.B D4,$A050
00001126  1839 0000A060             96      MOVE.B $A060,D4
0000112C  6000 0012                 97      BRA STARTCHECK
00001130  13C4 0000A060             98  VAL8    MOVE.B D4,$A060
00001136  1839 0000A070             99      MOVE.B $A070,D4
0000113C  6000 0002                100      BRA STARTCHECK
00001140                           101    
00001140                           102  STARTCHECK  
00001140  B83C 0030                103      CMP.B   #48,D4
00001144  6D00 006A                104      BLT INVALID
00001148  B83C 0030                105      CMP.B   #48,D4
0000114C  6700 0022                106      BEQ INTSUB
00001150  B83C 0030                107      CMP.B   #48,D4
00001154  6E00 0002                108      BGT INT2
00001158                           109      
00001158                           110  
00001158                           111  INT2 
00001158                           112      
00001158  B83C 0039                113      CMP.B   #57,D4
0000115C  6D00 0012                114      BLT INTSUB
00001160  B83C 0039                115      CMP.B   #57,D4
00001164  6700 000A                116      BEQ INTSUB
00001168  B83C 0039                117      CMP.B   #57,D4
0000116C  6E00 000A                118      BGT CHAR1
00001170                           119      
00001170                           120  INTSUB 
00001170  0404 0030                121      SUB.B #$30,D4
00001174  6000 005C                122      BRA     DONE
00001178                           123  
00001178                           124  CHAR1 
00001178                           125      
00001178  B83C 0041                126      CMP.B   #65,D4
0000117C  6D00 0032                127      BLT INVALID
00001180  B83C 0041                128      CMP.B   #65,D4
00001184  6700 0022                129      BEQ CHARSUB
00001188  B83C 0041                130      CMP.B   #65,D4
0000118C  6E00 0002                131      BGT CHAR2
00001190                           132      
00001190                           133  CHAR2 
00001190                           134      
00001190  B83C 0046                135      CMP.B   #70,D4
00001194  6D00 0012                136      BLT CHARSUB
00001198  B83C 0046                137      CMP.B   #70,D4
0000119C  6700 000A                138      BEQ CHARSUB
000011A0  B83C 0046                139      CMP.B   #70,D4
000011A4  6E00 000A                140      BGT INVALID
000011A8                           141      
000011A8                           142  CHARSUB 
000011A8  0404 0037                143      SUB.B #$37,D4
000011AC  6000 0024                144      BRA DONE
000011B0                           145      
000011B0                           146  INVALID 
000011B0  43F9 00003209            147      LEA BADVAL,A1
000011B6  103C 000E                148      MOVE.B   #14,D0     ; moves #14 into data register D0
000011BA  4E4F                     149      TRAP     #15       ; Displays message via trap 14
000011BC  6000 0002                150      BRA     ENTRYLOOP
000011C0                           151      
000011C0                           152  ENTRYLOOP
000011C0  B43C 0000                153      CMP.B #0,D2
000011C4  6700 FE58                154      BEQ LOADDATAONE
000011C8  B43C 0001                155      CMP.B #1,D2
000011CC  6700 FEA2                156      BEQ LOADDATATWO
000011D0  4E75                     157      RTS
000011D2                           158      
000011D2                           159  DONE    
000011D2  5205                     160          ADD.B #1,D5
000011D4  BA3C 0000                161          CMP.B #0,D5
000011D8  6700 FEEC                162          BEQ VAL1
000011DC  BA3C 0001                163          CMP.B #1,D5
000011E0  6700 FEEE                164          BEQ VAL2
000011E4  BA3C 0002                165          CMP.B #2,D5
000011E8  6700 FEF6                166          BEQ VAL3
000011EC  BA3C 0003                167          CMP.B #3,D5
000011F0  6700 FEFE                168          BEQ VAL4
000011F4  BA3C 0004                169          CMP.B #4,D5
000011F8  6700 FF06                170          BEQ VAL5
000011FC  BA3C 0005                171          CMP.B #5,D5
00001200  6700 FF0E                172          BEQ VAL6
00001204  BA3C 0006                173          CMP.B #6,D5
00001208  6700 FF16                174          BEQ VAL7
0000120C  BA3C 0007                175          CMP.B #7,D5
00001210  6700 FF1E                176          BEQ VAL8
00001214  BA3C 0008                177          CMP.B #8,D5
00001218  6700 0006                178          BEQ EXIT
0000121C                           179          
0000121C  6000 FF22                180          BRA     STARTCHECK
00001220                           181  
00001220                           182  
00001220                           183  
00001220  13C4 0000A070            184  EXIT    MOVE.B D4,$A070
00001226                           185      
00001226  4284                     186      CLR.L D4
00001228  D839 0000A000            187      ADD.B $A000,D4
0000122E  E98C                     188      LSL.L #4,D4
00001230  D839 0000A010            189      ADD.B $A010,D4
00001236  E98C                     190      LSL.L #4,D4
00001238  D839 0000A020            191      ADD.B $A020,D4
0000123E  E98C                     192      LSL.L #4,D4
00001240  D839 0000A030            193      ADD.B $A030,D4
00001246  E98C                     194      LSL.L #4,D4
00001248  D839 0000A040            195      ADD.B $A040,D4
0000124E  E98C                     196      LSL.L #4,D4
00001250  D839 0000A050            197      ADD.B $A050,D4
00001256  E98C                     198      LSL.L #4,D4
00001258  D839 0000A060            199      ADD.B $A060,D4
0000125E  E98C                     200      LSL.L #4,D4
00001260  D839 0000A070            201      ADD.B $A070,D4
00001266                           202      
00001266  2E04                     203      MOVE.L D4,D7
00001268  4244                     204      CLR D4
0000126A  B43C 0001                205      CMP.B #1,D2
0000126E  6700 0020                206      BEQ STOREADRESSES
00001272  2C07                     207      MOVE.L D7,D6
00001274  143C 0001                208      MOVE.B #1,D2
00001278  7A00                     209      MOVE.L #0,D5
0000127A  6000 FDF4                210      BRA LOADDATATWO
0000127E                           211      
0000127E                           212  ;---------------------------------------------------------
0000127E                           213  
0000127E                           214  LARGERISSUE
0000127E  43F9 00003235            215      LEA     OUTOFORDER,A1
00001284  103C 000E                216      MOVE.B  #14,D0     ; moves #14 into data register D0
00001288  4E4F                     217      TRAP    #15       ; Displays message via trap 14
0000128A  7400                     218      MOVE.L  #0,D2
0000128C  6000 FD90                219      BRA     LOADDATAONE
00001290                           220  
00001290                           221  STOREADRESSES
00001290  23C7 00003402            222      MOVE.L  D7,ENDINGADDRESS
00001296  23C6 000033FA            223      MOVE.L  D6,STARTINGADDRESS
0000129C                           224  LARGERTHAN    
0000129C  BE86                     225      CMP.L D6,D7
0000129E  6DDE                     226      BLT LARGERISSUE
000012A0  4247                     227      CLR     D7
000012A2  2C79 000033FA            228      MOVE.L   STARTINGADDRESS,A6
000012A8                           229      
000012A8                           230  MEMORYGRABBER
000012A8  43F9 00003376            231      LEA     CLEAR,A1 
000012AE  103C 000E                232      MOVE.B  #14,D0  
000012B2  4E4F                     233      TRAP    #15 
000012B4                           234  
000012B4  2879 00003402            235      MOVE.L  ENDINGADDRESS,A4
000012BA  BDCC                     236      CMPA.L  A4,A6
000012BC  6C00 0066                237      BGE     ENDING 
000012C0                           238      
000012C0  0C79 0019 00003406       239      CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
000012C8  6C00 0038                240      BGE     PAGEBREAK
000012CC  5279 00003406            241      ADD.W   #1,CYCLECOUNTER
000012D2                           242  
000012D2  4EB9 00002D5A            243      JSR CLEARMR     * CLEAR MODES AND REGISTERS
000012D8                           244      
000012D8  23CE 000033FE            245      MOVE.L      A6,CURRENTADDRESS   
000012DE  2239 000033FE            246      MOVE.L      CURRENTADDRESS,D1
000012E4  143C 0010                247      MOVE.B      #16,D2
000012E8  103C 000F                248      MOVE.B      #15,D0     ; moves #14 into data register D0
000012EC  4E4F                     249      TRAP        #15  
000012EE                           250      
000012EE  4EB9 00002A22            251      JSR     PRINTCLRSPOT      * print space
000012F4                           252      
000012F4  361E                     253      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012F6  33C3 00003408            254      MOVE.W      D3, COMMANDDATA
000012FC                           255   
000012FC  6000 00B4                256      BRA         COMPARE_GROUPS
00001300                           257      
00001300  60A6                     258      BRA MEMORYGRABBER
00001302                           259      
00001302                           260  PAGEBREAK
00001302  43F9 000031E1            261      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
00001308  103C 000E                262      MOVE.B   #14,D0     ; moves #14 into data register D0
0000130C  4E4F                     263      TRAP     #15       ; Displays message via trap 14
0000130E  43F9 000033F8            264      LEA     INPUT,A1
00001314  103C 0002                265      MOVE.B  #2,D0 *takes the string of what the user enters
00001318  4E4F                     266      TRAP    #15
0000131A  33FC 0000 00003406       267      MOVE.W #0,CYCLECOUNTER
00001322  6084                     268      BRA MEMORYGRABBER
00001324                           269   
00001324                           270  ENDING 
00001324  33FC 0000 00003406       271      MOVE.W  #0,CYCLECOUNTER
0000132C  43F9 000032FA            272      LEA     FINALMESSAGE1,A1     * Prints End of Program message
00001332  103C 000E                273      MOVE.B  #14,D0
00001336  4E4F                     274      TRAP    #15
00001338  43F9 00003324            275      LEA     FINALMESSAGE2,A1     * Prints End of Program message
0000133E  103C 000E                276      MOVE.B  #14,D0
00001342  4E4F                     277      TRAP    #15
00001344  43F9 000033F8            278      LEA     INPUT,A1
0000134A  103C 0005                279      MOVE.B  #5,D0 *takes the single charater the user enters
0000134E  4E4F                     280      TRAP    #15
00001350  B23C 0031                281      CMP.B #49,D1
00001354  6700 FCAA                282      BEQ START
00001358  B23C 0030                283      CMP.B #48,D1
0000135C  6700 0010                284      BEQ GOODBYE
00001360  43F9 00003209            285      LEA     BADVAL,A1     * Prints End of Program message
00001366  103C 000E                286      MOVE.B  #14,D0
0000136A  4E4F                     287      TRAP    #15
0000136C  60B6                     288      BRA ENDING
0000136E                           289  
0000136E                           290  GOODBYE
0000136E  43F9 00003427            291      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001374  103C 000E                292      MOVE.B   #14,D0     ; moves #14 into data register D0
00001378  4E4F                     293      TRAP     #15  
0000137A  43F9 0000334E            294      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
00001380  103C 000E                295      MOVE.B  #14,D0
00001384  4E4F                     296      TRAP    #15
00001386  FFFF FFFF                297      SIMHALT             ; halt simulator   
0000138A                           298      
0000138A                           299  ;-------------------------- OP CODE SECTION -------------------------------
0000138A                           300  
0000138A                           301  READ_BITS
0000138A  4287                     302      CLR.L   D7
0000138C  4284                     303      CLR.L   D4
0000138E  1E39 0000340A            304      MOVE.B  Bits,D7
00001394                           305      
00001394                           306  LOOP_READ_BITS    
00001394  BE3C 0000                307      CMP.B   #0,D7           * counter
00001398  6700 1998                308      BEQ     RETURN
0000139C                           309      
0000139C  E34C                     310      LSL.W   #1,D4           * make space for new bit
0000139E  E34B                     311      LSL.W   #1,D3          
000013A0                           312  
000013A0  6500 0008                313      BCS     SET             * if 1, then branch to SET
000013A4  5307                     314      SUBI.B  #1,D7          
000013A6  4EF8 1394                315      JMP     LOOP_READ_BITS
000013AA                           316  SET
000013AA  5244                     317      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013AC  5307                     318      SUBI.B  #1, D7
000013AE  4EF8 1394                319      JMP     LOOP_READ_BITS  
000013B2                           320      
000013B2                           321  
000013B2                           322  
000013B2                           323  COMPARE_GROUPS              * comapres the 4 bits of the instruction
000013B2  13FC 0004 0000340A       324      MOVE.B  #4,Bits         
000013BA  4EB8 138A                325      JSR     READ_BITS       * get the first 4 bits and store it in D4
000013BE                           326  
000013BE  B87C 0001                327      CMP.W   #%0001,D4      
000013C2  6700 005E                328      BEQ     CHECK_MOVE      * MOVE.B
000013C6                           329      
000013C6  B87C 0002                330      CMP.W   #%0010,D4       * GROUP 0010     
000013CA  6700 0056                331      BEQ     CHECK_MOVE
000013CE                           332      
000013CE  B87C 0003                333      CMP.W   #%0011,D4       * GROUP 0011     
000013D2  6700 004E                334      BEQ     CHECK_MOVE
000013D6                           335      
000013D6  B87C 0004                336      CMP.W   #%0100,D4      
000013DA  6700 0296                337      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
000013DE                           338      
000013DE  B87C 0005                339      CMP.W   #%0101,D4      
000013E2  6700 051E                340      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
000013E6                           341      
000013E6  B87C 0006                342      CMP.W   #%0110,D4      
000013EA  6700 05B2                343      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
000013EE                           344      
000013EE  B87C 0007                345      CMP.W   #%0111,D4      
000013F2  6700 06C8                346      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
000013F6                           347      
000013F6  B87C 0008                348      CMP.W   #%1000,D4      
000013FA  6700 071E                349      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
000013FE                           350      
000013FE  B87C 0009                351      CMP.W   #%1001,D4      
00001402  6700 07A4                352      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
00001406                           353      
00001406  B87C 000C                354      CMP.W   #%1100,D4      
0000140A  6700 081E                355      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
0000140E                           356      
0000140E  B87C 000D                357      CMP.W   #%1101,D4      
00001412  6700 05BA                358      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
00001416                           359      
00001416  B87C 000E                360      CMP.W   #%1110,D4      
0000141A  6700 089C                361      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
0000141E                           362      
0000141E  6600 1670                363      BNE     PRINT_DATA      * all other instructions are not supported 
00001422                           364  
00001422                           365  
00001422                           366  *************************************MOVE MOVEA*************************
00001422                           367  
00001422                           368  CHECK_MOVE
00001422                           369  
00001422  33F9 00003408 00003462   370      MOVE.W COMMANDDATA, myWord  * grab 16 bit instruction from main           
0000142C                           371  
0000142C                           372      * grab ID (first 4 bits), use D3, D4 as temp
0000142C  3639 00003462            373      MOVE.W  myWord, D3                  
00001432  183C 000C                374      MOVE.B  #12,D4
00001436  E86B                     375      LSR.W   D4,D3                       
00001438  13C3 00003464            376      MOVE.B  D3, ID
0000143E                           377  
0000143E                           378      * grab DestReg (next 3 bits)
0000143E  3639 00003462            379      MOVE.W  myWord, D3
00001444  183C 0004                380      MOVE.B  #4, D4
00001448  E96B                     381      LSL.W   D4, D3                     
0000144A  183C 000D                382      MOVE.B  #13,D4
0000144E  E86B                     383      LSR.W   D4,D3                       
00001450  13C3 00003465            384      MOVE.B  D3, DstReg
00001456                           385  
00001456                           386      * grab DestMod (next 3 bits)
00001456  3639 00003462            387      MOVE.W  myWord, D3                  
0000145C  183C 0007                388      MOVE.B  #7, D4
00001460  E96B                     389      LSL.W   D4, D3                      
00001462  183C 000D                390      MOVE.B  #13,D4
00001466  E86B                     391      LSR.W   D4,D3                       
00001468  13C3 00003466            392      MOVE.B  D3, DstMod
0000146E                           393  
0000146E                           394      * grab SrcReg (next 3 bits)
0000146E  3639 00003462            395      MOVE.W  myWord, D3                  
00001474  183C 000A                396      MOVE.B  #10, D4
00001478  E96B                     397      LSL.W   D4, D3                      
0000147A  183C 000D                398      MOVE.B  #13,D4
0000147E  E86B                     399      LSR.W   D4,D3                       
00001480  13C3 00003468            400      MOVE.B  D3, SrcMod
00001486                           401  
00001486                           402      * grab SrcMod (next 3 bits)
00001486  3639 00003462            403      MOVE.W  myWord, D3                  
0000148C  183C 000D                404      MOVE.B  #13, D4
00001490  E96B                     405      LSL.W   D4, D3                      
00001492  183C 000D                406      MOVE.B  #13,D4
00001496  E86B                     407      LSR.W   D4,D3                       
00001498  13C3 00003467            408      MOVE.B  D3, SrcReg
0000149E                           409  
0000149E                           410  
0000149E                           411      * check if MOVE or MOVEA using DestMod
0000149E  0C39 0001 00003466       412      CMP.B   #1, DstMod                  * DestMod == 1: MOVEA
000014A6  6700 0012                413      BEQ     DS_MOVEA                  
000014AA  6000 0002                414      BRA     DS_MOVE                     * Else: MOVE
000014AE                           415  
000014AE                           416  DS_MOVE        
000014AE  13FC 0000 00003460       417      MOVE.B  #0,OpName                   * OpName = 0 for MOVE
000014B6  6000 001A                418      BRA     CMP_SIZE
000014BA                           419  
000014BA                           420  DS_MOVEA        
000014BA  0C39 0001 00003464       421      CMP.B   #1, ID
000014C2  6700 0182                422      BEQ     ERROR                       * MOVEA cannot have ID = 1
000014C6  13FC 0001 00003460       423      MOVE.B  #01,OpName                  * OpName = 1 for MOVEA
000014CE  6000 0002                424      BRA     CMP_SIZE
000014D2                           425  
000014D2                           426  CMP_SIZE   
000014D2  0C39 0001 00003464       427      CMP.B   #1, ID                    
000014DA  6700 001A                428      BEQ     SIZE_B
000014DE  0C39 0003 00003464       429      CMP.B   #3, ID                    
000014E6  6700 001C                430      BEQ     SIZE_W
000014EA  0C39 0002 00003464       431      CMP.B   #2, ID                   
000014F2  6700 001E                432      BEQ     SIZE_L
000014F6                           433  
000014F6                           434  
000014F6                           435  SIZE_B        
000014F6  23FC 00000001 0000340C   436      MOVE.L  #1,SizeValue                 * Set size to 1=Byte
00001500  6000 001E                437      BRA     CHECK_SRCMOD
00001504                           438  
00001504                           439  SIZE_W         
00001504  23FC 00000002 0000340C   440      MOVE.L  #2,SizeValue                 * Set size to 2=Word
0000150E  6000 0010                441      BRA     CHECK_SRCMOD
00001512                           442  
00001512                           443  SIZE_L         
00001512  23FC 00000003 0000340C   444      MOVE.L  #3,SizeValue                 * Set size to 3=Long
0000151C  6000 0002                445      BRA     CHECK_SRCMOD
00001520                           446  
00001520                           447  CHECK_SRCMOD
00001520  0C39 0007 00003468       448      CMP.B   #7, SrcMod                * Check if source mode is 7
00001528  6700 0006                449      BEQ     CHECK_SRCREG              * Check source register
0000152C  6000 00C0                450      BRA     CHECK_DESTMOD             * Source not 7, now check destination Mod
00001530                           451  
00001530                           452  CHECK_SRCREG    
00001530  0C39 0000 00003467       453      CMP.B   #0, SrcReg                * Check is source register is 0
00001538  6700 0088                454      BEQ     DtaSrcWrd                 * Load next word
0000153C  0C39 0001 00003467       455      CMP.B   #1, SrcReg                * Check if source register is 1
00001544  6700 0092                456      BEQ     DtaSrcLng                 * Load next long
00001548  0C39 0004 00003467       457      CMP.B   #4, SrcReg                * Check if source register is 4 (immediate value)
00001550  6700 0006                458      BEQ     DtaSrcImd                 * Load first word into word one
00001554  6000 00F0                459      BRA     ERROR                     * Invalid register value
00001558                           460  
00001558                           461  DtaSrcImd    
00001558  0C39 0001 00003464       462      CMP.B   #1, ID                    * ID = 1 - size is byte
00001560  6700 001E                463      BEQ     DtaSrcImdB                * Load next byte
00001564  0C39 0002 00003464       464      CMP.B   #2, ID                    * ID = 2 - size is word
0000156C  6700 0028                465      BEQ     DtaSrcImdW                * Load next word
00001570  0C39 0003 00003464       466      CMP.B   #3, ID                    * ID = 3 - size is long
00001578  6700 0032                467      BEQ     DtaSrcImdL                * Load next long
0000157C  6000 00C8                468      BRA     ERROR                     * Invalid opID (this should never happen)  
00001580                           469  
00001580                           470  
00001580                           471  DtaSrcImdB   
00001580  4283                     472      CLR.L   D3
00001582  361A                     473      MOVE.W  (A2)+,D3
00001584  23C3 0000346A            474      MOVE.L  D3,opDta1
0000158A  13FC 0001 0000346E       475      MOVE.B  #1, opDta1T               * Set Data 1 type as 0=Byte
00001592  6000 005A                476      BRA     CHECK_DESTMOD             * Check destination mode
00001596                           477  
00001596                           478  DtaSrcImdW  
00001596  4283                     479      CLR.L   D3
00001598  361A                     480      MOVE.W  (A2)+,D3
0000159A  23C3 0000346A            481      MOVE.L  D3,opDta1
000015A0  13FC 0002 0000346E       482      MOVE.B  #2, opDta1T               * Set Data 1 type as 1=Word
000015A8  6000 0044                483      BRA     CHECK_DESTMOD             * Check destination mode
000015AC                           484  
000015AC                           485  DtaSrcImdL   
000015AC  4283                     486      CLR.L   D3
000015AE  261A                     487      MOVE.L  (A2)+,D3
000015B0  23C3 0000346A            488      MOVE.L  D3,opDta1
000015B6  13FC 0003 0000346E       489      MOVE.B  #3, opDta1T               * Set Data 1 type as 2=Long
000015BE  6000 002E                490      BRA     CHECK_DESTMOD             * Check destination mode
000015C2                           491  
000015C2                           492  DtaSrcWrd    
000015C2  4283                     493      CLR.L   D3
000015C4  361A                     494      MOVE.W  (A2)+,D3
000015C6  23C3 0000346A            495      MOVE.L  D3,opDta1
000015CC  13FC 0002 0000346E       496      MOVE.B  #2, opDta1T               * Set Data 1 type as 1=Word
000015D4  6000 0018                497      BRA     CHECK_DESTMOD             * Check destination mode
000015D8                           498  
000015D8                           499  DtaSrcLng                        
000015D8  4283                     500      CLR.L   D3
000015DA  261A                     501      MOVE.L  (A2)+,D3
000015DC  23C3 0000346A            502      MOVE.L  D3,opDta1
000015E2  13FC 0003 0000346E       503      MOVE.B  #3, opDta1T               * Set Data 1 type as 2=Long
000015EA  6000 0002                504      BRA     CHECK_DESTMOD             * Check destination mode
000015EE                           505  
000015EE                           506  CHECK_DESTMOD
000015EE  0C39 0007 00003466       507      CMP.B   #7, DstMod                * Check if destination mode is 7
000015F6  6700 0006                508      BEQ     CEHCK_DESTREG             * Check destination register
000015FA  6000 0056                509      BRA     myDONE                      * Destination not 7, done with data
000015FE                           510  
000015FE                           511  CEHCK_DESTREG    
000015FE  0C39 0000 00003465       512      CMP.B   #0, DstReg                * Check if destination register is 0
00001606  6700 0012                513      BEQ     DtaDstWrd                 * Load next word
0000160A  0C39 0001 00003465       514      CMP.B   #1, DstReg                * Check if destination register is 1
00001612  6700 001C                515      BEQ     DtaDstLng                 * Load next long
00001616  6000 002E                516      BRA     ERROR                     * Invalid registration Mode
0000161A                           517  
0000161A                           518  DtaDstWrd    
0000161A  4283                     519      CLR.L   D3
0000161C  361A                     520      MOVE.W  (A2)+,D3
0000161E  23C3 00003470            521      MOVE.L  D3,opDta2
00001624  13FC 0001 00003474       522      MOVE.B  #1, opDta2T               * Set Data2 type as 1=Word
0000162C  6000 0024                523      BRA     myDONE
00001630                           524  
00001630                           525  DtaDstLng    
00001630  4283                     526      CLR.L   D3
00001632  261A                     527      MOVE.L  (A2)+,D3
00001634  23C3 00003470            528      MOVE.L  D3,opDta2
0000163A  13FC 0002 00003474       529      MOVE.B  #2, opDta2T               * Set Data2 type as 2=Long
00001642  6000 000E                530      BRA     myDONE
00001646                           531  
00001646                           532  ERROR
00001646  13FC 0000 00003475       533      MOVE.B  #0, ERR                  * Error 1 = A-OK; 0 = Invalid EA
0000164E  6000 FC58                534      BRA      MEMORYGRABBER
00001652                           535  
00001652                           536  
00001652                           537  myDONE
00001652  13FC 0001 00003475       538       MOVE.B  #1, ERR                 * Clear error flag
0000165A  0C39 0000 00003460       539       CMP.B   #0, OpName              * 0 = OpName for MOVE
00001662  6700 0F6E                540       BEQ    PRINTMOVE
00001666  0C39 0001 00003460       541       CMP.B   #1, OpName              * 1 = OpName for MOVEA
0000166E  6700 0FB4                542       BEQ     PRINTMOVEA
00001672                           543       
00001672                           544  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
00001672                           545  
00001672                           546  COMPARE_0100
00001672  0803 000C                547      BTST.L  #$0C,D3             ; compare bit 8 for LEA
00001676  6600 0032                548      BNE     CHECK_LEA
0000167A                           549      
0000167A  13FC 0004 0000340A       550      MOVE.B  #4,Bits
00001682  4EB8 138A                551      JSR     READ_BITS
00001686                           552      
00001686  B87C 0006                553      CMP.W   #%0110,D4
0000168A  6700 00A2                554      BEQ     CHECK_NOT           ; goes to NOT
0000168E                           555      
0000168E  B87C 0008                556      CMP.W   #%1000,D4
00001692  6700 0112                557      BEQ     CHECK_MOVEM_1000    ; goes to MOVEM_1000
00001696                           558      
00001696  B87C 000C                559      CMP.W   #%1100,D4       
0000169A  6700 01BC                560      BEQ     CHECK_MOVEM_1100    ; goes to MOVEM_1100
0000169E                           561      
0000169E  B87C 000E                562      CMP.W   #%1110,D4
000016A2  6700 01BC                563      BEQ     CHECK_NOP_JSR_RTS   ; goes to compare for 1110 (NOP,JSR,RTS)
000016A6                           564      
000016A6  6600 13E8                565      BNE     PRINT_DATA
000016AA                           566  
000016AA                           567  CHECK_LEA
000016AA  13FC 0003 0000340A       568      MOVE.B  #3,Bits  
000016B2  4EB8 138A                569      JSR     READ_BITS 
000016B6  13C4 0000341C            570      MOVE.B  D4,DEST_REG  
000016BC                           571  
000016BC  13FC 0003 0000340A       572      MOVE.B  #3,Bits
000016C4  4EB8 138A                573      JSR     READ_BITS
000016C8  B83C 0007                574      CMP.B   #7,D4               ; if mode = 111 
000016CC  6600 13C2                575      BNE     PRINT_DATA
000016D0                           576  
000016D0  13FC 0003 0000340A       577      MOVE.B  #3,Bits
000016D8  4EB8 138A                578      JSR     READ_BITS 
000016DC  13C4 0000341E            579      MOVE.B  D4,SRC_MODE           
000016E2                           580  
000016E2  13FC 0003 0000340A       581      MOVE.B  #3,Bits 
000016EA  4EB8 138A                582      JSR     READ_BITS 
000016EE  13C4 0000341F            583      MOVE.B  D4,SRC_REG 
000016F4                           584              
000016F4  4EB9 00002C6C            585      JSR     CHECK_SOURCE
000016FA                           586      
000016FA  0C39 000F 0000343C       587      CMP.B   #$F,SrcMode         ; if SrcMode is invalid
00001702  6700 138C                588      BEQ     PRINT_DATA
00001706                           589      
00001706  0C39 0002 0000343C       590      CMP.B   #$2,SrcMode         ; if SrcMode is 010 = '(An)'
0000170E  6700 0F88                591      BEQ     PRINTLEA        
00001712                           592      
00001712  0C39 0007 0000343C       593      CMP.B   #$7,SrcMode         ; if SrcMode is 111 + 000 = (XXX).W
0000171A  6700 0F7C                594      BEQ     PRINTLEA    
0000171E                           595      
0000171E  0C39 0008 0000343C       596      CMP.B   #$8,SrcMode         ; if SrcMode is 111 + 001 = (XXX).L
00001726  6700 0F70                597      BEQ     PRINTLEA
0000172A                           598              
0000172A  6000 1626                599      BRA     SET_INVALID_EA      ; else, invalid EA
0000172E                           600      
0000172E                           601  CHECK_NOT 
0000172E  13FC 0002 0000340A       602      MOVE.B  #2,Bits             
00001736  4EB8 138A                603      JSR     READ_BITS             
0000173A  13C4 00003426            604      MOVE.B  D4,SIZE
00001740                           605      
00001740  B83C 0003                606      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
00001744  6700 134A                607      BEQ     PRINT_DATA          * Else, If 11 size invalid
00001748                           608      
00001748  13FC 0003 0000340A       609      MOVE.B  #3,Bits       
00001750  4EB8 138A                610      JSR     READ_BITS       
00001754  13C4 0000341D            611      MOVE.B  D4,DEST_MODE             
0000175A                           612  
0000175A  13FC 0003 0000340A       613      MOVE.B  #3,Bits       
00001762  4EB8 138A                614      JSR     READ_BITS
00001766  13C4 0000341C            615      MOVE.B  D4,DEST_REG             
0000176C                           616      
0000176C  4EB9 00002B6C            617      JSR     CHECK_DESTINATION       ; Check Destination Mode
00001772                           618  
00001772  0C39 000F 0000343A       619      CMP.B   #$F,DstMode         ; if DstMode is invalid
0000177A  6700 1314                620      BEQ     PRINT_DATA      
0000177E                           621  
0000177E  0C39 000E 0000343A       622      CMP.B   #$E,DstMode 
00001786  6700 15CA                623      BEQ     SET_INVALID_EA      ; flag for invalid EA
0000178A                           624  
0000178A  0C39 0001 0000343A       625      CMP.B   #$1,DstMode         ; If DstMode is 001 = 'An'
00001792  6700 15BE                626      BEQ     SET_INVALID_EA      ; flag for invalid EA
00001796                           627      
00001796  0C39 000B 0000343A       628      CMP.B   #$B,DstMode         ; if DstMode is 111 + 100 = #<data>
0000179E  6700 15B2                629      BEQ     SET_INVALID_EA      ; flag for invalid EA
000017A2                           630      
000017A2  6000 0F46                631      BRA     PRINTNOT
000017A6                           632  
000017A6                           633  CHECK_MOVEM_1000 
000017A6  13FC 0001 0000340A       634      MOVE.B  #1,Bits
000017AE  4EB8 138A                635      JSR     READ_BITS
000017B2  B83C 0001                636      CMP.B   #%1,D4
000017B6  6600 12D8                637      BNE     PRINT_DATA
000017BA                           638      
000017BA  13FC 0001 0000340A       639      MOVE.B  #1,Bits
000017C2  4EB8 138A                640      JSR     READ_BITS
000017C6  13C4 00003426            641      MOVE.B  D4,SIZE
000017CC                           642  
000017CC  13FC 0003 0000340A       643      MOVE.B  #3,Bits
000017D4  4EB8 138A                644      JSR     READ_BITS
000017D8  13C4 00003420            645      MOVE.B  D4,TEMP_MODE
000017DE                           646      
000017DE  13FC 0003 0000340A       647      MOVE.B  #3,Bits
000017E6  4EB8 138A                648      JSR     READ_BITS
000017EA  13C4 00003421            649      MOVE.B  D4,TEMP_REG
000017F0                           650      
000017F0  4EB9 00002BEC            651      JSR     CHECK_TEMP
000017F6  4EB9 00002CEC            652      JSR     CHECK_XBIT
000017FC                           653      
000017FC  0C39 000F 0000343B       654      CMP.B   #$F,TempMode        ; If TempMode is invalid
00001804  6700 128A                655      BEQ     PRINT_DATA
00001808                           656  
00001808  0C39 000E 0000343B       657      CMP.B   #$E,TempMode        ; If TempMode is invalid EA
00001810  6700 1540                658      BEQ     SET_INVALID_EA      ; flag for invalid EA
00001814                           659  
00001814  0C39 0002 0000343B       660      CMP.B   #$2,TempMode        ; If TempMode is 010 = '(An)'
0000181C  6700 0E68                661      BEQ     PRINTMOVEM              
00001820                           662  
00001820  0C39 0007 0000343B       663      CMP.B   #$7,TempMode        ; If TempMode is 111 + 000 = (XXX).W
00001828  6700 0E5C                664      BEQ     PRINTMOVEM   
0000182C                           665  
0000182C  0C39 0008 0000343B       666      CMP.B   #$8,TempMode        ; If TempMode is 111 + 001 = (XXX).L
00001834  6700 0E50                667      BEQ     PRINTMOVEM   
00001838                           668                 
00001838  0C39 0004 0000343A       669      CMP.B   #$4,DstMode         ; If DstMode is 100 = '-(An)'
00001840  6700 0E44                670      BEQ     PRINTMOVEM   
00001844                           671  
00001844  0C39 0003 0000343C       672      CMP.B   #$3,SrcMode         ; If SrcMode is 011 = '(An)+'
0000184C  6700 0E38                673      BEQ     PRINTMOVEM   
00001850                           674      
00001850  6000 1500                675      BRA     SET_INVALID_EA      ; flag for invalid EA
00001854  6000 0E30                676      BRA     PRINTMOVEM
00001858                           677      
00001858                           678  CHECK_MOVEM_1100     
00001858  13FC 0001 00003438       679      MOVE.B      #1,XBIT
00001860                           680  
00001860                           681  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
00001860  13FC 0002 0000340A       682      MOVE.B  #2,Bits
00001868  4EB8 138A                683      JSR     READ_BITS
0000186C                           684      
0000186C  B83C 0002                685      CMP.B   #%10,D4
00001870  6700 000E                686      BEQ     CHECK_JSR           ; goes to JSR
00001874                           687      
00001874  B83C 0001                688      CMP.B   #%01,D4 
00001878  6700 0068                689      BEQ     CHECK_NOP_RTS       ; goes to NOP and RTS
0000187C                           690  
0000187C  6600 1212                691      BNE     PRINT_DATA
00001880                           692  
00001880                           693  CHECK_JSR 
00001880  13FC 0003 0000340A       694      MOVE.B  #3,Bits
00001888  4EB8 138A                695      JSR     READ_BITS
0000188C  13C4 0000341D            696      MOVE.B  D4,DEST_MODE
00001892                           697      
00001892  13FC 0003 0000340A       698      MOVE.B  #3,Bits
0000189A  4EB8 138A                699      JSR     READ_BITS
0000189E  13C4 0000341C            700      MOVE.B  D4,DEST_REG
000018A4                           701  
000018A4  4EB9 00002B6C            702      JSR     CHECK_DESTINATION
000018AA                           703      
000018AA  0C39 000F 0000343A       704      CMP.B   #$F,DstMode         ; if invalid print DATA
000018B2  6700 11DC                705      BEQ     PRINT_DATA
000018B6                           706      
000018B6  0C39 0002 0000343A       707      CMP.B   #$2,DstMode         ; if DstMode 010        
000018BE  6700 0E62                708      BEQ     PRINTJSR
000018C2                           709      
000018C2  0C39 0007 0000343A       710      CMP.B   #$7,DstMode         ; if DstMode 111 + 000
000018CA  6700 0E56                711      BEQ     PRINTJSR
000018CE                           712      
000018CE  0C39 0008 0000343A       713      CMP.B   #$8,DstMode         ; if DstMode 111 + 001
000018D6  6700 0E4A                714      BEQ     PRINTJSR
000018DA                           715      
000018DA  6000 1476                716      BRA     SET_INVALID_EA      ; flag for invalid EA
000018DE  6000 0E42                717      BRA     PRINTJSR
000018E2                           718      
000018E2                           719  CHECK_NOP_RTS
000018E2  13FC 0006 0000340A       720      MOVE.B  #6,Bits
000018EA  4EB8 138A                721      JSR     READ_BITS
000018EE                           722      
000018EE  B83C 0031                723      CMP.B   #%110001,D4
000018F2  6700 0D82                724      BEQ     PRINTNOP            
000018F6                           725      
000018F6  B83C 0035                726      CMP.B   #%110101,D4
000018FA  6700 0E5E                727      BEQ     PRINTRTS       
000018FE                           728          
000018FE  6600 1190                729      BNE     PRINT_DATA
00001902                           730  
00001902                           731  ************************** ADDQ ***************************
00001902                           732  CHECK_ADDQ
00001902  13FC 0003 0000340A       733      MOVE.B  #3,Bits 
0000190A  4EB8 138A                734      JSR     READ_BITS
0000190E  13C4 00003422            735      MOVE.B  D4,DATA_FIELD
00001914                           736      
00001914  4EB9 00002D34            737      JSR     FORMAT_DATA     
0000191A                           738      
0000191A  13FC 0001 0000340A       739      MOVE.B  #1,Bits
00001922  4EB8 138A                740      JSR     READ_BITS
00001926  B83C 0000                741      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
0000192A  6600 1164                742      BNE     PRINT_DATA          * goes to PRINT_DATA
0000192E                           743  
0000192E  13FC 0002 0000340A       744      MOVE.B  #2,Bits
00001936  4EB8 138A                745      JSR     READ_BITS
0000193A  13C4 00003426            746      MOVE.B  D4,SIZE             * store size into SIZE
00001940  0C39 0003 00003426       747      CMP.B   #%11,SIZE           * cannot be #%11
00001948  6700 1146                748      BEQ     PRINT_DATA
0000194C                           749  
0000194C  13FC 0003 0000340A       750      MOVE.B  #3,Bits
00001954  4EB8 138A                751      JSR     READ_BITS
00001958  13C4 0000341D            752      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
0000195E                           753      
0000195E  13FC 0003 0000340A       754      MOVE.B  #3,Bits
00001966  4EB8 138A                755      JSR     READ_BITS
0000196A  13C4 0000341C            756      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
00001970                           757      
00001970  4EB9 00002B6C            758      JSR     CHECK_DESTINATION    
00001976                           759      
00001976  0C39 000F 0000341D       760      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
0000197E  6700 1110                761      BEQ     PRINT_DATA         
00001982                           762      
00001982  0C39 000E 0000341D       763      CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
0000198A  6700 13C6                764      BEQ     SET_INVALID_EA      
0000198E                           765      
0000198E  0C39 000B 0000341D       766      CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
00001996  6700 13BA                767      BEQ     SET_INVALID_EA      
0000199A                           768      
0000199A  6000 0DCE                769      BRA     PRINTADDQ
0000199E                           770  
0000199E                           771  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
0000199E                           772  COMPARE_0110  * TODO : store condition and 8-bit displacement 
0000199E  13FC 0004 0000340A       773      MOVE.B  #4,Bits 
000019A6  4EB8 138A                774      JSR     READ_BITS
000019AA                           775      
000019AA  B83C 000E                776      CMP.B   #%1110,D4
000019AE  6700 0E12                777      BEQ     PRINTBGT 
000019B2                           778      
000019B2  B83C 000F                779      CMP.B   #%1111,D4
000019B6  6700 0E1A                780      BEQ     PRINTBLE 
000019BA                           781      
000019BA  B83C 0007                782      CMP.B   #%0111,D4
000019BE  6700 0E22                783      BEQ     PRINTBEQ  
000019C2                           784      
000019C2  B83C 0000                785      CMP.B   #%0000,D4
000019C6  6700 0E2A                786      BEQ     PRINTBRA
000019CA                           787      
000019CA  6000 10C4                788      BRA     PRINT_DATA 
000019CE                           789  
000019CE                           790  ************************** ADD, ADDA **********************
000019CE                           791  COMPARE_1101    * ADD and ADDA 
000019CE  13FC 0003 0000340A       792      MOVE.B  #3,Bits
000019D6  4EB8 138A                793      JSR     READ_BITS
000019DA  13C4 00003421            794      MOVE.B  D4,TEMP_REG
000019E0  13C4 0000341C            795      MOVE.B  D4,DEST_REG
000019E6                           796      
000019E6  13FC 0001 0000340A       797      MOVE.B  #1,Bits
000019EE  4EB8 138A                798      JSR     READ_BITS
000019F2  13C4 00003438            799      MOVE.B  D4,XBit
000019F8                           800      
000019F8  13FC 0002 0000340A       801      MOVE.B  #2,Bits
00001A00  4EB8 138A                802      JSR     READ_BITS
00001A04  13C4 00003426            803      MOVE.B  D4,SIZE
00001A0A                           804  
00001A0A  4EB9 00002CEC            805      JSR     CHECK_XBIT
00001A10                           806  
00001A10  13FC 0003 0000340A       807      MOVE.B  #3,Bits
00001A18  4EB8 138A                808      JSR     READ_BITS
00001A1C  13C4 00003420            809      MOVE.B  D4,TEMP_MODE
00001A22                           810      
00001A22  13FC 0003 0000340A       811      MOVE.B  #3,Bits
00001A2A  4EB8 138A                812      JSR     READ_BITS
00001A2E  13C4 00003421            813      MOVE.B  D4,TEMP_REG   
00001A34                           814      
00001A34  4EB9 00002BEC            815      JSR     CHECK_TEMP   
00001A3A  0C39 000F 0000343B       816      CMP.B   #$F, TempMode
00001A42  6700 104C                817      BEQ     PRINT_DATA
00001A46                           818      
00001A46  0C39 000E 0000343B       819      CMP.B   #$E,TempMode    
00001A4E  6700 1302                820      BEQ     SET_INVALID_EA 
00001A52                           821      
00001A52                           822    *  MOVE.B  #%001,TEMP_MODE
00001A52  0C39 0003 00003426       823      CMP.B   #%11,SIZE 
00001A5A  6700 0022                824      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
00001A5E                           825      
00001A5E  6000 0002                826      BRA     CHECK_ADD
00001A62                           827      
00001A62                           828  CHECK_ADD    
00001A62  0C39 0003 00003426       829      CMP.B   #%11,SIZE
00001A6A  6700 1024                830      BEQ     PRINT_DATA
00001A6E                           831     * CMP.B   #%00,SIZE
00001A6E                           832     * BNE     PRINTADD  
00001A6E                           833      
00001A6E  0C39 0001 0000343B       834      CMP.B   #$1,TempMode       * if TempMode is invalid
00001A76  6700 12DA                835      BEQ     SET_INVALID_EA       
00001A7A  6000 0E5A                836      BRA     PRINTADD  
00001A7E                           837  
00001A7E                           838  CHECK_ADDA
00001A7E  13FC 0001 00003426       839      MOVE.B  #%01,SIZE
00001A86                           840      
00001A86  4EB9 00002C6C            841      JSR     CHECK_SOURCE   
00001A8C  0C39 000F 0000343C       842      CMP.B   #$F,SrcMode
00001A94  6700 0FFA                843      BEQ     PRINT_DATA
00001A98  0C39 000E 0000343C       844      CMP.B   #$E,SrcMode
00001AA0  6700 12B0                845      BEQ     SET_INVALID_EA 
00001AA4                           846     
00001AA4  0C39 0000 00003438       847      CMP.B   #%0,XBIT
00001AAC  6700 0E56                848      BEQ     PRINTADDA   
00001AB0                           849                 
00001AB0  13FC 0002 00003426       850      MOVE.B  #%10,SIZE
00001AB8  6000 0E4A                851      BRA     PRINTADDA 
00001ABC                           852   
00001ABC                           853  ************************** MOVEQ ********************************
00001ABC                           854  CHECK_MOVEQ
00001ABC  13FC 0003 0000340A       855      MOVE.B  #3,Bits         * read next 3 bits
00001AC4  4EB8 138A                856      JSR     READ_BITS       * store them in D4
00001AC8  13C4 0000341C            857      MOVE.B  D4,DEST_REG     * move register value (used in EA)
00001ACE  1439 0000341C            858      MOVE.B  DEST_REG,D2
00001AD4  163C 0000                859      MOVE.B  #%000,D3
00001AD8                           860      
00001AD8  13FC 0001 0000340A       861      MOVE.B  #1,Bits         * read the next bit into D4
00001AE0  4EB8 138A                862      JSR     READ_BITS
00001AE4  B83C 0000                863      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
00001AE8  6600 0FA6                864      BNE     PRINT_DATA      * goes to PRINT_DATA ?
00001AEC                           865      
00001AEC  13FC 0008 0000340A       866      MOVE.B  #8,Bits        
00001AF4  4EB8 138A                867      JSR     READ_BITS
00001AF8  23C4 00003422            868      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
00001AFE                           869      
00001AFE  13FC 0007 0000341E       870      MOVE.B  #%111,SRC_MODE  * 
00001B06  13FC 0004 0000341F       871      MOVE.B  #%100,SRC_REG   * 
00001B0E  13FC 0004 0000296A       872      MOVE.B  #4,SizeSplit
00001B16  6000 0CEA                873      BRA     PRINTMOVEQ 
00001B1A                           874      
00001B1A                           875  ************************* OR *********************************
00001B1A                           876  CHECK_OR
00001B1A  13FC 0003 0000340A       877      MOVE.B  #3,Bits
00001B22  4EB8 138A                878      JSR     READ_BITS
00001B26  13C4 00003421            879      MOVE.B  D4,TEMP_REG
00001B2C                           880      
00001B2C  13FC 0001 0000340A       881      MOVE.B  #1,Bits
00001B34  4EB8 138A                882      JSR     READ_BITS
00001B38  13C4 00003438            883      MOVE.B  D4,XBit
00001B3E                           884      
00001B3E  13FC 0002 0000340A       885      MOVE.B  #2,Bits
00001B46  4EB8 138A                886      JSR     READ_BITS
00001B4A  13C4 00003426            887      MOVE.B  D4,SIZE
00001B50                           888  
00001B50  4EB9 00002CEC            889      JSR     CHECK_XBIT
00001B56                           890      
00001B56  13FC 0003 0000340A       891      MOVE.B  #3,Bits
00001B5E  4EB8 138A                892      JSR     READ_BITS
00001B62  13C4 00003420            893      MOVE.B  D4,TEMP_MODE    * store TEMP_MODE
00001B68                           894      
00001B68  13FC 0003 0000340A       895      MOVE.B  #3,Bits
00001B70  4EB8 138A                896      JSR     READ_BITS
00001B74  13C4 00003421            897      MOVE.B  D4,TEMP_REG    * store TEMP_REG    
00001B7A                           898      
00001B7A  4EB9 00002BEC            899      JSR     CHECK_TEMP   
00001B80  0C39 000F 0000343B       900      CMP.B   #$F, TempMode
00001B88  6700 0F06                901      BEQ     PRINT_DATA
00001B8C  0C39 0003 00003426       902      CMP.B   #%11,SIZE
00001B94  6700 0EFA                903      BEQ     PRINT_DATA
00001B98  0C39 000E 0000343B       904      CMP.B   #$E,TempMode    
00001BA0  6700 11B0                905      BEQ     SET_INVALID_EA  
00001BA4                           906      
00001BA4  6000 0CA6                907      BRA     PRINTOR
00001BA8                           908  
00001BA8                           909  ********************* SUB **********************
00001BA8                           910  CHECK_SUB
00001BA8  13FC 0003 0000340A       911      MOVE.B  #3,Bits
00001BB0  4EB8 138A                912      JSR     READ_BITS
00001BB4  13C4 00003421            913      MOVE.B  D4,TEMP_REG
00001BBA                           914      
00001BBA  13FC 0001 0000340A       915      MOVE.B  #1,Bits
00001BC2  4EB8 138A                916      JSR     READ_BITS
00001BC6  13C4 00003438            917      MOVE.B  D4,XBit
00001BCC                           918      
00001BCC  13FC 0002 0000340A       919      MOVE.B  #2,Bits
00001BD4  4EB8 138A                920      JSR     READ_BITS
00001BD8  13C4 00003426            921      MOVE.B  D4,SIZE
00001BDE                           922  
00001BDE  4EB9 00002CEC            923      JSR     CHECK_XBIT
00001BE4                           924      
00001BE4  13FC 0003 0000340A       925      MOVE.B  #3,Bits
00001BEC  4EB8 138A                926      JSR     READ_BITS
00001BF0  13C4 00003420            927      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001BF6                           928      
00001BF6  13FC 0003 0000340A       929      MOVE.B  #3,Bits
00001BFE  4EB8 138A                930      JSR     READ_BITS
00001C02  13C4 00003421            931      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001C08                           932      
00001C08  4EB9 00002BEC            933      JSR     CHECK_TEMP   
00001C0E  0C39 000F 0000343B       934      CMP.B   #$F, TempMode
00001C16  6700 0E78                935      BEQ     PRINT_DATA
00001C1A  0C39 000E 0000343B       936      CMP.B   #$E,TempMode    
00001C22  6700 112E                937      BEQ     SET_INVALID_EA
00001C26                           938      
00001C26  6000 0C52                939      BRA     PRINTSUB
00001C2A                           940  
00001C2A                           941  
00001C2A                           942  ******************* AND ***********************
00001C2A                           943  CHECK_AND
00001C2A  13FC 0003 0000340A       944      MOVE.B  #3,Bits
00001C32  4EB8 138A                945      JSR     READ_BITS
00001C36  13C4 00003421            946      MOVE.B  D4,TEMP_REG
00001C3C                           947      
00001C3C  13FC 0001 0000340A       948      MOVE.B  #1,Bits
00001C44  4EB8 138A                949      JSR     READ_BITS
00001C48  13C4 00003438            950      MOVE.B  D4,XBit
00001C4E                           951      
00001C4E  13FC 0002 0000340A       952      MOVE.B  #2,Bits
00001C56  4EB8 138A                953      JSR     READ_BITS
00001C5A  13C4 00003426            954      MOVE.B  D4,SIZE
00001C60                           955  
00001C60  4EB9 00002CEC            956      JSR     CHECK_XBIT
00001C66                           957      
00001C66  13FC 0003 0000340A       958      MOVE.B  #3,Bits
00001C6E  4EB8 138A                959      JSR     READ_BITS
00001C72  13C4 00003420            960      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001C78                           961      
00001C78  13FC 0003 0000340A       962      MOVE.B  #3,Bits
00001C80  4EB8 138A                963      JSR     READ_BITS
00001C84  13C4 00003421            964      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001C8A                           965      
00001C8A  4EB9 00002BEC            966      JSR     CHECK_TEMP   
00001C90  0C39 000F 0000343B       967      CMP.B   #$F, TempMode
00001C98  6700 0DF6                968      BEQ     PRINT_DATA
00001C9C                           969      
00001C9C  0C39 0003 00003426       970      CMP.B   #%11,SIZE
00001CA4  6700 0DEA                971      BEQ     PRINT_DATA
00001CA8                           972      
00001CA8  0C39 000E 0000343B       973      CMP.B   #$E,TempMode    
00001CB0  6700 10A0                974      BEQ     SET_INVALID_EA
00001CB4                           975      
00001CB4  6000 0BF2                976      BRA     PRINTAND
00001CB8                           977  
00001CB8                           978      
00001CB8                           979  ******************************************
00001CB8                           980  *        THE GROUP 14
00001CB8                           981  *        LS,AS AND ROTATION
00001CB8                           982  *        
00001CB8                           983  ******************************************
00001CB8                           984  COMPARE_1110 
00001CB8  4245                     985              CLR D5     ;STORING ISOLATED BITS
00001CBA  4244                     986              CLR D4
00001CBC  3839 00003408            987              MOVE.W COMMANDDATA,D4
00001CC2  2A04                     988              MOVE.L   D4,D5
00001CC4  0285 000000C0            989              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001CCA  EC8D                     990              LSR.L    #6,D5            ;NORMALIZE
00001CCC  13C5 00003426            991              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001CD2  BA3C 0003                992              CMP.B    #%11,D5    
00001CD6  6700 0298                993              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001CDA  4245                     994              CLR D5
00001CDC  2A04                     995              MOVE.L   D4,D5      
00001CDE  0285 00000018            996              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001CE4  E68D                     997              LSR.L   #3,D5
00001CE6  BA3C 0001                998              CMP.B   #%001,D5
00001CEA  6700 0020                999              BEQ     G_LS    ;LOGICAL SHIFTS
00001CEE  BA3C 0003               1000              CMP.B   #%011,D5
00001CF2  6700 00E4               1001              BEQ     G_RO    ;ROTAIONS
00001CF6  BA3C 0000               1002              CMP.B   #%000,D5
00001CFA  6700 01A8               1003              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001CFE                          1004              
00001CFE  13FC 0001 00000001      1005              MOVE.B #1,BAD_FLAG
00001D06  4EF9 00002A90           1006              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001D0C                          1007  
00001D0C                          1008  G_LS               ;GROUP LOGICAL SHIFT
00001D0C  4245                    1009       CLR   D5
00001D0E  23C4 0000344E           1010       MOVE.L D4,IR_IL
00001D14  02B9 00000020 0000344E  1011       ANDI.L  #$0020,IR_IL
00001D1E  2A39 0000344E           1012       MOVE.L  IR_IL,D5
00001D24  EA8D                    1013       LSR.L   #5,D5
00001D26  BA3C 0001               1014       CMP.B   #$1,D5
00001D2A  6700 0056               1015       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001D2E  4245                    1016       CLR D5
00001D30  2A04                    1017       MOVE.L  D4,D5
00001D32  0285 00000100           1018       ANDI.L  #$0100,D5
00001D38  E08D                    1019       LSR.L  #8,D5
00001D3A  23C5 00003446           1020       MOVE.L  D5,DR
00001D40  4245                    1021       CLR D5
00001D42  2A04                    1022       MOVE.L  D4,D5
00001D44  0285 00000E00           1023       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001D4A  E08D                    1024       LSR.L   #8,D5
00001D4C  E28D                    1025       LSR.L   #1,D5
00001D4E  BABC 00000007           1026       CMP.L   #7,D5
00001D54  6E00 0D3A               1027       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D58  BABC 00000000           1028       CMP.L   #0,D5
00001D5E  6D00 0D30               1029       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D62  13C5 00003452           1030       MOVE.B  D5,S_COUNT
00001D68  4EB9 000025BA           1031       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001D6E  4245                    1032       CLR     D5
00001D70  2A04                    1033       MOVE.L  D4,D5
00001D72  0285 00000007           1034       ANDI.L   #$0007,D5
00001D78  13C5 00003457           1035       MOVE.B   D5,dRN
00001D7E  6000 071C               1036       BRA      PR_LS             
00001D82                          1037       
00001D82                          1038  GLS_EA 
00001D82  4245                    1039       CLR D5
00001D84  4244                    1040       CLR D4
00001D86  3839 00003408           1041       MOVE.W COMMANDDATA,D4
00001D8C                          1042  
00001D8C  2A04                    1043       MOVE.L  D4,D5
00001D8E  0285 00000100           1044       ANDI.L  #$0100,D5
00001D94  E08D                    1045       LSR.L  #8,D5
00001D96  23C5 00003446           1046       MOVE.L  D5,DR     ;DIRECTION
00001D9C  4245                    1047       CLR D5
00001D9E  2A04                    1048       MOVE.L  D4,D5
00001DA0  0285 00000E00           1049       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001DA6  E08D                    1050       LSR.L   #8,D5
00001DA8  E28D                    1051       LSR.L   #1,D5
00001DAA  BABC 00000007           1052       CMP.L   #7,D5
00001DB0  6E00 0CDE               1053       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001DB4  BABC 00000000           1054       CMP.L   #0,D5
00001DBA  6D00 0CD4               1055       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001DBE  13C5 00003456           1056       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001DC4  4245                    1057       CLR     D5
00001DC6  2A04                    1058       MOVE.L   D4,D5
00001DC8  0285 00000007           1059       ANDI.L   #$0007,D5
00001DCE  13C5 00003457           1060       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001DD4  6000 04EA               1061       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001DD8                          1062  G_RO            ;GROUP ROTATION
00001DD8  4245                    1063       CLR   D5
00001DDA  23C4 0000344E           1064       MOVE.L D4,IR_IL
00001DE0  02B9 00000020 0000344E  1065       ANDI.L  #$0020,IR_IL
00001DEA  2A39 0000344E           1066       MOVE.L  IR_IL,D5
00001DF0  EA8D                    1067       LSR.L   #5,D5
00001DF2  BA3C 0001               1068       CMP.B   #$1,D5
00001DF6  6700 0056               1069       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001DFA  4245                    1070       CLR D5
00001DFC  2A04                    1071       MOVE.L  D4,D5
00001DFE  0285 00000100           1072       ANDI.L  #$0100,D5
00001E04  E08D                    1073       LSR.L  #8,D5
00001E06  23C5 00003446           1074       MOVE.L  D5,DR
00001E0C  4245                    1075       CLR D5
00001E0E  2A04                    1076       MOVE.L  D4,D5
00001E10  0285 00000E00           1077       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001E16  E08D                    1078       LSR.L   #8,D5
00001E18  E28D                    1079       LSR.L   #1,D5
00001E1A  BABC 00000007           1080       CMP.L   #7,D5
00001E20  6E00 0C6E               1081       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E24  BABC 00000000           1082       CMP.L   #0,D5
00001E2A  6D00 0C64               1083       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E2E  13C5 00003452           1084       MOVE.B  D5,S_COUNT
00001E34  4EB9 000025BA           1085       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001E3A  4245                    1086       CLR     D5
00001E3C  2A04                    1087       MOVE.L  D4,D5
00001E3E  0285 00000007           1088       ANDI.L   #$0007,D5
00001E44  13C5 00003457           1089       MOVE.B   D5,dRN
00001E4A  6000 05AC               1090       BRA      PR_RO    ;PRINT ROTATION   
00001E4E                          1091  
00001E4E                          1092  GRO_EA 
00001E4E  4245                    1093       CLR D5
00001E50  4244                    1094       CLR D4
00001E52  3839 00003408           1095       MOVE.W COMMANDDATA,D4
00001E58                          1096  
00001E58  2A04                    1097       MOVE.L  D4,D5
00001E5A  0285 00000100           1098       ANDI.L  #$0100,D5
00001E60  E08D                    1099       LSR.L  #8,D5
00001E62  23C5 00003446           1100       MOVE.L  D5,DR     ;DIRECTION
00001E68  4245                    1101       CLR D5
00001E6A  2A04                    1102       MOVE.L  D4,D5
00001E6C  0285 00000E00           1103       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001E72  E08D                    1104       LSR.L   #8,D5
00001E74  E28D                    1105       LSR.L   #1,D5
00001E76  BABC 00000007           1106       CMP.L   #7,D5
00001E7C  6E00 0C12               1107       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E80  BABC 00000000           1108       CMP.L   #0,D5
00001E86  6D00 0C08               1109       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E8A  13C5 00003456           1110       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001E90  4245                    1111       CLR     D5
00001E92  2A04                    1112       MOVE.L   D4,D5
00001E94  0285 00000007           1113       ANDI.L   #$0007,D5
00001E9A  13C5 00003457           1114       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001EA0  6000 04BA               1115       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001EA4                          1116  
00001EA4                          1117  
00001EA4                          1118  
00001EA4                          1119  G_AS         ;GROUP ARITHMATIC SHIFT
00001EA4  4245                    1120       CLR   D5
00001EA6  23C4 0000344E           1121       MOVE.L D4,IR_IL
00001EAC  02B9 00000020 0000344E  1122       ANDI.L  #$0020,IR_IL
00001EB6  2A39 0000344E           1123       MOVE.L  IR_IL,D5
00001EBC  EA8D                    1124       LSR.L   #5,D5
00001EBE  BA3C 0001               1125       CMP.B   #$1,D5
00001EC2  6700 0056               1126       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001EC6  4245                    1127       CLR D5
00001EC8  2A04                    1128       MOVE.L  D4,D5
00001ECA  0285 00000100           1129       ANDI.L  #$0100,D5
00001ED0  E08D                    1130       LSR.L  #8,D5
00001ED2  23C5 00003446           1131       MOVE.L  D5,DR
00001ED8  4245                    1132       CLR D5
00001EDA  2A04                    1133       MOVE.L  D4,D5
00001EDC  0285 00000E00           1134       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001EE2  E08D                    1135       LSR.L   #8,D5
00001EE4  E28D                    1136       LSR.L   #1,D5
00001EE6  BABC 00000007           1137       CMP.L   #7,D5
00001EEC  6E00 0BA2               1138       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001EF0  BABC 00000000           1139       CMP.L   #0,D5
00001EF6  6D00 0B98               1140       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001EFA  13C5 00003452           1141       MOVE.B  D5,S_COUNT
00001F00  4EB9 000025BA           1142       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001F06  4245                    1143       CLR     D5
00001F08  2A04                    1144       MOVE.L  D4,D5
00001F0A  0285 00000007           1145       ANDI.L   #$0007,D5
00001F10  13C5 00003457           1146       MOVE.B   D5,dRN
00001F16  6000 0532               1147       BRA      PR_AS    ;PRINT ROTATION 
00001F1A                          1148  
00001F1A                          1149  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001F1A  4245                    1150       CLR D5
00001F1C  4244                    1151       CLR D4
00001F1E  3839 00003408           1152       MOVE.W COMMANDDATA,D4
00001F24                          1153  
00001F24  2A04                    1154       MOVE.L  D4,D5
00001F26  0285 00000100           1155       ANDI.L  #$0100,D5
00001F2C  E08D                    1156       LSR.L  #8,D5
00001F2E  23C5 00003446           1157       MOVE.L  D5,DR     ;DIRECTION
00001F34  4245                    1158       CLR D5
00001F36  2A04                    1159       MOVE.L  D4,D5
00001F38  0285 00000E00           1160       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001F3E  E08D                    1161       LSR.L   #8,D5
00001F40  E28D                    1162       LSR.L   #1,D5
00001F42  BABC 00000007           1163       CMP.L   #7,D5
00001F48  6E00 0B46               1164       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001F4C  BABC 00000000           1165       CMP.L   #0,D5
00001F52  6D00 0B3C               1166       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001F56  13C5 00003456           1167       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001F5C  4245                    1168       CLR     D5
00001F5E  2A04                    1169       MOVE.L   D4,D5
00001F60  0285 00000007           1170       ANDI.L   #$0007,D5
00001F66  13C5 00003457           1171       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001F6C  6000 02B6               1172       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001F70                          1173  
00001F70                          1174  G14_MEMS 
00001F70  4245                    1175         CLR D5
00001F72  2A04                    1176         MOVE.L  D4,D5
00001F74  CABC 00000E00           1177         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001F7A  E08D                    1178         LSR.L   #8,D5
00001F7C  E28D                    1179         LSR.L   #1,D5
00001F7E  BA3C 0001               1180         CMP.B   #%001,D5
00001F82  6700 0012               1181         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001F86  BA3C 0003               1182         CMP.B   #%011,D5
00001F8A  6700 0070               1183         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001F8E  BA3C 0000               1184         CMP.B   #%000,D5
00001F92  6700 00CE               1185         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001F96                          1186  
00001F96                          1187  G14_MEMS_LS 
00001F96  4245                    1188             CLR D5
00001F98  2A04                    1189             MOVE.L  D4,D5
00001F9A  0285 00000100           1190             ANDI.L  #$0100,D5
00001FA0  E08D                    1191             LSR.L  #8,D5
00001FA2  13C5 00003446           1192             MOVE.B  D5,DR     ;DIRECTION
00001FA8  4245                    1193             CLR D5
00001FAA  2A04                    1194             MOVE.L D4,D5
00001FAC  0285 00000038           1195             ANDI.L  #$0038,D5
00001FB2  E68D                    1196             LSR.L  #3,D5
00001FB4  13C5 0000345A           1197             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001FBA  4245                    1198             CLR D5
00001FBC  2A04                    1199             MOVE.L D4,D5
00001FBE  0285 00000007           1200             ANDI.L  #$0007,D5
00001FC4  13C5 00003457           1201             MOVE.B  D5,dRN
00001FCA  0CB9 00000000 0000345A  1202             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001FD4  6700 0ABA               1203             BEQ    PRINT_DATA
00001FD8  0CB9 00000001 0000345A  1204             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001FE2  6700 0AAC               1205             BEQ     PRINT_DATA
00001FE6  13C5 00003459           1206             MOVE.B  D5,dRG     ;DESTINATION REG
00001FEC  0C39 0007 0000345A      1207             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001FF4  6700 00F2               1208             BEQ     CHECK_ID_LS 
00001FF8  6000 0162               1209             BRA     PR_G14_MEMS_LS             
00001FFC                          1210       
00001FFC                          1211  
00001FFC                          1212  G14_MEMS_RO
00001FFC  4245                    1213             CLR D5
00001FFE  2A04                    1214             MOVE.L  D4,D5
00002000  0285 00000100           1215             ANDI.L  #$0100,D5
00002006  E08D                    1216             LSR.L  #8,D5
00002008  13C5 00003446           1217             MOVE.B  D5,DR     ;DIRECTION
0000200E  4245                    1218             CLR D5
00002010  2A04                    1219             MOVE.L D4,D5
00002012  0285 00000038           1220             ANDI.L  #$0038,D5
00002018  E68D                    1221             LSR.L  #3,D5
0000201A  13C5 0000345A           1222             MOVE.B  D5,dMODE     ;DESTINATION MODE
00002020  4245                    1223             CLR D5
00002022  2A04                    1224             MOVE.L D4,D5
00002024  0285 00000007           1225             ANDI.L  #$0007,D5
0000202A  13C5 00003457           1226             MOVE.B  D5,dRN
00002030  0CB9 00000000 0000345A  1227             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
0000203A  6700 0A54               1228             BEQ    PRINT_DATA
0000203E  0CB9 00000001 0000345A  1229             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00002048  6700 0A46               1230             BEQ     PRINT_DATA
0000204C  13C5 00003459           1231             MOVE.B  D5,dRG     ;DESTINATION REG
00002052  0C39 0007 0000345A      1232             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
0000205A  6700 007C               1233             BEQ     CHECK_ID_RO 
0000205E  6000 0160               1234             BRA     PR_G14_MEMS_RO         
00002062                          1235  
00002062                          1236  G14_MEMS_AS
00002062  4245                    1237             CLR D5
00002064  2A04                    1238             MOVE.L  D4,D5
00002066  0285 00000100           1239             ANDI.L  #$0100,D5
0000206C  E08D                    1240             LSR.L  #8,D5
0000206E  13C5 00003446           1241             MOVE.B  D5,DR     ;DIRECTION
00002074  4245                    1242             CLR D5
00002076  2A04                    1243             MOVE.L D4,D5
00002078  0285 00000038           1244             ANDI.L  #$0038,D5
0000207E  E68D                    1245             LSR.L  #3,D5
00002080  13C5 0000345A           1246             MOVE.B  D5,dMODE     ;DESTINATION MODE
00002086  4245                    1247             CLR D5
00002088  2A04                    1248             MOVE.L D4,D5
0000208A  0285 00000007           1249             ANDI.L  #$0007,D5
00002090  13C5 00003457           1250             MOVE.B  D5,dRN
00002096  0CB9 00000000 0000345A  1251             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
000020A0  6700 09EE               1252             BEQ    PRINT_DATA
000020A4  0CB9 00000001 0000345A  1253             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
000020AE  6700 09E0               1254             BEQ     PRINT_DATA
000020B2  13C5 00003459           1255             MOVE.B  D5,dRG     ;DESTINATION REG
000020B8  0C39 0007 0000345A      1256             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
000020C0  6700 0006               1257             BEQ     CHECK_ID_AS 
000020C4  6000 0032               1258             BRA     PR_G14_MEMS_AS                          
000020C8                          1259             
000020C8                          1260  
000020C8                          1261  
000020C8  0C39 0004 00003459      1262  CHECK_ID_AS  CMP.B #$4,dRG
000020D0  6700 09BE               1263               BEQ   PRINT_DATA
000020D4  6000 0022               1264               BRA     PR_G14_MEMS_AS
000020D8                          1265               
000020D8  0C39 0004 00003459      1266  CHECK_ID_RO  CMP.B #$4,dRG
000020E0  6700 09AE               1267               BEQ   PRINT_DATA
000020E4  6000 00DA               1268               BRA     PR_G14_MEMS_RO
000020E8                          1269    
000020E8  0C39 0004 00003459      1270  CHECK_ID_LS  CMP.B #$4,dRG
000020F0  6700 099E               1271               BEQ   PRINT_DATA
000020F4  6000 0066               1272               BRA    PR_G14_MEMS_LS
000020F8                          1273                               
000020F8                          1274  PR_G14_MEMS_AS
000020F8  0C39 0000 00003446      1275       CMP.B #$0,DR 
00002100  6700 002E               1276       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
00002104                          1277      
00002104                          1278      *******PRINT LSL*******
00002104  43F9 000033DC           1279       LEA       PASL,A1   MEM LEFT SHIF
0000210A  103C 000E               1280       MOVE.B   #14,D0     ; moves #14 into data register D0
0000210E  4E4F                    1281       TRAP     #15
00002110                          1282  
00002110  4EB9 00002A22           1283       JSR     PRINTCLRSPOT      * print space
00002116                          1284   
00002116  4243                    1285       CLR D3
00002118  4242                    1286       CLR D2
0000211A  1439 0000345A           1287       MOVE.B  dMODE,D2
00002120  1639 00003457           1288       MOVE.B  dRN,D3
00002126  4EB9 00002DC6           1289       JSR     EA_START
0000212C                          1290       
0000212C  6000 F17A               1291       BRA MEMORYGRABBER
00002130                          1292  
00002130                          1293       
00002130                          1294  PR_ASR_MEM   ;MEM RIGHT SHIFT
00002130  43F9 000033D8           1295       LEA       PASR,A1   MEM RIGHT SHIF
00002136  103C 000E               1296       MOVE.B   #14,D0     ; moves #14 into data register D0
0000213A  4E4F                    1297       TRAP     #15
0000213C  4EB9 00002A22           1298       JSR     PRINTCLRSPOT      * print space
00002142                          1299  
00002142  4243                    1300       CLR D3
00002144  4242                    1301       CLR D2
00002146  1439 0000345A           1302       MOVE.B  dMODE,D2
0000214C  1639 00003457           1303       MOVE.B  dRN,D3
00002152  4EB9 00002DC6           1304       JSR     EA_START
00002158                          1305       
00002158  6000 F14E               1306       BRA MEMORYGRABBER
0000215C                          1307               
0000215C                          1308  
0000215C                          1309  PR_G14_MEMS_LS 
0000215C  0C39 0000 00003446      1310       CMP.B #$0,DR 
00002164  6700 002E               1311       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00002168                          1312      
00002168                          1313      *******PRINT LSL*******
00002168  43F9 000033D0           1314       LEA       PLSL,A1   MEM LEFT SHIF
0000216E  103C 000E               1315       MOVE.B   #14,D0     ; moves #14 into data register D0
00002172  4E4F                    1316       TRAP     #15 
00002174                          1317       
00002174  4EB9 00002A22           1318       JSR     PRINTCLRSPOT      * print space
0000217A                          1319       
0000217A  4243                    1320       CLR D3
0000217C  4242                    1321       CLR D2
0000217E  1439 0000345A           1322       MOVE.B  dMODE,D2
00002184  1639 00003457           1323       MOVE.B  dRN,D3
0000218A  4EB9 00002DC6           1324       JSR     EA_START
00002190                          1325       
00002190  6000 F116               1326       BRA MEMORYGRABBER
00002194                          1327       
00002194                          1328  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00002194  43F9 000033D4           1329       LEA       PLSR,A1   MEM RIGHT SHIF
0000219A  103C 000E               1330       MOVE.B   #14,D0     ; moves #14 into data register D0
0000219E  4E4F                    1331       TRAP     #15
000021A0  4EB9 00002A22           1332       JSR     PRINTCLRSPOT      * print space
000021A6  4243                    1333       CLR D3
000021A8  4242                    1334       CLR D2
000021AA  1439 0000345A           1335       MOVE.B  dMODE,D2
000021B0  1639 00003457           1336       MOVE.B  dRN,D3
000021B6  4EB9 00002DC6           1337       JSR     EA_START
000021BC                          1338       
000021BC  6000 F0EA               1339       BRA    MEMORYGRABBER
000021C0                          1340  
000021C0                          1341  PR_G14_MEMS_RO
000021C0  0C39 0000 00003446      1342       CMP.B #$0,DR 
000021C8  6700 002E               1343       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
000021CC                          1344      
000021CC                          1345      *******PRINT ASL*******
000021CC  43F9 000033E0           1346       LEA       PROL,A1   ROTATE MEM LEFT SHIF
000021D2  103C 000E               1347       MOVE.B   #14,D0     ; moves #14 into data register D0
000021D6  4E4F                    1348       TRAP     #15
000021D8                          1349  
000021D8  4EB9 00002A22           1350       JSR     PRINTCLRSPOT
000021DE                          1351        
000021DE  4243                    1352       CLR D3
000021E0  4242                    1353       CLR D2
000021E2  1439 0000345A           1354       MOVE.B  dMODE,D2
000021E8  1639 00003457           1355       MOVE.B  dRN,D3
000021EE  4EB9 00002DC6           1356       JSR     EA_START
000021F4                          1357       
000021F4  6000 F0B2               1358       BRA MEMORYGRABBER
000021F8                          1359  
000021F8                          1360  PR_ROR_MEM   ;ROTATE MEM RIGHT 
000021F8  43F9 000033E4           1361       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
000021FE  103C 000E               1362       MOVE.B   #14,D0     ; moves #14 into data register D0
00002202  4E4F                    1363       TRAP     #15
00002204  4EB9 00002A22           1364       JSR     PRINTCLRSPOT      * print space
0000220A                          1365  
0000220A  4243                    1366       CLR D3
0000220C  4242                    1367       CLR D2
0000220E  1439 0000345A           1368       MOVE.B  dMODE,D2
00002214  1639 00003457           1369       MOVE.B  dRN,D3
0000221A  4EB9 00002DC6           1370       JSR     EA_START
00002220                          1371       
00002220  6000 F086               1372       BRA MEMORYGRABBER
00002224                          1373  
00002224                          1374  
00002224                          1375  PR_G_AS_EA
00002224  0CB9 00000000 00003446  1376          CMP.L #$0,DR 
0000222E  6700 004C               1377          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002232                          1378       
00002232                          1379          *******PRINT ASL*******
00002232  43F9 000033DC           1380          LEA       PASL,A1
00002238  103C 000E               1381          MOVE.B   #14,D0     ; moves #14 into data register D0
0000223C  4E4F                    1382          TRAP     #15 
0000223E  4EB9 00002998           1383          JSR      SIZEPRINT
00002244                          1384          
00002244  4EB9 00002A22           1385          JSR     PRINTCLRSPOT
0000224A                          1386          
0000224A  4242                    1387          CLR D2
0000224C  4243                    1388          CLR D3
0000224E  143C 0000               1389          MOVE.B  #%000,D2     ; mode data register
00002252  1639 00003456           1390          MOVE.B  sRN,D3       ; source register number
00002258  4EB9 00002DC6           1391          JSR     EA_START
0000225E                          1392          
0000225E  4EB9 00002A30           1393          JSR     PRINTCOMA   ; print coma
00002264                          1394          
00002264  4243                    1395          CLR D3
00002266  4242                    1396          CLR D2
00002268  143C 0000               1397          MOVE.B  #%000,D2      ; mode data register
0000226C  1639 00003457           1398          MOVE.B  dRN,D3        ; destination register
00002272  4EB9 00002DC6           1399          JSR     EA_START
00002278                          1400          
00002278  6000 F02E               1401          BRA   MEMORYGRABBER
0000227C                          1402  
0000227C                          1403          
0000227C                          1404  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
0000227C  43F9 000033D8           1405           LEA       PASR,A1
00002282  103C 000E               1406          MOVE.B   #14,D0     ; moves #14 into data register D0
00002286  4E4F                    1407          TRAP     #15 
00002288  4EB9 0000296A           1408          JSR      SIZESPLIT
0000228E                          1409          
0000228E  4242                    1410          CLR D2
00002290  4243                    1411          CLR D3
00002292  143C 0000               1412          MOVE.B  #%000,D2     ; mode data register
00002296  1639 00003456           1413          MOVE.B  sRN,D3       ; source register number
0000229C  4EB9 00002DC6           1414          JSR     EA_START
000022A2  4EB9 00002A30           1415          JSR     PRINTCOMA   ; print coma
000022A8  4243                    1416          CLR D3
000022AA  4242                    1417          CLR D2
000022AC  143C 0000               1418          MOVE.B  #%000,D2      ; mode data register
000022B0  1639 00003457           1419          MOVE.B  dRN,D3        ; destination register
000022B6  4EB9 00002DC6           1420          JSR     EA_START
000022BC                          1421          
000022BC  6000 EFEA               1422          BRA   MEMORYGRABBER
000022C0                          1423  
000022C0                          1424  
000022C0                          1425  PR_G_LS_EA
000022C0  0CB9 00000000 00003446  1426          CMP.L #$0,DR 
000022CA  6700 004C               1427          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000022CE                          1428       
000022CE                          1429          *******PRINT LSL*******
000022CE  43F9 000033D0           1430          LEA       PLSL,A1
000022D4  103C 000E               1431          MOVE.B   #14,D0     ; moves #14 into data register D0
000022D8  4E4F                    1432          TRAP     #15 
000022DA  4EB9 00002998           1433          JSR      SIZEPRINT
000022E0                          1434          
000022E0  4EB9 00002A22           1435          JSR     PRINTCLRSPOT
000022E6                          1436          
000022E6  4242                    1437          CLR D2
000022E8  4243                    1438          CLR D3
000022EA  143C 0000               1439          MOVE.B  #%000,D2     ; mode data register
000022EE  1639 00003456           1440          MOVE.B  sRN,D3       ; source register number
000022F4  4EB9 00002DC6           1441          JSR     EA_START
000022FA                          1442          
000022FA  4EB9 00002A30           1443          JSR     PRINTCOMA   ; print coma
00002300                          1444          
00002300  4243                    1445          CLR D3
00002302  4242                    1446          CLR D2
00002304  143C 0000               1447          MOVE.B  #%000,D2      ; mode data register
00002308  1639 00003457           1448          MOVE.B  dRN,D3        ; destination register
0000230E  4EB9 00002DC6           1449          JSR     EA_START
00002314                          1450          
00002314  6000 EF92               1451          BRA   MEMORYGRABBER
00002318                          1452          
00002318                          1453  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
00002318  43F9 000033D4           1454           LEA       PLSR,A1
0000231E  103C 000E               1455           MOVE.B   #14,D0     ; moves #14 into data register D0
00002322  4E4F                    1456          TRAP     #15 
00002324  4EB9 00002998           1457          JSR      SIZEPRINT
0000232A                          1458          
0000232A  4242                    1459          CLR D2
0000232C  4243                    1460          CLR D3
0000232E  143C 0000               1461          MOVE.B  #%000,D2     ; mode data register
00002332  1639 00003456           1462          MOVE.B  sRN,D3       ; source register number
00002338  4EB9 00002DC6           1463          JSR     EA_START
0000233E  4EB9 00002A30           1464          JSR     PRINTCOMA   ; print coma
00002344  4243                    1465          CLR D3
00002346  4242                    1466          CLR D2
00002348  143C 0000               1467          MOVE.B  #%000,D2      ; mode data register
0000234C  1639 00003457           1468          MOVE.B  dRN,D3        ; destination register
00002352  4EB9 00002DC6           1469          JSR     EA_START
00002358                          1470          
00002358  6000 EF4E               1471          BRA   MEMORYGRABBER
0000235C                          1472  
0000235C                          1473  
0000235C                          1474  PR_G_RO_EA        
0000235C  0CB9 00000000 00003446  1475          CMP.L #$0,DR 
00002366  6700 004C               1476          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000236A                          1477       
0000236A                          1478          *******PRINT LSL*******
0000236A  43F9 000033E0           1479          LEA       PROL,A1
00002370  103C 000E               1480          MOVE.B   #14,D0     ; moves #14 into data register D0
00002374  4E4F                    1481          TRAP     #15 
00002376  4EB9 00002998           1482          JSR      SIZEPRINT
0000237C                          1483          
0000237C  4EB9 00002A22           1484          JSR     PRINTCLRSPOT
00002382                          1485          
00002382  4242                    1486          CLR D2
00002384  4243                    1487          CLR D3
00002386  143C 0000               1488          MOVE.B  #%000,D2     ; mode data register
0000238A  1639 00003456           1489          MOVE.B  sRN,D3       ; source register number
00002390  4EB9 00002DC6           1490          JSR     EA_START
00002396  4EB9 00002A30           1491          JSR     PRINTCOMA   ; print coma
0000239C  4243                    1492          CLR D3
0000239E  4242                    1493          CLR D2
000023A0  143C 0000               1494          MOVE.B  #%000,D2      ; mode data register
000023A4  1639 00003457           1495          MOVE.B  dRN,D3        ; destination register
000023AA  4EB9 00002DC6           1496          JSR     EA_START
000023B0                          1497          
000023B0  6000 EEF6               1498          BRA   MEMORYGRABBER
000023B4                          1499  
000023B4                          1500          
000023B4                          1501  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
000023B4  43F9 000033E4           1502          LEA       PROR,A1
000023BA  103C 000E               1503          MOVE.B   #14,D0     ; moves #14 into data register D0
000023BE  4E4F                    1504          TRAP     #15 
000023C0  4EB9 00002998           1505          JSR      SIZEPRINT
000023C6                          1506  
000023C6  4242                    1507          CLR D2
000023C8  4243                    1508          CLR D3
000023CA  143C 0000               1509          MOVE.B  #%000,D2     ; mode data register
000023CE  1639 00003456           1510          MOVE.B  sRN,D3       ; source register number
000023D4  4EB9 00002DC6           1511          JSR     EA_START
000023DA  4EB9 00002A30           1512          JSR     PRINTCOMA   ; print coma
000023E0  4243                    1513          CLR D3
000023E2  4242                    1514          CLR D2
000023E4  143C 0000               1515          MOVE.B  #%000,D2      ; mode data register
000023E8  1639 00003457           1516          MOVE.B  dRN,D3        ; destination register
000023EE  4EB9 00002DC6           1517          JSR     EA_START
000023F4                          1518          
000023F4  6000 EEB2               1519          BRA   MEMORYGRABBER
000023F8                          1520  
000023F8                          1521  PR_RO 
000023F8  0CB9 00000000 00003446  1522       CMP.L #$0,DR 
00002402  6700 0172               1523       BEQ   PR_ROR   ;RIGHT SHIFT
00002406                          1524      
00002406                          1525      *******PRINT ASL*******
00002406  43F9 000033E0           1526       LEA       PROL,A1
0000240C  103C 000E               1527       MOVE.B   #14,D0     ; moves #14 into data register D0
00002410  4E4F                    1528       TRAP     #15 
00002412                          1529  
00002412  4EB9 00002998           1530       JSR      SIZEPRINT
00002418                          1531  
00002418  4EB9 00002A3E           1532       JSR     PRINTHASH   * print hash
0000241E                          1533  
0000241E  4241                    1534      CLR D1
00002420  1239 00003452           1535      MOVE.B   S_COUNT,D1
00002426  103C 0003               1536      MOVE.B   #3,D0
0000242A  4E4F                    1537      TRAP     #15
0000242C  4EB9 00002A30           1538      JSR     PRINTCOMA   ; print coma
00002432  4243                    1539      CLR D3
00002434  4242                    1540      CLR D2
00002436  143C 0000               1541      MOVE.B  #%000,D2
0000243A  1639 00003457           1542      MOVE.B  dRN,D3
00002440  4EB9 00002DC6           1543      JSR     EA_START
00002446                          1544      
00002446  6000 EE60               1545      BRA    MEMORYGRABBER
0000244A                          1546  
0000244A                          1547  
0000244A                          1548  PR_AS 
0000244A  0CB9 00000000 00003446  1549      CMP.L #$0,DR 
00002454  6700 00DC               1550      BEQ   PR_ASR   ;RIGHT SHIFT
00002458                          1551      
00002458                          1552      *******PRINT ASL*******
00002458  43F9 000033DC           1553       LEA       PASL,A1
0000245E  103C 000E               1554       MOVE.B   #14,D0     ; moves #14 into data register D0
00002462  4E4F                    1555       TRAP     #15 
00002464                          1556  
00002464  4EB9 00002998           1557      JSR      SIZEPRINT
0000246A                          1558  
0000246A  4EB9 00002A3E           1559      JSR     PRINTHASH   ; print hash
00002470                          1560      
00002470  4241                    1561      CLR D1
00002472  1239 00003452           1562      MOVE.B   S_COUNT,D1
00002478  103C 0003               1563      MOVE.B   #3,D0
0000247C  4E4F                    1564      TRAP     #15
0000247E  4EB9 00002A30           1565      JSR     PRINTCOMA   ; print coma
00002484  4243                    1566      CLR D3
00002486  4242                    1567      CLR D2
00002488  143C 0000               1568      MOVE.B  #%000,D2
0000248C  1639 00003457           1569      MOVE.B  dRN,D3
00002492  4EB9 00002DC6           1570      JSR     EA_START
00002498                          1571  
00002498  6000 EE0E               1572      BRA    MEMORYGRABBER
0000249C                          1573                        
0000249C                          1574                          
0000249C                          1575  PR_LS 
0000249C  0CB9 00000000 00003446  1576      CMP.L #$0,DR 
000024A6  6700 0046               1577      BEQ   PR_LSR   ;RIGHT SHIFT
000024AA                          1578      
000024AA                          1579      *******PRINT LSL*******
000024AA  43F9 000033D0           1580       LEA       PLSL,A1
000024B0  103C 000E               1581       MOVE.B   #14,D0     ; moves #14 into data register D0
000024B4  4E4F                    1582       TRAP     #15 
000024B6  4EB9 00002998           1583      JSR      SIZEPRINT
000024BC                          1584  
000024BC  4EB9 00002A3E           1585      JSR     PRINTHASH   ; print hash
000024C2                          1586      
000024C2  4241                    1587      CLR D1
000024C4  1239 00003452           1588      MOVE.B   S_COUNT,D1
000024CA  103C 0003               1589      MOVE.B   #3,D0
000024CE  4E4F                    1590      TRAP     #15
000024D0                          1591      
000024D0  4EB9 00002A30           1592      JSR     PRINTCOMA   ; print coma
000024D6                          1593      
000024D6  4243                    1594      CLR D3
000024D8  4242                    1595      CLR D2
000024DA  143C 0000               1596      MOVE.B  #%000,D2
000024DE  1639 00003457           1597      MOVE.B  dRN,D3
000024E4  4EB9 00002DC6           1598      JSR     EA_START
000024EA                          1599      
000024EA  6000 EDBC               1600      BRA    MEMORYGRABBER
000024EE                          1601      
000024EE                          1602            
000024EE                          1603  PR_LSR 
000024EE  43F9 000033D4           1604      LEA   PLSR,A1
000024F4  103C 000E               1605        MOVE.B   #14,D0     ; moves #14 into data register D0
000024F8  4E4F                    1606        TRAP     #15       ; Displays message via trap 14 
000024FA  4EB9 00002998           1607        JSR      SIZEPRINT
00002500                          1608  
00002500  4EB9 00002A3E           1609        JSR     PRINTHASH   ; print hash
00002506                          1610        
00002506  4241                    1611        CLR D1
00002508  1239 00003452           1612        MOVE.B   S_COUNT,D1
0000250E  103C 0003               1613        MOVE.B   #3,D0
00002512  4E4F                    1614        TRAP     #15
00002514  4EB9 00002A30           1615        JSR     PRINTCOMA   ; print coma
0000251A  4243                    1616        CLR D3
0000251C  4242                    1617        CLR D2
0000251E  143C 0000               1618        MOVE.B #%000,D2
00002522  1639 00003457           1619        MOVE.B  dRN,D3
00002528  4EB9 00002DC6           1620        JSR   EA_START
0000252E                          1621        
0000252E  6000 ED78               1622        BRA MEMORYGRABBER
00002532                          1623        
00002532                          1624        
00002532                          1625  PR_ASR 
00002532  43F9 000033D8           1626      LEA   PASR,A1
00002538  103C 000E               1627         MOVE.B   #14,D0     ; moves #14 into data register D0
0000253C  4E4F                    1628        TRAP     #15       ; Displays message via trap 14 
0000253E  4EB9 00002998           1629        JSR      SIZEPRINT
00002544                          1630  
00002544  4EB9 00002A3E           1631        JSR     PRINTHASH   ; print hash
0000254A                          1632        
0000254A  4241                    1633        CLR D1
0000254C  1239 00003452           1634        MOVE.B   S_COUNT,D1
00002552  103C 0003               1635        MOVE.B   #3,D0
00002556  4E4F                    1636        TRAP     #15
00002558  4EB9 00002A30           1637        JSR     PRINTCOMA   ; print coma
0000255E  4243                    1638        CLR D3
00002560  4242                    1639        CLR D2
00002562  143C 0000               1640        MOVE.B #%000,D2
00002566  1639 00003457           1641        MOVE.B  dRN,D3
0000256C  4EB9 00002DC6           1642        JSR   EA_START
00002572                          1643  
00002572  6000 ED34               1644        BRA MEMORYGRABBER
00002576                          1645  
00002576                          1646        
00002576                          1647  PR_ROR 
00002576  43F9 000033E4           1648        LEA   PROR,A1
0000257C  103C 000E               1649        MOVE.B   #14,D0     ; moves #14 into data register D0
00002580  4E4F                    1650        TRAP     #15       ; Displays message via trap 14 
00002582  4EB9 00002998           1651        JSR      SIZEPRINT
00002588                          1652  
00002588  4EB9 00002A3E           1653        JSR     PRINTHASH   ; print hash
0000258E                          1654        
0000258E  4241                    1655        CLR D1
00002590  1239 00003452           1656        MOVE.B   S_COUNT,D1
00002596  103C 0003               1657        MOVE.B   #3,D0
0000259A  4E4F                    1658        TRAP     #15
0000259C  4EB9 00002A30           1659        JSR     PRINTCOMA   ; print coma
000025A2  4243                    1660        CLR D3
000025A4  4242                    1661        CLR D2
000025A6  143C 0000               1662        MOVE.B #%000,D2
000025AA  1639 00003457           1663        MOVE.B  dRN,D3
000025B0  4EB9 00002DC6           1664        JSR   EA_START
000025B6                          1665        
000025B6  6000 ECF0               1666        BRA MEMORYGRABBER
000025BA                          1667        
000025BA                          1668        
000025BA                          1669  ;-----------------------extra parts for above code to function
000025BA                          1670        
000025BA                          1671  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
000025BA  0C39 0000 00003452      1672           CMP.B #$0,S_COUNT
000025C2  6700 0004               1673           BEQ   IS_EIGHT
000025C6  4E75                    1674           RTS
000025C8                          1675           
000025C8  13FC 0008 00003452      1676  IS_EIGHT  MOVE.B #8,S_COUNT
000025D0  4E75                    1677            RTS
000025D2                          1678  
000025D2                          1679  ;------------------------- printing --------------------------------
000025D2                          1680                  
000025D2                          1681  PRINTMOVE 
000025D2  43F9 0000337C           1682      LEA     PMOVE,A1
000025D8  103C 000E               1683      MOVE.B  #14,D0     ; moves #14 into data register D0
000025DC  4E4F                    1684      TRAP    #15       ; Displays message via trap 14
000025DE  4EB9 0000296A           1685      JSR     SIZESPLIT
000025E4                          1686      * EA Part
000025E4  4242                    1687       CLR     D2                      * Source to EA
000025E6  4243                    1688       CLR     D3
000025E8  13F9 0000346E 00003426  1689       MOVE.B  opDta1T, SIZE
000025F2  1439 00003468           1690       MOVE.B  SrcMod, D2              
000025F8  2639 0000346A           1691       MOVE.L  opDta1, D3
000025FE  4EB9 00002DC6           1692       JSR     EA_start
00002604                          1693  
00002604  4EB9 00002A30           1694       JSR     PRINTCOMA
0000260A                          1695  
0000260A  4242                    1696       CLR     D2                       * Destination to EA
0000260C  4243                    1697       CLR     D3
0000260E  1439 00003466           1698       MOVE.B  DstMod, D2
00002614  1639 00003465           1699       MOVE.B  DstReg, D3
0000261A  4EB9 00002DC6           1700       JSR     EA_start
00002620                          1701  
00002620  6000 EC86               1702       BRA     MEMORYGRABBER
00002624                          1703      
00002624                          1704  PRINTMOVEA 
00002624  43F9 00003387           1705      LEA     PMOVEA,A1
0000262A  103C 000E               1706      MOVE.B   #14,D0     ; moves #14 into data register D0
0000262E  4E4F                    1707      TRAP     #15       ; Displays message via trap 14
00002630  4EB9 0000296A           1708      JSR     SIZESPLIT
00002636                          1709       * EA Part
00002636  4242                    1710       CLR     D2                      * Source to EA
00002638  4243                    1711       CLR     D3
0000263A  13F9 0000346E 00003426  1712       MOVE.B  opDta1T, SIZE
00002644  1439 00003468           1713       MOVE.B  SrcMod, D2              
0000264A  2639 0000346A           1714       MOVE.L  opDta1, D3
00002650  4EB9 00002DC6           1715       JSR     EA_start
00002656                          1716  
00002656  4EB9 00002A30           1717       JSR     PRINTCOMA
0000265C                          1718  
0000265C  4242                    1719       CLR     D2                       * Destination to EA
0000265E  4243                    1720       CLR     D3
00002660  1439 00003466           1721       MOVE.B  DstMod, D2
00002666  1639 00003465           1722       MOVE.B  DstReg, D3
0000266C  4EB9 00002DC6           1723       JSR     EA_start
00002672                          1724  
00002672  6000 EC34               1725       BRA     MEMORYGRABBER
00002676                          1726      
00002676                          1727                      ;First set of commands
00002676                          1728  PRINTNOP    
00002676  43F9 00003393           1729      LEA     PNOP,A1
0000267C  103C 000E               1730      MOVE.B  #14,D0 
00002680  4E4F                    1731      TRAP    #15  
00002682                          1732      
00002682  6000 EC24               1733      BRA     MEMORYGRABBER
00002686                          1734  
00002686                          1735  PRINTMOVEM  
00002686  43F9 00003381           1736      LEA     PMOVEM,A1
0000268C  103C 000E               1737      MOVE.B  #14,D0 
00002690  4E4F                    1738      TRAP    #15 
00002692  4EB9 000029E0           1739      JSR     SIZEPRINT3 
00002698                          1740      
00002698                          1741  *    CLR.L   D4
00002698                          1742  *    MOVE.W  (A0)+,D4            * Move list mask into D4
00002698                          1743      
00002698                          1744      * TODO : CHECK THE INVELID_EA FLAG
00002698                          1745      
00002698                          1746  * TODO:     
00002698                          1747  *    CMP.B   #%0,XBit
00002698                          1748  *    BEQ     PRINT_REG_TO_MEM
00002698                          1749  *    BRA     PRINT_MEM_TO_REG
00002698                          1750  
00002698                          1751  
00002698                          1752  PRINTLEA
00002698  43F9 00003397           1753      LEA     PLEA,A1
0000269E  103C 000E               1754      MOVE.B  #14,D0 
000026A2  4E4F                    1755      TRAP    #15 
000026A4  4EB9 00002A22           1756      JSR     PRINTCLRSPOT
000026AA                          1757      
000026AA  0C39 0001 00003439      1758      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000026B2  6700 0408               1759      BEQ     PRINTINVALIDEA
000026B6                          1760      
000026B6  4243                    1761      CLR     D3
000026B8  4242                    1762      CLR     D2
000026BA  1439 0000341E           1763      MOVE.B  SRC_MODE,D2
000026C0  1639 0000341F           1764      MOVE.B  SRC_REG,D3
000026C6  4EB9 00002DC6           1765      JSR     EA_START
000026CC                          1766  
000026CC  4EB9 00002A30           1767      JSR     PRINTCOMA           ; print coma
000026D2                          1768  
000026D2  4243                    1769      CLR     D3
000026D4  4242                    1770      CLR     D2
000026D6  143C 0001               1771      MOVE.B  #%001,D2
000026DA  1639 0000341C           1772      MOVE.B  DEST_REG,D3
000026E0  4EB9 00002DC6           1773      JSR     EA_START
000026E6                          1774  
000026E6  6000 EBC0               1775      BRA     MEMORYGRABBER
000026EA                          1776  
000026EA                          1777  PRINTNOT
000026EA  43F9 0000339B           1778      LEA     PNOT,A1
000026F0  103C 000E               1779      MOVE.B  #14,D0
000026F4  4E4F                    1780      TRAP    #15
000026F6  4EB9 000029BC           1781      JSR     SIZEPRINT2
000026FC                          1782  
000026FC  0C39 0001 00003439      1783      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002704  6700 03B6               1784      BEQ     PRINTINVALIDEA    
00002708                          1785      
00002708  4243                    1786      CLR     D3
0000270A  4242                    1787      CLR     D2
0000270C  1439 0000341D           1788      MOVE.B  DEST_MODE,D2
00002712  1639 0000341C           1789      MOVE.B  DEST_REG,D3    
00002718  4EB9 00002DC6           1790      JSR     EA_START
0000271E                          1791      
0000271E  6000 EB88               1792      BRA     MEMORYGRABBER
00002722                          1793  
00002722                          1794  PRINTJSR    
00002722  43F9 0000339F           1795      LEA     PJSR,A1
00002728  103C 000E               1796      MOVE.B  #14,D0 
0000272C  4E4F                    1797      TRAP    #15      
0000272E  4EB9 00002A22           1798      JSR     PRINTCLRSPOT
00002734                          1799      
00002734  0C39 0001 00003439      1800      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
0000273C  6700 037E               1801      BEQ     PRINTINVALIDEA
00002740                          1802      
00002740  4243                    1803      CLR     D3
00002742  4242                    1804      CLR     D2
00002744  1439 0000341D           1805      MOVE.B  DEST_MODE,D2
0000274A  1639 0000341C           1806      MOVE.B  DEST_REG,D3    
00002750  4EB9 00002DC6           1807      JSR     EA_START
00002756                          1808      
00002756  6000 EB50               1809      BRA     MEMORYGRABBER
0000275A                          1810  
0000275A                          1811  
0000275A  43F9 000033A3           1812  PRINTRTS    LEA PRTS,A1
00002760  103C 000E               1813      MOVE.B   #14,D0     ; moves #14 into data register D0
00002764  4E4F                    1814      TRAP     #15       ; Displays message via trap 14
00002766                          1815      
00002766  6000 EB40               1816      BRA     MEMORYGRABBER
0000276A                          1817      
0000276A                          1818                  ;ADDQ SECTION
0000276A                          1819  PRINTADDQ 
0000276A  43F9 000033CB           1820      LEA     PADDQ,A1
00002770  103C 000E               1821      MOVE.B  #14,D0     ; moves #14 into data register D0
00002774  4E4F                    1822      TRAP    #15       ; Displays message via trap 14
00002776  4EB9 000029BC           1823      JSR     SIZEPRINT2
0000277C                          1824      
0000277C  0C39 0001 00003439      1825      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002784  6700 0336               1826      BEQ     PRINTINVALIDEA
00002788                          1827      
00002788  4EB9 00002A3E           1828      JSR     PRINTHASH   ; print hash
0000278E  4EB9 00002A4A           1829      JSR     PRINTDOLLARSIGN     ; print dollar sign
00002794                          1830      
00002794  4241                    1831      CLR     D1
00002796  1239 00003422           1832      MOVE.B  DATA_FIELD,D1
0000279C  103C 0003               1833      MOVE.B  #3,D0     
000027A0  4E4F                    1834      TRAP    #15 
000027A2                          1835      
000027A2  4EB9 00002A30           1836      JSR     PRINTCOMA   ; print coma
000027A8                          1837      
000027A8  4243                    1838      CLR     D3
000027AA  4242                    1839      CLR     D2
000027AC  1439 0000341D           1840      MOVE.B  DEST_MODE,D2
000027B2  1639 0000341C           1841      MOVE.B  DEST_REG,D3    
000027B8  4EB9 00002DC6           1842      JSR     EA_START
000027BE                          1843  
000027BE  6000 EAE8               1844      BRA      MEMORYGRABBER
000027C2                          1845  
000027C2                          1846                  ;SECOND SET OF COMMANDS
000027C2                          1847  PRINTBGT 
000027C2  43F9 000033A7           1848      LEA     PBGT,A1
000027C8  103C 000E               1849      MOVE.B   #14,D0     ; moves #14 into data register D0
000027CC  4E4F                    1850      TRAP     #15       ; Displays message via trap 14
000027CE  6000 EAD8               1851      BRA     MEMORYGRABBER
000027D2                          1852  
000027D2                          1853  PRINTBLE 
000027D2  43F9 000033AF           1854      LEA     PBLE,A1
000027D8  103C 000E               1855      MOVE.B   #14,D0     ; moves #14 into data register D0
000027DC  4E4F                    1856      TRAP     #15       ; Displays message via trap 14
000027DE  6000 EAC8               1857      BRA     MEMORYGRABBER
000027E2                          1858  
000027E2                          1859  PRINTBEQ 
000027E2  43F9 000033AB           1860      LEA     PBEQ,A1
000027E8  103C 000E               1861      MOVE.B   #14,D0     ; moves #14 into data register D0
000027EC  4E4F                    1862      TRAP     #15       ; Displays message via trap 14
000027EE  6000 EAB8               1863      BRA     MEMORYGRABBER
000027F2                          1864  
000027F2                          1865  PRINTBRA 
000027F2  43F9 000033B3           1866      LEA PBRA,A1
000027F8  103C 000E               1867      MOVE.B   #14,D0     ; moves #14 into data register D0
000027FC  4E4F                    1868      TRAP     #15       ; Displays message via trap 14
000027FE  6000 EAA8               1869      BRA     MEMORYGRABBER
00002802                          1870      
00002802                          1871                  ;MOVEQ SECTION
00002802                          1872  PRINTMOVEQ 
00002802  43F9 0000338D           1873      LEA PMOVEQ,A1
00002808  103C 000E               1874      MOVE.B   #14,D0     ; moves #14 into data register D0
0000280C  4E4F                    1875      TRAP     #15       ; Displays message via trap 14
0000280E                          1876      
0000280E  4EB9 00002A22           1877      JSR     PRINTCLRSPOT
00002814  4EB9 00002A3E           1878      JSR     PRINTHASH   ; print hash
0000281A  4EB9 00002A4A           1879      JSR     PRINTDOLLARSIGN     ; print dollar sign  
00002820                          1880   
00002820  2239 00003422           1881      MOVE.L      DATA_FIELD,D1
00002826  143C 0010               1882      MOVE.B      #16,D2
0000282A  103C 000F               1883      MOVE.B      #15,D0     ; moves #14 into data register D0
0000282E  4E4F                    1884      TRAP        #15 
00002830                          1885      
00002830  4EB9 00002A30           1886      JSR     PRINTCOMA   ; print coma
00002836  1E3C 0000               1887      MOVE.B #0,D7
0000283A  7400                    1888      MOVE.L #%000,D2
0000283C  1639 0000341C           1889      MOVE.B DEST_REG,D3
00002842  4EB9 00002DC6           1890      JSR     EA_START
00002848                          1891  
00002848  6000 EA5E               1892      BRA     MEMORYGRABBER
0000284C                          1893  
0000284C                          1894  
0000284C                          1895                  ;OR SECTION
0000284C                          1896  PRINTOR 
0000284C  43F9 000033B7           1897      LEA     POR,A1
00002852  103C 000E               1898      MOVE.B  #14,D0     ; moves #14 into data register D0
00002856  4E4F                    1899      TRAP    #15       ; Displays message via trap 14
00002858  4EB9 000029BC           1900      JSR     SIZEPRINT2 
0000285E                          1901      
0000285E  0C39 0001 00003439      1902      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002866  6700 0254               1903      BEQ     PRINTINVALIDEA
0000286A                          1904      
0000286A  0C39 0000 00003438      1905      CMP.B   #%0,XBit
00002872  6700 0256               1906      BEQ     PRINT_EA_TO_DN
00002876  6000 029A               1907      BRA     PRINT_DN_TO_EA
0000287A                          1908      
0000287A                          1909  
0000287A                          1910                  ;SUB SECTION
0000287A                          1911  PRINTSUB 
0000287A  43F9 000033BA           1912      LEA PSUB,A1
00002880  103C 000E               1913      MOVE.B   #14,D0     ; moves #14 into data register D0
00002884  4E4F                    1914      TRAP     #15       ; Displays message via trap 14 
00002886  4EB9 000029BC           1915      JSR     SIZEPRINT2 
0000288C                          1916      
0000288C  0C39 0001 00003439      1917      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002894  6700 0226               1918      BEQ     PRINTINVALIDEA
00002898                          1919      
00002898  0C39 0000 00003438      1920      CMP.B   #%0,XBit
000028A0  6700 0228               1921      BEQ     PRINT_EA_TO_DN
000028A4  6000 026C               1922      BRA     PRINT_DN_TO_EA
000028A8                          1923      
000028A8                          1924  
000028A8                          1925                  ;AND SECTION
000028A8                          1926  PRINTAND 
000028A8  43F9 000033BE           1927      LEA PAND,A1
000028AE  103C 000E               1928      MOVE.B   #14,D0     ; moves #14 into data register D0
000028B2  4E4F                    1929      TRAP     #15       ; Displays message via trap 14
000028B4  4EB9 000029BC           1930      JSR     SIZEPRINT2 
000028BA                          1931      
000028BA  0C39 0001 00003439      1932      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000028C2  6700 01F8               1933      BEQ     PRINTINVALIDEA
000028C6                          1934      
000028C6  0C39 0000 00003438      1935      CMP.B   #%0,XBit
000028CE  6700 01FA               1936      BEQ     PRINT_EA_TO_DN
000028D2  6000 023E               1937      BRA     PRINT_DN_TO_EA
000028D6                          1938  
000028D6                          1939                  ;ADD SPLIT              
000028D6                          1940  PRINTADD 
000028D6  43F9 000033C2           1941      LEA PADD,A1
000028DC  103C 000E               1942      MOVE.B   #14,D0     ; moves #14 into data register D0
000028E0  4E4F                    1943      TRAP     #15       ; Displays message via trap 14
000028E2                          1944      
000028E2  4EB9 000029BC           1945      JSR     SIZEPRINT2 
000028E8                          1946      
000028E8  0C39 0001 00003439      1947      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000028F0  6700 01CA               1948      BEQ     PRINTINVALIDEA
000028F4                          1949      
000028F4  0C39 0000 00003438      1950      CMP.B   #%0,XBit
000028FC  6700 01CC               1951      BEQ     PRINT_EA_TO_DN
00002900  6000 0210               1952      BRA     PRINT_DN_TO_EA
00002904                          1953      
00002904                          1954  PRINTADDA 
00002904  43F9 000033C6           1955      LEA PADDA,A1
0000290A  103C 000E               1956      MOVE.B   #14,D0     ; moves #14 into data register D0
0000290E  4E4F                    1957      TRAP     #15       ; Displays message via trap 14
00002910  4EB9 000029BC           1958      JSR     SIZEPRINT2 
00002916                          1959      
00002916  0C39 0001 00003439      1960      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
0000291E  6700 019C               1961      BEQ     PRINTINVALIDEA
00002922                          1962      
00002922  13F9 00003420 0000341E  1963      MOVE.B  TEMP_MODE,SRC_MODE
0000292C  13F9 00003421 0000341F  1964      MOVE.B  TEMP_REG,SRC_REG
00002936  4243                    1965      CLR     D3
00002938  4242                    1966      CLR     D2
0000293A  1439 0000341E           1967      MOVE.B  SRC_MODE,D2
00002940  1639 0000341F           1968      MOVE.B  SRC_REG,D3
00002946  4EB9 00002DC6           1969      JSR     EA_START
0000294C                          1970  
0000294C  4EB9 00002A30           1971      JSR     PRINTCOMA   ; print coma
00002952                          1972  
00002952  4243                    1973      CLR     D3
00002954  4242                    1974      CLR     D2
00002956  143C 0001               1975      MOVE.B  #%001,D2
0000295A  1639 0000341C           1976      MOVE.B  DEST_REG,D3
00002960  4EB9 00002DC6           1977      JSR     EA_START
00002966                          1978  
00002966  6000 E940               1979      BRA     MEMORYGRABBER
0000296A                          1980      
0000296A                          1981  
0000296A                          1982  
0000296A                          1983                  ;SIZE PRINTER
0000296A                          1984  SIZESPLIT   
0000296A  0CB9 00000001 0000340C  1985      CMP.L #1,SizeValue
00002974  6700 0082               1986      BEQ PRINTB
00002978  0CB9 00000002 0000340C  1987      CMP.L #2,SizeValue
00002982  6700 0082               1988      BEQ PRINTW
00002986  0CB9 00000003 0000340C  1989      CMP.L #3,SizeValue
00002990  6700 0082               1990      BEQ PRINTL
00002994  6000 008C               1991      BRA PRINTCLRSPOT ; go to EA/DN section
00002998                          1992  
00002998                          1993  SIZEPRINT 
00002998  0C39 0000 00003426      1994       CMP.B  #$0,SIZE
000029A0  6700 0056               1995       BEQ    PRINTB
000029A4  0C39 0001 00003426      1996       CMP.B  #$1,SIZE
000029AC  6700 0058               1997       BEQ    PRINTW      
000029B0  0C39 0002 00003426      1998       CMP.B  #$2,SIZE
000029B8  6700 005A               1999       BEQ    PRINTL 
000029BC                          2000  
000029BC                          2001  SIZEPRINT2   
000029BC  0C39 0000 00003426      2002      CMP.B   #$00,SIZE
000029C4  6700 0032               2003      BEQ     PRINTB
000029C8  0C39 0001 00003426      2004      CMP.B   #$01,SIZE
000029D0  6700 0034               2005      BEQ     PRINTW
000029D4  0C39 0010 00003426      2006      CMP.B   #$10,SIZE
000029DC  6000 0036               2007      BRA     PRINTL
000029E0                          2008  
000029E0                          2009  SIZEPRINT3
000029E0  0C39 0000 00003426      2010      CMP.B   #$0,SIZE
000029E8  6700 001C               2011      BEQ     PRINTW
000029EC  0C39 0001 00003426      2012      CMP.B   #$1,SIZE
000029F4  6700 001E               2013      BEQ     PRINTL
000029F8                          2014  
000029F8                          2015  PRINTB  
000029F8  43F9 00003410           2016      LEA     PB,A1
000029FE  103C 000E               2017      MOVE.B  #14,D0     ; moves #14 into data register D0
00002A02  4E4F                    2018      TRAP    #15       ; Displays message via trap 14
00002A04  4E75                    2019      RTS
00002A06                          2020  
00002A06                          2021  PRINTW      
00002A06  43F9 00003414           2022      LEA     PW,A1
00002A0C  103C 000E               2023      MOVE.B  #14,D0     ; moves #14 into data register D0
00002A10  4E4F                    2024      TRAP    #15       ; Displays message via trap 14
00002A12  4E75                    2025      RTS
00002A14                          2026      
00002A14                          2027  PRINTL 
00002A14  43F9 00003418           2028      LEA     PL,A1
00002A1A  103C 000E               2029      MOVE.B  #14,D0     ; moves #14 into data register D0
00002A1E  4E4F                    2030      TRAP    #15       ; Displays message via trap 14
00002A20  4E75                    2031      RTS
00002A22                          2032  
00002A22                          2033  PRINTCLRSPOT 
00002A22  43F9 00003427           2034      LEA     CLRSPOT,A1
00002A28  103C 000E               2035      MOVE.B  #14,D0     ; moves #14 into data register D0
00002A2C  4E4F                    2036      TRAP    #15       ; Displays message via trap 14
00002A2E  4E75                    2037      RTS
00002A30                          2038  
00002A30                          2039  PRINTCOMA   
00002A30  43F9 0000342D           2040      LEA     COMA,A1
00002A36  103C 000E               2041      MOVE.B  #14,D0     
00002A3A  4E4F                    2042      TRAP    #15
00002A3C  4E75                    2043      RTS
00002A3E                          2044  
00002A3E                          2045  PRINTHASH 
00002A3E  43F9 00003429           2046      LEA     HASH,A1         ; print hash
00002A44  700E                    2047      MOVEQ   #14,D0
00002A46  4E4F                    2048      TRAP    #15
00002A48  4E75                    2049      RTS
00002A4A                          2050  
00002A4A                          2051  PRINTDOLLARSIGN   
00002A4A  43F9 0000342B           2052      LEA     DOLLARSIGN,A1   ; print dollar sign
00002A50  103C 000E               2053      MOVE.B  #14,D0
00002A54  4E4F                    2054      TRAP    #15 
00002A56  4E75                    2055      RTS
00002A58                          2056      
00002A58                          2057  PRINTNEG
00002A58  43F9 00003431           2058      LEA     NEG,A1          ; print "-"
00002A5E  103C 000E               2059      MOVE.B  #14,D0
00002A62  4E4F                    2060      TRAP    #15
00002A64  4E75                    2061      RTS
00002A66                          2062      
00002A66                          2063  PRINTPLUS
00002A66  43F9 0000342F           2064      LEA     PLUS,A1      * print "+"
00002A6C  103C 000E               2065      MOVE.B  #14,D0
00002A70  4E4F                    2066      TRAP    #15
00002A72  4E75                    2067      RTS  
00002A74                          2068  
00002A74                          2069  PRINTOPEN
00002A74  43F9 00003433           2070      LEA     OPEN,A1      * print "("
00002A7A  103C 000E               2071      MOVE.B  #14,D0
00002A7E  4E4F                    2072      TRAP    #15
00002A80  4E75                    2073      RTS 
00002A82                          2074      
00002A82                          2075  PRINTCLOSED  
00002A82  43F9 00003435           2076      LEA     CLOSED,A1      * print ")"
00002A88  103C 000E               2077      MOVE.B  #14,D0
00002A8C  4E4F                    2078      TRAP    #15
00002A8E  4E75                    2079      RTS 
00002A90                          2080  
00002A90                          2081  PRINT_DATA
00002A90  43F9 000033E8           2082      LEA     PDATA,A1
00002A96  103C 000E               2083      MOVE.B  #14,D0
00002A9A  4E4F                    2084      TRAP    #15
00002A9C                          2085      
00002A9C  4EB8 2A22               2086      JSR     PRINTCLRSPOT      * print space
00002AA0                          2087      
00002AA0  4EB8 2A3E               2088      JSR PRINTHASH
00002AA4  4EB8 2A4A               2089      JSR PRINTDOLLARSIGN
00002AA8  3239 00003408           2090      MOVE.W      COMMANDDATA,D1
00002AAE  143C 0010               2091      MOVE.B      #16,D2
00002AB2  103C 000F               2092      MOVE.B      #15,D0     ; moves #14 into data register D0
00002AB6  4E4F                    2093      TRAP        #15  
00002AB8                          2094      
00002AB8  6000 E7EE               2095      BRA     MEMORYGRABBER  
00002ABC                          2096  
00002ABC                          2097  PRINTINVALIDEA
00002ABC  43F9 000033ED           2098      LEA     PINVALIDEA,A1
00002AC2  103C 000E               2099      MOVE.B  #14,D0
00002AC6  4E4F                    2100      TRAP    #15
00002AC8  4E75                    2101      RTS
00002ACA                          2102      
00002ACA                          2103  PRINT_EA_TO_DN
00002ACA  13F9 00003420 0000341E  2104      MOVE.B  TEMP_MODE,SRC_MODE
00002AD4  13F9 00003421 0000341F  2105      MOVE.B  TEMP_REG,SRC_REG
00002ADE  4243                    2106      CLR     D3
00002AE0  4242                    2107      CLR     D2
00002AE2  1439 0000341E           2108      MOVE.B  SRC_MODE,D2
00002AE8  1639 0000341F           2109      MOVE.B  SRC_REG,D3
00002AEE  4EB9 00002DC6           2110      JSR     EA_START
00002AF4                          2111  
00002AF4  4EB8 2A30               2112      JSR     PRINTCOMA   ; print coma
00002AF8                          2113   
00002AF8  4243                    2114      CLR     D3
00002AFA  4242                    2115      CLR     D2
00002AFC  1439 0000341D           2116      MOVE.B  DEST_MODE,D2
00002B02  1639 0000341C           2117      MOVE.B  DEST_REG,D3
00002B08  4EB9 00002DC6           2118      JSR     EA_START
00002B0E                          2119  
00002B0E  6000 E798               2120      BRA     MEMORYGRABBER
00002B12                          2121      
00002B12                          2122  PRINT_DN_TO_EA    
00002B12  4243                    2123      CLR     D3
00002B14  4242                    2124      CLR     D2
00002B16  1439 0000341D           2125      MOVE.B  DEST_MODE,D2
00002B1C  1639 0000341F           2126      MOVE.B  SRC_REG,D3
00002B22  4EB9 00002DC6           2127      JSR     EA_START
00002B28                          2128      
00002B28  4EB8 2A30               2129      JSR     PRINTCOMA   ; print coma
00002B2C                          2130      
00002B2C  13F9 00003420 0000341E  2131      MOVE.B  TEMP_MODE,SRC_MODE
00002B36  13F9 00003421 0000341F  2132      MOVE.B  TEMP_REG,SRC_REG
00002B40  4243                    2133      CLR     D3
00002B42  4242                    2134      CLR     D2
00002B44  1439 0000341E           2135      MOVE.B  SRC_MODE,D2
00002B4A  1639 0000341F           2136      MOVE.B  SRC_REG,D3
00002B50  4EB9 00002DC6           2137      JSR     EA_START
00002B56                          2138      
00002B56  6000 E750               2139      BRA     MEMORYGRABBER
00002B5A                          2140  
00002B5A                          2141  
00002B5A                          2142  CLOSINGSTATEMENTS     
00002B5A  43F9 00003376           2143      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002B60  103C 000E               2144      MOVE.B   #14,D0     ; moves #14 into data register D0
00002B64  4E4F                    2145      TRAP     #15       ; Displays message via trap 14
00002B66                          2146     
00002B66                          2147  STOP    
00002B66  103C 0009               2148      MOVE.B #9,D0        ; moves #9 into data register D0
00002B6A  4E4F                    2149      TRAP     #15       ; halt simulator via trap 9
00002B6C                          2150   
00002B6C                          2151  
00002B6C                          2152  
00002B6C                          2153  
00002B6C                          2154      
00002B6C                          2155  ;----------------------------- ADDED THIS FOR OP CODE PART 
00002B6C                          2156  ********* CHECK DESTINATION ***********
00002B6C                          2157  CHECK_DESTINATION
00002B6C  13FC 000F 0000343A      2158      MOVE.B  #$F,DstMode
00002B74                          2159      
00002B74  0C39 0007 0000341D      2160      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
00002B7C  6700 0026               2161      BEQ     CHECK_DEST_REG             * Checks registers
00002B80                          2162      
00002B80  0C39 0005 0000341D      2163      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
00002B88  6700 0058               2164      BEQ     R_CHECK_DEST    * Print DATA instead 
00002B8C                          2165      
00002B8C  0C39 0006 0000341D      2166      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002B94  6700 004C               2167      BEQ     R_CHECK_DEST    * Print DATA instead
00002B98                          2168      
00002B98  13F9 0000341D 0000343A  2169      MOVE.B  DEST_MODE,DstMode
00002BA2  4E75                    2170      RTS
00002BA4                          2171  CHECK_DEST_REG
00002BA4  0C39 0002 0000341C      2172      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002BAC  6700 0034               2173      BEQ     R_CHECK_DEST
00002BB0                          2174  
00002BB0  0C39 0003 0000341C      2175      CMP.B   #3,DEST_REG         * if DEST_REG = 011
00002BB8  6700 0028               2176      BEQ     R_CHECK_DEST
00002BBC                          2177      
00002BBC  0C39 0005 0000341C      2178      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002BC4  6C00 016C               2179      BGE     RETURN
00002BC8                          2180      
00002BC8  13F9 0000341D 0000343A  2181      MOVE.B  DEST_MODE,DstMode
00002BD2  4286                    2182      CLR.L   D6
00002BD4  1C39 0000341C           2183      MOVE.B  DEST_REG,D6
00002BDA  DD39 0000343A           2184      ADD.B   D6,DstMode
00002BE0  4E75                    2185      RTS
00002BE2                          2186  R_CHECK_DEST
00002BE2  13FC 000E 0000343A      2187      MOVE.B  #$E,DstMode
00002BEA  4E75                    2188      RTS
00002BEC                          2189  ********* CHECK TEMP ***********
00002BEC                          2190  CHECK_TEMP
00002BEC                          2191  
00002BEC  13FC 000F 0000343B      2192      MOVE.B  #$F,TempMode
00002BF4                          2193      
00002BF4  0C39 0007 00003420      2194      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
00002BFC  6700 0026               2195      BEQ     CHECK_TEMP_REG      * Checks registers
00002C00                          2196  
00002C00  0C39 0005 00003420      2197      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
00002C08  6700 0058               2198      BEQ     R_CHECK_TEMP    * 
00002C0C                          2199      
00002C0C  0C39 0006 00003420      2200      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
00002C14  6700 004C               2201      BEQ     R_CHECK_TEMP    * 
00002C18                          2202      
00002C18  13F9 00003420 0000343B  2203      MOVE.B  TEMP_MODE,TempMode
00002C22  4E75                    2204      RTS
00002C24                          2205  CHECK_TEMP_REG
00002C24  0C39 0002 00003421      2206      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
00002C2C  6700 0034               2207      BEQ     R_CHECK_TEMP
00002C30                          2208  
00002C30  0C39 0003 00003421      2209      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
00002C38  6700 0028               2210      BEQ     R_CHECK_TEMP
00002C3C                          2211      
00002C3C  0C39 0005 00003421      2212      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002C44  6700 00EC               2213      BEQ     RETURN
00002C48                          2214      
00002C48  13F9 00003420 0000343B  2215      MOVE.B  TEMP_MODE,TempMode
00002C52  4286                    2216      CLR.L   D6
00002C54  1C39 00003421           2217      MOVE.B  TEMP_REG,D6
00002C5A  DD39 0000343B           2218      ADD.B   D6,TempMode
00002C60  4E75                    2219      RTS
00002C62                          2220  R_CHECK_TEMP
00002C62  13FC 000E 0000343B      2221      MOVE.B  #$E,TempMode
00002C6A  4E75                    2222      RTS
00002C6C                          2223  ******************** CHECK_SOURCE ******************** 
00002C6C                          2224  CHECK_SOURCE    * TODO
00002C6C  13FC 000F 0000343C      2225      MOVE.B  #$F,SrcMode
00002C74                          2226      
00002C74  0C39 0007 0000341E      2227      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002C7C  6700 0026               2228      BEQ     CHECK_SOURCE_REG    * Checks registers
00002C80                          2229  
00002C80  0C39 0005 0000341E      2230      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
00002C88  6700 0058               2231      BEQ     R_CHECK_SOURCE 
00002C8C                          2232      
00002C8C  0C39 0006 0000341E      2233      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002C94  6700 004C               2234      BEQ     R_CHECK_SOURCE 
00002C98                          2235      
00002C98  13F9 0000341E 0000343C  2236      MOVE.B  SRC_MODE,SrcMode
00002CA2  4E75                    2237      RTS
00002CA4                          2238  CHECK_SOURCE_REG
00002CA4  0C39 0002 0000341F      2239      CMP.B   #2,SRC_REG             * if RRRS = 010
00002CAC  6700 0034               2240      BEQ     R_CHECK_SOURCE
00002CB0                          2241  
00002CB0  0C39 0003 0000341F      2242      CMP.B   #3,SRC_REG          * if RRRS = 011
00002CB8  6700 0028               2243      BEQ     R_CHECK_SOURCE
00002CBC                          2244      
00002CBC  0C39 0005 0000341F      2245      CMP.B   #5,SRC_REG      * if RRRS = 101
00002CC4  6C00 006C               2246      BGE     RETURN
00002CC8                          2247      
00002CC8  13F9 0000341E 0000343C  2248      MOVE.B  SRC_MODE,SrcMode
00002CD2  4286                    2249      CLR.L   D6
00002CD4  1C39 0000341F           2250      MOVE.B  SRC_REG,D6
00002CDA  DD39 0000343C           2251      ADD.B   D6,SrcMode
00002CE0  4E75                    2252      RTS
00002CE2                          2253  R_CHECK_SOURCE
00002CE2  13FC 000E 0000343C      2254      MOVE.B  #$E,SrcMode
00002CEA  4E75                    2255      RTS
00002CEC                          2256  ******************** XBIT ********************
00002CEC                          2257  CHECK_XBIT      
00002CEC  0C39 0000 00003438      2258      CMP.B   #%0,XBit
00002CF4  6700 0008               2259      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002CF8  6600 001E               2260      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002CFC  4E75                    2261      RTS
00002CFE                          2262  TEMP_TO_DEST
00002CFE  13F9 00003421 0000341C  2263      MOVE.B  TEMP_REG,DEST_REG
00002D08  13F9 00003420 0000341D  2264      MOVE.B  TEMP_MODE,DEST_MODE
00002D12  4EB8 2B6C               2265      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002D16  4E75                    2266      RTS
00002D18                          2267  TEMP_TO_SRC
00002D18  13F9 00003421 0000341F  2268      MOVE.B  TEMP_REG,SRC_REG
00002D22  13F9 00003420 0000341E  2269      MOVE.B  TEMP_MODE,SRC_MODE
00002D2C  4EB8 2C6C               2270      JSR     CHECK_SOURCE                 
00002D30  4E75                    2271      RTS
00002D32                          2272    
00002D32                          2273  ******************** OTHER COMMANDS ********************
00002D32                          2274  RETURN
00002D32  4E75                    2275      RTS
00002D34                          2276  
00002D34                          2277  FORMAT_DATA
00002D34  0C39 0000 00003422      2278      CMP.B   #0,DATA_FIELD
00002D3C  66F4                    2279      BNE     RETURN
00002D3E  13FC 0008 00003422      2280      MOVE.B  #8,DATA_FIELD
00002D46  4E75                    2281      RTS
00002D48                          2282  
00002D48                          2283  CHECK_DATA_NEG
00002D48  BC3C 0080               2284      CMP.B   #128,D6
00002D4C  6700 FD0A               2285      BEQ     PRINTNEG
00002D50  4E75                    2286      RTS
00002D52                          2287      
00002D52                          2288      
00002D52                          2289  SET_INVALID_EA
00002D52  13FC 0001 00003439      2290      MOVE.B  #%1,INVALID_EA 
00002D5A                          2291      
00002D5A                          2292  CLEARMR
00002D5A  13FC 0000 0000341C      2293      MOVE.B  #0,DEST_REG 
00002D62  13FC 0000 0000341D      2294      MOVE.B  #0,DEST_MODE
00002D6A  13FC 0000 0000341E      2295      MOVE.B  #0,SRC_MODE
00002D72  13FC 0000 0000341F      2296      MOVE.B  #0,SRC_REG
00002D7A  13FC 0000 00003420      2297      MOVE.B  #0,TEMP_MODE
00002D82  13FC 0000 00003421      2298      MOVE.B  #0,TEMP_REG 
00002D8A  13FC 0000 00003426      2299      MOVE.B  #0,SIZE
00002D92  13FC 0000 0000340C      2300      MOVE.B  #0,SizeValue
00002D9A  23FC 00000000 00003422  2301      MOVE.L  #0,DATA_FIELD
00002DA4  13FC 0000 00003439      2302      MOVE.B  #0,INVALID_EA
00002DAC  23FC 00000000 00003408  2303      MOVE.L  #0,COMMANDDATA
00002DB6  7200                    2304      MOVE.L #0,D1
00002DB8  7400                    2305      MOVE.L #0,D2
00002DBA  7600                    2306      MOVE.L #0,D3
00002DBC  7800                    2307      MOVE.L #0,D4
00002DBE  7A00                    2308      MOVE.L #0,D5
00002DC0  7C00                    2309      MOVE.L #0,D6
00002DC2  7E00                    2310      MOVE.L #0,D7
00002DC4  4E75                    2311      RTS  
00002DC6                          2312  
00002DC6                          2313  *************    
00002DC6                          2314  
00002DC6                          2315  *******************************************************
00002DC6                          2316  * EA subroutine
00002DC6                          2317  * Purpose: Generate EA
00002DC6                          2318  *         Addresses used: 
00002DC6                          2319  *            D2 FOR MODE
00002DC6                          2320  *            D3 FOR REGISTER
00002DC6                          2321  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002DC6                          2322  *            D1 FOR PRINTING
00002DC6                          2323  *            A6 MIMICKS INSTRUCTION BUFFER
00002DC6                          2324  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002DC6                          2325  ***************************************************
00002DC6                          2326  
00002DC6  0C39 000F 0000343D      2327  EA_start        CMP.B      #$F,STATE
00002DCE  6700 0352               2328                  BEQ        EA_FINISH
00002DD2  4EF9 00003124           2329                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002DD8                          2330  
00002DD8  B47C 0000               2331  Continue_EA     CMP.W       #MODE000,D2             
00002DDC  6700 0036               2332                  BEQ         DATA_REGISTER                 
00002DE0  B47C 0001               2333                  CMP.W       #MODE001,D2               
00002DE4  6700 004A               2334                  BEQ         ADDRESS_REGISTER                 
00002DE8  B47C 0002               2335                  CMP.W       #MODE010,D2              
00002DEC  6700 005E               2336                  BEQ         ADDRESS_REGISTER_DIRECT               
00002DF0  B47C 0003               2337                  CMP.W       #MODE011,D2              
00002DF4  6700 007A               2338                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002DF8  B47C 0004               2339                  CMP.W       #MODE100,D2          
00002DFC  6700 009A               2340                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002E00  B47C 0007               2341                  CMP.W       #MODE111,D2          
00002E04  6700 00BA               2342                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002E08  13FC 0001 0000343D      2343                  MOVE.B      #BAD_FLAG,STATE               
00002E10  6000 0310               2344                  BRA         EA_FINISH              
00002E14                          2345                  
00002E14                          2346  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002E14  123C 0044               2347                  MOVE.B   #D,D1
00002E18  103C 0006               2348                  MOVE.B  #6,D0
00002E1C  4E4F                    2349                  TRAP    #15
00002E1E  0685 00000030           2350                  ADDI.L   #$30,D5
00002E24  1205                    2351                  MOVE.B   D5,D1
00002E26  103C 0006               2352                  MOVE.B  #6,D0
00002E2A  4E4F                    2353                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E2C  6000 02F4               2354                  BRA      EA_FINISH
00002E30                          2355                      
00002E30                          2356  
00002E30  123C 0041               2357  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002E34  103C 0006               2358                   MOVE.B  #6,D0
00002E38  4E4F                    2359                   TRAP    #15
00002E3A  0685 00000030           2360                   ADDI.L   #$30,D5
00002E40  1205                    2361                   MOVE.B   D5,D1
00002E42  103C 0006               2362                   MOVE.B  #6,D0
00002E46  4E4F                    2363                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E48  6000 02D8               2364                   BRA      EA_FINISH
00002E4C                          2365  
00002E4C                          2366                   
00002E4C                          2367  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002E4C  4EB8 2A74               2368                          JSR     PRINTOPEN   
00002E50  123C 0041               2369                          MOVE.B   #A,D1
00002E54  103C 0006               2370                          MOVE.B  #6,D0
00002E58  4E4F                    2371                          TRAP    #15
00002E5A  0685 00000030           2372                          ADDI.L   #$30,D5
00002E60  1205                    2373                          MOVE.B   D5,D1
00002E62  103C 0006               2374                          MOVE.B  #6,D0
00002E66  4E4F                    2375                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E68  4EB8 2A82               2376                          JSR     PRINTCLOSED
00002E6C  6000 02B4               2377                          BRA      EA_FINISH
00002E70                          2378  
00002E70                          2379  
00002E70                          2380  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002E70  4EB8 2A74               2381                             JSR     PRINTOPEN
00002E74  123C 0041               2382                             MOVE.B   #A,D1
00002E78  103C 0006               2383                             MOVE.B  #6,D0
00002E7C  4E4F                    2384                             TRAP    #15
00002E7E  0685 00000030           2385                             ADDI.L   #$30,D5
00002E84  1205                    2386                             MOVE.B   D5,D1
00002E86  103C 0006               2387                             MOVE.B  #6,D0
00002E8A  4E4F                    2388                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E8C  4EB8 2A82               2389                             JSR     PRINTCLOSED
00002E90  4EB8 2A66               2390                             JSR      PRINTPLUS
00002E94  6000 028C               2391                             BRA      EA_FINISH
00002E98                          2392  
00002E98                          2393  
00002E98                          2394  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002E98  4EB8 2A58               2395                             JSR      PRINTNEG
00002E9C  4EB8 2A74               2396                             JSR     PRINTOPEN
00002EA0  123C 0041               2397                             MOVE.B   #A,D1
00002EA4  103C 0006               2398                             MOVE.B  #6,D0
00002EA8  4E4F                    2399                             TRAP    #15
00002EAA  0685 00000030           2400                             ADDI.L   #$30,D5
00002EB0  1205                    2401                             MOVE.B   D5,D1
00002EB2  103C 0006               2402                             MOVE.B  #6,D0
00002EB6  4E4F                    2403                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002EB8  4EB8 2A82               2404                             JSR     PRINTCLOSED
00002EBC  6000 0264               2405                             BRA      EA_FINISH
00002EC0                          2406  
00002EC0                          2407  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002EC0  6000 0002               2408                                BRA  CONTINUE_A_I_A
00002EC4                          2409                                
00002EC4                          2410                                
00002EC4                          2411  CONTINUE_A_I_A                
00002EC4  BA3C 0004               2412                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002EC8  6700 001E               2413                                BEQ         IMMIDIATE_REGISTER                
00002ECC  BA3C 0000               2414                                CMP.B       #0,D5                ; WORD ADDRESSING
00002ED0  6700 0042               2415                                BEQ         WORD_ADDRESSING                
00002ED4  BA3C 0001               2416                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002ED8  6700 0048               2417                                BEQ         LONG_ADDRESSING              
00002EDC  13FC 0001 0000343D      2418                                MOVE.B      #BAD_FLAG,STATE              
00002EE4  6000 023C               2419                                BRA         EA_FINISH                * jump to end   
00002EE8                          2420                                
00002EE8                          2421                                
00002EE8  4EB8 2A3E               2422  IMMIDIATE_REGISTER            JSR     PRINTHASH   * print hashtag
00002EEC  0C39 0001 00003426      2423                                CMP.B #1,SIZE   ;BYTE
00002EF4  6700 003A               2424                                BEQ   GETBYTE
00002EF8  0C39 0002 00003426      2425                                CMP.B #2,SIZE   ;BYTE
00002F00  6700 0038               2426                                BEQ   GETWORD
00002F04  0C39 0003 00003426      2427                                CMP.B #3,SIZE   ;BYTE
00002F0C  6700 0036               2428                                BEQ   GETLONG
00002F10  6000 0032               2429                                BRA   GETLONG
00002F14                          2430                                
00002F14                          2431  
00002F14  4EB8 2A4A               2432  WORD_ADDRESSING              JSR    PRINTDOLLARSIGN
00002F18  3E1E                    2433                               MOVE.W  (A6)+,D7
00002F1A  6000 00B2               2434                               BRA   PRINT_WORD
00002F1E  6000 0202               2435                               BRA   EA_FINISH
00002F22                          2436  
00002F22  4EB8 2A4A               2437  LONG_ADDRESSING              JSR    PRINTDOLLARSIGN
00002F26  2E1E                    2438                               MOVE.L  (A6)+,D7
00002F28  6000 0122               2439                               BRA   PRINT_LONG
00002F2C  6000 01F4               2440                               BRA   EA_FINISH                            
00002F30                          2441  
00002F30                          2442  GETBYTE      
00002F30  1E1E                    2443                  MOVE.B   (A6)+,D7    
00002F32  6B00 001A               2444                  BMI     ADD_NEGATIVE
00002F36  6000 001E               2445                  BRA     PRINT_BRANCHING
00002F3A                          2446  GETWORD                
00002F3A  3E1E                    2447                  MOVE.W   (A6)+,D7
00002F3C  6B00 0010               2448                  BMI     ADD_NEGATIVE
00002F40  6000 0014               2449                  BRA     PRINT_BRANCHING
00002F44                          2450  GETLONG                
00002F44                          2451                  
00002F44  2E1E                    2452                  MOVE.L   (A6)+,D7
00002F46  6B00 0006               2453                  BMI     ADD_NEGATIVE
00002F4A  6000 000A               2454                  BRA     PRINT_BRANCHING
00002F4E                          2455                  
00002F4E  4EB8 2A58               2456  ADD_NEGATIVE    JSR     PRINTNEG
00002F52  6000 0002               2457                  BRA    PRINT_BRANCHING
00002F56                          2458  
00002F56                          2459  
00002F56  0C39 0001 00003426      2460  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002F5E  6700 001C               2461                  BEQ    PRINT_BYTE    
00002F62  0C39 0002 00003426      2462                  CMP.B #2,SIZE   ;WORD
00002F6A  6700 0062               2463                  BEQ    PRINT_WORD
00002F6E  0C39 0003 00003426      2464                  CMP.B  #3,SIZE  ;LONG
00002F76  6700 00D4               2465                  BEQ    PRINT_LONG
00002F7A  60DA                    2466                  BRA    PRINT_BRANCHING
00002F7C                          2467  
00002F7C                          2468  
00002F7C                          2469  
00002F7C                          2470  
00002F7C                          2471                  
00002F7C                          2472  **** BYTE DATA PRINTING***********************
00002F7C  4241                    2473  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002F7E                          2474                 
00002F7E                          2475  
00002F7E  BEBC 0000000F           2476                 CMP.L   #$F,D7              
00002F84  6F00 0006               2477                 BLE     BYTE_ONE_LOOP                  
00002F88  6000 000E               2478                 BRA     READ_BYTE
00002F8C                          2479  
00002F8C                          2480  BYTE_ONE_LOOP
00002F8C  13FC 0001 00003458      2481                  MOVE.B  #1,NUMBER_OF_HEX  
00002F94  6000 0002               2482                  BRA     READ_BYTE
00002F98                          2483      
00002F98                          2484  READ_BYTE                           
00002F98  0C39 0000 00003458      2485      CMP.B   #0,NUMBER_OF_HEX               
00002FA0  6700 0014               2486      BEQ     COPYBYTE
00002FA4                          2487      
00002FA4  123C 0030               2488      MOVE.B  #$30,D1             
00002FA8  103C 0006               2489      MOVE.B  #6,D0               
00002FAC  4E4F                    2490      TRAP    #15
00002FAE                          2491  
00002FAE  5339 00003458           2492      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002FB4  60E2                    2493      BRA     READ_BYTE           ; LOOP
00002FB6                          2494      
00002FB6                          2495  COPYBYTE
00002FB6  2207                    2496      MOVE.L  D7,D1               ; COPY DATA 
00002FB8  143C 0010               2497      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002FBC  103C 000F               2498      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002FC0  4E4F                    2499      TRAP    #15
00002FC2  13FC 0000 00003458      2500      MOVE.B  #0,NUMBER_OF_HEX
00002FCA  6000 0156               2501      BRA  EA_FINISH
00002FCE                          2502  
00002FCE                          2503  
00002FCE                          2504  
00002FCE                          2505  
00002FCE                          2506  
00002FCE                          2507  ******PRINT WORD DATA******************
00002FCE  4241                    2508  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002FD0                          2509                 
00002FD0                          2510  
00002FD0  BEBC 0000000F           2511                 CMP.L   #$F,D7              
00002FD6  6F00 001A               2512                 BLE     WORD_ONE_LOOP
00002FDA  BEBC 000000FF           2513                 CMP.L   #$FF,D7              
00002FE0  6F00 001C               2514                 BLE     WORD_TWO_LOOP
00002FE4  BEBC 00000FFF           2515                 CMP.L   #$FFF,D7              
00002FEA  6F00 001E               2516                 BLE     WORD_THREE_LOOP                  
00002FEE  6000 0026               2517                 BRA     READ_WORD
00002FF2                          2518  
00002FF2                          2519  WORD_ONE_LOOP
00002FF2  13FC 0001 00003458      2520                  MOVE.B  #1,NUMBER_OF_HEX  
00002FFA  6000 001A               2521                  BRA     READ_WORD
00002FFE                          2522                  
00002FFE                          2523  WORD_TWO_LOOP
00002FFE  13FC 0002 00003458      2524                  MOVE.B  #2,NUMBER_OF_HEX  
00003006  6000 000E               2525                  BRA     READ_WORD
0000300A                          2526                  
0000300A                          2527  WORD_THREE_LOOP
0000300A  13FC 0003 00003458      2528                  MOVE.B  #3,NUMBER_OF_HEX  
00003012  6000 0002               2529                  BRA     READ_WORD                
00003016                          2530      
00003016                          2531  READ_WORD                           
00003016  0C39 0000 00003458      2532      CMP.B   #0,NUMBER_OF_HEX               
0000301E  6700 0014               2533      BEQ     COPYWORD
00003022                          2534      
00003022  123C 0030               2535      MOVE.B  #$30,D1             
00003026  103C 0006               2536      MOVE.B  #6,D0               
0000302A  4E4F                    2537      TRAP    #15
0000302C                          2538  
0000302C  5339 00003458           2539      SUBI.B  #1,NUMBER_OF_HEX              
00003032  60E2                    2540      BRA     READ_WORD                   ; LOOP
00003034                          2541  
00003034                          2542  COPYWORD
00003034  2207                    2543      MOVE.L  D7,D1               ; COPY DATA 
00003036  143C 0010               2544      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
0000303A  103C 000F               2545      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
0000303E  4E4F                    2546      TRAP    #15
00003040  13FC 0000 00003458      2547      MOVE.B  #0,NUMBER_OF_HEX
00003048  6000 00D8               2548      BRA  EA_FINISH
0000304C                          2549  
0000304C                          2550  ****************PRINT LONG DATA*****************
0000304C  4241                    2551  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
0000304E                          2552                 
0000304E                          2553  
0000304E  BEBC 0000000F           2554                 CMP.L   #$F,D7              
00003054  6F00 0042               2555                 BLE     LONG_ONE_LOOP
00003058  BEBC 000000FF           2556                 CMP.L   #$FF,D7              
0000305E  6F00 0044               2557                 BLE     LONG_TWO_LOOP
00003062  BEBC 00000FFF           2558                 CMP.L   #$FFF,D7              
00003068  6F00 0046               2559                 BLE     LONG_THREE_LOOP
0000306C  BEBC 0000FFFF           2560                 CMP.L   #$FFFF,D7              
00003072  6F00 0048               2561                 BLE     LONG_FOUR_LOOP
00003076  BEBC 000FFFFF           2562                 CMP.L   #$FFFFF,D7              
0000307C  6F00 004A               2563                 BLE     LONG_FIVE_LOOP
00003080  BEBC 00FFFFFF           2564                 CMP.L   #$FFFFFF,D7              
00003086  6F00 004C               2565                 BLE     LONG_SIX_LOOP
0000308A  BEBC 0FFFFFFF           2566                 CMP.L   #$FFFFFFF,D7              
00003090  6F00 004E               2567                 BLE     LONG_SEVEN_LOOP                  
00003094  6000 0056               2568                 BRA     READ_LONG
00003098                          2569  
00003098                          2570  LONG_ONE_LOOP
00003098  13FC 0001 00003458      2571                  MOVE.B  #1,NUMBER_OF_HEX  
000030A0  6000 004A               2572                  BRA     READ_LONG
000030A4                          2573                  
000030A4                          2574  LONG_TWO_LOOP
000030A4  13FC 0002 00003458      2575                  MOVE.B  #2,NUMBER_OF_HEX  
000030AC  6000 003E               2576                  BRA     READ_LONG
000030B0                          2577                  
000030B0                          2578  LONG_THREE_LOOP
000030B0  13FC 0003 00003458      2579                  MOVE.B  #3,NUMBER_OF_HEX  
000030B8  6000 0032               2580                  BRA     READ_LONG                
000030BC                          2581  LONG_FOUR_LOOP
000030BC  13FC 0004 00003458      2582                  MOVE.B  #4,NUMBER_OF_HEX  
000030C4  6000 0026               2583                  BRA     READ_LONG
000030C8                          2584                  
000030C8                          2585  LONG_FIVE_LOOP
000030C8  13FC 0005 00003458      2586                  MOVE.B  #5,NUMBER_OF_HEX  
000030D0  6000 001A               2587                  BRA     READ_LONG
000030D4                          2588                  
000030D4                          2589  LONG_SIX_LOOP
000030D4  13FC 0006 00003458      2590                  MOVE.B  #6,NUMBER_OF_HEX  
000030DC  6000 000E               2591                  BRA     READ_LONG
000030E0                          2592  LONG_SEVEN_LOOP
000030E0  13FC 0007 00003458      2593                  MOVE.B  #7,NUMBER_OF_HEX  
000030E8  6000 0002               2594                  BRA     READ_LONG
000030EC                          2595  
000030EC                          2596       
000030EC                          2597  READ_LONG                           
000030EC  0C39 0000 00003458      2598      CMP.B   #0,NUMBER_OF_HEX               
000030F4  6700 0014               2599      BEQ     COPYLONG
000030F8  123C 0030               2600      MOVE.B  #$30,D1             
000030FC  103C 0006               2601      MOVE.B  #6,D0               
00003100  4E4F                    2602      TRAP    #15
00003102                          2603  
00003102  5339 00003458           2604      SUBI.B  #1,NUMBER_OF_HEX               
00003108  60E2                    2605      BRA     READ_LONG                   ; LOOP
0000310A                          2606  
0000310A                          2607  COPYLONG
0000310A  2207                    2608      MOVE.L  D7,D1               ; COPY DATA 
0000310C  143C 0010               2609      MOVE.B  #16,D2              ; USIGN BASE TO 16
00003110  103C 000F               2610      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00003114  4E4F                    2611      TRAP    #15
00003116  13FC 0000 00003458      2612      MOVE.B  #0,NUMBER_OF_HEX
0000311E  6000 0002               2613      BRA  EA_FINISH
00003122                          2614  
00003122                          2615    
00003122                          2616  
00003122  4E75                    2617  EA_FINISH      RTS
00003124                          2618  
00003124                          2619  
00003124                          2620  
00003124                          2621  
00003124                          2622  ************************************************
00003124                          2623  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
00003124                          2624  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
00003124                          2625  ************************************************
00003124                          2626  REGISTER_NUMBER_TO_DECIMAL 
00003124  B67C 0000               2627                             CMP.W       #REG_0,D3
00003128  6700 0046               2628                             BEQ         RG0
0000312C  B67C 0001               2629                             CMP.W       #REG_1,D3
00003130  6700 0046               2630                             BEQ         RG1
00003134  B67C 0002               2631                             CMP.W       #REG_2,D3
00003138  6700 0046               2632                             BEQ         RG2
0000313C  B67C 0003               2633                             CMP.W       #REG_3,D3
00003140  6700 0046               2634                             BEQ         RG3
00003144  B67C 0004               2635                             CMP.W       #REG_4,D3
00003148  6700 0046               2636                             BEQ         RG4
0000314C  B67C 0005               2637                             CMP.W       #REG_5,D3
00003150  6700 0046               2638                             BEQ         RG5
00003154  B67C 0006               2639                             CMP.W       #REG_6,D3
00003158  6700 0046               2640                             BEQ         RG6
0000315C  B67C 0007               2641                             CMP.W       #REG_7,D3
00003160  6700 0046               2642                             BEQ         RG7
00003164  13FC 0001 0000343D      2643                             MOVE.B      #BAD_FLAG,STATE
0000316C  4EF8 2DD8               2644                             JMP         CONTINUE_EA
00003170                          2645   
00003170  1A3C 0000               2646  RG0    MOVE.B   #0,D5
00003174  4EF8 2DD8               2647         JMP      Continue_EA
00003178  1A3C 0001               2648  RG1    MOVE.B   #1,D5
0000317C  4EF8 2DD8               2649         JMP      Continue_EA
00003180  1A3C 0002               2650  RG2    MOVE.B   #2,D5
00003184  4EF8 2DD8               2651         JMP      Continue_EA
00003188  1A3C 0003               2652  RG3    MOVE.B   #3,D5
0000318C  4EF8 2DD8               2653         JMP      Continue_EA
00003190  1A3C 0004               2654  RG4    MOVE.B   #4,D5
00003194  4EF8 2DD8               2655         JMP      Continue_EA
00003198  1A3C 0005               2656  RG5    MOVE.B   #5,D5
0000319C  4EF8 2DD8               2657         JMP      Continue_EA
000031A0  1A3C 0006               2658  RG6    MOVE.B   #6,D5
000031A4  4EF8 2DD8               2659         JMP      Continue_EA
000031A8  1A3C 0007               2660  RG7    MOVE.B   #7,D5
000031AC  4EF8 2DD8               2661         JMP      Continue_EA 
000031B0                          2662      
000031B0                          2663  ;------------------------------------------------
000031B0                          2664      
000031B0                          2665  Float   DS.L 1 #0
000031B4                          2666  
000031B4                          2667  ValOne    DS.B 1 #0
000031B5                          2668  ValTwo    DS.B 1 #0
000031B6                          2669  ValThree    DS.B 1 #0
000031B7                          2670  ValFour    DS.B 1 #0
000031B8                          2671  ValFive    DS.B 1 #0
000031B9                          2672  ValSix    DS.B 1 #0
000031BA                          2673  ValSeven    DS.B 1 #0
000031BB                          2674  ValEight    DS.B 1 #0
000031BC                          2675  
000031BC                          2676  Addsum DS.W 1 #0
000031BE                          2677  CarryBit DS.B 1 #0   
000031BF                          2678  
000031BF                          2679  Trailers DS.B 1 #0
000031C0                          2680  Source DS.L 1 #0
000031C4                          2681  Destination DS.L 1 #0
000031C8                          2682  
000031C8                          2683          ;generic command lines
000031C8= 57 65 6C 63 6F 6D ...   2684  WELCOME DC.B 'Welcome to our decoder',CR,LF,0
000031E1= 50 6C 65 61 73 65 ...   2685  USERPAGEBREAK DC.B 'Please Press enter to see next 25 codes',0
00003209= 4E 75 6D 62 65 72 ...   2686  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
00003235= 53 65 63 6F 6E 64 ...   2687  OUTOFORDER DC.B    'Second Num lower than the first Num, please reenter second Num',CR,LF,0
00003276= 50 6C 65 61 73 65 ...   2688  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory address, perferablly in 8 byte form: ',0 
000032B9= 50 6C 65 61 73 65 ...   2689  MESSAGESECONDADRESS DC.B    'Please enter ending memory address, perferablly in 8 byte form: ',0 
000032FA= 59 6F 75 20 68 61 ...   2690  FINALMESSAGE1    DC.B    'You have reached the end of the program',CR,LF,0
00003324= 50 6C 65 61 73 65 ...   2691  FINALMESSAGE2    DC.B    'Please enter 0 to exit, or 1 to restart: ',0
0000334E= 45 78 69 74 69 6E ...   2692  GOODBYEMESSAGE    DC.B    'Exiting, have a good rest of your day',CR,LF,0
00003376= 20 0D 0A 00             2693  CLEAR DC.B      ' ',CR,LF,0
0000337A                          2694  
0000337A                          2695          ;the collection of actual command lines to print
0000337A                          2696  CommandPrinter    DS.B 1 #0
0000337B                          2697  CommandDetail    DS.B 1 #0
0000337C= 4D 4F 56 45 00          2698  PMOVE DC.B      'MOVE',0
00003381= 4D 4F 56 45 4D 00       2699  PMOVEM DC.B      'MOVEM',0
00003387= 4D 4F 56 45 41 00       2700  PMOVEA DC.B      'MOVEA',0
0000338D= 4D 4F 56 45 51 00       2701  PMOVEQ DC.B      'MOVEQ',0
00003393= 4E 4F 50 00             2702  PNOP DC.B      'NOP',0
00003397= 4C 45 41 00             2703  PLEA DC.B      'LEA',0
0000339B= 4E 4F 54 00             2704  PNOT DC.B      'NOT',0
0000339F= 4A 53 52 00             2705  PJSR DC.B      'JSR',0
000033A3= 52 54 53 00             2706  PRTS DC.B      'RTS',0
000033A7= 42 47 54 00             2707  PBGT DC.B      'BGT',0
000033AB= 42 45 51 00             2708  PBEQ DC.B      'BEQ',0
000033AF= 42 4C 45 00             2709  PBLE DC.B      'BLE',0
000033B3= 42 52 41 00             2710  PBRA DC.B      'BRA',0
000033B7= 4F 52 00                2711  POR DC.B      'OR',0
000033BA= 53 55 42 00             2712  PSUB DC.B      'SUB',0
000033BE= 41 4E 44 00             2713  PAND DC.B      'AND',0
000033C2= 41 44 44 00             2714  PADD DC.B      'ADD',0
000033C6= 41 44 44 41 00          2715  PADDA DC.B      'ADDA',0
000033CB= 41 44 44 51 00          2716  PADDQ DC.B      'ADDQ',0
000033D0= 4C 53 4C 00             2717  PLSL DC.B      'LSL',0
000033D4= 4C 53 52 00             2718  PLSR DC.B      'LSR',0
000033D8= 41 53 52 00             2719  PASR DC.B      'ASR',0
000033DC= 41 53 4C 00             2720  PASL DC.B      'ASL',0
000033E0= 52 4F 4C 00             2721  PROL DC.B      'ROL',0
000033E4= 52 4F 52 00             2722  PROR DC.B      'ROR',0
000033E8                          2723  
000033E8= 44 41 54 41 00          2724  PDATA   DC.B    'DATA',0
000033ED= 49 4E 56 41 4C 49 ...   2725  PINVALIDEA  DC.B    'INVALID EA',0
000033F8                          2726  
000033F8= 00                      2727  INPUT   DC.B    0
000033F9                          2728  
000033FA= 00000000                2729  STARTINGADDRESS     DC.L 0
000033FE= 00000000                2730  CURRENTADDRESS      DC.L 0
00003402= 00000000                2731  ENDINGADDRESS       DC.L 0
00003406= 0000                    2732  CYCLECOUNTER        DC.W 0
00003408= 0000                    2733  COMMANDDATA         DC.W 0
0000340A= 00                      2734  Bits                DC.B 0
0000340B                          2735  
0000340B                          2736          ;the sizes to print
0000340C                          2737  SizeValue           DS.L 1 #0
00003410= 2E 42 20 00             2738  PB DC.B      '.B ',0
00003414= 2E 57 20 00             2739  PW DC.B      '.W ',0
00003418= 2E 4C 20 00             2740  PL DC.B      '.L ',0
0000341C                          2741  
0000341C                          2742  ;----- ADDED FOR THE OP CODE PART
0000341C                          2743  
0000341C= 00                      2744  DEST_REG        DC.B    0
0000341D= 00                      2745  DEST_MODE       DC.B    0
0000341E                          2746  
0000341E= 00                      2747  SRC_MODE        DC.B    0
0000341F= 00                      2748  SRC_REG         DC.B    0
00003420                          2749  
00003420= 00                      2750  TEMP_MODE       DC.B    0
00003421= 00                      2751  TEMP_REG        DC.B    0
00003422                          2752  
00003422                          2753  DATA_FIELD      DS.L    1 #0
00003426= 00                      2754  SIZE            DC.B    0
00003427                          2755  
00003427= 20 00                   2756  CLRSPOT         DC.B    ' ',0
00003429= 23 00                   2757  HASH            DC.B    '#',0
0000342B= 24 00                   2758  DOLLARSIGN      DC.B    '$',0
0000342D= 2C 00                   2759  COMA            DC.B    ',',0
0000342F= 2B 00                   2760  PLUS            DC.B    '+',0
00003431= 2D 00                   2761  NEG             DC.B    '-',0
00003433= 28 00                   2762  OPEN            DC.B    '(',0
00003435= 29 00                   2763  CLOSED          DC.B    ')',0
00003437                          2764  
00003437= 00                      2765  INDEX           DC.B    0
00003438                          2766  
00003438= 00                      2767  XBIT            DC.B    0
00003439= 00                      2768  INVALID_EA      DC.B    0
0000343A                          2769  
0000343A= 00                      2770  DstMode         DC.B    0
0000343B= 00                      2771  TempMode        DC.B    0
0000343C= 00                      2772  SrcMode         DC.B    0
0000343D                          2773  
0000343D                          2774  ;------ ADDED FOR EA CODE PART
0000343D                          2775  
0000343D  =00000000               2776  REG_0  EQU         %000
0000343D  =00000001               2777  REG_1  EQU         %001
0000343D  =00000002               2778  REG_2  EQU         %010
0000343D  =00000003               2779  REG_3  EQU         %011
0000343D  =00000004               2780  REG_4  EQU         %100
0000343D  =00000005               2781  REG_5  EQU         %101
0000343D  =00000006               2782  REG_6  EQU         %110
0000343D  =00000007               2783  REG_7  EQU         %111
0000343D                          2784  
0000343D  =00000000               2785  MODE000       EQU         %000                   * MODE Dn
0000343D  =00000001               2786  MODE001       EQU         %001                   * MODE An
0000343D  =00000002               2787  MODE010       EQU         %010                   * MODE (An)
0000343D  =00000003               2788  MODE011       EQU         %011                   * MODE (An)+
0000343D  =00000004               2789  MODE100       EQU         %100                   * MODE -(An)
0000343D  =00000007               2790  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
0000343D                          2791  
0000343D= 00                      2792  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
0000343E  =00000001               2793  BAD_FLAG      EQU         1
0000343E= 00008000                2794  word          DC.L        $8000
00003442                          2795  SIZE_IL       DS.L        1             ;SIZE ISOLATION
00003446                          2796  DR            DS.L        1             ;DIRECTION ISOLATION
0000344A                          2797  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
0000344E                          2798  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
00003452                          2799  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
00003456                          2800  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
00003457                          2801  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
00003458= 00                      2802  NUMBER_OF_HEX DC.B        0
00003459                          2803  dRG           DS.B        1
0000345A                          2804  dMODE         DS.B        1
0000345B                          2805  sRG           DS.B        1
0000345C                          2806  
0000345C= 00000100                2807  print_buffer  DC.l       $100
00003460                          2808  
00003460                          2809  ******************************MOVE and MOVEA values******************
00003460                          2810  
00003460= 00                      2811  OpName            DC.B     $00                     * 0 = MOVE, 1 = MOVEA
00003461                          2812  
00003462= 0000                    2813  myWord              DC.W     $0000                   * 16 bit instruction Word
00003464= 00                      2814  ID                DC.B     $00                     * First 4 bit value ID
00003465= FF                      2815  DstReg            DC.B     $FF                     * Destination Register Value D3
00003466= FF                      2816  DstMod            DC.B     $FF                     * Destination Mode Value D2
00003467= FF                      2817  SrcReg            DC.B     $FF                     * Source Register Value D3 JUMP EA_start
00003468= FF                      2818  SrcMod            DC.B     $FF                     * Source Register Mode D2
00003469                          2819  
0000346A= 00000000                2820  opDta1            DC.L     $00000000               * Data value one (most likely source)
0000346E= FF                      2821  opDta1T           DC.B     $FF                     * Data value one type ($FF not set, 0=byte, 1=word, 2=long)
00003470= 00000000                2822  opDta2            DC.L     $00000000               * Data value two (most likely destination)
00003474= FF                      2823  opDta2T           DC.B     $FF                     * Data value two type ($FF not set, 0=byte, 1=word, 2=long)
00003475                          2824  
00003475= 01                      2825  Err               DC.B     $01                     * Error byte, 1 = OK, 0 = Error                 
00003476                          2826  
00003476= 2C 00                   2827  Comma             DC.B     ',', 0
00003478                          2828  
00003478                          2829  ***** ASCII VALUES FOR EA CHARACTERS**************
00003478  =00000044               2830  D                       EQU      $44
00003478  =00000041               2831  A                       EQU      $41
00003478                          2832  
00003478                          2833      
00003478                          2834      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2EC0
ADDRESS_REGISTER    2E30
ADDRESS_REGISTER_DECREMENT  2E98
ADDRESS_REGISTER_DIRECT  2E4C
ADDRESS_REGISTER_INCREMENT  2E70
ADDSUM              31BC
ADD_NEGATIVE        2F4E
BADVAL              3209
BAD_FLAG            1
BITS                340A
BYTE_ONE_LOOP       2F8C
CARRYBIT            31BE
CEHCK_DESTREG       15FE
CHAR1               1178
CHAR2               1190
CHARSUB             11A8
CHECK_ADD           1A62
CHECK_ADDA          1A7E
CHECK_ADDQ          1902
CHECK_AND           1C2A
CHECK_DATA_NEG      2D48
CHECK_DESTINATION   2B6C
CHECK_DESTMOD       15EE
CHECK_DEST_REG      2BA4
CHECK_ID_AS         20C8
CHECK_ID_LS         20E8
CHECK_ID_RO         20D8
CHECK_JSR           1880
CHECK_LEA           16AA
CHECK_MOVE          1422
CHECK_MOVEM_1000    17A6
CHECK_MOVEM_1100    1858
CHECK_MOVEQ         1ABC
CHECK_NOP_JSR_RTS   1860
CHECK_NOP_RTS       18E2
CHECK_NOT           172E
CHECK_OR            1B1A
CHECK_SOURCE        2C6C
CHECK_SOURCE_REG    2CA4
CHECK_SRCMOD        1520
CHECK_SRCREG        1530
CHECK_SUB           1BA8
CHECK_TEMP          2BEC
CHECK_TEMP_REG      2C24
CHECK_XBIT          2CEC
CLEAR               3376
CLEARMR             2D5A
CLOSED              3435
CLOSINGSTATEMENTS   2B5A
CLRSPOT             3427
CMP_SIZE            14D2
COMA                342D
COMMA               3476
COMMANDDATA         3408
COMMANDDETAIL       337B
COMMANDPRINTER      337A
COMPARE_0100        1672
COMPARE_0110        199E
COMPARE_1101        19CE
COMPARE_1110        1CB8
COMPARE_GROUPS      13B2
CONTINUE_A_I_A      2EC4
CONTINUE_EA         2DD8
COPYBYTE            2FB6
COPYLONG            310A
COPYWORD            3034
CR                  D
CURRENTADDRESS      33FE
CYCLECOUNTER        3406
D                   44
DATA_FIELD          3422
DATA_REGISTER       2E14
DESTINATION         31C4
DEST_MODE           341D
DEST_REG            341C
DMODE               345A
DOLLARSIGN          342B
DONE                11D2
DR                  3446
DRG                 3459
DRN                 3457
DSTMOD              3466
DSTMODE             343A
DSTREG              3465
DS_MOVE             14AE
DS_MOVEA            14BA
DTADSTLNG           1630
DTADSTWRD           161A
DTASRCIMD           1558
DTASRCIMDB          1580
DTASRCIMDL          15AC
DTASRCIMDW          1596
DTASRCLNG           15D8
DTASRCWRD           15C2
EA_FINISH           3122
EA_START            2DC6
EIGHT_SHIFT         25BA
ENDING              1324
ENDINGADDRESS       3402
ENTRYLOOP           11C0
ERR                 3475
ERROR               1646
EXIT                1220
FINALMESSAGE1       32FA
FINALMESSAGE2       3324
FLOAT               31B0
FORMAT_DATA         2D34
G14_MEMS            1F70
G14_MEMS_AS         2062
G14_MEMS_LS         1F96
G14_MEMS_RO         1FFC
G14_TYPE            344A
GAS_EA              1F1A
GETBYTE             2F30
GETLONG             2F44
GETWORD             2F3A
GLS_EA              1D82
GOODBYE             136E
GOODBYEMESSAGE      334E
GRO_EA              1E4E
G_AS                1EA4
G_LS                1D0C
G_RO                1DD8
HASH                3429
ID                  3464
IMMIDIATE_REGISTER  2EE8
INDEX               3437
INPUT               33F8
INT2                1158
INTSUB              1170
INVALID             11B0
INVALID_EA          3439
IR_IL               344E
IS_EIGHT            25C8
LARGERISSUE         127E
LARGERTHAN          129C
LF                  A
LOADDATAONE         101E
LOADDATATWO         1070
LONG_ADDRESSING     2F22
LONG_FIVE_LOOP      30C8
LONG_FOUR_LOOP      30BC
LONG_ONE_LOOP       3098
LONG_SEVEN_LOOP     30E0
LONG_SIX_LOOP       30D4
LONG_THREE_LOOP     30B0
LONG_TWO_LOOP       30A4
LOOP_READ_BITS      1394
MEMORYGRABBER       12A8
MESSAGEFIRSTADRESS  3276
MESSAGESECONDADRESS  32B9
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
MYDONE              1652
MYWORD              3462
NEG                 3431
NUMBER_OF_HEX       3458
OPDTA1              346A
OPDTA1T             346E
OPDTA2              3470
OPDTA2T             3474
OPEN                3433
OPNAME              3460
OUTOFORDER          3235
PADD                33C2
PADDA               33C6
PADDQ               33CB
PAGEBREAK           1302
PAND                33BE
PASL                33DC
PASR                33D8
PB                  3410
PBEQ                33AB
PBGT                33A7
PBLE                33AF
PBRA                33B3
PDATA               33E8
PINVALIDEA          33ED
PJSR                339F
PL                  3418
PLEA                3397
PLSL                33D0
PLSR                33D4
PLUS                342F
PMOVE               337C
PMOVEA              3387
PMOVEM              3381
PMOVEQ              338D
PNOP                3393
PNOT                339B
POR                 33B7
PRINTADD            28D6
PRINTADDA           2904
PRINTADDQ           276A
PRINTAND            28A8
PRINTB              29F8
PRINTBEQ            27E2
PRINTBGT            27C2
PRINTBLE            27D2
PRINTBRA            27F2
PRINTCLOSED         2A82
PRINTCLRSPOT        2A22
PRINTCOMA           2A30
PRINTDOLLARSIGN     2A4A
PRINTHASH           2A3E
PRINTINVALIDEA      2ABC
PRINTJSR            2722
PRINTL              2A14
PRINTLEA            2698
PRINTMOVE           25D2
PRINTMOVEA          2624
PRINTMOVEM          2686
PRINTMOVEQ          2802
PRINTNEG            2A58
PRINTNOP            2676
PRINTNOT            26EA
PRINTOPEN           2A74
PRINTOR             284C
PRINTPLUS           2A66
PRINTRTS            275A
PRINTSUB            287A
PRINTW              2A06
PRINT_BRANCHING     2F56
PRINT_BUFFER        345C
PRINT_BYTE          2F7C
PRINT_DATA          2A90
PRINT_DN_TO_EA      2B12
PRINT_EA_TO_DN      2ACA
PRINT_LONG          304C
PRINT_WORD          2FCE
PROL                33E0
PROR                33E4
PRTS                33A3
PR_AS               244A
PR_ASR              2532
PR_ASR_EA           227C
PR_ASR_MEM          2130
PR_G14_MEMS_AS      20F8
PR_G14_MEMS_LS      215C
PR_G14_MEMS_RO      21C0
PR_G_AS_EA          2224
PR_G_LS_EA          22C0
PR_G_RO_EA          235C
PR_LS               249C
PR_LSR              24EE
PR_LSR_EA           2318
PR_LSR_MEM          2194
PR_RO               23F8
PR_ROR              2576
PR_ROR_EA           23B4
PR_ROR_MEM          21F8
PSUB                33BA
PW                  3414
READ_BITS           138A
READ_BYTE           2F98
READ_LONG           30EC
READ_WORD           3016
REGISTER_NUMBER_TO_DECIMAL  3124
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2D32
RG0                 3170
RG1                 3178
RG2                 3180
RG3                 3188
RG4                 3190
RG5                 3198
RG6                 31A0
RG7                 31A8
R_CHECK_DEST        2BE2
R_CHECK_SOURCE      2CE2
R_CHECK_TEMP        2C62
SET                 13AA
SET_INVALID_EA      2D52
SIZE                3426
SIZEPRINT           2998
SIZEPRINT2          29BC
SIZEPRINT3          29E0
SIZESPLIT           296A
SIZEVALUE           340C
SIZE_B              14F6
SIZE_IL             3442
SIZE_L              1512
SIZE_W              1504
SOURCE              31C0
SRCMOD              3468
SRCMODE             343C
SRCREG              3467
SRC_MODE            341E
SRC_REG             341F
SRG                 345B
SRN                 3456
START               1000
STARTCHECK          1140
STARTINGADDRESS     33FA
STATE               343D
STOP                2B66
STOREADRESSES       1290
S_COUNT             3452
TEMPMODE            343B
TEMP_MODE           3420
TEMP_REG            3421
TEMP_TO_DEST        2CFE
TEMP_TO_SRC         2D18
TRAILERS            31BF
USERPAGEBREAK       31E1
VAL1                10C6
VAL2                10D0
VAL3                10E0
VAL4                10F0
VAL5                1100
VAL6                1110
VAL7                1120
VAL8                1130
VALEIGHT            31BB
VALFIVE             31B8
VALFOUR             31B7
VALONE              31B4
VALSEVEN            31BA
VALSIX              31B9
VALTHREE            31B6
VALTWO              31B5
WELCOME             31C8
WORD                343E
WORD_ADDRESSING     2F14
WORD_ONE_LOOP       2FF2
WORD_THREE_LOOP     300A
WORD_TWO_LOOP       2FFE
XBIT                3438
