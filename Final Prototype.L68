00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/9/2021 4:11:03 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 000033FF             13      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001006  103C 000E                 14      MOVE.B   #14,D0     ; moves #14 into data register D0
0000100A  4E4F                      15      TRAP     #15
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 000031AA             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22  * TODO: a welcome message with format message 
0000101E                            23      
0000101E                            24  LOADDATAONE
0000101E  43F9 00003258             25      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001024  103C 000E                 26      MOVE.B   #14,D0     ; moves #14 into data register D0
00001028  4E4F                      27      TRAP     #15       ; Displays message via trap 14    
0000102A                            28      
0000102A  43F9 000033CF             29      LEA     INPUT,A1
00001030  103C 0002                 30      MOVE.B  #2,D0 *takes the string of what the user enters
00001034  4E4F                      31      TRAP    #15
00001036                            32      
00001036  4280                      33      CLR.L   D0
00001038                            34      
00001038                            35      * TODO: check if the input if odd - invalid imput
00001038                            36      
00001038                            37  
00001038                            38      
00001038  1A3C 0000                 39      MOVE.B  #0,D5
0000103C                            40      
0000103C  13D9 0000A000             41      MOVE.B (A1)+,$A000
00001042  13D9 0000A010             42      MOVE.B (A1)+,$A010
00001048  13D9 0000A020             43      MOVE.B (A1)+,$A020
0000104E  13D9 0000A030             44      MOVE.B (A1)+,$A030
00001054  13D9 0000A040             45      MOVE.B (A1)+,$A040
0000105A  13D9 0000A050             46      MOVE.B (A1)+,$A050
00001060  13D9 0000A060             47      MOVE.B (A1)+,$A060
00001066  13D9 0000A070             48      MOVE.B (A1)+,$A070
0000106C                            49      
0000106C  6000 0058                 50      BRA VAL1
00001070                            51  
00001070                            52  LOADDATATWO    
00001070  43F9 0000329B             53      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001076  103C 000E                 54      MOVE.B   #14,D0     ; moves #14 into data register D0
0000107A  4E4F                      55      TRAP     #15       ; Displays message via trap 14    
0000107C                            56      
0000107C  43F9 000033CF             57      LEA     INPUT,A1
00001082  103C 0002                 58      MOVE.B  #2,D0 *takes the string of what the user enters
00001086  4E4F                      59      TRAP    #15
00001088                            60      
00001088  1A3C 0000                 61      MOVE.B  #0,D5
0000108C                            62      
0000108C  13D9 0000A000             63      MOVE.B (A1)+,$A000
00001092  13D9 0000A010             64      MOVE.B (A1)+,$A010
00001098  13D9 0000A020             65      MOVE.B (A1)+,$A020
0000109E  13D9 0000A030             66      MOVE.B (A1)+,$A030
000010A4  13D9 0000A040             67      MOVE.B (A1)+,$A040
000010AA  13D9 0000A050             68      MOVE.B (A1)+,$A050
000010B0  13D9 0000A060             69      MOVE.B (A1)+,$A060
000010B6  13D9 0000A070             70      MOVE.B (A1)+,$A070
000010BC                            71      
000010BC  43F9 0000329B             72      LEA MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010C2                            73      
000010C2  6000 0002                 74      BRA VAL1
000010C6                            75  
000010C6                            76      
000010C6                            77  VAL1    
000010C6  1839 0000A000             78      MOVE.B $A000,D4
000010CC  6000 0072                 79      BRA STARTCHECK
000010D0  13C4 0000A000             80  VAL2    MOVE.B D4,$A000
000010D6  1839 0000A010             81      MOVE.B $A010,D4
000010DC  6000 0062                 82      BRA STARTCHECK
000010E0  13C4 0000A010             83  VAL3    MOVE.B D4,$A010
000010E6  1839 0000A020             84      MOVE.B $A020,D4
000010EC  6000 0052                 85      BRA STARTCHECK
000010F0  13C4 0000A020             86  VAL4    MOVE.B D4,$A020
000010F6  1839 0000A030             87      MOVE.B $A030,D4
000010FC  6000 0042                 88      BRA STARTCHECK
00001100  13C4 0000A030             89  VAL5    MOVE.B D4,$A030
00001106  1839 0000A040             90      MOVE.B $A040,D4
0000110C  6000 0032                 91      BRA STARTCHECK
00001110  13C4 0000A040             92  VAL6    MOVE.B D4,$A040
00001116  1839 0000A050             93      MOVE.B $A050,D4
0000111C  6000 0022                 94      BRA STARTCHECK
00001120  13C4 0000A050             95  VAL7    MOVE.B D4,$A050
00001126  1839 0000A060             96      MOVE.B $A060,D4
0000112C  6000 0012                 97      BRA STARTCHECK
00001130  13C4 0000A060             98  VAL8    MOVE.B D4,$A060
00001136  1839 0000A070             99      MOVE.B $A070,D4
0000113C  6000 0002                100      BRA STARTCHECK
00001140                           101    
00001140                           102  STARTCHECK  
00001140  B83C 0030                103      CMP.B   #48,D4
00001144  6D00 006A                104      BLT INVALID
00001148  B83C 0030                105      CMP.B   #48,D4
0000114C  6700 0022                106      BEQ INTSUB
00001150  B83C 0030                107      CMP.B   #48,D4
00001154  6E00 0002                108      BGT INT2
00001158                           109      
00001158                           110  
00001158                           111  INT2 
00001158                           112      
00001158  B83C 0039                113      CMP.B   #57,D4
0000115C  6D00 0012                114      BLT INTSUB
00001160  B83C 0039                115      CMP.B   #57,D4
00001164  6700 000A                116      BEQ INTSUB
00001168  B83C 0039                117      CMP.B   #57,D4
0000116C  6E00 000A                118      BGT CHAR1
00001170                           119      
00001170                           120  INTSUB 
00001170  0404 0030                121      SUB.B #$30,D4
00001174  6000 005C                122      BRA     DONE
00001178                           123  
00001178                           124  CHAR1 
00001178                           125      
00001178  B83C 0041                126      CMP.B   #65,D4
0000117C  6D00 0032                127      BLT INVALID
00001180  B83C 0041                128      CMP.B   #65,D4
00001184  6700 0022                129      BEQ CHARSUB
00001188  B83C 0041                130      CMP.B   #65,D4
0000118C  6E00 0002                131      BGT CHAR2
00001190                           132      
00001190                           133  CHAR2 
00001190                           134      
00001190  B83C 0046                135      CMP.B   #70,D4
00001194  6D00 0012                136      BLT CHARSUB
00001198  B83C 0046                137      CMP.B   #70,D4
0000119C  6700 000A                138      BEQ CHARSUB
000011A0  B83C 0046                139      CMP.B   #70,D4
000011A4  6E00 000A                140      BGT INVALID
000011A8                           141      
000011A8                           142  CHARSUB 
000011A8  0404 0037                143      SUB.B #$37,D4
000011AC  6000 0024                144      BRA DONE
000011B0                           145      
000011B0                           146  INVALID 
000011B0  43F9 000031EB            147      LEA BADVAL,A1
000011B6  103C 000E                148      MOVE.B   #14,D0     ; moves #14 into data register D0
000011BA  4E4F                     149      TRAP     #15       ; Displays message via trap 14
000011BC  6000 0002                150      BRA     ENTRYLOOP
000011C0                           151      
000011C0                           152  ENTRYLOOP
000011C0  B43C 0000                153      CMP.B #0,D2
000011C4  6700 FE58                154      BEQ LOADDATAONE
000011C8  B43C 0001                155      CMP.B #1,D2
000011CC  6700 FEA2                156      BEQ LOADDATATWO
000011D0  4E75                     157      RTS
000011D2                           158      
000011D2                           159  DONE    
000011D2  5205                     160          ADD.B #1,D5
000011D4  BA3C 0000                161          CMP.B #0,D5
000011D8  6700 FEEC                162          BEQ VAL1
000011DC  BA3C 0001                163          CMP.B #1,D5
000011E0  6700 FEEE                164          BEQ VAL2
000011E4  BA3C 0002                165          CMP.B #2,D5
000011E8  6700 FEF6                166          BEQ VAL3
000011EC  BA3C 0003                167          CMP.B #3,D5
000011F0  6700 FEFE                168          BEQ VAL4
000011F4  BA3C 0004                169          CMP.B #4,D5
000011F8  6700 FF06                170          BEQ VAL5
000011FC  BA3C 0005                171          CMP.B #5,D5
00001200  6700 FF0E                172          BEQ VAL6
00001204  BA3C 0006                173          CMP.B #6,D5
00001208  6700 FF16                174          BEQ VAL7
0000120C  BA3C 0007                175          CMP.B #7,D5
00001210  6700 FF1E                176          BEQ VAL8
00001214  BA3C 0008                177          CMP.B #8,D5
00001218  6700 0006                178          BEQ EXIT
0000121C                           179          
0000121C  6000 FF22                180          BRA     STARTCHECK
00001220                           181  
00001220                           182  
00001220                           183  
00001220  13C4 0000A070            184  EXIT    MOVE.B D4,$A070
00001226                           185      
00001226  4284                     186      CLR.L D4
00001228  D839 0000A000            187      ADD.B $A000,D4
0000122E  E98C                     188      LSL.L #4,D4
00001230  D839 0000A010            189      ADD.B $A010,D4
00001236  E98C                     190      LSL.L #4,D4
00001238  D839 0000A020            191      ADD.B $A020,D4
0000123E  E98C                     192      LSL.L #4,D4
00001240  D839 0000A030            193      ADD.B $A030,D4
00001246  E98C                     194      LSL.L #4,D4
00001248  D839 0000A040            195      ADD.B $A040,D4
0000124E  E98C                     196      LSL.L #4,D4
00001250  D839 0000A050            197      ADD.B $A050,D4
00001256  E98C                     198      LSL.L #4,D4
00001258  D839 0000A060            199      ADD.B $A060,D4
0000125E  E98C                     200      LSL.L #4,D4
00001260  D839 0000A070            201      ADD.B $A070,D4
00001266                           202      
00001266  2E04                     203      MOVE.L D4,D7
00001268  4244                     204      CLR D4
0000126A  B43C 0001                205      CMP.B #1,D2
0000126E  6700 0020                206      BEQ STOREADRESSES
00001272  2C07                     207      MOVE.L D7,D6
00001274  143C 0001                208      MOVE.B #1,D2
00001278  7A00                     209      MOVE.L #0,D5
0000127A  6000 FDF4                210      BRA LOADDATATWO
0000127E                           211      
0000127E                           212  ;---------------------------------------------------------
0000127E                           213  
0000127E                           214  LARGERISSUE
0000127E  43F9 00003217            215      LEA     OUTOFORDER,A1
00001284  103C 000E                216      MOVE.B  #14,D0     ; moves #14 into data register D0
00001288  4E4F                     217      TRAP    #15       ; Displays message via trap 14
0000128A  7400                     218      MOVE.L  #0,D2
0000128C  6000 FD90                219      BRA     LOADDATAONE
00001290                           220  
00001290                           221  STOREADRESSES
00001290  23C7 000033D8            222      MOVE.L  D7,ENDINGADDRESS
00001296  23C6 000033D0            223      MOVE.L  D6,STARTINGADDRESS
0000129C                           224  LARGERTHAN    
0000129C  BE86                     225      CMP.L D6,D7
0000129E  6DDE                     226      BLT LARGERISSUE
000012A0  4247                     227      CLR     D7
000012A2  2C79 000033D0            228      MOVE.L   STARTINGADDRESS,A6
000012A8                           229      
000012A8                           230  MEMORYGRABBER
000012A8  43F9 00003358            231      LEA     CLEAR,A1 
000012AE  103C 000E                232      MOVE.B  #14,D0  
000012B2  4E4F                     233      TRAP    #15 
000012B4                           234  
000012B4  2879 000033D8            235      MOVE.L  ENDINGADDRESS,A4
000012BA  BDCC                     236      CMPA.L  A4,A6
000012BC  6C00 0066                237      BGE     ENDING 
000012C0                           238      
000012C0  0C79 0019 000033DC       239      CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
000012C8  6C00 0038                240      BGE     PAGEBREAK
000012CC  5279 000033DC            241      ADD.W   #1,CYCLECOUNTER
000012D2                           242  
000012D2  4EB9 00002D06            243      JSR CLEARMR     * CLEAR MODES AND REGISTERS
000012D8                           244      
000012D8  23CE 000033D4            245      MOVE.L      A6,CURRENTADDRESS   
000012DE  2239 000033D4            246      MOVE.L      CURRENTADDRESS,D1
000012E4  143C 0010                247      MOVE.B      #16,D2
000012E8  103C 000F                248      MOVE.B      #15,D0     ; moves #14 into data register D0
000012EC  4E4F                     249      TRAP        #15  
000012EE                           250      
000012EE  4EB9 000029CE            251      JSR     PRINTCLRSPOT      * print space
000012F4                           252      
000012F4  361E                     253      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012F6  33C3 000033DE            254      MOVE.W      D3, COMMANDDATA
000012FC                           255   
000012FC  6000 00B4                256      BRA         COMPARE_GROUPS
00001300                           257      
00001300  60A6                     258      BRA MEMORYGRABBER
00001302                           259      
00001302                           260  PAGEBREAK
00001302  43F9 000031C3            261      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
00001308  103C 000E                262      MOVE.B   #14,D0     ; moves #14 into data register D0
0000130C  4E4F                     263      TRAP     #15       ; Displays message via trap 14
0000130E  43F9 000033CF            264      LEA     INPUT,A1
00001314  103C 0002                265      MOVE.B  #2,D0 *takes the string of what the user enters
00001318  4E4F                     266      TRAP    #15
0000131A  33FC 0000 000033DC       267      MOVE.W #0,CYCLECOUNTER
00001322  6084                     268      BRA MEMORYGRABBER
00001324                           269   
00001324                           270  ENDING 
00001324  33FC 0000 000033DC       271      MOVE.W #0,CYCLECOUNTER
0000132C  43F9 000032DC            272      LEA     FINALMESSAGE1,A1     * Prints End of Program message
00001332  103C 000E                273      MOVE.B  #14,D0
00001336  4E4F                     274      TRAP    #15
00001338  43F9 00003306            275      LEA     FINALMESSAGE2,A1     * Prints End of Program message
0000133E  103C 000E                276      MOVE.B  #14,D0
00001342  4E4F                     277      TRAP    #15
00001344  43F9 000033CF            278      LEA     INPUT,A1
0000134A  103C 0005                279      MOVE.B  #5,D0 *takes the single charater the user enters
0000134E  4E4F                     280      TRAP    #15
00001350  B23C 0031                281      CMP.B #49,D1
00001354  6700 FCAA                282      BEQ START
00001358  B23C 0030                283      CMP.B #48,D1
0000135C  6700 0010                284      BEQ GOODBYE
00001360  43F9 000031EB            285      LEA     BADVAL,A1     * Prints End of Program message
00001366  103C 000E                286      MOVE.B  #14,D0
0000136A  4E4F                     287      TRAP    #15
0000136C  60B6                     288      BRA ENDING
0000136E                           289  
0000136E                           290  GOODBYE
0000136E  43F9 000033FF            291      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001374  103C 000E                292      MOVE.B   #14,D0     ; moves #14 into data register D0
00001378  4E4F                     293      TRAP     #15  
0000137A  43F9 00003330            294      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
00001380  103C 000E                295      MOVE.B  #14,D0
00001384  4E4F                     296      TRAP    #15
00001386  FFFF FFFF                297      SIMHALT             ; halt simulator   
0000138A                           298      
0000138A                           299  ;-------------------------- OP CODE SECTION -------------------------------
0000138A                           300  
0000138A                           301  READ_BITS
0000138A  4287                     302      CLR.L   D7
0000138C  4284                     303      CLR.L   D4
0000138E  1E39 000033E0            304      MOVE.B  Bits,D7
00001394                           305      
00001394                           306  LOOP_READ_BITS    
00001394  BE3C 0000                307      CMP.B   #0,D7           * counter
00001398  6700 1912                308      BEQ     RETURN
0000139C                           309      
0000139C  E34C                     310      LSL.W   #1,D4           * make space for new bit
0000139E  E34B                     311      LSL.W   #1,D3          
000013A0                           312  
000013A0  6500 0008                313      BCS     SET             * if 1, then branch to SET
000013A4  5307                     314      SUBI.B  #1,D7          
000013A6  4EF8 1394                315      JMP     LOOP_READ_BITS
000013AA                           316  SET
000013AA  5244                     317      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013AC  5307                     318      SUBI.B  #1, D7
000013AE  4EF8 1394                319      JMP     LOOP_READ_BITS  
000013B2                           320      
000013B2                           321  
000013B2                           322  
000013B2                           323  COMPARE_GROUPS              * comapres the 4 bits of the instruction
000013B2  13FC 0004 000033E0       324      MOVE.B  #4,Bits         
000013BA  4EB8 138A                325      JSR     READ_BITS       * get the first 4 bits and store it in D4
000013BE                           326  
000013BE  B87C 0001                327      CMP.W   #%0001,D4      
000013C2  6700 005E                328      BEQ     CHECK_MOVE    * if equal, goes to CHECK_MOVE.B
000013C6                           329      
000013C6  B87C 0002                330      CMP.W   #%0010,D4      
000013CA  6700 0056                331      BEQ     CHECK_MOVE    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
000013CE                           332      
000013CE  B87C 0003                333      CMP.W   #%0011,D4      
000013D2  6700 004E                334      BEQ     CHECK_MOVE    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
000013D6                           335      
000013D6  B87C 0004                336      CMP.W   #%0100,D4      
000013DA  6700 0296                337      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
000013DE                           338      
000013DE  B87C 0005                339      CMP.W   #%0101,D4      
000013E2  6700 0532                340      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
000013E6                           341      
000013E6  B87C 0006                342      CMP.W   #%0110,D4      
000013EA  6700 05AE                343      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
000013EE                           344      
000013EE  B87C 0007                345      CMP.W   #%0111,D4      
000013F2  6700 0698                346      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
000013F6                           347      
000013F6  B87C 0008                348      CMP.W   #%1000,D4      
000013FA  6700 06EE                349      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
000013FE                           350      
000013FE  B87C 0009                351      CMP.W   #%1001,D4      
00001402  6700 075C                352      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
00001406                           353      
00001406  B87C 000C                354      CMP.W   #%1100,D4      
0000140A  6700 07CC                355      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
0000140E                           356      
0000140E  B87C 000D                357      CMP.W   #%1101,D4      
00001412  6700 05B6                358      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
00001416                           359      
00001416  B87C 000E                360      CMP.W   #%1110,D4      
0000141A  6700 0834                361      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
0000141E                           362      
0000141E  6600 18BA                363      BNE     PRINT_DATA      * all other instructions are not supported 
00001422                           364  
00001422                           365  *************************************MOVE MOVEA*************************
00001422                           366  
00001422                           367  CHECK_MOVE
00001422                           368  
00001422  33F9 000033DE 00003432   369      MOVE.W COMMANDDATA, myWord  * grab 16 bit instruction from main           
0000142C                           370      
0000142C                           371      * grab ID (first 4 bits), use D3, D4 as temp
0000142C  3639 00003432            372      MOVE.W  myWord, D3                  
00001432  183C 000C                373      MOVE.B  #12,D4
00001436  E86B                     374      LSR.W   D4,D3                       
00001438  13C3 00003434            375      MOVE.B  D3, ID
0000143E                           376  
0000143E                           377      * grab DestReg (next 3 bits)
0000143E  3639 00003432            378      MOVE.W  myWord, D3
00001444  183C 0004                379      MOVE.B  #4, D4
00001448  E96B                     380      LSL.W   D4, D3                     
0000144A  183C 000D                381      MOVE.B  #13,D4
0000144E  E86B                     382      LSR.W   D4,D3                       
00001450  13C3 00003435            383      MOVE.B  D3, DstReg
00001456                           384  
00001456                           385      * grab DestMod (next 3 bits)
00001456  3639 00003432            386      MOVE.W  myWord, D3                  
0000145C  183C 0007                387      MOVE.B  #7, D4
00001460  E96B                     388      LSL.W   D4, D3                      
00001462  183C 000D                389      MOVE.B  #13,D4
00001466  E86B                     390      LSR.W   D4,D3                       
00001468  13C3 00003436            391      MOVE.B  D3, DstMod
0000146E                           392  
0000146E                           393      * grab SrcReg (next 3 bits)
0000146E  3639 00003432            394      MOVE.W  myWord, D3                  
00001474  183C 000A                395      MOVE.B  #10, D4
00001478  E96B                     396      LSL.W   D4, D3                      
0000147A  183C 000D                397      MOVE.B  #13,D4
0000147E  E86B                     398      LSR.W   D4,D3                       
00001480  13C3 00003438            399      MOVE.B  D3, SrcMod
00001486                           400      
00001486                           401      * grab SrcMod (next 3 bits)
00001486  3639 00003432            402      MOVE.W  myWord, D3                  
0000148C  183C 000D                403      MOVE.B  #13, D4
00001490  E96B                     404      LSL.W   D4, D3                      
00001492  183C 000D                405      MOVE.B  #13,D4
00001496  E86B                     406      LSR.W   D4,D3                       
00001498  13C3 00003437            407      MOVE.B  D3, SrcReg
0000149E                           408  
0000149E                           409  
0000149E                           410      * check if MOVE or MOVEA using DestMod
0000149E  0C39 0001 00003436       411      CMP.B   #1, DstMod                  * DestMod == 1: MOVEA
000014A6  6700 0012                412      BEQ     DS_MOVEA                  
000014AA  6000 0002                413      BRA     DS_MOVE                     * Else: MOVE
000014AE                           414      
000014AE                           415  DS_MOVE        
000014AE  13FC 0000 00003430       416      MOVE.B  #0,OpName                   * OpName = 0 for MOVE
000014B6  6000 001A                417      BRA     CMP_SIZE
000014BA                           418  
000014BA                           419  DS_MOVEA        
000014BA  0C39 0001 00003434       420      CMP.B   #1, ID
000014C2  6700 0182                421      BEQ     ERROR                       * MOVEA cannot have ID = 1
000014C6  13FC 0001 00003430       422      MOVE.B  #01,OpName                  * OpName = 1 for MOVEA
000014CE  6000 0002                423      BRA     CMP_SIZE
000014D2                           424      
000014D2                           425  CMP_SIZE   
000014D2  0C39 0001 00003434       426      CMP.B   #1, ID                    
000014DA  6700 001A                427      BEQ     SIZE_B
000014DE  0C39 0003 00003434       428      CMP.B   #3, ID                    
000014E6  6700 001C                429      BEQ     SIZE_W
000014EA  0C39 0002 00003434       430      CMP.B   #2, ID                   
000014F2  6700 001E                431      BEQ     SIZE_L
000014F6                           432      
000014F6                           433  
000014F6                           434  SIZE_B        
000014F6  23FC 00000001 000033E2   435      MOVE.L  #1,SizeValue                 * Set size to 1=Byte
00001500  6000 001E                436      BRA     CHECK_SRCMOD
00001504                           437      
00001504                           438  SIZE_W         
00001504  23FC 00000002 000033E2   439      MOVE.L  #2,SizeValue                 * Set size to 2=Word
0000150E  6000 0010                440      BRA     CHECK_SRCMOD
00001512                           441      
00001512                           442  SIZE_L         
00001512  23FC 00000003 000033E2   443      MOVE.L  #3,SizeValue                 * Set size to 3=Long
0000151C  6000 0002                444      BRA     CHECK_SRCMOD
00001520                           445  
00001520                           446  CHECK_SRCMOD
00001520  0C39 0007 00003438       447      CMP.B   #7, SrcMod                * Check if source mode is 7
00001528  6700 0006                448      BEQ     CHECK_SRCREG              * Check source register
0000152C  6000 00C0                449      BRA     CHECK_DESTMOD             * Source not 7, now check destination Mod
00001530                           450      
00001530                           451  CHECK_SRCREG    
00001530  0C39 0000 00003437       452      CMP.B   #0, SrcReg                * Check is source register is 0
00001538  6700 0088                453      BEQ     DtaSrcWrd                 * Load next word
0000153C  0C39 0001 00003437       454      CMP.B   #1, SrcReg                * Check if source register is 1
00001544  6700 0092                455      BEQ     DtaSrcLng                 * Load next long
00001548  0C39 0004 00003437       456      CMP.B   #4, SrcReg                * Check if source register is 4 (immediate value)
00001550  6700 0006                457      BEQ     DtaSrcImd                 * Load first word into word one
00001554  6000 00F0                458      BRA     ERROR                     * Invalid register value
00001558                           459  
00001558                           460  DtaSrcImd    
00001558  0C39 0001 00003434       461      CMP.B   #1, ID                    * ID = 1 - size is byte
00001560  6700 001E                462      BEQ     DtaSrcImdB                * Load next byte
00001564  0C39 0002 00003434       463      CMP.B   #2, ID                    * ID = 2 - size is word
0000156C  6700 0028                464      BEQ     DtaSrcImdW                * Load next word
00001570  0C39 0003 00003434       465      CMP.B   #3, ID                    * ID = 3 - size is long
00001578  6700 0032                466      BEQ     DtaSrcImdL                * Load next long
0000157C  6000 00C8                467      BRA     ERROR                     * Invalid opID (this should never happen)  
00001580                           468      
00001580                           469      
00001580                           470  DtaSrcImdB   
00001580  4283                     471      CLR.L   D3
00001582  361A                     472      MOVE.W  (A2)+,D3
00001584  23C3 0000343A            473      MOVE.L  D3,opDta1
0000158A  13FC 0001 0000343E       474      MOVE.B  #1, opDta1T               * Set Data 1 type as 1=Byte
00001592  6000 005A                475      BRA     CHECK_DESTMOD             * Check destination mode
00001596                           476  
00001596                           477  DtaSrcImdW  
00001596  4283                     478      CLR.L   D3
00001598  361A                     479      MOVE.W  (A2)+,D3
0000159A  23C3 0000343A            480      MOVE.L  D3,opDta1
000015A0  13FC 0002 0000343E       481      MOVE.B  #2, opDta1T               * Set Data 1 type as 2=Word
000015A8  6000 0044                482      BRA     CHECK_DESTMOD             * Check destination mode
000015AC                           483  
000015AC                           484  DtaSrcImdL   
000015AC  4283                     485      CLR.L   D3
000015AE  261A                     486      MOVE.L  (A2)+,D3
000015B0  23C3 0000343A            487      MOVE.L  D3,opDta1
000015B6  13FC 0003 0000343E       488      MOVE.B  #3, opDta1T               * Set Data 1 type as 3=Long
000015BE  6000 002E                489      BRA     CHECK_DESTMOD             * Check destination mode
000015C2                           490  
000015C2                           491  DtaSrcWrd    
000015C2  4283                     492      CLR.L   D3
000015C4  361A                     493      MOVE.W  (A2)+,D3
000015C6  23C3 0000343A            494      MOVE.L  D3,opDta1
000015CC  13FC 0002 0000343E       495      MOVE.B  #2, opDta1T               * Set Data 1 type as 2=Word
000015D4  6000 0018                496      BRA     CHECK_DESTMOD             * Check destination mode
000015D8                           497  
000015D8                           498  DtaSrcLng                        
000015D8  4283                     499      CLR.L   D3
000015DA  261A                     500      MOVE.L  (A2)+,D3
000015DC  23C3 0000343A            501      MOVE.L  D3,opDta1
000015E2  13FC 0003 0000343E       502      MOVE.B  #3, opDta1T               * Set Data 1 type as 3=Long
000015EA  6000 0002                503      BRA     CHECK_DESTMOD             * Check destination mode
000015EE                           504  
000015EE                           505  CHECK_DESTMOD
000015EE  0C39 0007 00003436       506      CMP.B   #7, DstMod                * Check if destination mode is 7
000015F6  6700 0006                507      BEQ     CEHCK_DESTREG             * Check destination register
000015FA  6000 0056                508      BRA     myDONE                      * Destination not 7, done with data
000015FE                           509                      
000015FE                           510  CEHCK_DESTREG    
000015FE  0C39 0000 00003435       511      CMP.B   #0, DstReg                * Check if destination register is 0
00001606  6700 0012                512      BEQ     DtaDstWrd                 * Load next word
0000160A  0C39 0001 00003435       513      CMP.B   #1, DstReg                * Check if destination register is 1
00001612  6700 001C                514      BEQ     DtaDstLng                 * Load next long
00001616  6000 002E                515      BRA     ERROR                     * Invalid registration Mode
0000161A                           516  
0000161A                           517  DtaDstWrd    
0000161A  4283                     518      CLR.L   D3
0000161C  361A                     519      MOVE.W  (A2)+,D3
0000161E  23C3 00003440            520      MOVE.L  D3,opDta2
00001624  13FC 0001 00003444       521      MOVE.B  #1, opDta2T               * Set Data2 type as 1=Word
0000162C  6000 0024                522      BRA     myDONE
00001630                           523      
00001630                           524  DtaDstLng    
00001630  4283                     525      CLR.L   D3
00001632  261A                     526      MOVE.L  (A2)+,D3
00001634  23C3 00003440            527      MOVE.L  D3,opDta2
0000163A  13FC 0002 00003444       528      MOVE.B  #2, opDta2T               * Set Data2 type as 2=Long
00001642  6000 000E                529      BRA     myDONE
00001646                           530  
00001646                           531  ERROR
00001646  13FC 0000 00003445       532      MOVE.B  #0, ERR                  * Error 1 = A-OK; 0 = Invalid EA
0000164E  6000 FC58                533      BRA     MEMORYGRABBER
00001652                           534  
00001652                           535  myDONE
00001652  13FC 0001 00003445       536       MOVE.B  #1, ERR                 * Clear error flag
0000165A  0C39 0000 00003430       537       CMP.B   #0, OpName              * 0 = OpName for MOVE
00001662  6700 0F0C                538       BEQ     PRINTMOVE
00001666                           539  
00001666  0C39 0001 00003430       540       CMP.B   #1, OpName              * 1 = OpName for MOVEA
0000166E  6700 0F52                541       BEQ     PRINTMOVEA
00001672                           542       *JSR     SIZESPLIT               * Print size, variable SizeValue has to be set
00001672                           543            
00001672                           544  
00001672                           545  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
00001672                           546  
00001672                           547  COMPARE_0100
00001672  0803 000C                548      BTST.L  #$0C,D3             * compare bit 8 for LEA
00001676  6600 0032                549      BNE     CHECK_LEA
0000167A                           550      
0000167A  13FC 0004 000033E0       551      MOVE.B  #4,Bits
00001682  4EB8 138A                552      JSR     READ_BITS
00001686                           553      
00001686  B87C 0006                554      CMP.W   #%0110,D4
0000168A  6700 00AA                555      BEQ     CHECK_NOT           * goes to NOT
0000168E                           556      
0000168E  B87C 0008                557      CMP.W   #%1000,D4
00001692  6700 0126                558      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
00001696                           559      
00001696  B87C 000C                560      CMP.W   #%1100,D4       
0000169A  6700 01CC                561      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
0000169E                           562      
0000169E  B87C 000E                563      CMP.W   #%1110,D4
000016A2  6700 01CC                564      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
000016A6                           565      
000016A6  6600 1632                566      BNE     PRINT_DATA
000016AA                           567  
000016AA                           568  CHECK_LEA
000016AA  13FC 0003 000033E0       569      MOVE.B  #3,Bits  
000016B2  4EB8 138A                570      JSR     READ_BITS 
000016B6  13C4 000033F2            571      MOVE.B  D4,DEST_REG  
000016BC                           572  
000016BC  13FC 0003 000033E0       573      MOVE.B  #3,Bits
000016C4  4EB8 138A                574      JSR     READ_BITS
000016C8  B83C 0007                575      CMP.B   #7,D4               * if mode = 111 = continue
000016CC  6600 160C                576      BNE     PRINT_DATA
000016D0                           577  
000016D0  13FC 0003 000033E0       578      MOVE.B  #3,Bits
000016D8  4EB8 138A                579      JSR     READ_BITS 
000016DC  13C4 000033F4            580      MOVE.B  D4,SRC_MODE           
000016E2                           581  
000016E2  13FC 0003 000033E0       582      MOVE.B  #3,Bits 
000016EA  4EB8 138A                583      JSR     READ_BITS 
000016EE  13C4 000033F5            584      MOVE.B  D4,SRC_REG 
000016F4                           585      
000016F4                           586      *MOVE.B  #3,CmdIndex         
000016F4  4EB9 00002BE6            587      JSR     CHECK_SOURCE                * Check Source Mode
000016FA                           588      
000016FA  0C39 000F 0000340C       589      CMP.B   #$F,SrcMode         * If SrcMode is invalid
00001702  6700 15D6                590      BEQ     PRINT_DATA
00001706                           591      
00001706  0C39 0002 0000340C       592      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
0000170E  6700 0F2A                593      BEQ     PRINTLEA        
00001712                           594      
00001712  0C39 0007 0000340C       595      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
0000171A  6700 0F1E                596      BEQ     PRINTLEA    
0000171E                           597      
0000171E  0C39 0008 0000340C       598      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
00001726  6700 0F12                599      BEQ     PRINTLEA
0000172A                           600              
0000172A  13FC 0001 00003409       601      MOVE.B  #1,INVALID_EA   
00001732  6000 0F06                602      BRA     PRINTLEA    
00001736                           603      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001736                           604  
00001736                           605      
00001736                           606  CHECK_NOT 
00001736                           607      * TODO : TEST
00001736  13FC 0002 000033E0       608      MOVE.B  #2,Bits             
0000173E  4EB8 138A                609      JSR     READ_BITS             
00001742  13C4 000033FC            610      MOVE.B  D4,SIZE              * Stores size 
00001748                           611      
00001748  B83C 0003                612      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
0000174C  6700 158C                613      BEQ     PRINT_DATA          * Else, If 11 size invalid
00001750                           614      
00001750  13FC 0003 000033E0       615      MOVE.B  #3,Bits       
00001758  4EB8 138A                616      JSR     READ_BITS       
0000175C  13C4 000033F3            617      MOVE.B  D4,DEST_MODE             
00001762                           618  
00001762  13FC 0003 000033E0       619      MOVE.B  #3,Bits       
0000176A  4EB8 138A                620      JSR     READ_BITS
0000176E  13C4 000033F2            621      MOVE.B  D4,DEST_REG             
00001774                           622      
00001774                           623      *MOVE.B  #2,CmdIndex 
00001774  4EB9 00002AE6            624      JSR     CHECK_DESTINATION               * Check Destination Mode
0000177A                           625  
0000177A  0C39 000F 0000340A       626      CMP.B   #$F,DstMode         * If DstMode is invalid
00001782  6700 1556                627      BEQ     PRINT_DATA      
00001786                           628  
00001786  0C39 000E 0000340A       629      CMP.B   #$E,DstMode         * If DstMode is invalid EA
0000178E  13FC 0001 00003409       630      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001796                           631      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001796                           632  
00001796  0C39 0001 0000340A       633      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
0000179E  13FC 0001 00003409       634      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000017A6                           635      
000017A6  0C39 000B 0000340A       636      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
000017AE  13FC 0001 00003409       637      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000017B6  6000 0EC8                638      BRA     PRINTNOT
000017BA                           639  
000017BA                           640  CHECK_MOVEM_1000 
000017BA                           641      * TODO : TEST WITH EA 
000017BA  13FC 0001 000033E0       642      MOVE.B  #1,Bits
000017C2  4EB8 138A                643      JSR     READ_BITS
000017C6  B83C 0001                644      CMP.B   #%1,D4
000017CA  6600 150E                645      BNE     PRINT_DATA
000017CE                           646      
000017CE  13FC 0001 000033E0       647      MOVE.B  #1,Bits
000017D6  4EB8 138A                648      JSR     READ_BITS
000017DA  13C4 000033FC            649      MOVE.B  D4,SIZE
000017E0                           650      
000017E0                           651    *  JSR     SETSIZE1
000017E0                           652  
000017E0  13FC 0003 000033E0       653      MOVE.B  #3,Bits
000017E8  4EB8 138A                654      JSR     READ_BITS
000017EC  13C4 000033F6            655      MOVE.B  D4,TEMP_MODE
000017F2                           656      
000017F2  13FC 0003 000033E0       657      MOVE.B  #3,Bits
000017FA  4EB8 138A                658      JSR     READ_BITS
000017FE  13C4 000033F7            659      MOVE.B  D4,TEMP_REG
00001804                           660      
00001804  4EB9 00002B66            661      JSR     CHECK_TEMP
0000180A  4EB9 00002C66            662      JSR     CHECK_XBIT
00001810                           663      
00001810  0C39 000F 0000340B       664      CMP.B   #$F,TempMode        * If TempMode is invalid
00001818  6700 14C0                665      BEQ     PRINT_DATA              * Print DATA instead
0000181C                           666  
0000181C  0C39 000E 0000340B       667      CMP.B   #$E,TempMode        * If TempMode is invalid EA
00001824                           668    *  BEQ     SETINVEA           * 
00001824  13FC 0001 00003409       669      MOVE.B  #1,INVALID_EA
0000182C                           670     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
0000182C                           671  
0000182C  0C39 0002 0000340B       672      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
00001834  6700 0DEE                673      BEQ     PRINTMOVEM              
00001838                           674  
00001838  0C39 0007 0000340B       675      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
00001840  6700 0DE2                676      BEQ     PRINTMOVEM   
00001844                           677  
00001844  0C39 0008 0000340B       678      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
0000184C  6700 0DD6                679      BEQ     PRINTMOVEM   
00001850                           680                 
00001850  0C39 0004 0000340A       681      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
00001858  6700 0DCA                682      BEQ     PRINTMOVEM   
0000185C                           683  
0000185C  0C39 0003 0000340C       684      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
00001864  6700 0DBE                685      BEQ     PRINTMOVEM   
00001868                           686     * BRA     SETINVEA
00001868                           687      
00001868                           688  CHECK_MOVEM_1100     
00001868  13FC 0001 00003408       689      MOVE.B      #1,XBIT
00001870                           690      
00001870                           691  
00001870                           692  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
00001870  13FC 0002 000033E0       693      MOVE.B  #2,Bits
00001878  4EB8 138A                694      JSR     READ_BITS
0000187C                           695      
0000187C  B83C 0002                696      CMP.B   #%10,D4
00001880  6700 000E                697      BEQ     CHECK_JSR           * goes to JSR
00001884                           698      
00001884  B83C 0001                699      CMP.B   #%01,D4 
00001888  6700 006C                700      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
0000188C                           701  
0000188C  6600 144C                702      BNE     PRINT_DATA
00001890                           703  
00001890                           704  CHECK_JSR       * TODO: TEST
00001890                           705  
00001890  13FC 0003 000033E0       706      MOVE.B  #3,Bits
00001898  4EB8 138A                707      JSR     READ_BITS
0000189C  13C4 000033F3            708      MOVE.B  D4,DEST_MODE
000018A2                           709      
000018A2  13FC 0003 000033E0       710      MOVE.B  #3,Bits
000018AA  4EB8 138A                711      JSR     READ_BITS
000018AE  13C4 000033F2            712      MOVE.B  D4,DEST_REG
000018B4                           713      
000018B4                           714      *MOVE.B  #4,INDEX
000018B4  4EB9 00002AE6            715      JSR     CHECK_DESTINATION
000018BA                           716      
000018BA  0C39 000F 0000340A       717      CMP.B   #$F,DstMode         * if invalid print DATA
000018C2  6700 1416                718      BEQ     PRINT_DATA
000018C6                           719      
000018C6  0C39 0002 0000340A       720      CMP.B   #$2,DstMode         * if DstMode 010        
000018CE  6700 0DDC                721      BEQ     PRINTJSR
000018D2                           722      
000018D2  0C39 0007 0000340A       723      CMP.B   #$7,DstMode         * if DstMode 111 + 000
000018DA  6700 0DD0                724      BEQ     PRINTJSR
000018DE                           725      
000018DE  0C39 0008 0000340A       726      CMP.B   #$8,DstMode         * if DstMode 111 + 001
000018E6  6700 0DC4                727      BEQ     PRINTJSR
000018EA                           728      
000018EA  13FC 0001 00003409       729      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
000018F2                           730      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000018F2  6000 0DB8                731      BRA     PRINTJSR
000018F6                           732      
000018F6                           733  CHECK_NOP_RTS
000018F6  13FC 0006 000033E0       734      MOVE.B  #6,Bits
000018FE  4EB8 138A                735      JSR     READ_BITS
00001902                           736      
00001902  B83C 0031                737      CMP.B   #%110001,D4
00001906  6700 0D0C                738      BEQ     PRINTNOP            
0000190A                           739      
0000190A  B83C 0035                740      CMP.B   #%110101,D4
0000190E  6700 0DC8                741      BEQ     PRINTRTS       
00001912                           742          
00001912  6600 13C6                743      BNE     PRINT_DATA
00001916                           744  
00001916                           745  ************************** ADDQ ***************************
00001916                           746  CHECK_ADDQ
00001916  13FC 0003 000033E0       747      MOVE.B  #3,Bits 
0000191E  4EB8 138A                748      JSR     READ_BITS
00001922  13C4 000033F8            749      MOVE.B  D4,DATA_FIELD
00001928                           750      
00001928  4EB9 00002CAE            751      JSR     FORMAT_DATA     
0000192E                           752      
0000192E  13FC 0001 000033E0       753      MOVE.B  #1,Bits
00001936  4EB8 138A                754      JSR     READ_BITS
0000193A  B83C 0000                755      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
0000193E  6600 139A                756      BNE     PRINT_DATA          * goes to PRINT_DATA
00001942                           757  
00001942  13FC 0002 000033E0       758      MOVE.B  #2,Bits
0000194A  4EB8 138A                759      JSR     READ_BITS
0000194E  13C4 000033FC            760      MOVE.B  D4,SIZE             * store size into SIZE
00001954  0C39 0003 000033FC       761      CMP.B   #%11,SIZE           * cannot be #%11
0000195C  6700 137C                762      BEQ     PRINT_DATA
00001960                           763  
00001960  13FC 0003 000033E0       764      MOVE.B  #3,Bits
00001968  4EB8 138A                765      JSR     READ_BITS
0000196C  13C4 000033F3            766      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
00001972                           767      
00001972  13FC 0003 000033E0       768      MOVE.B  #3,Bits
0000197A  4EB8 138A                769      JSR     READ_BITS
0000197E  13C4 000033F2            770      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
00001984                           771      
00001984  4EB9 00002AE6            772      JSR     CHECK_DESTINATION    
0000198A                           773      
0000198A  0C39 000F 000033F3       774      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
00001992  6700 1346                775      BEQ     PRINT_DATA         
00001996                           776      
00001996                           777   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
00001996                           778   *   BEQ     INVALID_EA          * TODO 
00001996                           779      
00001996                           780   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
00001996                           781   *   BEQ     INVALID_EA         * TODO
00001996                           782      
00001996  6000 0D50                783      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
0000199A                           784  
0000199A                           785  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
0000199A                           786  COMPARE_0110  * TODO : store condition and 8-bit displacement 
0000199A  13FC 0004 000033E0       787      MOVE.B  #4,Bits 
000019A2  4EB8 138A                788      JSR     READ_BITS
000019A6                           789      
000019A6  B83C 000E                790      CMP.B   #%1110,D4
000019AA  6700 0D88                791      BEQ     PRINTBGT 
000019AE                           792      
000019AE  B83C 000F                793      CMP.B   #%1111,D4
000019B2  6700 0DAC                794      BEQ     PRINTBLE 
000019B6                           795      
000019B6  B83C 0007                796      CMP.B   #%0111,D4
000019BA  6700 0D8E                797      BEQ     PRINTBEQ  
000019BE                           798      
000019BE  B83C 0000                799      CMP.B   #%0000,D4
000019C2  6700 0DB2                800      BEQ     PRINTBRA
000019C6                           801      
000019C6  6000 1312                802      BRA     PRINT_DATA 
000019CA                           803  
000019CA                           804  ************************** ADD, ADDA **********************
000019CA                           805  COMPARE_1101    * ADD and ADDA 
000019CA  13FC 0003 000033E0       806      MOVE.B  #3,Bits
000019D2  4EB8 138A                807      JSR     READ_BITS
000019D6  13C4 000033F7            808      MOVE.B  D4,TEMP_REG
000019DC  13C4 000033F2            809      MOVE.B  D4,DEST_REG
000019E2                           810      
000019E2  13FC 0001 000033E0       811      MOVE.B  #1,Bits
000019EA  4EB8 138A                812      JSR     READ_BITS
000019EE  13C4 00003408            813      MOVE.B  D4,XBit
000019F4                           814      
000019F4  13FC 0002 000033E0       815      MOVE.B  #2,Bits
000019FC  4EB8 138A                816      JSR     READ_BITS
00001A00  13C4 000033FC            817      MOVE.B  D4,SIZE
00001A06                           818  
00001A06  4EB9 00002C66            819      JSR     CHECK_XBIT
00001A0C                           820  
00001A0C  13FC 0003 000033E0       821      MOVE.B  #3,Bits
00001A14  4EB8 138A                822      JSR     READ_BITS
00001A18  13C4 000033F6            823      MOVE.B  D4,TEMP_MODE
00001A1E                           824      
00001A1E  13FC 0003 000033E0       825      MOVE.B  #3,Bits
00001A26  4EB8 138A                826      JSR     READ_BITS
00001A2A  13C4 000033F7            827      MOVE.B  D4,TEMP_REG   
00001A30                           828      
00001A30  4EB9 00002B66            829      JSR     CHECK_TEMP   
00001A36  0C39 000F 0000340B       830      CMP.B   #$F, TempMode
00001A3E  6700 129A                831      BEQ     PRINT_DATA
00001A42                           832    *  CMP.B   #$E,TempMode    
00001A42                           833    *  BEQ     INVALID_EA              * TODO
00001A42                           834      
00001A42  0C39 0003 000033FC       835      CMP.B   #%11,SIZE 
00001A4A  6700 0020                836      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
00001A4E                           837      
00001A4E  4EF9 00001A54            838      JMP          CHECK_ADD
00001A54                           839      
00001A54                           840  CHECK_ADD    
00001A54  0C39 0000 000033FC       841      CMP.B   #%00,SIZE
00001A5C  6600 000A                842      BNE     CCHECK_ADD  
00001A60                           843      
00001A60  0C39 0001 0000340B       844      CMP.B   #$1,TempMode       * if TempMode is invalid
00001A68                           845    *  BEQ     INVALID_EA              * TODO 
00001A68                           846  CCHECK_ADD
00001A68  6000 0DCC                847      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
00001A6C                           848  
00001A6C                           849  
00001A6C                           850  CHECK_ADDA
00001A6C  13FC 0001 000033FC       851      MOVE.B  #%01,SIZE
00001A74                           852      
00001A74                           853  *    JSR     CHECK_SOUCE   
00001A74                           854  *    CMP.B   #$F,SrcMde
00001A74                           855  *    BEQ     PRINT_DATA
00001A74                           856  *    CMP.B   #$E,SrcMode
00001A74                           857  *    BEQ     INVALID_EA                  * TODO
00001A74                           858     
00001A74  0C39 0000 00003408       859      CMP.B   #%0,XBIT
00001A7C  6700 0DDA                860      BEQ     PRINTADDA   
00001A80                           861                 
00001A80  13FC 0002 000033FC       862      MOVE.B  #%10,SIZE
00001A88  6000 0DCE                863      BRA     PRINTADDA 
00001A8C                           864   
00001A8C                           865  ************************** MOVEQ ********************************
00001A8C                           866  CHECK_MOVEQ
00001A8C  13FC 0003 000033E0       867      MOVE.B  #3,Bits         * read next 3 bits
00001A94  4EB8 138A                868      JSR     READ_BITS       * store them in D4
00001A98  13C4 000033F2            869      MOVE.B  D4,DEST_REG     * move register value (used in EA)
00001A9E  1439 000033F2            870      MOVE.B  DEST_REG,D2
00001AA4  163C 0000                871      MOVE.B  #%000,D3
00001AA8                           872      
00001AA8  13FC 0001 000033E0       873      MOVE.B  #1,Bits         * read the next bit into D4
00001AB0  4EB8 138A                874      JSR     READ_BITS
00001AB4  B83C 0000                875      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
00001AB8  6600 1220                876      BNE     PRINT_DATA      * goes to PRINT_DATA ?
00001ABC                           877      
00001ABC  13FC 0008 000033E0       878      MOVE.B  #8,Bits        
00001AC4  4EB8 138A                879      JSR     READ_BITS
00001AC8  23C4 000033F8            880      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
00001ACE                           881      
00001ACE  13FC 0007 000033F4       882      MOVE.B  #%111,SRC_MODE  * 
00001AD6  13FC 0004 000033F5       883      MOVE.B  #%100,SRC_REG   * 
00001ADE  13FC 0004 00002916       884      MOVE.B  #4,SizeSplit
00001AE6  6000 0CA4                885      BRA     PRINTMOVEQ 
00001AEA                           886      
00001AEA                           887  ************************* OR *********************************
00001AEA                           888  CHECK_OR
00001AEA  13FC 0003 000033E0       889      MOVE.B  #3,Bits
00001AF2  4EB8 138A                890      JSR     READ_BITS
00001AF6  13C4 000033F7            891      MOVE.B  D4,TEMP_REG
00001AFC                           892      
00001AFC  13FC 0001 000033E0       893      MOVE.B  #1,Bits
00001B04  4EB8 138A                894      JSR     READ_BITS
00001B08  13C4 00003408            895      MOVE.B  D4,XBit
00001B0E                           896      
00001B0E  13FC 0002 000033E0       897      MOVE.B  #2,Bits
00001B16  4EB8 138A                898      JSR     READ_BITS
00001B1A  13C4 000033FC            899      MOVE.B  D4,SIZE
00001B20                           900  
00001B20  4EB9 00002C66            901      JSR     CHECK_XBIT
00001B26                           902      
00001B26  13FC 0003 000033E0       903      MOVE.B  #3,Bits
00001B2E  4EB8 138A                904      JSR     READ_BITS
00001B32  13C4 000033F6            905      MOVE.B  D4,TEMP_MODE    * store TEMP_MODE
00001B38                           906      
00001B38  13FC 0003 000033E0       907      MOVE.B  #3,Bits
00001B40  4EB8 138A                908      JSR     READ_BITS
00001B44  13C4 000033F7            909      MOVE.B  D4,TEMP_REG    * store TEMP_REG    
00001B4A                           910      
00001B4A  4EB9 00002B66            911      JSR     CHECK_TEMP   
00001B50  0C39 000F 0000340B       912      CMP.B   #$F, TempMode
00001B58  6700 1180                913      BEQ     PRINT_DATA
00001B5C                           914    *  CMP.B   #$E,TempMode    
00001B5C                           915    *  BEQ     INVALID_EA              * TODO
00001B5C                           916      
00001B5C  6000 0C72                917      BRA     PRINTOR
00001B60                           918  
00001B60                           919  ********************* SUB **********************
00001B60                           920  CHECK_SUB
00001B60  13FC 0003 000033E0       921      MOVE.B  #3,Bits
00001B68  4EB8 138A                922      JSR     READ_BITS
00001B6C  13C4 000033F7            923      MOVE.B  D4,TEMP_REG
00001B72                           924      
00001B72  13FC 0001 000033E0       925      MOVE.B  #1,Bits
00001B7A  4EB8 138A                926      JSR     READ_BITS
00001B7E  13C4 00003408            927      MOVE.B  D4,XBit
00001B84                           928      
00001B84  13FC 0002 000033E0       929      MOVE.B  #2,Bits
00001B8C  4EB8 138A                930      JSR     READ_BITS
00001B90  13C4 000033FC            931      MOVE.B  D4,SIZE
00001B96                           932  
00001B96                           933    *  MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
00001B96                           934          
00001B96                           935    *  MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001B96  4EB9 00002C66            936      JSR     CHECK_XBIT
00001B9C                           937      
00001B9C  13FC 0003 000033E0       938      MOVE.B  #3,Bits
00001BA4  4EB8 138A                939      JSR     READ_BITS
00001BA8  13C4 000033F6            940      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001BAE                           941      
00001BAE  13FC 0003 000033E0       942      MOVE.B  #3,Bits
00001BB6  4EB8 138A                943      JSR     READ_BITS
00001BBA  13C4 000033F7            944      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001BC0                           945      
00001BC0                           946      *MOVE.B  #7,INDEX
00001BC0  4EB9 00002B66            947      JSR     CHECK_TEMP   
00001BC6  0C39 000F 0000340B       948      CMP.B   #$F, TempMode
00001BCE  6700 110A                949      BEQ     PRINT_DATA
00001BD2                           950    *  CMP.B   #$E,TempMode    
00001BD2                           951    *  BEQ     INVALID_EA              * TODO
00001BD2                           952      
00001BD2  4EF9 000027F2            953      JMP     PRINTSUB
00001BD8                           954  
00001BD8                           955  
00001BD8                           956  ******************* AND ***********************
00001BD8                           957  CHECK_AND
00001BD8  13FC 0003 000033E0       958      MOVE.B  #3,Bits
00001BE0  4EB8 138A                959      JSR     READ_BITS
00001BE4  13C4 000033F7            960      MOVE.B  D4,TEMP_REG
00001BEA                           961      
00001BEA  13FC 0001 000033E0       962      MOVE.B  #1,Bits
00001BF2  4EB8 138A                963      JSR     READ_BITS
00001BF6  13C4 00003408            964      MOVE.B  D4,XBit
00001BFC                           965      
00001BFC  13FC 0002 000033E0       966      MOVE.B  #2,Bits
00001C04  4EB8 138A                967      JSR     READ_BITS
00001C08  13C4 000033FC            968      MOVE.B  D4,SIZE
00001C0E                           969  
00001C0E  4EB9 00002C66            970      JSR     CHECK_XBIT
00001C14                           971      
00001C14  13FC 0003 000033E0       972      MOVE.B  #3,Bits
00001C1C  4EB8 138A                973      JSR     READ_BITS
00001C20  13C4 000033F6            974      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001C26                           975      
00001C26  13FC 0003 000033E0       976      MOVE.B  #3,Bits
00001C2E  4EB8 138A                977      JSR     READ_BITS
00001C32  13C4 000033F7            978      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001C38                           979      
00001C38  4EB9 00002B66            980      JSR     CHECK_TEMP   
00001C3E  0C39 000F 0000340B       981      CMP.B   #$F, TempMode
00001C46  6700 1092                982      BEQ     PRINT_DATA
00001C4A                           983    *  CMP.B   #$E,TempMode    
00001C4A                           984    *  BEQ     INVALID_EA              * TODO
00001C4A                           985      
00001C4A  4EF9 00002814            986      JMP     PRINTAND
00001C50                           987  
00001C50                           988      
00001C50                           989  ******************************************
00001C50                           990  *        THE GROUP 14
00001C50                           991  *        LS,AS AND ROTATION
00001C50                           992  *        
00001C50                           993  ******************************************
00001C50                           994  COMPARE_1110 
00001C50  4245                     995              CLR D5     ;STORING ISOLATED BITS
00001C52  4244                     996              CLR D4
00001C54  3839 000033DE            997              MOVE.W COMMANDDATA,D4
00001C5A  2A04                     998              MOVE.L   D4,D5
00001C5C  0285 000000C0            999              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001C62  EC8D                    1000              LSR.L    #6,D5            ;NORMALIZE
00001C64  13C5 000033FC           1001              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001C6A  BA3C 0003               1002              CMP.B    #%11,D5    
00001C6E  6700 0298               1003              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001C72  4245                    1004              CLR D5
00001C74  2A04                    1005              MOVE.L   D4,D5      
00001C76  0285 00000018           1006              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001C7C  E68D                    1007              LSR.L   #3,D5
00001C7E  BA3C 0001               1008              CMP.B   #%001,D5
00001C82  6700 0020               1009              BEQ     G_LS    ;LOGICAL SHIFTS
00001C86  BA3C 0003               1010              CMP.B   #%011,D5
00001C8A  6700 00E4               1011              BEQ     G_RO    ;ROTAIONS
00001C8E  BA3C 0000               1012              CMP.B   #%000,D5
00001C92  6700 01A8               1013              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001C96                          1014              
00001C96  13FC 0001 00000001      1015              MOVE.B #1,BAD_FLAG
00001C9E  4EF9 00002CDA           1016              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001CA4                          1017  
00001CA4                          1018  G_LS               ;GROUP LOGICAL SHIFT
00001CA4  4245                    1019       CLR   D5
00001CA6  23C4 0000341E           1020       MOVE.L D4,IR_IL
00001CAC  02B9 00000020 0000341E  1021       ANDI.L  #$0020,IR_IL
00001CB6  2A39 0000341E           1022       MOVE.L  IR_IL,D5
00001CBC  EA8D                    1023       LSR.L   #5,D5
00001CBE  BA3C 0001               1024       CMP.B   #$1,D5
00001CC2  6700 0056               1025       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001CC6  4245                    1026       CLR D5
00001CC8  2A04                    1027       MOVE.L  D4,D5
00001CCA  0285 00000100           1028       ANDI.L  #$0100,D5
00001CD0  E08D                    1029       LSR.L  #8,D5
00001CD2  23C5 00003416           1030       MOVE.L  D5,DR
00001CD8  4245                    1031       CLR D5
00001CDA  2A04                    1032       MOVE.L  D4,D5
00001CDC  0285 00000E00           1033       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001CE2  E08D                    1034       LSR.L   #8,D5
00001CE4  E28D                    1035       LSR.L   #1,D5
00001CE6  BABC 00000007           1036       CMP.L   #7,D5
00001CEC  6E00 0FEC               1037       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001CF0  BABC 00000000           1038       CMP.L   #0,D5
00001CF6  6D00 0FE2               1039       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001CFA  13C5 00003422           1040       MOVE.B  D5,S_COUNT
00001D00  4EB9 00002558           1041       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001D06  4245                    1042       CLR     D5
00001D08  2A04                    1043       MOVE.L  D4,D5
00001D0A  0285 00000007           1044       ANDI.L   #$0007,D5
00001D10  13C5 00003427           1045       MOVE.B   D5,dRN
00001D16  6000 0722               1046       BRA      PR_LS             
00001D1A                          1047       
00001D1A                          1048  GLS_EA 
00001D1A  4245                    1049       CLR D5
00001D1C  4244                    1050       CLR D4
00001D1E  3839 000033DE           1051       MOVE.W COMMANDDATA,D4
00001D24                          1052  
00001D24  2A04                    1053       MOVE.L  D4,D5
00001D26  0285 00000100           1054       ANDI.L  #$0100,D5
00001D2C  E08D                    1055       LSR.L  #8,D5
00001D2E  23C5 00003416           1056       MOVE.L  D5,DR     ;DIRECTION
00001D34  4245                    1057       CLR D5
00001D36  2A04                    1058       MOVE.L  D4,D5
00001D38  0285 00000E00           1059       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001D3E  E08D                    1060       LSR.L   #8,D5
00001D40  E28D                    1061       LSR.L   #1,D5
00001D42  BABC 00000007           1062       CMP.L   #7,D5
00001D48  6E00 0F90               1063       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D4C  BABC 00000000           1064       CMP.L   #0,D5
00001D52  6D00 0F86               1065       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D56  13C5 00003426           1066       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001D5C  4245                    1067       CLR     D5
00001D5E  2A04                    1068       MOVE.L   D4,D5
00001D60  0285 00000007           1069       ANDI.L   #$0007,D5
00001D66  13C5 00003427           1070       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001D6C  6000 04F0               1071       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001D70                          1072  G_RO            ;GROUP ROTATION
00001D70  4245                    1073       CLR   D5
00001D72  23C4 0000341E           1074       MOVE.L D4,IR_IL
00001D78  02B9 00000020 0000341E  1075       ANDI.L  #$0020,IR_IL
00001D82  2A39 0000341E           1076       MOVE.L  IR_IL,D5
00001D88  EA8D                    1077       LSR.L   #5,D5
00001D8A  BA3C 0001               1078       CMP.B   #$1,D5
00001D8E  6700 0056               1079       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001D92  4245                    1080       CLR D5
00001D94  2A04                    1081       MOVE.L  D4,D5
00001D96  0285 00000100           1082       ANDI.L  #$0100,D5
00001D9C  E08D                    1083       LSR.L  #8,D5
00001D9E  23C5 00003416           1084       MOVE.L  D5,DR
00001DA4  4245                    1085       CLR D5
00001DA6  2A04                    1086       MOVE.L  D4,D5
00001DA8  0285 00000E00           1087       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001DAE  E08D                    1088       LSR.L   #8,D5
00001DB0  E28D                    1089       LSR.L   #1,D5
00001DB2  BABC 00000007           1090       CMP.L   #7,D5
00001DB8  6E00 0F20               1091       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001DBC  BABC 00000000           1092       CMP.L   #0,D5
00001DC2  6D00 0F16               1093       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001DC6  13C5 00003422           1094       MOVE.B  D5,S_COUNT
00001DCC  4EB9 00002558           1095       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001DD2  4245                    1096       CLR     D5
00001DD4  2A04                    1097       MOVE.L  D4,D5
00001DD6  0285 00000007           1098       ANDI.L   #$0007,D5
00001DDC  13C5 00003427           1099       MOVE.B   D5,dRN
00001DE2  6000 05B2               1100       BRA      PR_RO    ;PRINT ROTATION   
00001DE6                          1101  
00001DE6                          1102  GRO_EA 
00001DE6  4245                    1103       CLR D5
00001DE8  4244                    1104       CLR D4
00001DEA  3839 000033DE           1105       MOVE.W COMMANDDATA,D4
00001DF0                          1106  
00001DF0  2A04                    1107       MOVE.L  D4,D5
00001DF2  0285 00000100           1108       ANDI.L  #$0100,D5
00001DF8  E08D                    1109       LSR.L  #8,D5
00001DFA  23C5 00003416           1110       MOVE.L  D5,DR     ;DIRECTION
00001E00  4245                    1111       CLR D5
00001E02  2A04                    1112       MOVE.L  D4,D5
00001E04  0285 00000E00           1113       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001E0A  E08D                    1114       LSR.L   #8,D5
00001E0C  E28D                    1115       LSR.L   #1,D5
00001E0E  BABC 00000007           1116       CMP.L   #7,D5
00001E14  6E00 0EC4               1117       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E18  BABC 00000000           1118       CMP.L   #0,D5
00001E1E  6D00 0EBA               1119       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E22  13C5 00003426           1120       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001E28  4245                    1121       CLR     D5
00001E2A  2A04                    1122       MOVE.L   D4,D5
00001E2C  0285 00000007           1123       ANDI.L   #$0007,D5
00001E32  13C5 00003427           1124       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001E38  6000 04C0               1125       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001E3C                          1126  
00001E3C                          1127  
00001E3C                          1128  
00001E3C                          1129  G_AS         ;GROUP ARITHMATIC SHIFT
00001E3C  4245                    1130       CLR   D5
00001E3E  23C4 0000341E           1131       MOVE.L D4,IR_IL
00001E44  02B9 00000020 0000341E  1132       ANDI.L  #$0020,IR_IL
00001E4E  2A39 0000341E           1133       MOVE.L  IR_IL,D5
00001E54  EA8D                    1134       LSR.L   #5,D5
00001E56  BA3C 0001               1135       CMP.B   #$1,D5
00001E5A  6700 0056               1136       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001E5E  4245                    1137       CLR D5
00001E60  2A04                    1138       MOVE.L  D4,D5
00001E62  0285 00000100           1139       ANDI.L  #$0100,D5
00001E68  E08D                    1140       LSR.L  #8,D5
00001E6A  23C5 00003416           1141       MOVE.L  D5,DR
00001E70  4245                    1142       CLR D5
00001E72  2A04                    1143       MOVE.L  D4,D5
00001E74  0285 00000E00           1144       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001E7A  E08D                    1145       LSR.L   #8,D5
00001E7C  E28D                    1146       LSR.L   #1,D5
00001E7E  BABC 00000007           1147       CMP.L   #7,D5
00001E84  6E00 0E54               1148       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E88  BABC 00000000           1149       CMP.L   #0,D5
00001E8E  6D00 0E4A               1150       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E92  13C5 00003422           1151       MOVE.B  D5,S_COUNT
00001E98  4EB9 00002558           1152       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001E9E  4245                    1153       CLR     D5
00001EA0  2A04                    1154       MOVE.L  D4,D5
00001EA2  0285 00000007           1155       ANDI.L   #$0007,D5
00001EA8  13C5 00003427           1156       MOVE.B   D5,dRN
00001EAE  6000 0538               1157       BRA      PR_AS    ;PRINT ROTATION 
00001EB2                          1158  
00001EB2                          1159  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001EB2  4245                    1160       CLR D5
00001EB4  4244                    1161       CLR D4
00001EB6  3839 000033DE           1162       MOVE.W COMMANDDATA,D4
00001EBC                          1163  
00001EBC  2A04                    1164       MOVE.L  D4,D5
00001EBE  0285 00000100           1165       ANDI.L  #$0100,D5
00001EC4  E08D                    1166       LSR.L  #8,D5
00001EC6  23C5 00003416           1167       MOVE.L  D5,DR     ;DIRECTION
00001ECC  4245                    1168       CLR D5
00001ECE  2A04                    1169       MOVE.L  D4,D5
00001ED0  0285 00000E00           1170       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001ED6  E08D                    1171       LSR.L   #8,D5
00001ED8  E28D                    1172       LSR.L   #1,D5
00001EDA  BABC 00000007           1173       CMP.L   #7,D5
00001EE0  6E00 0DF8               1174       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001EE4  BABC 00000000           1175       CMP.L   #0,D5
00001EEA  6D00 0DEE               1176       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001EEE  13C5 00003426           1177       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001EF4  4245                    1178       CLR     D5
00001EF6  2A04                    1179       MOVE.L   D4,D5
00001EF8  0285 00000007           1180       ANDI.L   #$0007,D5
00001EFE  13C5 00003427           1181       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001F04  6000 02BC               1182       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001F08                          1183  
00001F08                          1184  G14_MEMS 
00001F08  4245                    1185         CLR D5
00001F0A  2A04                    1186         MOVE.L  D4,D5
00001F0C  CABC 00000E00           1187         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001F12  E08D                    1188         LSR.L   #8,D5
00001F14  E28D                    1189         LSR.L   #1,D5
00001F16  BA3C 0001               1190         CMP.B   #%001,D5
00001F1A  6700 0012               1191         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001F1E  BA3C 0003               1192         CMP.B   #%011,D5
00001F22  6700 0070               1193         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001F26  BA3C 0000               1194         CMP.B   #%000,D5
00001F2A  6700 00CE               1195         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001F2E                          1196  
00001F2E                          1197  G14_MEMS_LS 
00001F2E  4245                    1198             CLR D5
00001F30  2A04                    1199             MOVE.L  D4,D5
00001F32  0285 00000100           1200             ANDI.L  #$0100,D5
00001F38  E08D                    1201             LSR.L  #8,D5
00001F3A  13C5 00003416           1202             MOVE.B  D5,DR     ;DIRECTION
00001F40  4245                    1203             CLR D5
00001F42  2A04                    1204             MOVE.L D4,D5
00001F44  0285 00000038           1205             ANDI.L  #$0038,D5
00001F4A  E68D                    1206             LSR.L  #3,D5
00001F4C  13C5 0000342A           1207             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001F52  4245                    1208             CLR D5
00001F54  2A04                    1209             MOVE.L D4,D5
00001F56  0285 00000007           1210             ANDI.L  #$0007,D5
00001F5C  13C5 00003427           1211             MOVE.B  D5,dRN
00001F62  0CB9 00000000 0000342A  1212             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001F6C  6700 0D6C               1213             BEQ    PRINT_DATA
00001F70  0CB9 00000001 0000342A  1214             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001F7A  6700 0D5E               1215             BEQ     PRINT_DATA
00001F7E  13C5 00003429           1216             MOVE.B  D5,dRG     ;DESTINATION REG
00001F84  0C39 0007 0000342A      1217             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001F8C  6700 00F2               1218             BEQ     CHECK_ID_LS 
00001F90  6000 0168               1219             BRA     PR_G14_MEMS_LS             
00001F94                          1220       
00001F94                          1221  
00001F94                          1222  G14_MEMS_RO
00001F94  4245                    1223             CLR D5
00001F96  2A04                    1224             MOVE.L  D4,D5
00001F98  0285 00000100           1225             ANDI.L  #$0100,D5
00001F9E  E08D                    1226             LSR.L  #8,D5
00001FA0  13C5 00003416           1227             MOVE.B  D5,DR     ;DIRECTION
00001FA6  4245                    1228             CLR D5
00001FA8  2A04                    1229             MOVE.L D4,D5
00001FAA  0285 00000038           1230             ANDI.L  #$0038,D5
00001FB0  E68D                    1231             LSR.L  #3,D5
00001FB2  13C5 0000342A           1232             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001FB8  4245                    1233             CLR D5
00001FBA  2A04                    1234             MOVE.L D4,D5
00001FBC  0285 00000007           1235             ANDI.L  #$0007,D5
00001FC2  13C5 00003427           1236             MOVE.B  D5,dRN
00001FC8  0CB9 00000000 0000342A  1237             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001FD2  6700 0D06               1238             BEQ    PRINT_DATA
00001FD6  0CB9 00000001 0000342A  1239             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001FE0  6700 0CF8               1240             BEQ     PRINT_DATA
00001FE4  13C5 00003429           1241             MOVE.B  D5,dRG     ;DESTINATION REG
00001FEA  0C39 0007 0000342A      1242             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001FF2  6700 007C               1243             BEQ     CHECK_ID_RO 
00001FF6  6000 0166               1244             BRA     PR_G14_MEMS_RO         
00001FFA                          1245  
00001FFA                          1246  G14_MEMS_AS
00001FFA  4245                    1247             CLR D5
00001FFC  2A04                    1248             MOVE.L  D4,D5
00001FFE  0285 00000100           1249             ANDI.L  #$0100,D5
00002004  E08D                    1250             LSR.L  #8,D5
00002006  13C5 00003416           1251             MOVE.B  D5,DR     ;DIRECTION
0000200C  4245                    1252             CLR D5
0000200E  2A04                    1253             MOVE.L D4,D5
00002010  0285 00000038           1254             ANDI.L  #$0038,D5
00002016  E68D                    1255             LSR.L  #3,D5
00002018  13C5 0000342A           1256             MOVE.B  D5,dMODE     ;DESTINATION MODE
0000201E  4245                    1257             CLR D5
00002020  2A04                    1258             MOVE.L D4,D5
00002022  0285 00000007           1259             ANDI.L  #$0007,D5
00002028  13C5 00003427           1260             MOVE.B  D5,dRN
0000202E  0CB9 00000000 0000342A  1261             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00002038  6700 0CA0               1262             BEQ    PRINT_DATA
0000203C  0CB9 00000001 0000342A  1263             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00002046  6700 0C92               1264             BEQ     PRINT_DATA
0000204A  13C5 00003429           1265             MOVE.B  D5,dRG     ;DESTINATION REG
00002050  0C39 0007 0000342A      1266             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00002058  6700 0006               1267             BEQ     CHECK_ID_AS 
0000205C  6000 0032               1268             BRA     PR_G14_MEMS_AS                          
00002060                          1269             
00002060                          1270  
00002060                          1271  
00002060  0C39 0004 00003429      1272  CHECK_ID_AS  CMP.B #$4,dRG
00002068  6700 0C70               1273               BEQ   PRINT_DATA
0000206C  6000 0022               1274               BRA     PR_G14_MEMS_AS
00002070                          1275               
00002070  0C39 0004 00003429      1276  CHECK_ID_RO  CMP.B #$4,dRG
00002078  6700 0C60               1277               BEQ   PRINT_DATA
0000207C  6000 00E0               1278               BRA     PR_G14_MEMS_RO
00002080                          1279    
00002080  0C39 0004 00003429      1280  CHECK_ID_LS  CMP.B #$4,dRG
00002088  6700 0C50               1281               BEQ   PRINT_DATA
0000208C  6000 006C               1282               BRA    PR_G14_MEMS_LS
00002090                          1283                               
00002090                          1284  PR_G14_MEMS_AS
00002090  4EB9 000029CE           1285       JSR     PRINTCLRSPOT      * print space
00002096                          1286   
00002096  0C39 0000 00003416      1287       CMP.B #$0,DR 
0000209E  6700 002E               1288       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
000020A2                          1289      
000020A2                          1290      *******PRINT LSL*******
000020A2  43F9 000033BE           1291       LEA       PASL,A1   MEM LEFT SHIF
000020A8  103C 000E               1292       MOVE.B   #14,D0     ; moves #14 into data register D0
000020AC  4E4F                    1293       TRAP     #15
000020AE                          1294  
000020AE  4EB9 000029CE           1295       JSR     PRINTCLRSPOT      * print space
000020B4                          1296   
000020B4  4243                    1297       CLR D3
000020B6  4242                    1298       CLR D2
000020B8  1439 0000342A           1299       MOVE.B  dMODE,D2
000020BE  1639 00003427           1300       MOVE.B  dRN,D3
000020C4  4EB9 00002D60           1301       JSR     EA_START
000020CA                          1302       
000020CA  6000 F1DC               1303       BRA MEMORYGRABBER
000020CE                          1304  
000020CE                          1305       
000020CE                          1306  PR_ASR_MEM   ;MEM RIGHT SHIFT
000020CE  43F9 000033BA           1307       LEA       PASR,A1   MEM RIGHT SHIF
000020D4  103C 000E               1308       MOVE.B   #14,D0     ; moves #14 into data register D0
000020D8  4E4F                    1309       TRAP     #15
000020DA  4EB9 000029CE           1310       JSR     PRINTCLRSPOT      * print space
000020E0                          1311  
000020E0  4243                    1312       CLR D3
000020E2  4242                    1313       CLR D2
000020E4  1439 0000342A           1314       MOVE.B  dMODE,D2
000020EA  1639 00003427           1315       MOVE.B  dRN,D3
000020F0  4EB9 00002D60           1316       JSR     EA_START
000020F6                          1317       
000020F6  6000 F1B0               1318       BRA MEMORYGRABBER
000020FA                          1319               
000020FA                          1320  
000020FA                          1321  PR_G14_MEMS_LS 
000020FA  0C39 0000 00003416      1322       CMP.B #$0,DR 
00002102  6700 002E               1323       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00002106                          1324      
00002106                          1325      *******PRINT LSL*******
00002106  43F9 000033B2           1326       LEA       PLSL,A1   MEM LEFT SHIF
0000210C  103C 000E               1327       MOVE.B   #14,D0     ; moves #14 into data register D0
00002110  4E4F                    1328       TRAP     #15 
00002112                          1329       
00002112  4EB9 000029CE           1330       JSR     PRINTCLRSPOT      * print space
00002118                          1331       
00002118  4243                    1332       CLR D3
0000211A  4242                    1333       CLR D2
0000211C  1439 0000342A           1334       MOVE.B  dMODE,D2
00002122  1639 00003427           1335       MOVE.B  dRN,D3
00002128  4EB9 00002D60           1336       JSR     EA_START
0000212E                          1337       
0000212E  6000 F178               1338       BRA MEMORYGRABBER
00002132                          1339       
00002132                          1340  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00002132  43F9 000033B6           1341       LEA       PLSR,A1   MEM RIGHT SHIF
00002138  103C 000E               1342       MOVE.B   #14,D0     ; moves #14 into data register D0
0000213C  4E4F                    1343       TRAP     #15
0000213E  4EB9 000029CE           1344       JSR     PRINTCLRSPOT      * print space
00002144  4243                    1345       CLR D3
00002146  4242                    1346       CLR D2
00002148  1439 0000342A           1347       MOVE.B  dMODE,D2
0000214E  1639 00003427           1348       MOVE.B  dRN,D3
00002154  4EB9 00002D60           1349       JSR     EA_START
0000215A                          1350       
0000215A  6000 F14C               1351       BRA    MEMORYGRABBER
0000215E                          1352  
0000215E                          1353  PR_G14_MEMS_RO
0000215E  0C39 0000 00003416      1354       CMP.B #$0,DR 
00002166  6700 002E               1355       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
0000216A                          1356      
0000216A                          1357      *******PRINT ASL*******
0000216A  43F9 000033C2           1358       LEA       PROL,A1   ROTATE MEM LEFT SHIF
00002170  103C 000E               1359       MOVE.B   #14,D0     ; moves #14 into data register D0
00002174  4E4F                    1360       TRAP     #15
00002176                          1361  
00002176  4EB9 000029CE           1362       JSR     PRINTCLRSPOT
0000217C                          1363        
0000217C  4243                    1364       CLR D3
0000217E  4242                    1365       CLR D2
00002180  1439 0000342A           1366       MOVE.B  dMODE,D2
00002186  1639 00003427           1367       MOVE.B  dRN,D3
0000218C  4EB9 00002D60           1368       JSR     EA_START
00002192                          1369       
00002192  6000 F114               1370       BRA MEMORYGRABBER
00002196                          1371  
00002196                          1372  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00002196  43F9 000033C6           1373       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
0000219C  103C 000E               1374       MOVE.B   #14,D0     ; moves #14 into data register D0
000021A0  4E4F                    1375       TRAP     #15
000021A2  4EB9 000029CE           1376       JSR     PRINTCLRSPOT      * print space
000021A8                          1377  
000021A8  4243                    1378       CLR D3
000021AA  4242                    1379       CLR D2
000021AC  1439 0000342A           1380       MOVE.B  dMODE,D2
000021B2  1639 00003427           1381       MOVE.B  dRN,D3
000021B8  4EB9 00002D60           1382       JSR     EA_START
000021BE                          1383       
000021BE  6000 F0E8               1384       BRA MEMORYGRABBER
000021C2                          1385  
000021C2                          1386  
000021C2                          1387  PR_G_AS_EA
000021C2  0CB9 00000000 00003416  1388          CMP.L #$0,DR 
000021CC  6700 004C               1389          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000021D0                          1390       
000021D0                          1391          *******PRINT ASL*******
000021D0  43F9 000033BE           1392          LEA       PASL,A1
000021D6  103C 000E               1393          MOVE.B   #14,D0     ; moves #14 into data register D0
000021DA  4E4F                    1394          TRAP     #15 
000021DC  4EB9 00002944           1395          JSR      SIZEPRINT
000021E2                          1396          
000021E2  4EB9 000029CE           1397          JSR     PRINTCLRSPOT
000021E8                          1398          
000021E8  4242                    1399          CLR D2
000021EA  4243                    1400          CLR D3
000021EC  143C 0000               1401          MOVE.B  #%000,D2     ; mode data register
000021F0  1639 00003426           1402          MOVE.B  sRN,D3       ; source register number
000021F6  4EB9 00002D60           1403          JSR     EA_START
000021FC                          1404          
000021FC  4EB9 000029DC           1405          JSR     PRINTCOMA   ; print coma
00002202                          1406          
00002202  4243                    1407          CLR D3
00002204  4242                    1408          CLR D2
00002206  143C 0000               1409          MOVE.B  #%000,D2      ; mode data register
0000220A  1639 00003427           1410          MOVE.B  dRN,D3        ; destination register
00002210  4EB9 00002D60           1411          JSR     EA_START
00002216                          1412          
00002216  6000 F090               1413          BRA   MEMORYGRABBER
0000221A                          1414  
0000221A                          1415          
0000221A                          1416  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
0000221A  43F9 000033BA           1417           LEA       PASR,A1
00002220  103C 000E               1418          MOVE.B   #14,D0     ; moves #14 into data register D0
00002224  4E4F                    1419          TRAP     #15 
00002226  4EB9 00002916           1420          JSR      SIZESPLIT
0000222C                          1421          
0000222C  4242                    1422          CLR D2
0000222E  4243                    1423          CLR D3
00002230  143C 0000               1424          MOVE.B  #%000,D2     ; mode data register
00002234  1639 00003426           1425          MOVE.B  sRN,D3       ; source register number
0000223A  4EB9 00002D60           1426          JSR     EA_START
00002240  4EB9 000029DC           1427          JSR     PRINTCOMA   ; print coma
00002246  4243                    1428          CLR D3
00002248  4242                    1429          CLR D2
0000224A  143C 0000               1430          MOVE.B  #%000,D2      ; mode data register
0000224E  1639 00003427           1431          MOVE.B  dRN,D3        ; destination register
00002254  4EB9 00002D60           1432          JSR     EA_START
0000225A                          1433          
0000225A  6000 F04C               1434          BRA   MEMORYGRABBER
0000225E                          1435  
0000225E                          1436  
0000225E                          1437  PR_G_LS_EA
0000225E  0CB9 00000000 00003416  1438          CMP.L #$0,DR 
00002268  6700 004C               1439          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000226C                          1440       
0000226C                          1441          *******PRINT LSL*******
0000226C  43F9 000033B2           1442          LEA       PLSL,A1
00002272  103C 000E               1443          MOVE.B   #14,D0     ; moves #14 into data register D0
00002276  4E4F                    1444          TRAP     #15 
00002278  4EB9 00002944           1445          JSR      SIZEPRINT
0000227E                          1446          
0000227E  4EB9 000029CE           1447          JSR     PRINTCLRSPOT
00002284                          1448          
00002284  4242                    1449          CLR D2
00002286  4243                    1450          CLR D3
00002288  143C 0000               1451          MOVE.B  #%000,D2     ; mode data register
0000228C  1639 00003426           1452          MOVE.B  sRN,D3       ; source register number
00002292  4EB9 00002D60           1453          JSR     EA_START
00002298                          1454          
00002298  4EB9 000029DC           1455          JSR     PRINTCOMA   ; print coma
0000229E                          1456          
0000229E  4243                    1457          CLR D3
000022A0  4242                    1458          CLR D2
000022A2  143C 0000               1459          MOVE.B  #%000,D2      ; mode data register
000022A6  1639 00003427           1460          MOVE.B  dRN,D3        ; destination register
000022AC  4EB9 00002D60           1461          JSR     EA_START
000022B2                          1462          
000022B2  6000 EFF4               1463          BRA   MEMORYGRABBER
000022B6                          1464          
000022B6                          1465  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
000022B6  43F9 000033B6           1466           LEA       PLSR,A1
000022BC  103C 000E               1467           MOVE.B   #14,D0     ; moves #14 into data register D0
000022C0  4E4F                    1468          TRAP     #15 
000022C2  4EB9 00002944           1469          JSR      SIZEPRINT
000022C8                          1470          
000022C8  4242                    1471          CLR D2
000022CA  4243                    1472          CLR D3
000022CC  143C 0000               1473          MOVE.B  #%000,D2     ; mode data register
000022D0  1639 00003426           1474          MOVE.B  sRN,D3       ; source register number
000022D6  4EB9 00002D60           1475          JSR     EA_START
000022DC  4EB9 000029DC           1476          JSR     PRINTCOMA   ; print coma
000022E2  4243                    1477          CLR D3
000022E4  4242                    1478          CLR D2
000022E6  143C 0000               1479          MOVE.B  #%000,D2      ; mode data register
000022EA  1639 00003427           1480          MOVE.B  dRN,D3        ; destination register
000022F0  4EB9 00002D60           1481          JSR     EA_START
000022F6                          1482          
000022F6  6000 EFB0               1483          BRA   MEMORYGRABBER
000022FA                          1484  
000022FA                          1485  
000022FA                          1486  PR_G_RO_EA        
000022FA  0CB9 00000000 00003416  1487          CMP.L #$0,DR 
00002304  6700 004C               1488          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002308                          1489       
00002308                          1490          *******PRINT LSL*******
00002308  43F9 000033C2           1491          LEA       PROL,A1
0000230E  103C 000E               1492          MOVE.B   #14,D0     ; moves #14 into data register D0
00002312  4E4F                    1493          TRAP     #15 
00002314  4EB9 00002944           1494          JSR      SIZEPRINT
0000231A                          1495          
0000231A  4EB9 000029CE           1496          JSR     PRINTCLRSPOT
00002320                          1497          
00002320  4242                    1498          CLR D2
00002322  4243                    1499          CLR D3
00002324  143C 0000               1500          MOVE.B  #%000,D2     ; mode data register
00002328  1639 00003426           1501          MOVE.B  sRN,D3       ; source register number
0000232E  4EB9 00002D60           1502          JSR     EA_START
00002334  4EB9 000029DC           1503          JSR     PRINTCOMA   ; print coma
0000233A  4243                    1504          CLR D3
0000233C  4242                    1505          CLR D2
0000233E  143C 0000               1506          MOVE.B  #%000,D2      ; mode data register
00002342  1639 00003427           1507          MOVE.B  dRN,D3        ; destination register
00002348  4EB9 00002D60           1508          JSR     EA_START
0000234E                          1509          
0000234E  6000 EF58               1510          BRA   MEMORYGRABBER
00002352                          1511  
00002352                          1512          
00002352                          1513  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
00002352  43F9 000033C6           1514          LEA       PROR,A1
00002358  103C 000E               1515          MOVE.B   #14,D0     ; moves #14 into data register D0
0000235C  4E4F                    1516          TRAP     #15 
0000235E  4EB9 00002944           1517          JSR      SIZEPRINT
00002364                          1518  
00002364  4242                    1519          CLR D2
00002366  4243                    1520          CLR D3
00002368  143C 0000               1521          MOVE.B  #%000,D2     ; mode data register
0000236C  1639 00003426           1522          MOVE.B  sRN,D3       ; source register number
00002372  4EB9 00002D60           1523          JSR     EA_START
00002378  4EB9 000029DC           1524          JSR     PRINTCOMA   ; print coma
0000237E  4243                    1525          CLR D3
00002380  4242                    1526          CLR D2
00002382  143C 0000               1527          MOVE.B  #%000,D2      ; mode data register
00002386  1639 00003427           1528          MOVE.B  dRN,D3        ; destination register
0000238C  4EB9 00002D60           1529          JSR     EA_START
00002392                          1530          
00002392  6000 EF14               1531          BRA   MEMORYGRABBER
00002396                          1532  
00002396                          1533  PR_RO 
00002396  0CB9 00000000 00003416  1534       CMP.L #$0,DR 
000023A0  6700 0172               1535       BEQ   PR_ROR   ;RIGHT SHIFT
000023A4                          1536      
000023A4                          1537      *******PRINT ASL*******
000023A4  43F9 000033C2           1538       LEA       PROL,A1
000023AA  103C 000E               1539       MOVE.B   #14,D0     ; moves #14 into data register D0
000023AE  4E4F                    1540       TRAP     #15 
000023B0                          1541  
000023B0  4EB9 00002944           1542       JSR      SIZEPRINT
000023B6                          1543  
000023B6  4EB9 000029EA           1544       JSR     PRINTHASH   * print hash
000023BC                          1545  
000023BC  4241                    1546      CLR D1
000023BE  1239 00003422           1547      MOVE.B   S_COUNT,D1
000023C4  103C 0003               1548      MOVE.B   #3,D0
000023C8  4E4F                    1549      TRAP     #15
000023CA  4EB9 000029DC           1550      JSR     PRINTCOMA   ; print coma
000023D0  4243                    1551      CLR D3
000023D2  4242                    1552      CLR D2
000023D4  143C 0000               1553      MOVE.B  #%000,D2
000023D8  1639 00003427           1554      MOVE.B  dRN,D3
000023DE  4EB9 00002D60           1555      JSR     EA_START
000023E4                          1556      
000023E4  6000 EEC2               1557      BRA    MEMORYGRABBER
000023E8                          1558  
000023E8                          1559  
000023E8                          1560  PR_AS 
000023E8  0CB9 00000000 00003416  1561      CMP.L #$0,DR 
000023F2  6700 00DC               1562      BEQ   PR_ASR   ;RIGHT SHIFT
000023F6                          1563      
000023F6                          1564      *******PRINT ASL*******
000023F6  43F9 000033BE           1565       LEA       PASL,A1
000023FC  103C 000E               1566       MOVE.B   #14,D0     ; moves #14 into data register D0
00002400  4E4F                    1567       TRAP     #15 
00002402                          1568  
00002402  4EB9 00002944           1569      JSR      SIZEPRINT
00002408                          1570  
00002408  4EB9 000029EA           1571      JSR     PRINTHASH   ; print hash
0000240E                          1572      
0000240E  4241                    1573      CLR D1
00002410  1239 00003422           1574      MOVE.B   S_COUNT,D1
00002416  103C 0003               1575      MOVE.B   #3,D0
0000241A  4E4F                    1576      TRAP     #15
0000241C  4EB9 000029DC           1577      JSR     PRINTCOMA   ; print coma
00002422  4243                    1578      CLR D3
00002424  4242                    1579      CLR D2
00002426  143C 0000               1580      MOVE.B  #%000,D2
0000242A  1639 00003427           1581      MOVE.B  dRN,D3
00002430  4EB9 00002D60           1582      JSR     EA_START
00002436                          1583  
00002436  6000 EE70               1584      BRA    MEMORYGRABBER
0000243A                          1585                        
0000243A                          1586                          
0000243A                          1587  PR_LS 
0000243A  0CB9 00000000 00003416  1588      CMP.L #$0,DR 
00002444  6700 0046               1589      BEQ   PR_LSR   ;RIGHT SHIFT
00002448                          1590      
00002448                          1591      *******PRINT LSL*******
00002448  43F9 000033B2           1592       LEA       PLSL,A1
0000244E  103C 000E               1593       MOVE.B   #14,D0     ; moves #14 into data register D0
00002452  4E4F                    1594       TRAP     #15 
00002454  4EB9 00002944           1595      JSR      SIZEPRINT
0000245A                          1596  
0000245A  4EB9 000029EA           1597      JSR     PRINTHASH   ; print hash
00002460                          1598      
00002460  4241                    1599      CLR D1
00002462  1239 00003422           1600      MOVE.B   S_COUNT,D1
00002468  103C 0003               1601      MOVE.B   #3,D0
0000246C  4E4F                    1602      TRAP     #15
0000246E                          1603      
0000246E  4EB9 000029DC           1604      JSR     PRINTCOMA   ; print coma
00002474                          1605      
00002474  4243                    1606      CLR D3
00002476  4242                    1607      CLR D2
00002478  143C 0000               1608      MOVE.B  #%000,D2
0000247C  1639 00003427           1609      MOVE.B  dRN,D3
00002482  4EB9 00002D60           1610      JSR     EA_START
00002488                          1611      
00002488  6000 EE1E               1612      BRA    MEMORYGRABBER
0000248C                          1613      
0000248C                          1614            
0000248C                          1615  PR_LSR 
0000248C  43F9 000033B6           1616      LEA   PLSR,A1
00002492  103C 000E               1617        MOVE.B   #14,D0     ; moves #14 into data register D0
00002496  4E4F                    1618        TRAP     #15       ; Displays message via trap 14 
00002498  4EB9 00002944           1619        JSR      SIZEPRINT
0000249E                          1620  
0000249E  4EB9 000029EA           1621        JSR     PRINTHASH   ; print hash
000024A4                          1622        
000024A4  4241                    1623        CLR D1
000024A6  1239 00003422           1624        MOVE.B   S_COUNT,D1
000024AC  103C 0003               1625        MOVE.B   #3,D0
000024B0  4E4F                    1626        TRAP     #15
000024B2  4EB9 000029DC           1627        JSR     PRINTCOMA   ; print coma
000024B8  4243                    1628        CLR D3
000024BA  4242                    1629        CLR D2
000024BC  143C 0000               1630        MOVE.B #%000,D2
000024C0  1639 00003427           1631        MOVE.B  dRN,D3
000024C6  4EB9 00002D60           1632        JSR   EA_START
000024CC                          1633        
000024CC  6000 EDDA               1634        BRA MEMORYGRABBER
000024D0                          1635        
000024D0                          1636        
000024D0                          1637  PR_ASR 
000024D0  43F9 000033BA           1638      LEA   PASR,A1
000024D6  103C 000E               1639         MOVE.B   #14,D0     ; moves #14 into data register D0
000024DA  4E4F                    1640        TRAP     #15       ; Displays message via trap 14 
000024DC  4EB9 00002944           1641        JSR      SIZEPRINT
000024E2                          1642  
000024E2  4EB9 000029EA           1643        JSR     PRINTHASH   ; print hash
000024E8                          1644        
000024E8  4241                    1645        CLR D1
000024EA  1239 00003422           1646        MOVE.B   S_COUNT,D1
000024F0  103C 0003               1647        MOVE.B   #3,D0
000024F4  4E4F                    1648        TRAP     #15
000024F6  4EB9 000029DC           1649        JSR     PRINTCOMA   ; print coma
000024FC  4243                    1650        CLR D3
000024FE  4242                    1651        CLR D2
00002500  143C 0000               1652        MOVE.B #%000,D2
00002504  1639 00003427           1653        MOVE.B  dRN,D3
0000250A  4EB9 00002D60           1654        JSR   EA_START
00002510                          1655  
00002510  6000 ED96               1656        BRA MEMORYGRABBER
00002514                          1657  
00002514                          1658        
00002514                          1659  PR_ROR 
00002514  43F9 000033C6           1660        LEA   PROR,A1
0000251A  103C 000E               1661        MOVE.B   #14,D0     ; moves #14 into data register D0
0000251E  4E4F                    1662        TRAP     #15       ; Displays message via trap 14 
00002520  4EB9 00002944           1663        JSR      SIZEPRINT
00002526                          1664  
00002526  4EB9 000029EA           1665        JSR     PRINTHASH   ; print hash
0000252C                          1666        
0000252C  4241                    1667        CLR D1
0000252E  1239 00003422           1668        MOVE.B   S_COUNT,D1
00002534  103C 0003               1669        MOVE.B   #3,D0
00002538  4E4F                    1670        TRAP     #15
0000253A  4EB9 000029DC           1671        JSR     PRINTCOMA   ; print coma
00002540  4243                    1672        CLR D3
00002542  4242                    1673        CLR D2
00002544  143C 0000               1674        MOVE.B #%000,D2
00002548  1639 00003427           1675        MOVE.B  dRN,D3
0000254E  4EB9 00002D60           1676        JSR   EA_START
00002554                          1677        
00002554  6000 ED52               1678        BRA MEMORYGRABBER
00002558                          1679        
00002558                          1680        
00002558                          1681  ;-----------------------extra parts for above code to function
00002558                          1682        
00002558                          1683  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
00002558  0C39 0000 00003422      1684           CMP.B #$0,S_COUNT
00002560  6700 0004               1685           BEQ   IS_EIGHT
00002564  4E75                    1686           RTS
00002566                          1687           
00002566  13FC 0008 00003422      1688  IS_EIGHT  MOVE.B #8,S_COUNT
0000256E  4E75                    1689            RTS
00002570                          1690  
00002570                          1691  ;---------------------------------------------------------
00002570                          1692                  ;MOVE SECTION
00002570  43F9 0000335E           1693  PRINTMOVE LEA PMOVE,A1
00002576  103C 000E               1694      MOVE.B   #14,D0     ; moves #14 into data register D0
0000257A  4E4F                    1695      TRAP     #15       ; Displays message via trap 14
0000257C  4EB9 00002916           1696      JSR     SIZESPLIT
00002582                          1697      
00002582                          1698      * EA Part
00002582  4242                    1699       CLR     D2                      * Source to EA
00002584  4243                    1700       CLR     D3
00002586  13F9 0000343E 000033FC  1701       MOVE.B  opDta1T, SIZE
00002590  1439 00003438           1702       MOVE.B  SrcMod, D2              
00002596  2639 0000343A           1703       MOVE.L  opDta1, D3
0000259C  4EB9 00002D60           1704       JSR     EA_start
000025A2                          1705       
000025A2  4EB9 000029DC           1706       JSR     PRINTCOMA
000025A8                          1707       
000025A8  4242                    1708       CLR     D2                       * Destination to EA
000025AA  4243                    1709       CLR     D3
000025AC  1439 00003436           1710       MOVE.B  DstMod, D2
000025B2  1639 00003435           1711       MOVE.B  DstReg, D3
000025B8  4EB9 00002D60           1712       JSR     EA_start
000025BE                          1713       
000025BE  6000 ECE8               1714       BRA     MEMORYGRABBER
000025C2                          1715       *BRA EADN
000025C2                          1716      
000025C2  43F9 00003369           1717  PRINTMOVEA LEA PMOVEA,A1
000025C8  103C 000E               1718      MOVE.B   #14,D0     ; moves #14 into data register D0
000025CC  4E4F                    1719      TRAP     #15       ; Displays message via trap 14
000025CE  4EB9 00002916           1720      JSR     SIZESPLIT
000025D4                          1721      
000025D4                          1722      * EA Part
000025D4  4242                    1723       CLR     D2                      * Source to EA
000025D6  4243                    1724       CLR     D3
000025D8  13F9 0000343E 000033FC  1725       MOVE.B  opDta1T, SIZE
000025E2  1439 00003438           1726       MOVE.B  SrcMod, D2              
000025E8  2639 0000343A           1727       MOVE.L  opDta1, D3
000025EE  4EB9 00002D60           1728       JSR     EA_start
000025F4                          1729       
000025F4  4EB9 000029DC           1730       JSR     PRINTCOMA
000025FA                          1731       
000025FA  4242                    1732       CLR     D2                       * Destination to EA
000025FC  4243                    1733       CLR     D3
000025FE  1439 00003436           1734       MOVE.B  DstMod, D2
00002604  1639 00003435           1735       MOVE.B  DstReg, D3
0000260A  4EB9 00002D60           1736       JSR     EA_start
00002610                          1737       
00002610  6000 EC96               1738       BRA     MEMORYGRABBER
00002614                          1739       *BRA EADN
00002614                          1740      
00002614                          1741                      ;First set of commands
00002614                          1742  PRINTNOP    
00002614  43F9 00003375           1743      LEA     PNOP,A1
0000261A  103C 000E               1744      MOVE.B  #14,D0 
0000261E  4E4F                    1745      TRAP    #15  
00002620                          1746      
00002620  6000 EC86               1747      BRA     MEMORYGRABBER
00002624                          1748  
00002624                          1749  PRINTMOVEM  
00002624  43F9 00003363           1750      LEA     PMOVEM,A1
0000262A  103C 000E               1751      MOVE.B  #14,D0 
0000262E  4E4F                    1752      TRAP    #15 
00002630  4EB9 0000298C           1753      JSR     SIZEPRINT3 
00002636                          1754      
00002636  4284                    1755      CLR.L   D4
00002638  3818                    1756      MOVE.W  (A0)+,D4            * Move list mask into D4
0000263A                          1757      
0000263A                          1758      * TODO : CHECK THE INVELID_EA FLAG
0000263A                          1759      
0000263A                          1760  * TODO:     
0000263A                          1761  *    CMP.B   #%0,XBit
0000263A                          1762  *    BEQ     PRINT_REG_TO_MEM
0000263A                          1763  *    BRA     PRINT_MEM_TO_REG
0000263A                          1764  
0000263A                          1765  
0000263A                          1766  PRINTLEA    
0000263A  43F9 00003379           1767      LEA PLEA,A1
00002640  103C 000E               1768      MOVE.B   #14,D0     ; moves #14 into data register D0
00002644  4E4F                    1769      TRAP     #15       ; Displays message via trap 14
00002646  4EB9 000029CE           1770      JSR     PRINTCLRSPOT
0000264C                          1771      * TODO : CHECK THE INVELID_EA FLAG
0000264C                          1772  
0000264C  4243                    1773      CLR     D3
0000264E  4242                    1774      CLR     D2
00002650  1439 000033F4           1775      MOVE.B  SRC_MODE,D2
00002656  1639 000033F5           1776      MOVE.B  SRC_REG,D3
0000265C  4EB9 00002D60           1777      JSR     EA_START
00002662                          1778  
00002662  4EB9 000029DC           1779      JSR     PRINTCOMA   ; print coma
00002668                          1780      
00002668                          1781     * MOVE.B  #%001,DEST_MODE
00002668  4243                    1782      CLR     D3
0000266A  4242                    1783      CLR     D2
0000266C  143C 0001               1784      MOVE.B  #%001,D2
00002670  1639 000033F2           1785      MOVE.B  DEST_REG,D3
00002676  4EB9 00002D60           1786      JSR     EA_START
0000267C                          1787  
0000267C  6000 EC2A               1788      BRA     MEMORYGRABBER
00002680                          1789  
00002680                          1790  PRINTNOT    
00002680  43F9 0000337D           1791      LEA PNOT,A1
00002686  103C 000E               1792      MOVE.B   #14,D0
0000268A  4E4F                    1793      TRAP     #15
0000268C  4EB9 00002968           1794      JSR     SIZEPRINT2    
00002692                          1795      
00002692  4243                    1796      CLR     D3
00002694  4242                    1797      CLR     D2
00002696  1439 000033F3           1798      MOVE.B  DEST_MODE,D2
0000269C  1639 000033F2           1799      MOVE.B  DEST_REG,D3    
000026A2  4EB9 00002D60           1800      JSR     EA_START
000026A8                          1801      
000026A8  6000 EBFE               1802      BRA     MEMORYGRABBER
000026AC                          1803  
000026AC                          1804  PRINTJSR    
000026AC  43F9 00003381           1805      LEA     PJSR,A1
000026B2  103C 000E               1806      MOVE.B  #14,D0 
000026B6  4E4F                    1807      TRAP    #15      
000026B8  4EB9 000029CE           1808      JSR     PRINTCLRSPOT
000026BE                          1809      
000026BE  4243                    1810      CLR     D3
000026C0  4242                    1811      CLR     D2
000026C2  1439 000033F3           1812      MOVE.B  DEST_MODE,D2
000026C8  1639 000033F2           1813      MOVE.B  DEST_REG,D3    
000026CE  4EB9 00002D60           1814      JSR     EA_START
000026D4                          1815      
000026D4  6000 EBD2               1816      BRA     MEMORYGRABBER
000026D8                          1817  
000026D8                          1818  
000026D8  43F9 00003385           1819  PRINTRTS    LEA PRTS,A1
000026DE  103C 000E               1820      MOVE.B   #14,D0     ; moves #14 into data register D0
000026E2  4E4F                    1821      TRAP     #15       ; Displays message via trap 14
000026E4                          1822      
000026E4  6000 EBC2               1823      BRA     MEMORYGRABBER
000026E8                          1824      
000026E8                          1825                  ;ADDQ SECTION
000026E8                          1826  PRINTADDQ 
000026E8  43F9 000033AD           1827      LEA     PADDQ,A1
000026EE  103C 000E               1828      MOVE.B  #14,D0     ; moves #14 into data register D0
000026F2  4E4F                    1829      TRAP    #15       ; Displays message via trap 14
000026F4  4EB9 00002968           1830      JSR     SIZEPRINT2
000026FA                          1831  
000026FA  4EB9 000029EA           1832      JSR     PRINTHASH   ; print hash
00002700  4EB9 000029F6           1833      JSR     PRINTDOLLARSIGN     ; print dollar sign
00002706                          1834      
00002706  4241                    1835      CLR     D1
00002708  1239 000033F8           1836      MOVE.B  DATA_FIELD,D1
0000270E  103C 0003               1837      MOVE.B  #3,D0     
00002712  4E4F                    1838      TRAP    #15 
00002714                          1839      
00002714  4EB9 000029DC           1840      JSR     PRINTCOMA   ; print coma
0000271A                          1841      
0000271A  4243                    1842      CLR     D3
0000271C  4242                    1843      CLR     D2
0000271E  1439 000033F3           1844      MOVE.B  DEST_MODE,D2
00002724  1639 000033F2           1845      MOVE.B  DEST_REG,D3    
0000272A  4EB9 00002D60           1846      JSR     EA_START
00002730                          1847  
00002730  6000 EB76               1848      BRA      MEMORYGRABBER
00002734                          1849  
00002734                          1850                  ;SECOND SET OF COMMANDS
00002734  43F9 00003389           1851  PRINTBGT LEA PBGT,A1
0000273A  103C 000E               1852      MOVE.B   #14,D0     ; moves #14 into data register D0
0000273E  4E4F                    1853      TRAP     #15       ; Displays message via trap 14
00002740  4EB9 00002916           1854      JSR SIZESPLIT
00002746  6000 034C               1855      BRA EADN
0000274A                          1856  
0000274A  43F9 0000338D           1857  PRINTBEQ LEA PBEQ,A1
00002750  103C 000E               1858      MOVE.B   #14,D0     ; moves #14 into data register D0
00002754  4E4F                    1859      TRAP     #15       ; Displays message via trap 14
00002756  4EB9 00002916           1860      JSR SIZESPLIT
0000275C  6000 0336               1861      BRA EADN
00002760                          1862  
00002760  43F9 00003391           1863  PRINTBLE LEA PBLE,A1
00002766  103C 000E               1864      MOVE.B   #14,D0     ; moves #14 into data register D0
0000276A  4E4F                    1865      TRAP     #15       ; Displays message via trap 14
0000276C  4EB9 00002916           1866      JSR SIZESPLIT
00002772  6000 0320               1867      BRA EADN
00002776                          1868  
00002776  43F9 00003395           1869  PRINTBRA LEA PBRA,A1
0000277C  103C 000E               1870      MOVE.B   #14,D0     ; moves #14 into data register D0
00002780  4E4F                    1871      TRAP     #15       ; Displays message via trap 14
00002782  4EB9 00002916           1872      JSR SIZESPLIT
00002788  6000 030A               1873      BRA EADN
0000278C                          1874      
0000278C                          1875                  ;MOVEQ SECTION
0000278C                          1876  PRINTMOVEQ 
0000278C  43F9 0000336F           1877      LEA PMOVEQ,A1
00002792  103C 000E               1878      MOVE.B   #14,D0     ; moves #14 into data register D0
00002796  4E4F                    1879      TRAP     #15       ; Displays message via trap 14
00002798                          1880      
00002798  4EB9 000029CE           1881      JSR     PRINTCLRSPOT
0000279E  4EB9 000029EA           1882      JSR     PRINTHASH   ; print hash
000027A4  4EB9 000029F6           1883      JSR     PRINTDOLLARSIGN     ; print dollar sign  
000027AA                          1884   
000027AA  2239 000033F8           1885      MOVE.L      DATA_FIELD,D1
000027B0  143C 0010               1886      MOVE.B      #16,D2
000027B4  103C 000F               1887      MOVE.B      #15,D0     ; moves #14 into data register D0
000027B8  4E4F                    1888      TRAP        #15 
000027BA                          1889      
000027BA  4EB9 000029DC           1890      JSR     PRINTCOMA   ; print coma
000027C0  1E3C 0000               1891      MOVE.B #0,D7
000027C4  7400                    1892      MOVE.L #%000,D2
000027C6  1639 000033F2           1893      MOVE.B DEST_REG,D3
000027CC  6000 02C6               1894      BRA EADN
000027D0                          1895  
000027D0                          1896                  ;OR SECTION
000027D0                          1897  PRINTOR 
000027D0  43F9 00003399           1898      LEA     POR,A1
000027D6  103C 000E               1899      MOVE.B  #14,D0     ; moves #14 into data register D0
000027DA  4E4F                    1900      TRAP    #15       ; Displays message via trap 14
000027DC  4EB9 00002968           1901      JSR     SIZEPRINT2 
000027E2                          1902      
000027E2                          1903      * TODO : CHECK THE INVELID_EA FLAG
000027E2                          1904      
000027E2  0C39 0000 00003408      1905      CMP.B   #%0,XBit
000027EA  6700 0218               1906      BEQ     PRINT_EA_TO_DN
000027EE  6000 025C               1907      BRA     PRINT_DN_TO_EA
000027F2                          1908      
000027F2                          1909  
000027F2                          1910                  ;SUB SECTION
000027F2                          1911  PRINTSUB 
000027F2  43F9 0000339C           1912      LEA PSUB,A1
000027F8  103C 000E               1913      MOVE.B   #14,D0     ; moves #14 into data register D0
000027FC  4E4F                    1914      TRAP     #15       ; Displays message via trap 14 
000027FE  4EB9 00002968           1915      JSR     SIZEPRINT2 
00002804                          1916      
00002804                          1917      * TODO : CHECK THE INVELID_EA FLAG
00002804                          1918      
00002804  0C39 0000 00003408      1919      CMP.B   #%0,XBit
0000280C  6700 01F6               1920      BEQ     PRINT_EA_TO_DN
00002810  6000 023A               1921      BRA     PRINT_DN_TO_EA
00002814                          1922      
00002814                          1923  
00002814                          1924                  ;AND SECTION
00002814                          1925  PRINTAND 
00002814  43F9 000033A0           1926      LEA PAND,A1
0000281A  103C 000E               1927      MOVE.B   #14,D0     ; moves #14 into data register D0
0000281E  4E4F                    1928      TRAP     #15       ; Displays message via trap 14
00002820  4EB9 00002968           1929      JSR     SIZEPRINT2 
00002826                          1930      
00002826                          1931      * TODO : CHECK THE INVELID_EA FLAG
00002826                          1932      
00002826  0C39 0000 00003408      1933      CMP.B   #%0,XBit
0000282E  6700 01D4               1934      BEQ     PRINT_EA_TO_DN
00002832  6000 0218               1935      BRA     PRINT_DN_TO_EA
00002836                          1936  
00002836                          1937                  ;ADD SPLIT              
00002836                          1938  PRINTADD 
00002836  43F9 000033A4           1939      LEA PADD,A1
0000283C  103C 000E               1940      MOVE.B   #14,D0     ; moves #14 into data register D0
00002840  4E4F                    1941      TRAP     #15       ; Displays message via trap 14
00002842                          1942      
00002842  4EB9 00002968           1943      JSR     SIZEPRINT2 
00002848                          1944      
00002848                          1945      * TODO : CHECK THE INVELID_EA FLAG
00002848                          1946      
00002848  0C39 0000 00003408      1947      CMP.B   #%0,XBit
00002850  6700 01B2               1948      BEQ     PRINT_EA_TO_DN
00002854  6000 01F6               1949      BRA     PRINT_DN_TO_EA
00002858                          1950      
00002858                          1951  PRINTADDA 
00002858  43F9 000033A8           1952      LEA PADDA,A1
0000285E  103C 000E               1953      MOVE.B   #14,D0     ; moves #14 into data register D0
00002862  4E4F                    1954      TRAP     #15       ; Displays message via trap 14
00002864  4EB9 00002968           1955      JSR     SIZEPRINT2 
0000286A                          1956      
0000286A                          1957      * TODO : CHECK THE INVELID_EA FLAG
0000286A                          1958      
0000286A  13F9 000033F6 000033F4  1959      MOVE.B  TEMP_MODE,SRC_MODE
00002874  13F9 000033F7 000033F5  1960      MOVE.B  TEMP_REG,SRC_REG
0000287E  4243                    1961      CLR     D3
00002880  4242                    1962      CLR     D2
00002882  1439 000033F4           1963      MOVE.B  SRC_MODE,D2
00002888  1639 000033F5           1964      MOVE.B  SRC_REG,D3
0000288E  4EB9 00002D60           1965      JSR     EA_START
00002894                          1966  
00002894  4EB9 000029DC           1967      JSR     PRINTCOMA   ; print coma
0000289A                          1968      
0000289A                          1969     * MOVE.B  #%001,DEST_MODE
0000289A  4243                    1970      CLR     D3
0000289C  4242                    1971      CLR     D2
0000289E  143C 0001               1972      MOVE.B  #%001,D2
000028A2  1639 000033F2           1973      MOVE.B  DEST_REG,D3
000028A8  4EB9 00002D60           1974      JSR     EA_START
000028AE                          1975  
000028AE  6000 E9F8               1976      BRA     MEMORYGRABBER
000028B2                          1977      
000028B2                          1978                  ;THIRD ROTATE SPLIT   
000028B2                          1979  PRINTROTATESPLIT 
000028B2  0C79 0000 0000335D      1980      CMP #0,CommandDetail   
000028BA                          1981      *BEQ PRINTLSL
000028BA  0C79 0001 0000335D      1982      CMP #1,CommandDetail   
000028C2                          1983      *BEQ PRINTLSLDOUBLE
000028C2  0C79 0002 0000335D      1984      CMP #2,CommandDetail   
000028CA                          1985      *BEQ PRINTLSR
000028CA  0C79 0003 0000335D      1986      CMP #3,CommandDetail   
000028D2                          1987      *BEQ PRINTLSRDOUBLE
000028D2  0C79 0004 0000335D      1988      CMP #4,CommandDetail   
000028DA                          1989      *BEQ PRINTASR
000028DA  0C79 0005 0000335D      1990      CMP #5,CommandDetail   
000028E2                          1991      *BEQ PRINTASRDOUBLE
000028E2  0C79 0006 0000335D      1992      CMP #6,CommandDetail   
000028EA                          1993      *BEQ PRINTASL
000028EA  0C79 0007 0000335D      1994      CMP #7,CommandDetail   
000028F2                          1995      *BEQ PRINTASLDOUBLE
000028F2  0C79 0008 0000335D      1996      CMP #8,CommandDetail   
000028FA                          1997      *BEQ PRINTROL
000028FA  0C79 0009 0000335D      1998      CMP #9,CommandDetail   
00002902                          1999      *BEQ PRINTROLDOUBLE
00002902  0C79 000A 0000335D      2000      CMP #10,CommandDetail
0000290A                          2001      *BEQ PRINTROR     
0000290A  0C79 000B 0000335D      2002      CMP #11,CommandDetail
00002912                          2003      *BEQ PRINTRORDOUBLE            
00002912  6000 E994               2004      BRA MEMORYGRABBER    
00002916                          2005  
00002916                          2006  
00002916                          2007                  ;SIZE PRINTER
00002916                          2008  SIZESPLIT   
00002916  0CB9 00000001 000033E2  2009      CMP.L #1,SizeValue
00002920  6700 0082               2010      BEQ PRINTB
00002924  0CB9 00000002 000033E2  2011      CMP.L #2,SizeValue
0000292E  6700 0082               2012      BEQ PRINTW
00002932  0CB9 00000003 000033E2  2013      CMP.L #3,SizeValue
0000293C  6700 0082               2014      BEQ PRINTL
00002940  6000 008C               2015      BRA PRINTCLRSPOT ; go to EA/DN section
00002944                          2016  
00002944                          2017  SIZEPRINT 
00002944  0C39 0000 000033FC      2018       CMP.B  #$0,SIZE
0000294C  6700 0056               2019       BEQ    PRINTB
00002950  0C39 0001 000033FC      2020       CMP.B  #$1,SIZE
00002958  6700 0058               2021       BEQ    PRINTW      
0000295C  0C39 0002 000033FC      2022       CMP.B  #$2,SIZE
00002964  6700 005A               2023       BEQ    PRINTL 
00002968                          2024  
00002968                          2025  SIZEPRINT2   
00002968  0C39 0000 000033FC      2026      CMP.B   #$00,SIZE
00002970  6700 0032               2027      BEQ     PRINTB
00002974  0C39 0001 000033FC      2028      CMP.B   #$01,SIZE
0000297C  6700 0034               2029      BEQ     PRINTW
00002980  0C39 0010 000033FC      2030      CMP.B   #$10,SIZE
00002988  6000 0036               2031      BRA     PRINTL
0000298C                          2032  
0000298C                          2033  SIZEPRINT3
0000298C  0C39 0000 000033FC      2034      CMP.B   #$0,SIZE
00002994  6700 001C               2035      BEQ     PRINTW
00002998  0C39 0001 000033FC      2036      CMP.B   #$1,SIZE
000029A0  6700 001E               2037      BEQ     PRINTL
000029A4                          2038  
000029A4                          2039  PRINTB  
000029A4  43F9 000033E6           2040      LEA     PB,A1
000029AA  103C 000E               2041      MOVE.B  #14,D0     ; moves #14 into data register D0
000029AE  4E4F                    2042      TRAP    #15       ; Displays message via trap 14
000029B0  4E75                    2043      RTS
000029B2                          2044  
000029B2                          2045  PRINTW      
000029B2  43F9 000033EA           2046      LEA     PW,A1
000029B8  103C 000E               2047      MOVE.B  #14,D0     ; moves #14 into data register D0
000029BC  4E4F                    2048      TRAP    #15       ; Displays message via trap 14
000029BE  4E75                    2049      RTS
000029C0                          2050      
000029C0                          2051  PRINTL 
000029C0  43F9 000033EE           2052      LEA     PL,A1
000029C6  103C 000E               2053      MOVE.B  #14,D0     ; moves #14 into data register D0
000029CA  4E4F                    2054      TRAP    #15       ; Displays message via trap 14
000029CC  4E75                    2055      RTS
000029CE                          2056  
000029CE                          2057  PRINTCLRSPOT 
000029CE  43F9 000033FF           2058      LEA     CLRSPOT,A1
000029D4  103C 000E               2059      MOVE.B  #14,D0     ; moves #14 into data register D0
000029D8  4E4F                    2060      TRAP    #15       ; Displays message via trap 14
000029DA  4E75                    2061      RTS
000029DC                          2062  
000029DC                          2063  PRINTCOMA   
000029DC  43F9 00003405           2064      LEA     COMA,A1
000029E2  103C 000E               2065      MOVE.B  #14,D0     
000029E6  4E4F                    2066      TRAP    #15
000029E8  4E75                    2067      RTS
000029EA                          2068  
000029EA                          2069  PRINTHASH 
000029EA  43F9 000033FD           2070      LEA     HASH,A1    * print hash
000029F0  700E                    2071      MOVEQ   #14,D0
000029F2  4E4F                    2072      TRAP    #15
000029F4  4E75                    2073      RTS
000029F6                          2074  
000029F6                          2075  PRINTDOLLARSIGN   
000029F6  43F9 00003403           2076      LEA     DOLLARSIGN,A1   * print dollar sign
000029FC  103C 000E               2077      MOVE.B  #14,D0
00002A00  4E4F                    2078      TRAP    #15 
00002A02  4E75                    2079      RTS
00002A04                          2080  
00002A04                          2081  PRINT_EA_TO_DN
00002A04  13F9 000033F6 000033F4  2082      MOVE.B  TEMP_MODE,SRC_MODE
00002A0E  13F9 000033F7 000033F5  2083      MOVE.B  TEMP_REG,SRC_REG
00002A18  4243                    2084      CLR     D3
00002A1A  4242                    2085      CLR     D2
00002A1C  1439 000033F4           2086      MOVE.B  SRC_MODE,D2
00002A22  1639 000033F5           2087      MOVE.B  SRC_REG,D3
00002A28  4EB9 00002D60           2088      JSR     EA_START
00002A2E                          2089  
00002A2E  4EB8 29DC               2090      JSR     PRINTCOMA   ; print coma
00002A32                          2091   
00002A32  4243                    2092      CLR     D3
00002A34  4242                    2093      CLR     D2
00002A36  1439 000033F3           2094      MOVE.B  DEST_MODE,D2
00002A3C  1639 000033F2           2095      MOVE.B  DEST_REG,D3
00002A42  4EB9 00002D60           2096      JSR     EA_START
00002A48                          2097  
00002A48  6000 E85E               2098      BRA     MEMORYGRABBER
00002A4C                          2099      
00002A4C                          2100  PRINT_DN_TO_EA    
00002A4C  4243                    2101      CLR     D3
00002A4E  4242                    2102      CLR     D2
00002A50  1439 000033F3           2103      MOVE.B  DEST_MODE,D2
00002A56  1639 000033F5           2104      MOVE.B  SRC_REG,D3
00002A5C  4EB9 00002D60           2105      JSR     EA_START
00002A62                          2106      
00002A62  4EB8 29DC               2107      JSR     PRINTCOMA   ; print coma
00002A66                          2108      
00002A66  13F9 000033F6 000033F4  2109      MOVE.B  TEMP_MODE,SRC_MODE
00002A70  13F9 000033F7 000033F5  2110      MOVE.B  TEMP_REG,SRC_REG
00002A7A  4243                    2111      CLR     D3
00002A7C  4242                    2112      CLR     D2
00002A7E  1439 000033F4           2113      MOVE.B  SRC_MODE,D2
00002A84  1639 000033F5           2114      MOVE.B  SRC_REG,D3
00002A8A  4EB9 00002D60           2115      JSR     EA_START
00002A90                          2116      
00002A90  6000 E816               2117      BRA     MEMORYGRABBER
00002A94                          2118  
00002A94                          2119  
00002A94                          2120                  ;PRINT EA/DN
00002A94                          2121  EADN 
00002A94  BE3C 0000               2122      CMP.B   #0,D7
00002A98  6700 0030               2123      BEQ     PRINTNOTRAIL
00002A9C  BE3C 0001               2124      CMP.B   #1,D7
00002AA0  6700 000E               2125      BEQ     PRINTONETRAIL 
00002AA4  BE3C 0002               2126      CMP.B   #2,D7
00002AA8  6700 0010               2127      BEQ     PRINTTWOTRAIL
00002AAC                          2128      
00002AAC  6000 E7FA               2129      BRA     MEMORYGRABBER
00002AB0                          2130      
00002AB0                          2131  PRINTONETRAIL 
00002AB0  4EB9 00002D60           2132      JSR EA_Start
00002AB6  6000 E7F0               2133      BRA MEMORYGRABBER
00002ABA                          2134  
00002ABA                          2135  PRINTTWOTRAIL 
00002ABA  4EB9 00002D60           2136      JSR EA_Start
00002AC0  4EB9 00002D60           2137      JSR EA_Start
00002AC6  6000 E7E0               2138      BRA MEMORYGRABBER
00002ACA                          2139      
00002ACA                          2140  PRINTNOTRAIL 
00002ACA  4EB9 00002D60           2141      JSR EA_Start
00002AD0  6000 E7D6               2142      BRA MEMORYGRABBER
00002AD4                          2143  
00002AD4                          2144  CLOSINGSTATEMENTS     
00002AD4  43F9 00003358           2145      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002ADA  103C 000E               2146      MOVE.B   #14,D0     ; moves #14 into data register D0
00002ADE  4E4F                    2147      TRAP     #15       ; Displays message via trap 14
00002AE0                          2148     
00002AE0                          2149  STOP    
00002AE0  103C 0009               2150      MOVE.B #9,D0        ; moves #9 into data register D0
00002AE4  4E4F                    2151      TRAP     #15       ; halt simulator via trap 9
00002AE6                          2152     
00002AE6                          2153      
00002AE6                          2154  ;----------------------------- ADDED THIS FOR OP CODE PART 
00002AE6                          2155  ********* CHECK DESTINATION ***********
00002AE6                          2156  CHECK_DESTINATION
00002AE6  13FC 000F 0000340A      2157      MOVE.B  #$F,DstMode
00002AEE                          2158      
00002AEE  0C39 0007 000033F3      2159      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
00002AF6  6700 0026               2160      BEQ     CHECK_DEST_REG             * Checks registers
00002AFA                          2161      
00002AFA  0C39 0005 000033F3      2162      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
00002B02  6700 0058               2163      BEQ     R_CHECK_DEST    * Print DATA instead 
00002B06                          2164      
00002B06  0C39 0006 000033F3      2165      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002B0E  6700 004C               2166      BEQ     R_CHECK_DEST    * Print DATA instead
00002B12                          2167      
00002B12  13F9 000033F3 0000340A  2168      MOVE.B  DEST_MODE,DstMode
00002B1C  4E75                    2169      RTS
00002B1E                          2170  CHECK_DEST_REG
00002B1E  0C39 0002 000033F2      2171      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002B26  6700 0034               2172      BEQ     R_CHECK_DEST
00002B2A                          2173  
00002B2A  0C39 0003 000033F2      2174      CMP.B   #3,DEST_REG         * if DEST_REG = 011
00002B32  6700 0028               2175      BEQ     R_CHECK_DEST
00002B36                          2176      
00002B36  0C39 0005 000033F2      2177      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002B3E  6C00 016C               2178      BGE     RETURN
00002B42                          2179      
00002B42  13F9 000033F3 0000340A  2180      MOVE.B  DEST_MODE,DstMode
00002B4C  4286                    2181      CLR.L   D6
00002B4E  1C39 000033F2           2182      MOVE.B  DEST_REG,D6
00002B54  DD39 0000340A           2183      ADD.B   D6,DstMode
00002B5A  4E75                    2184      RTS
00002B5C                          2185  R_CHECK_DEST
00002B5C  13FC 000E 0000340A      2186      MOVE.B  #$E,DstMode
00002B64  4E75                    2187      RTS
00002B66                          2188  ********* CHECK TEMP ***********
00002B66                          2189  CHECK_TEMP
00002B66                          2190  
00002B66  13FC 000F 0000340B      2191      MOVE.B  #$F,TempMode
00002B6E                          2192      
00002B6E  0C39 0007 000033F6      2193      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
00002B76  6700 0026               2194      BEQ     CHECK_TEMP_REG      * Checks registers
00002B7A                          2195  
00002B7A  0C39 0005 000033F6      2196      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
00002B82  6700 0058               2197      BEQ     R_CHECK_TEMP    * 
00002B86                          2198      
00002B86  0C39 0006 000033F6      2199      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
00002B8E  6700 004C               2200      BEQ     R_CHECK_TEMP    * 
00002B92                          2201      
00002B92  13F9 000033F6 0000340B  2202      MOVE.B  TEMP_MODE,TempMode
00002B9C  4E75                    2203      RTS
00002B9E                          2204  CHECK_TEMP_REG
00002B9E  0C39 0002 000033F7      2205      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
00002BA6  6700 0034               2206      BEQ     R_CHECK_TEMP
00002BAA                          2207  
00002BAA  0C39 0003 000033F7      2208      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
00002BB2  6700 0028               2209      BEQ     R_CHECK_TEMP
00002BB6                          2210      
00002BB6  0C39 0005 000033F7      2211      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002BBE  6700 00EC               2212      BEQ     RETURN
00002BC2                          2213      
00002BC2  13F9 000033F6 0000340B  2214      MOVE.B  TEMP_MODE,TempMode
00002BCC  4286                    2215      CLR.L   D6
00002BCE  1C39 000033F7           2216      MOVE.B  TEMP_REG,D6
00002BD4  DD39 0000340B           2217      ADD.B   D6,TempMode
00002BDA  4E75                    2218      RTS
00002BDC                          2219  R_CHECK_TEMP
00002BDC  13FC 000E 0000340B      2220      MOVE.B  #$E,TempMode
00002BE4  4E75                    2221      RTS
00002BE6                          2222  ******************** CHECK_SOURCE ******************** 
00002BE6                          2223  CHECK_SOURCE    * TODO
00002BE6  13FC 000F 0000340C      2224      MOVE.B  #$F,SrcMode
00002BEE                          2225      
00002BEE  0C39 0007 000033F4      2226      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002BF6  6700 0026               2227      BEQ     CHECK_SOURCE_REG    * Checks registers
00002BFA                          2228  
00002BFA  0C39 0005 000033F4      2229      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
00002C02  6700 0058               2230      BEQ     R_CHECK_SOURCE 
00002C06                          2231      
00002C06  0C39 0006 000033F4      2232      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002C0E  6700 004C               2233      BEQ     R_CHECK_SOURCE 
00002C12                          2234      
00002C12  13F9 000033F4 0000340C  2235      MOVE.B  SRC_MODE,SrcMode
00002C1C  4E75                    2236      RTS
00002C1E                          2237  CHECK_SOURCE_REG
00002C1E  0C39 0002 000033F5      2238      CMP.B   #2,SRC_REG             * if RRRS = 010
00002C26  6700 0034               2239      BEQ     R_CHECK_SOURCE
00002C2A                          2240  
00002C2A  0C39 0003 000033F5      2241      CMP.B   #3,SRC_REG          * if RRRS = 011
00002C32  6700 0028               2242      BEQ     R_CHECK_SOURCE
00002C36                          2243      
00002C36  0C39 0005 000033F5      2244      CMP.B   #5,SRC_REG      * if RRRS = 101
00002C3E  6C00 006C               2245      BGE     RETURN
00002C42                          2246      
00002C42  13F9 000033F4 0000340C  2247      MOVE.B  SRC_MODE,SrcMode
00002C4C  4286                    2248      CLR.L   D6
00002C4E  1C39 000033F5           2249      MOVE.B  SRC_REG,D6
00002C54  DD39 0000340C           2250      ADD.B   D6,SrcMode
00002C5A  4E75                    2251      RTS
00002C5C                          2252  R_CHECK_SOURCE
00002C5C  13FC 000E 0000340C      2253      MOVE.B  #$E,SrcMode
00002C64  4E75                    2254      RTS
00002C66                          2255  ******************** XBIT ********************
00002C66                          2256  CHECK_XBIT      
00002C66  0C39 0000 00003408      2257      CMP.B   #%0,XBit
00002C6E  6700 0008               2258      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002C72  6600 001E               2259      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002C76  4E75                    2260      RTS
00002C78                          2261  TEMP_TO_DEST
00002C78  13F9 000033F7 000033F2  2262      MOVE.B  TEMP_REG,DEST_REG
00002C82  13F9 000033F6 000033F3  2263      MOVE.B  TEMP_MODE,DEST_MODE
00002C8C  4EB8 2AE6               2264      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002C90  4E75                    2265      RTS
00002C92                          2266  TEMP_TO_SRC
00002C92  13F9 000033F7 000033F5  2267      MOVE.B  TEMP_REG,SRC_REG
00002C9C  13F9 000033F6 000033F4  2268      MOVE.B  TEMP_MODE,SRC_MODE
00002CA6  4EB8 2BE6               2269      JSR     CHECK_SOURCE                 
00002CAA  4E75                    2270      RTS
00002CAC                          2271    
00002CAC                          2272  ******************** OTHER COMMANDS ********************
00002CAC                          2273  RETURN
00002CAC  4E75                    2274      RTS
00002CAE                          2275  
00002CAE                          2276  FORMAT_DATA
00002CAE  0C39 0000 000033F8      2277      CMP.B   #0,DATA_FIELD
00002CB6  66F4                    2278      BNE     RETURN
00002CB8  13FC 0008 000033F8      2279      MOVE.B  #8,DATA_FIELD
00002CC0  4E75                    2280      RTS
00002CC2                          2281  
00002CC2                          2282  CHECK_DATA_NEG
00002CC2  BC3C 0080               2283      CMP.B   #128,D6
00002CC6  6700 0004               2284      BEQ     PRINT_NEG
00002CCA  4E75                    2285      RTS
00002CCC                          2286      
00002CCC                          2287  PRINT_NEG
00002CCC  43F9 00003401           2288      LEA     NEG,A1      * print "-"
00002CD2  103C 000E               2289      MOVE.B  #14,D0
00002CD6  4E4F                    2290      TRAP    #15
00002CD8  4E75                    2291      RTS
00002CDA                          2292  
00002CDA                          2293  PRINT_DATA
00002CDA  43F9 000033CA           2294      LEA     PDATA,A1
00002CE0  103C 000E               2295      MOVE.B  #14,D0
00002CE4  4E4F                    2296      TRAP    #15
00002CE6                          2297      
00002CE6  4EB8 29CE               2298      JSR     PRINTCLRSPOT      * print space
00002CEA                          2299      
00002CEA  4EB8 29EA               2300      JSR PRINTHASH
00002CEE  4EB8 29F6               2301      JSR PRINTDOLLARSIGN
00002CF2  3239 000033DE           2302      MOVE.W      COMMANDDATA,D1
00002CF8  143C 0010               2303      MOVE.B      #16,D2
00002CFC  103C 000F               2304      MOVE.B      #15,D0     ; moves #14 into data register D0
00002D00  4E4F                    2305      TRAP        #15  
00002D02                          2306      * TODO: PRINT #$
00002D02                          2307      * TODO: PRINT COMMANDDATA 
00002D02  6000 E5A4               2308      BRA     MEMORYGRABBER
00002D06                          2309      
00002D06                          2310      
00002D06                          2311  *SETINVEA
00002D06                          2312      *MOVE.B  #1,INVALID_EA
00002D06                          2313      *RTS     
00002D06                          2314      
00002D06                          2315  CLEARMR
00002D06  13FC 0000 000033F2      2316      MOVE.B  #0,DEST_REG 
00002D0E  13FC 0000 000033F3      2317      MOVE.B  #0,DEST_MODE
00002D16  13FC 0000 000033F4      2318      MOVE.B  #0,SRC_MODE
00002D1E  13FC 0000 000033F5      2319      MOVE.B  #0,SRC_REG
00002D26  13FC 0000 000033F6      2320      MOVE.B  #0,TEMP_MODE
00002D2E  13FC 0000 000033F7      2321      MOVE.B  #0,TEMP_REG 
00002D36  13FC 0000 000033FC      2322      MOVE.B  #0,SIZE
00002D3E  13FC 0000 000033E2      2323      MOVE.B  #0,SizeValue
00002D46  23FC 00000000 000033F8  2324      MOVE.L  #0,DATA_FIELD
00002D50  7200                    2325      MOVE.L #0,D1
00002D52  7400                    2326      MOVE.L #0,D2
00002D54  7600                    2327      MOVE.L #0,D3
00002D56  7800                    2328      MOVE.L #0,D4
00002D58  7A00                    2329      MOVE.L #0,D5
00002D5A  7C00                    2330      MOVE.L #0,D6
00002D5C  7E00                    2331      MOVE.L #0,D7
00002D5E  4E75                    2332      RTS  
00002D60                          2333  
00002D60                          2334  *************    
00002D60                          2335  
00002D60                          2336  *******************************************************
00002D60                          2337  * EA subroutine
00002D60                          2338  * Purpose: Generate EA
00002D60                          2339  *         Addresses used: 
00002D60                          2340  *            D2 FOR MODE
00002D60                          2341  *            D3 FOR REGISTER
00002D60                          2342  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002D60                          2343  *            D1 FOR PRINTING
00002D60                          2344  *            A6 MIMICKS INSTRUCTION BUFFER
00002D60                          2345  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002D60                          2346  ***************************************************
00002D60                          2347  
00002D60  0C39 000F 0000340D      2348  EA_start        CMP.B      #$F,STATE
00002D68  6700 039A               2349                  BEQ        EA_FINISH
00002D6C  4EF9 00003106           2350                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002D72                          2351  
00002D72  B47C 0000               2352  Continue_EA     CMP.W       #MODE000,D2             
00002D76  6700 0036               2353                  BEQ         DATA_REGISTER                 
00002D7A  B47C 0001               2354                  CMP.W       #MODE001,D2               
00002D7E  6700 004A               2355                  BEQ         ADDRESS_REGISTER                 
00002D82  B47C 0002               2356                  CMP.W       #MODE010,D2              
00002D86  6700 005E               2357                  BEQ         ADDRESS_REGISTER_DIRECT               
00002D8A  B47C 0003               2358                  CMP.W       #MODE011,D2              
00002D8E  6700 0086               2359                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002D92  B47C 0004               2360                  CMP.W       #MODE100,D2          
00002D96  6700 00B8               2361                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002D9A  B47C 0007               2362                  CMP.W       #MODE111,D2          
00002D9E  6700 00EA               2363                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002DA2  13FC 0001 0000340D      2364                  MOVE.B      #BAD_FLAG,STATE               
00002DAA  6000 0358               2365                  BRA         EA_FINISH              
00002DAE                          2366                  
00002DAE                          2367  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002DAE  123C 0044               2368                  MOVE.B   #D,D1
00002DB2  103C 0006               2369                  MOVE.B  #6,D0
00002DB6  4E4F                    2370                  TRAP    #15
00002DB8  0685 00000030           2371                  ADDI.L   #$30,D5
00002DBE  1205                    2372                  MOVE.B   D5,D1
00002DC0  103C 0006               2373                  MOVE.B  #6,D0
00002DC4  4E4F                    2374                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002DC6  6000 033C               2375                  BRA      EA_FINISH
00002DCA                          2376                      
00002DCA                          2377  
00002DCA  123C 0041               2378  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002DCE  103C 0006               2379                   MOVE.B  #6,D0
00002DD2  4E4F                    2380                   TRAP    #15
00002DD4  0685 00000030           2381                   ADDI.L   #$30,D5
00002DDA  1205                    2382                   MOVE.B   D5,D1
00002DDC  103C 0006               2383                   MOVE.B  #6,D0
00002DE0  4E4F                    2384                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002DE2  6000 0320               2385                   BRA      EA_FINISH
00002DE6                          2386  
00002DE6                          2387                   
00002DE6                          2388  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002DE6  123C 0028               2389                          MOVE.B   #OPEN_PARENTHESIS,D1
00002DEA  103C 0006               2390                          MOVE.B   #6,D0
00002DEE  4E4F                    2391                          TRAP     #15
00002DF0  123C 0041               2392                          MOVE.B   #A,D1
00002DF4  103C 0006               2393                          MOVE.B  #6,D0
00002DF8  4E4F                    2394                          TRAP    #15
00002DFA  0685 00000030           2395                          ADDI.L   #$30,D5
00002E00  1205                    2396                          MOVE.B   D5,D1
00002E02  103C 0006               2397                          MOVE.B  #6,D0
00002E06  4E4F                    2398                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E08  123C 0029               2399                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002E0C  103C 0006               2400                          MOVE.B  #6,D0
00002E10  4E4F                    2401                          TRAP    #15
00002E12  6000 02F0               2402                          BRA      EA_FINISH
00002E16                          2403  
00002E16                          2404  
00002E16                          2405  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002E16  123C 0028               2406                             MOVE.B   #OPEN_PARENTHESIS,D1
00002E1A  103C 0006               2407                             MOVE.B   #6,D0
00002E1E  4E4F                    2408                             TRAP     #15
00002E20  123C 0041               2409                             MOVE.B   #A,D1
00002E24  103C 0006               2410                             MOVE.B  #6,D0
00002E28  4E4F                    2411                             TRAP    #15
00002E2A  0685 00000030           2412                             ADDI.L   #$30,D5
00002E30  1205                    2413                             MOVE.B   D5,D1
00002E32  103C 0006               2414                             MOVE.B  #6,D0
00002E36  4E4F                    2415                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E38  123C 0029               2416                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002E3C  103C 0006               2417                             MOVE.B  #6,D0
00002E40  4E4F                    2418                             TRAP    #15
00002E42                          2419                           *  MOVE.B   #PLUS_SIGN,(A4)+
00002E42  123C 002B               2420                           MOVE.B   #PLUS_SIGN,D1
00002E46  103C 0006               2421                             MOVE.B  #6,D0
00002E4A  4E4F                    2422                             TRAP    #15
00002E4C  6000 02B6               2423                             BRA      EA_FINISH
00002E50                          2424  
00002E50                          2425  
00002E50                          2426  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002E50  123C 002D               2427                             MOVE.B   #MINUS_SIGN,D1
00002E54  103C 0006               2428                             MOVE.B   #6,D0
00002E58  4E4F                    2429                             TRAP        #15
00002E5A  123C 0028               2430                             MOVE.B   #OPEN_PARENTHESIS,D1
00002E5E  103C 0006               2431                             MOVE.B   #6,D0
00002E62  4E4F                    2432                             TRAP     #15
00002E64  123C 0041               2433                             MOVE.B   #A,D1
00002E68  103C 0006               2434                             MOVE.B  #6,D0
00002E6C  4E4F                    2435                             TRAP    #15
00002E6E  0685 00000030           2436                             ADDI.L   #$30,D5
00002E74  1205                    2437                             MOVE.B   D5,D1
00002E76  103C 0006               2438                             MOVE.B  #6,D0
00002E7A  4E4F                    2439                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E7C  123C 0029               2440                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002E80  103C 0006               2441                             MOVE.B  #6,D0
00002E84  4E4F                    2442                             TRAP    #15
00002E86  6000 027C               2443                             BRA      EA_FINISH
00002E8A                          2444  
00002E8A                          2445  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002E8A  6000 0002               2446                                BRA  CONTINUE_A_I_A
00002E8E                          2447                                
00002E8E                          2448                                
00002E8E                          2449  CONTINUE_A_I_A                
00002E8E  BA3C 0004               2450                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002E92  6700 001E               2451                                BEQ         IMMIDIATE_REGISTER                
00002E96  BA3C 0000               2452                                CMP.B       #0,D5                ; WORD ADDRESSING
00002E9A  6700 0048               2453                                BEQ         WORD_ADDRESSING                
00002E9E  BA3C 0001               2454                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002EA2  6700 0054               2455                                BEQ         LONG_ADDRESSING              
00002EA6  13FC 0001 0000340D      2456                                MOVE.B      #BAD_FLAG,STATE              
00002EAE  6000 0254               2457                                BRA         EA_FINISH                * jump to end   
00002EB2                          2458                                
00002EB2                          2459                                
00002EB2  123C 0023               2460  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002EB6  103C 0006               2461                                MOVE.B #6,D0
00002EBA  4E4F                    2462                                TRAP   #15
00002EBC  0C39 0001 000033FC      2463                                CMP.B #1,SIZE   ;BYTE
00002EC4  6700 0046               2464                                BEQ   GETBYTE
00002EC8  0C39 0002 000033FC      2465                                CMP.B #2,SIZE   ;BYTE
00002ED0  6700 0044               2466                                BEQ   GETWORD
00002ED4  0C39 0003 000033FC      2467                                CMP.B #3,SIZE   ;BYTE
00002EDC  6700 0042               2468                                BEQ   GETLONG
00002EE0  6000 003E               2469                                BRA   GETLONG
00002EE4                          2470                                
00002EE4                          2471  
00002EE4  123C 0024               2472  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002EE8  103C 0006               2473                               MOVE.B #6,D0
00002EEC  4E4F                    2474                               TRAP  #15
00002EEE  3E1E                    2475                               MOVE.W  (A6)+,D7
00002EF0  6000 00BE               2476                               BRA   PRINT_WORD
00002EF4  6000 020E               2477                               BRA   EA_FINISH
00002EF8                          2478  
00002EF8  123C 0024               2479  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002EFC  103C 0006               2480                               MOVE.B #6,D0
00002F00  4E4F                    2481                               TRAP  #15
00002F02  2E1E                    2482                               MOVE.L  (A6)+,D7
00002F04  6000 0128               2483                               BRA   PRINT_LONG
00002F08  6000 01FA               2484                               BRA   EA_FINISH                            
00002F0C                          2485  
00002F0C                          2486  GETBYTE      
00002F0C  1E1E                    2487                  MOVE.B   (A6)+,D7    
00002F0E  6B00 001A               2488                  BMI     ADD_NEGATIVE
00002F12  6000 0024               2489                  BRA     PRINT_BRANCHING
00002F16                          2490  GETWORD                
00002F16  3E1E                    2491                  MOVE.W   (A6)+,D7
00002F18  6B00 0010               2492                  BMI     ADD_NEGATIVE
00002F1C  6000 001A               2493                  BRA     PRINT_BRANCHING
00002F20                          2494  GETLONG                
00002F20                          2495                  
00002F20  2E1E                    2496                  MOVE.L   (A6)+,D7
00002F22  6B00 0006               2497                  BMI     ADD_NEGATIVE
00002F26  6000 0010               2498                  BRA     PRINT_BRANCHING
00002F2A                          2499                  
00002F2A  123C 002D               2500  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00002F2E  123C 0006               2501                  MOVE.B #6,D1
00002F32  4E4F                    2502                  TRAP   #15
00002F34  6000 0002               2503                  BRA    PRINT_BRANCHING
00002F38                          2504  
00002F38                          2505  
00002F38  0C39 0001 000033FC      2506  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002F40  6700 001C               2507                  BEQ    PRINT_BYTE    
00002F44  0C39 0002 000033FC      2508                  CMP.B #2,SIZE   ;WORD
00002F4C  6700 0062               2509                  BEQ    PRINT_WORD
00002F50  0C39 0003 000033FC      2510                  CMP.B  #3,SIZE  ;LONG
00002F58  6700 00D4               2511                  BEQ    PRINT_LONG
00002F5C  60DA                    2512                  BRA    PRINT_BRANCHING
00002F5E                          2513  
00002F5E                          2514  
00002F5E                          2515  
00002F5E                          2516  
00002F5E                          2517                  
00002F5E                          2518  **** BYTE DATA PRINTING***********************
00002F5E  4241                    2519  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002F60                          2520                 
00002F60                          2521  
00002F60  BEBC 0000000F           2522                 CMP.L   #$F,D7              
00002F66  6F00 0006               2523                 BLE     BYTE_ONE_LOOP                  
00002F6A  6000 000E               2524                 BRA     READ_BYTE
00002F6E                          2525  
00002F6E                          2526  BYTE_ONE_LOOP
00002F6E  13FC 0001 00003428      2527                  MOVE.B  #1,NUMBER_OF_HEX  
00002F76  6000 0002               2528                  BRA     READ_BYTE
00002F7A                          2529      
00002F7A                          2530  READ_BYTE                           
00002F7A  0C39 0000 00003428      2531      CMP.B   #0,NUMBER_OF_HEX               
00002F82  6700 0014               2532      BEQ     COPYBYTE
00002F86                          2533      
00002F86  123C 0030               2534      MOVE.B  #$30,D1             
00002F8A  103C 0006               2535      MOVE.B  #6,D0               
00002F8E  4E4F                    2536      TRAP    #15
00002F90                          2537  
00002F90  5339 00003428           2538      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002F96  60E2                    2539      BRA     READ_BYTE           ; LOOP
00002F98                          2540      
00002F98                          2541  COPYBYTE
00002F98  2207                    2542      MOVE.L  D7,D1               ; COPY DATA 
00002F9A  143C 0010               2543      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002F9E  103C 000F               2544      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002FA2  4E4F                    2545      TRAP    #15
00002FA4  13FC 0000 00003428      2546      MOVE.B  #0,NUMBER_OF_HEX
00002FAC  6000 0156               2547      BRA  EA_FINISH
00002FB0                          2548  
00002FB0                          2549  
00002FB0                          2550  
00002FB0                          2551  
00002FB0                          2552  
00002FB0                          2553  ******PRINT WORD DATA******************
00002FB0  4241                    2554  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002FB2                          2555                 
00002FB2                          2556  
00002FB2  BEBC 0000000F           2557                 CMP.L   #$F,D7              
00002FB8  6F00 001A               2558                 BLE     WORD_ONE_LOOP
00002FBC  BEBC 000000FF           2559                 CMP.L   #$FF,D7              
00002FC2  6F00 001C               2560                 BLE     WORD_TWO_LOOP
00002FC6  BEBC 00000FFF           2561                 CMP.L   #$FFF,D7              
00002FCC  6F00 001E               2562                 BLE     WORD_THREE_LOOP                  
00002FD0  6000 0026               2563                 BRA     READ_WORD
00002FD4                          2564  
00002FD4                          2565  WORD_ONE_LOOP
00002FD4  13FC 0001 00003428      2566                  MOVE.B  #1,NUMBER_OF_HEX  
00002FDC  6000 001A               2567                  BRA     READ_WORD
00002FE0                          2568                  
00002FE0                          2569  WORD_TWO_LOOP
00002FE0  13FC 0002 00003428      2570                  MOVE.B  #2,NUMBER_OF_HEX  
00002FE8  6000 000E               2571                  BRA     READ_WORD
00002FEC                          2572                  
00002FEC                          2573  WORD_THREE_LOOP
00002FEC  13FC 0003 00003428      2574                  MOVE.B  #3,NUMBER_OF_HEX  
00002FF4  6000 0002               2575                  BRA     READ_WORD                
00002FF8                          2576      
00002FF8                          2577  READ_WORD                           
00002FF8  0C39 0000 00003428      2578      CMP.B   #0,NUMBER_OF_HEX               
00003000  6700 0014               2579      BEQ     COPYWORD
00003004                          2580      
00003004  123C 0030               2581      MOVE.B  #$30,D1             
00003008  103C 0006               2582      MOVE.B  #6,D0               
0000300C  4E4F                    2583      TRAP    #15
0000300E                          2584  
0000300E  5339 00003428           2585      SUBI.B  #1,NUMBER_OF_HEX              
00003014  60E2                    2586      BRA     READ_WORD                   ; LOOP
00003016                          2587  
00003016                          2588  COPYWORD
00003016  2207                    2589      MOVE.L  D7,D1               ; COPY DATA 
00003018  143C 0010               2590      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
0000301C  103C 000F               2591      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00003020  4E4F                    2592      TRAP    #15
00003022  13FC 0000 00003428      2593      MOVE.B  #0,NUMBER_OF_HEX
0000302A  6000 00D8               2594      BRA  EA_FINISH
0000302E                          2595  
0000302E                          2596  ****************PRINT LONG DATA*****************
0000302E  4241                    2597  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00003030                          2598                 
00003030                          2599  
00003030  BEBC 0000000F           2600                 CMP.L   #$F,D7              
00003036  6F00 0042               2601                 BLE     LONG_ONE_LOOP
0000303A  BEBC 000000FF           2602                 CMP.L   #$FF,D7              
00003040  6F00 0044               2603                 BLE     LONG_TWO_LOOP
00003044  BEBC 00000FFF           2604                 CMP.L   #$FFF,D7              
0000304A  6F00 0046               2605                 BLE     LONG_THREE_LOOP
0000304E  BEBC 0000FFFF           2606                 CMP.L   #$FFFF,D7              
00003054  6F00 0048               2607                 BLE     LONG_FOUR_LOOP
00003058  BEBC 000FFFFF           2608                 CMP.L   #$FFFFF,D7              
0000305E  6F00 004A               2609                 BLE     LONG_FIVE_LOOP
00003062  BEBC 00FFFFFF           2610                 CMP.L   #$FFFFFF,D7              
00003068  6F00 004C               2611                 BLE     LONG_SIX_LOOP
0000306C  BEBC 0FFFFFFF           2612                 CMP.L   #$FFFFFFF,D7              
00003072  6F00 004E               2613                 BLE     LONG_SEVEN_LOOP                  
00003076  6000 0056               2614                 BRA     READ_LONG
0000307A                          2615  
0000307A                          2616  LONG_ONE_LOOP
0000307A  13FC 0001 00003428      2617                  MOVE.B  #1,NUMBER_OF_HEX  
00003082  6000 004A               2618                  BRA     READ_LONG
00003086                          2619                  
00003086                          2620  LONG_TWO_LOOP
00003086  13FC 0002 00003428      2621                  MOVE.B  #2,NUMBER_OF_HEX  
0000308E  6000 003E               2622                  BRA     READ_LONG
00003092                          2623                  
00003092                          2624  LONG_THREE_LOOP
00003092  13FC 0003 00003428      2625                  MOVE.B  #3,NUMBER_OF_HEX  
0000309A  6000 0032               2626                  BRA     READ_LONG                
0000309E                          2627  LONG_FOUR_LOOP
0000309E  13FC 0004 00003428      2628                  MOVE.B  #4,NUMBER_OF_HEX  
000030A6  6000 0026               2629                  BRA     READ_LONG
000030AA                          2630                  
000030AA                          2631  LONG_FIVE_LOOP
000030AA  13FC 0005 00003428      2632                  MOVE.B  #5,NUMBER_OF_HEX  
000030B2  6000 001A               2633                  BRA     READ_LONG
000030B6                          2634                  
000030B6                          2635  LONG_SIX_LOOP
000030B6  13FC 0006 00003428      2636                  MOVE.B  #6,NUMBER_OF_HEX  
000030BE  6000 000E               2637                  BRA     READ_LONG
000030C2                          2638  LONG_SEVEN_LOOP
000030C2  13FC 0007 00003428      2639                  MOVE.B  #7,NUMBER_OF_HEX  
000030CA  6000 0002               2640                  BRA     READ_LONG
000030CE                          2641  
000030CE                          2642       
000030CE                          2643  READ_LONG                           
000030CE  0C39 0000 00003428      2644      CMP.B   #0,NUMBER_OF_HEX               
000030D6  6700 0014               2645      BEQ     COPYLONG
000030DA  123C 0030               2646      MOVE.B  #$30,D1             
000030DE  103C 0006               2647      MOVE.B  #6,D0               
000030E2  4E4F                    2648      TRAP    #15
000030E4                          2649  
000030E4  5339 00003428           2650      SUBI.B  #1,NUMBER_OF_HEX               
000030EA  60E2                    2651      BRA     READ_LONG                   ; LOOP
000030EC                          2652  
000030EC                          2653  COPYLONG
000030EC  2207                    2654      MOVE.L  D7,D1               ; COPY DATA 
000030EE  143C 0010               2655      MOVE.B  #16,D2              ; USIGN BASE TO 16
000030F2  103C 000F               2656      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
000030F6  4E4F                    2657      TRAP    #15
000030F8  13FC 0000 00003428      2658      MOVE.B  #0,NUMBER_OF_HEX
00003100  6000 0002               2659      BRA  EA_FINISH
00003104                          2660  
00003104                          2661    
00003104                          2662  
00003104  4E75                    2663  EA_FINISH      RTS
00003106                          2664  
00003106                          2665  
00003106                          2666  
00003106                          2667  
00003106                          2668  ************************************************
00003106                          2669  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
00003106                          2670  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
00003106                          2671  ************************************************
00003106                          2672  REGISTER_NUMBER_TO_DECIMAL 
00003106  B67C 0000               2673                             CMP.W       #REG_0,D3
0000310A  6700 0046               2674                             BEQ         RG0
0000310E  B67C 0001               2675                             CMP.W       #REG_1,D3
00003112  6700 0046               2676                             BEQ         RG1
00003116  B67C 0002               2677                             CMP.W       #REG_2,D3
0000311A  6700 0046               2678                             BEQ         RG2
0000311E  B67C 0003               2679                             CMP.W       #REG_3,D3
00003122  6700 0046               2680                             BEQ         RG3
00003126  B67C 0004               2681                             CMP.W       #REG_4,D3
0000312A  6700 0046               2682                             BEQ         RG4
0000312E  B67C 0005               2683                             CMP.W       #REG_5,D3
00003132  6700 0046               2684                             BEQ         RG5
00003136  B67C 0006               2685                             CMP.W       #REG_6,D3
0000313A  6700 0046               2686                             BEQ         RG6
0000313E  B67C 0007               2687                             CMP.W       #REG_7,D3
00003142  6700 0046               2688                             BEQ         RG7
00003146  13FC 0001 0000340D      2689                             MOVE.B      #BAD_FLAG,STATE
0000314E  4EF8 2D72               2690                             JMP         CONTINUE_EA
00003152                          2691   
00003152  1A3C 0000               2692  RG0    MOVE.B   #0,D5
00003156  4EF8 2D72               2693         JMP      Continue_EA
0000315A  1A3C 0001               2694  RG1    MOVE.B   #1,D5
0000315E  4EF8 2D72               2695         JMP      Continue_EA
00003162  1A3C 0002               2696  RG2    MOVE.B   #2,D5
00003166  4EF8 2D72               2697         JMP      Continue_EA
0000316A  1A3C 0003               2698  RG3    MOVE.B   #3,D5
0000316E  4EF8 2D72               2699         JMP      Continue_EA
00003172  1A3C 0004               2700  RG4    MOVE.B   #4,D5
00003176  4EF8 2D72               2701         JMP      Continue_EA
0000317A  1A3C 0005               2702  RG5    MOVE.B   #5,D5
0000317E  4EF8 2D72               2703         JMP      Continue_EA
00003182  1A3C 0006               2704  RG6    MOVE.B   #6,D5
00003186  4EF8 2D72               2705         JMP      Continue_EA
0000318A  1A3C 0007               2706  RG7    MOVE.B   #7,D5
0000318E  4EF8 2D72               2707         JMP      Continue_EA 
00003192                          2708      
00003192                          2709  ;------------------------------------------------
00003192                          2710      
00003192                          2711  Float   DS.L 1 #0
00003196                          2712  
00003196                          2713  ValOne    DS.B 1 #0
00003197                          2714  ValTwo    DS.B 1 #0
00003198                          2715  ValThree    DS.B 1 #0
00003199                          2716  ValFour    DS.B 1 #0
0000319A                          2717  ValFive    DS.B 1 #0
0000319B                          2718  ValSix    DS.B 1 #0
0000319C                          2719  ValSeven    DS.B 1 #0
0000319D                          2720  ValEight    DS.B 1 #0
0000319E                          2721  
0000319E                          2722  Addsum DS.W 1 #0
000031A0                          2723  CarryBit DS.B 1 #0   
000031A1                          2724  
000031A1                          2725  Trailers DS.B 1 #0
000031A2                          2726  Source DS.L 1 #0
000031A6                          2727  Destination DS.L 1 #0
000031AA                          2728  
000031AA                          2729          ;generic command lines
000031AA= 57 65 6C 63 6F 6D ...   2730  WELCOME DC.B 'Welcome to our decoder',CR,LF,0
000031C3= 50 6C 65 61 73 65 ...   2731  USERPAGEBREAK DC.B 'Please Press enter to see next 25 codes',0
000031EB= 4E 75 6D 62 65 72 ...   2732  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
00003217= 53 65 63 6F 6E 64 ...   2733  OUTOFORDER DC.B    'Second Num lower than the first Num, please reenter second Num',CR,LF,0
00003258= 50 6C 65 61 73 65 ...   2734  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory address, perferablly in 8 byte form: ',0 
0000329B= 50 6C 65 61 73 65 ...   2735  MESSAGESECONDADRESS DC.B    'Please enter ending memory address, perferablly in 8 byte form: ',0 
000032DC= 59 6F 75 20 68 61 ...   2736  FINALMESSAGE1    DC.B    'You have reached the end of the program',CR,LF,0
00003306= 50 6C 65 61 73 65 ...   2737  FINALMESSAGE2    DC.B    'Please enter 0 to exit, or 1 to restart: ',0
00003330= 45 78 69 74 69 6E ...   2738  GOODBYEMESSAGE    DC.B    'Exiting, have a good rest of your day',CR,LF,0
00003358= 20 0D 0A 00             2739  CLEAR DC.B      ' ',CR,LF,0
0000335C                          2740  
0000335C                          2741          ;the collection of actual command lines to print
0000335C                          2742  CommandPrinter    DS.B 1 #0
0000335D                          2743  CommandDetail    DS.B 1 #0
0000335E= 4D 4F 56 45 00          2744  PMOVE DC.B      'MOVE',0
00003363= 4D 4F 56 45 4D 00       2745  PMOVEM DC.B      'MOVEM',0
00003369= 4D 4F 56 45 41 00       2746  PMOVEA DC.B      'MOVEA',0
0000336F= 4D 4F 56 45 51 00       2747  PMOVEQ DC.B      'MOVEQ',0
00003375= 4E 4F 50 00             2748  PNOP DC.B      'NOP',0
00003379= 4C 45 41 00             2749  PLEA DC.B      'LEA',0
0000337D= 4E 4F 54 00             2750  PNOT DC.B      'NOT',0
00003381= 4A 53 52 00             2751  PJSR DC.B      'JSR',0
00003385= 52 54 53 00             2752  PRTS DC.B      'RTS',0
00003389= 42 47 54 00             2753  PBGT DC.B      'BGT',0
0000338D= 42 45 51 00             2754  PBEQ DC.B      'BEQ',0
00003391= 42 4C 45 00             2755  PBLE DC.B      'BLE',0
00003395= 42 52 41 00             2756  PBRA DC.B      'BRA',0
00003399= 4F 52 00                2757  POR DC.B      'OR',0
0000339C= 53 55 42 00             2758  PSUB DC.B      'SUB',0
000033A0= 41 4E 44 00             2759  PAND DC.B      'AND',0
000033A4= 41 44 44 00             2760  PADD DC.B      'ADD',0
000033A8= 41 44 44 41 00          2761  PADDA DC.B      'ADDA',0
000033AD= 41 44 44 51 00          2762  PADDQ DC.B      'ADDQ',0
000033B2= 4C 53 4C 00             2763  PLSL DC.B      'LSL',0
000033B6= 4C 53 52 00             2764  PLSR DC.B      'LSR',0
000033BA= 41 53 52 00             2765  PASR DC.B      'ASR',0
000033BE= 41 53 4C 00             2766  PASL DC.B      'ASL',0
000033C2= 52 4F 4C 00             2767  PROL DC.B      'ROL',0
000033C6= 52 4F 52 00             2768  PROR DC.B      'ROR',0
000033CA                          2769  
000033CA= 44 41 54 41 00          2770  PDATA   DC.B    'DATA',0
000033CF                          2771  
000033CF= 00                      2772  INPUT   DC.B    0
000033D0                          2773  
000033D0= 00000000                2774  STARTINGADDRESS     DC.L 0
000033D4= 00000000                2775  CURRENTADDRESS      DC.L 0
000033D8= 00000000                2776  ENDINGADDRESS       DC.L 0
000033DC= 0000                    2777  CYCLECOUNTER        DC.W 0
000033DE= 0000                    2778  COMMANDDATA         DC.W 0
000033E0= 00                      2779  Bits                DC.B 0
000033E1                          2780  
000033E1                          2781          ;the sizes to print
000033E2                          2782  SizeValue           DS.L 1 #0
000033E6= 2E 42 20 00             2783  PB DC.B      '.B ',0
000033EA= 2E 57 20 00             2784  PW DC.B      '.W ',0
000033EE= 2E 4C 20 00             2785  PL DC.B      '.L ',0
000033F2                          2786  
000033F2                          2787  ;----- ADDED FOR THE OP CODE PART
000033F2                          2788  
000033F2= 00                      2789  DEST_REG        DC.B    0
000033F3= 00                      2790  DEST_MODE       DC.B    0
000033F4                          2791  
000033F4= 00                      2792  SRC_MODE        DC.B    0
000033F5= 00                      2793  SRC_REG         DC.B    0
000033F6                          2794  
000033F6= 00                      2795  TEMP_MODE       DC.B    0
000033F7= 00                      2796  TEMP_REG        DC.B    0
000033F8                          2797  
000033F8                          2798  DATA_FIELD      DS.L    1 #0
000033FC= 00                      2799  SIZE            DC.B    0
000033FD                          2800  
000033FD= 23 00                   2801  HASH            DC.B    '#',0
000033FF= 20 00                   2802  CLRSPOT         DC.B    ' ',0
00003401= 2D 00                   2803  NEG             DC.B    '-',0
00003403= 24 00                   2804  DOLLARSIGN      DC.B    '$',0
00003405= 2C 00                   2805  COMA            DC.B    ',',0
00003407                          2806  
00003407= 00                      2807  INDEX           DC.B    0
00003408                          2808  
00003408= 00                      2809  XBIT            DC.B    0
00003409= 00                      2810  INVALID_EA      DC.B    0
0000340A                          2811  
0000340A= 00                      2812  DstMode         DC.B    0
0000340B= 00                      2813  TempMode        DC.B    0
0000340C= 00                      2814  SrcMode         DC.B    0
0000340D                          2815  
0000340D                          2816  ;------ ADDED FOR EA CODE PART
0000340D                          2817  
0000340D  =00000000               2818  REG_0  EQU         %000
0000340D  =00000001               2819  REG_1  EQU         %001
0000340D  =00000002               2820  REG_2  EQU         %010
0000340D  =00000003               2821  REG_3  EQU         %011
0000340D  =00000004               2822  REG_4  EQU         %100
0000340D  =00000005               2823  REG_5  EQU         %101
0000340D  =00000006               2824  REG_6  EQU         %110
0000340D  =00000007               2825  REG_7  EQU         %111
0000340D                          2826  
0000340D  =00000000               2827  MODE000       EQU         %000                   * MODE Dn
0000340D  =00000001               2828  MODE001       EQU         %001                   * MODE An
0000340D  =00000002               2829  MODE010       EQU         %010                   * MODE (An)
0000340D  =00000003               2830  MODE011       EQU         %011                   * MODE (An)+
0000340D  =00000004               2831  MODE100       EQU         %100                   * MODE -(An)
0000340D  =00000007               2832  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
0000340D                          2833  
0000340D= 00                      2834  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
0000340E  =00000001               2835  BAD_FLAG      EQU         1
0000340E= 00008000                2836  word          DC.L        $8000
00003412                          2837  SIZE_IL       DS.L        1             ;SIZE ISOLATION
00003416                          2838  DR            DS.L        1             ;DIRECTION ISOLATION
0000341A                          2839  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
0000341E                          2840  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
00003422                          2841  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
00003426                          2842  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
00003427                          2843  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
00003428= 00                      2844  NUMBER_OF_HEX DC.B        0
00003429                          2845  dRG           DS.B        1
0000342A                          2846  dMODE         DS.B        1
0000342B                          2847  sRG           DS.B        1
0000342C                          2848  
0000342C= 00000100                2849  print_buffer  DC.l       $100
00003430                          2850  
00003430                          2851  ******************************MOVE and MOVEA values******************
00003430                          2852  
00003430= 00                      2853  OpName            DC.B     $00                     * 0 = MOVE, 1 = MOVEA
00003431                          2854  
00003432= 0000                    2855  myWord              DC.W     $0000                   * 16 bit instruction Word
00003434= 00                      2856  ID                DC.B     $00                     * First 4 bit value ID
00003435= FF                      2857  DstReg            DC.B     $FF                     * Destination Register Value D3
00003436= FF                      2858  DstMod            DC.B     $FF                     * Destination Mode Value D2
00003437= FF                      2859  SrcReg            DC.B     $FF                     * Source Register Value D3 JUMP EA_start
00003438= FF                      2860  SrcMod            DC.B     $FF                     * Source Register Mode D2
00003439                          2861  
0000343A= 00000000                2862  opDta1            DC.L     $00000000               * Data value one (most likely source)
0000343E= FF                      2863  opDta1T           DC.B     $FF                     * Data value one type ($FF not set, 0=byte, 1=word, 2=long)
00003440= 00000000                2864  opDta2            DC.L     $00000000               * Data value two (most likely destination)
00003444= FF                      2865  opDta2T           DC.B     $FF                     * Data value two type ($FF not set, 0=byte, 1=word, 2=long)
00003445                          2866                 
00003445= 01                      2867  Err               DC.B     $01                     * Error byte, 1 = OK, 0 = Error                 
00003446                          2868  
00003446= 2C 00                   2869  Comma             DC.B     ',', 0
00003448                          2870  
00003448                          2871  ***** ASCII VALUES FOR EA CHARACTERS**************
00003448  =00000044               2872  D                       EQU      $44
00003448  =00000041               2873  A                       EQU      $41
00003448  =00000028               2874  OPEN_PARENTHESIS        EQU      $28
00003448  =00000024               2875  DOLLAR_SIGN             EQU      $24
00003448  =00000029               2876  CLOSED_PARENTHESIS      EQU      $29
00003448  =0000002B               2877  PLUS_SIGN               EQU      $2B
00003448  =0000002D               2878  MINUS_SIGN              EQU      $2D
00003448  =00000023               2879  HASH_TAG                EQU      $23
00003448  =00000025               2880  PERCENT_SIGN            EQU      $25
00003448                          2881  
00003448                          2882  
00003448                          2883      
00003448                          2884      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2E8A
ADDRESS_REGISTER    2DCA
ADDRESS_REGISTER_DECREMENT  2E50
ADDRESS_REGISTER_DIRECT  2DE6
ADDRESS_REGISTER_INCREMENT  2E16
ADDSUM              319E
ADD_NEGATIVE        2F2A
BADVAL              31EB
BAD_FLAG            1
BITS                33E0
BYTE_ONE_LOOP       2F6E
CARRYBIT            31A0
CCHECK_ADD          1A68
CEHCK_DESTREG       15FE
CHAR1               1178
CHAR2               1190
CHARSUB             11A8
CHECK_ADD           1A54
CHECK_ADDA          1A6C
CHECK_ADDQ          1916
CHECK_AND           1BD8
CHECK_DATA_NEG      2CC2
CHECK_DESTINATION   2AE6
CHECK_DESTMOD       15EE
CHECK_DEST_REG      2B1E
CHECK_ID_AS         2060
CHECK_ID_LS         2080
CHECK_ID_RO         2070
CHECK_JSR           1890
CHECK_LEA           16AA
CHECK_MOVE          1422
CHECK_MOVEM_1000    17BA
CHECK_MOVEM_1100    1868
CHECK_MOVEQ         1A8C
CHECK_NOP_JSR_RTS   1870
CHECK_NOP_RTS       18F6
CHECK_NOT           1736
CHECK_OR            1AEA
CHECK_SOURCE        2BE6
CHECK_SOURCE_REG    2C1E
CHECK_SRCMOD        1520
CHECK_SRCREG        1530
CHECK_SUB           1B60
CHECK_TEMP          2B66
CHECK_TEMP_REG      2B9E
CHECK_XBIT          2C66
CLEAR               3358
CLEARMR             2D06
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   2AD4
CLRSPOT             33FF
CMP_SIZE            14D2
COMA                3405
COMMA               3446
COMMANDDATA         33DE
COMMANDDETAIL       335D
COMMANDPRINTER      335C
COMPARE_0100        1672
COMPARE_0110        199A
COMPARE_1101        19CA
COMPARE_1110        1C50
COMPARE_GROUPS      13B2
CONTINUE_A_I_A      2E8E
CONTINUE_EA         2D72
COPYBYTE            2F98
COPYLONG            30EC
COPYWORD            3016
CR                  D
CURRENTADDRESS      33D4
CYCLECOUNTER        33DC
D                   44
DATA_FIELD          33F8
DATA_REGISTER       2DAE
DESTINATION         31A6
DEST_MODE           33F3
DEST_REG            33F2
DMODE               342A
DOLLARSIGN          3403
DOLLAR_SIGN         24
DONE                11D2
DR                  3416
DRG                 3429
DRN                 3427
DSTMOD              3436
DSTMODE             340A
DSTREG              3435
DS_MOVE             14AE
DS_MOVEA            14BA
DTADSTLNG           1630
DTADSTWRD           161A
DTASRCIMD           1558
DTASRCIMDB          1580
DTASRCIMDL          15AC
DTASRCIMDW          1596
DTASRCLNG           15D8
DTASRCWRD           15C2
EADN                2A94
EA_FINISH           3104
EA_START            2D60
EIGHT_SHIFT         2558
ENDING              1324
ENDINGADDRESS       33D8
ENTRYLOOP           11C0
ERR                 3445
ERROR               1646
EXIT                1220
FINALMESSAGE1       32DC
FINALMESSAGE2       3306
FLOAT               3192
FORMAT_DATA         2CAE
G14_MEMS            1F08
G14_MEMS_AS         1FFA
G14_MEMS_LS         1F2E
G14_MEMS_RO         1F94
G14_TYPE            341A
GAS_EA              1EB2
GETBYTE             2F0C
GETLONG             2F20
GETWORD             2F16
GLS_EA              1D1A
GOODBYE             136E
GOODBYEMESSAGE      3330
GRO_EA              1DE6
G_AS                1E3C
G_LS                1CA4
G_RO                1D70
HASH                33FD
HASH_TAG            23
ID                  3434
IMMIDIATE_REGISTER  2EB2
INDEX               3407
INPUT               33CF
INT2                1158
INTSUB              1170
INVALID             11B0
INVALID_EA          3409
IR_IL               341E
IS_EIGHT            2566
LARGERISSUE         127E
LARGERTHAN          129C
LF                  A
LOADDATAONE         101E
LOADDATATWO         1070
LONG_ADDRESSING     2EF8
LONG_FIVE_LOOP      30AA
LONG_FOUR_LOOP      309E
LONG_ONE_LOOP       307A
LONG_SEVEN_LOOP     30C2
LONG_SIX_LOOP       30B6
LONG_THREE_LOOP     3092
LONG_TWO_LOOP       3086
LOOP_READ_BITS      1394
MEMORYGRABBER       12A8
MESSAGEFIRSTADRESS  3258
MESSAGESECONDADRESS  329B
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
MYDONE              1652
MYWORD              3432
NEG                 3401
NUMBER_OF_HEX       3428
OPDTA1              343A
OPDTA1T             343E
OPDTA2              3440
OPDTA2T             3444
OPEN_PARENTHESIS    28
OPNAME              3430
OUTOFORDER          3217
PADD                33A4
PADDA               33A8
PADDQ               33AD
PAGEBREAK           1302
PAND                33A0
PASL                33BE
PASR                33BA
PB                  33E6
PBEQ                338D
PBGT                3389
PBLE                3391
PBRA                3395
PDATA               33CA
PERCENT_SIGN        25
PJSR                3381
PL                  33EE
PLEA                3379
PLSL                33B2
PLSR                33B6
PLUS_SIGN           2B
PMOVE               335E
PMOVEA              3369
PMOVEM              3363
PMOVEQ              336F
PNOP                3375
PNOT                337D
POR                 3399
PRINTADD            2836
PRINTADDA           2858
PRINTADDQ           26E8
PRINTAND            2814
PRINTB              29A4
PRINTBEQ            274A
PRINTBGT            2734
PRINTBLE            2760
PRINTBRA            2776
PRINTCLRSPOT        29CE
PRINTCOMA           29DC
PRINTDOLLARSIGN     29F6
PRINTHASH           29EA
PRINTJSR            26AC
PRINTL              29C0
PRINTLEA            263A
PRINTMOVE           2570
PRINTMOVEA          25C2
PRINTMOVEM          2624
PRINTMOVEQ          278C
PRINTNOP            2614
PRINTNOT            2680
PRINTNOTRAIL        2ACA
PRINTONETRAIL       2AB0
PRINTOR             27D0
PRINTROTATESPLIT    28B2
PRINTRTS            26D8
PRINTSUB            27F2
PRINTTWOTRAIL       2ABA
PRINTW              29B2
PRINT_BRANCHING     2F38
PRINT_BUFFER        342C
PRINT_BYTE          2F5E
PRINT_DATA          2CDA
PRINT_DN_TO_EA      2A4C
PRINT_EA_TO_DN      2A04
PRINT_LONG          302E
PRINT_NEG           2CCC
PRINT_WORD          2FB0
PROL                33C2
PROR                33C6
PRTS                3385
PR_AS               23E8
PR_ASR              24D0
PR_ASR_EA           221A
PR_ASR_MEM          20CE
PR_G14_MEMS_AS      2090
PR_G14_MEMS_LS      20FA
PR_G14_MEMS_RO      215E
PR_G_AS_EA          21C2
PR_G_LS_EA          225E
PR_G_RO_EA          22FA
PR_LS               243A
PR_LSR              248C
PR_LSR_EA           22B6
PR_LSR_MEM          2132
PR_RO               2396
PR_ROR              2514
PR_ROR_EA           2352
PR_ROR_MEM          2196
PSUB                339C
PW                  33EA
READ_BITS           138A
READ_BYTE           2F7A
READ_LONG           30CE
READ_WORD           2FF8
REGISTER_NUMBER_TO_DECIMAL  3106
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2CAC
RG0                 3152
RG1                 315A
RG2                 3162
RG3                 316A
RG4                 3172
RG5                 317A
RG6                 3182
RG7                 318A
R_CHECK_DEST        2B5C
R_CHECK_SOURCE      2C5C
R_CHECK_TEMP        2BDC
SET                 13AA
SIZE                33FC
SIZEPRINT           2944
SIZEPRINT2          2968
SIZEPRINT3          298C
SIZESPLIT           2916
SIZEVALUE           33E2
SIZE_B              14F6
SIZE_IL             3412
SIZE_L              1512
SIZE_W              1504
SOURCE              31A2
SRCMOD              3438
SRCMODE             340C
SRCREG              3437
SRC_MODE            33F4
SRC_REG             33F5
SRG                 342B
SRN                 3426
START               1000
STARTCHECK          1140
STARTINGADDRESS     33D0
STATE               340D
STOP                2AE0
STOREADRESSES       1290
S_COUNT             3422
TEMPMODE            340B
TEMP_MODE           33F6
TEMP_REG            33F7
TEMP_TO_DEST        2C78
TEMP_TO_SRC         2C92
TRAILERS            31A1
USERPAGEBREAK       31C3
VAL1                10C6
VAL2                10D0
VAL3                10E0
VAL4                10F0
VAL5                1100
VAL6                1110
VAL7                1120
VAL8                1130
VALEIGHT            319D
VALFIVE             319A
VALFOUR             3199
VALONE              3196
VALSEVEN            319C
VALSIX              319B
VALTHREE            3198
VALTWO              3197
WELCOME             31AA
WORD                340E
WORD_ADDRESSING     2EE4
WORD_ONE_LOOP       2FD4
WORD_THREE_LOOP     2FEC
WORD_TWO_LOOP       2FE0
XBIT                3408
