00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/8/2021 9:20:09 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 00003123             13      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001006  103C 000E                 14      MOVE.B   #14,D0     ; moves #14 into data register D0
0000100A  4E4F                      15      TRAP     #15
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 00002ECE             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22  * TODO: a welcome message with format message 
0000101E                            23      
0000101E                            24  LOADDATAONE
0000101E  43F9 00002F7C             25      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001024  103C 000E                 26      MOVE.B   #14,D0     ; moves #14 into data register D0
00001028  4E4F                      27      TRAP     #15       ; Displays message via trap 14    
0000102A                            28      
0000102A  43F9 000030F3             29      LEA     INPUT,A1
00001030  103C 0002                 30      MOVE.B  #2,D0 *takes the string of what the user enters
00001034  4E4F                      31      TRAP    #15
00001036                            32      
00001036  4280                      33      CLR.L   D0
00001038                            34      
00001038                            35      * TODO: check if the input if odd - invalid imput
00001038                            36      
00001038                            37  
00001038                            38      
00001038  1A3C 0000                 39      MOVE.B  #0,D5
0000103C                            40      
0000103C  13D9 0000A000             41      MOVE.B (A1)+,$A000
00001042  13D9 0000A010             42      MOVE.B (A1)+,$A010
00001048  13D9 0000A020             43      MOVE.B (A1)+,$A020
0000104E  13D9 0000A030             44      MOVE.B (A1)+,$A030
00001054  13D9 0000A040             45      MOVE.B (A1)+,$A040
0000105A  13D9 0000A050             46      MOVE.B (A1)+,$A050
00001060  13D9 0000A060             47      MOVE.B (A1)+,$A060
00001066  13D9 0000A070             48      MOVE.B (A1)+,$A070
0000106C                            49      
0000106C  6000 0058                 50      BRA VAL1
00001070                            51  
00001070                            52  LOADDATATWO    
00001070  43F9 00002FBF             53      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001076  103C 000E                 54      MOVE.B   #14,D0     ; moves #14 into data register D0
0000107A  4E4F                      55      TRAP     #15       ; Displays message via trap 14    
0000107C                            56      
0000107C  43F9 000030F3             57      LEA     INPUT,A1
00001082  103C 0002                 58      MOVE.B  #2,D0 *takes the string of what the user enters
00001086  4E4F                      59      TRAP    #15
00001088                            60      
00001088  1A3C 0000                 61      MOVE.B  #0,D5
0000108C                            62      
0000108C  13D9 0000A000             63      MOVE.B (A1)+,$A000
00001092  13D9 0000A010             64      MOVE.B (A1)+,$A010
00001098  13D9 0000A020             65      MOVE.B (A1)+,$A020
0000109E  13D9 0000A030             66      MOVE.B (A1)+,$A030
000010A4  13D9 0000A040             67      MOVE.B (A1)+,$A040
000010AA  13D9 0000A050             68      MOVE.B (A1)+,$A050
000010B0  13D9 0000A060             69      MOVE.B (A1)+,$A060
000010B6  13D9 0000A070             70      MOVE.B (A1)+,$A070
000010BC                            71      
000010BC  43F9 00002FBF             72      LEA MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010C2                            73      
000010C2  6000 0002                 74      BRA VAL1
000010C6                            75  
000010C6                            76      
000010C6                            77  VAL1    
000010C6  1839 0000A000             78      MOVE.B $A000,D4
000010CC  6000 0072                 79      BRA STARTCHECK
000010D0  13C4 0000A000             80  VAL2    MOVE.B D4,$A000
000010D6  1839 0000A010             81      MOVE.B $A010,D4
000010DC  6000 0062                 82      BRA STARTCHECK
000010E0  13C4 0000A010             83  VAL3    MOVE.B D4,$A010
000010E6  1839 0000A020             84      MOVE.B $A020,D4
000010EC  6000 0052                 85      BRA STARTCHECK
000010F0  13C4 0000A020             86  VAL4    MOVE.B D4,$A020
000010F6  1839 0000A030             87      MOVE.B $A030,D4
000010FC  6000 0042                 88      BRA STARTCHECK
00001100  13C4 0000A030             89  VAL5    MOVE.B D4,$A030
00001106  1839 0000A040             90      MOVE.B $A040,D4
0000110C  6000 0032                 91      BRA STARTCHECK
00001110  13C4 0000A040             92  VAL6    MOVE.B D4,$A040
00001116  1839 0000A050             93      MOVE.B $A050,D4
0000111C  6000 0022                 94      BRA STARTCHECK
00001120  13C4 0000A050             95  VAL7    MOVE.B D4,$A050
00001126  1839 0000A060             96      MOVE.B $A060,D4
0000112C  6000 0012                 97      BRA STARTCHECK
00001130  13C4 0000A060             98  VAL8    MOVE.B D4,$A060
00001136  1839 0000A070             99      MOVE.B $A070,D4
0000113C  6000 0002                100      BRA STARTCHECK
00001140                           101    
00001140                           102  STARTCHECK  
00001140  B83C 0030                103      CMP.B   #48,D4
00001144  6D00 006A                104      BLT INVALID
00001148  B83C 0030                105      CMP.B   #48,D4
0000114C  6700 0022                106      BEQ INTSUB
00001150  B83C 0030                107      CMP.B   #48,D4
00001154  6E00 0002                108      BGT INT2
00001158                           109      
00001158                           110  
00001158                           111  INT2 
00001158                           112      
00001158  B83C 0039                113      CMP.B   #57,D4
0000115C  6D00 0012                114      BLT INTSUB
00001160  B83C 0039                115      CMP.B   #57,D4
00001164  6700 000A                116      BEQ INTSUB
00001168  B83C 0039                117      CMP.B   #57,D4
0000116C  6E00 000A                118      BGT CHAR1
00001170                           119      
00001170                           120  INTSUB 
00001170  0404 0030                121      SUB.B #$30,D4
00001174  6000 005C                122      BRA     DONE
00001178                           123  
00001178                           124  CHAR1 
00001178                           125      
00001178  B83C 0041                126      CMP.B   #65,D4
0000117C  6D00 0032                127      BLT INVALID
00001180  B83C 0041                128      CMP.B   #65,D4
00001184  6700 0022                129      BEQ CHARSUB
00001188  B83C 0041                130      CMP.B   #65,D4
0000118C  6E00 0002                131      BGT CHAR2
00001190                           132      
00001190                           133  CHAR2 
00001190                           134      
00001190  B83C 0046                135      CMP.B   #70,D4
00001194  6D00 0012                136      BLT CHARSUB
00001198  B83C 0046                137      CMP.B   #70,D4
0000119C  6700 000A                138      BEQ CHARSUB
000011A0  B83C 0046                139      CMP.B   #70,D4
000011A4  6E00 000A                140      BGT INVALID
000011A8                           141      
000011A8                           142  CHARSUB 
000011A8  0404 0037                143      SUB.B #$37,D4
000011AC  6000 0024                144      BRA DONE
000011B0                           145      
000011B0                           146  INVALID 
000011B0  43F9 00002F0F            147      LEA BADVAL,A1
000011B6  103C 000E                148      MOVE.B   #14,D0     ; moves #14 into data register D0
000011BA  4E4F                     149      TRAP     #15       ; Displays message via trap 14
000011BC  6000 0002                150      BRA     ENTRYLOOP
000011C0                           151      
000011C0                           152  ENTRYLOOP
000011C0  B43C 0000                153      CMP.B #0,D2
000011C4  6700 FE58                154      BEQ LOADDATAONE
000011C8  B43C 0001                155      CMP.B #1,D2
000011CC  6700 FEA2                156      BEQ LOADDATATWO
000011D0  4E75                     157      RTS
000011D2                           158      
000011D2                           159  DONE    
000011D2  5205                     160          ADD.B #1,D5
000011D4  BA3C 0000                161          CMP.B #0,D5
000011D8  6700 FEEC                162          BEQ VAL1
000011DC  BA3C 0001                163          CMP.B #1,D5
000011E0  6700 FEEE                164          BEQ VAL2
000011E4  BA3C 0002                165          CMP.B #2,D5
000011E8  6700 FEF6                166          BEQ VAL3
000011EC  BA3C 0003                167          CMP.B #3,D5
000011F0  6700 FEFE                168          BEQ VAL4
000011F4  BA3C 0004                169          CMP.B #4,D5
000011F8  6700 FF06                170          BEQ VAL5
000011FC  BA3C 0005                171          CMP.B #5,D5
00001200  6700 FF0E                172          BEQ VAL6
00001204  BA3C 0006                173          CMP.B #6,D5
00001208  6700 FF16                174          BEQ VAL7
0000120C  BA3C 0007                175          CMP.B #7,D5
00001210  6700 FF1E                176          BEQ VAL8
00001214  BA3C 0008                177          CMP.B #8,D5
00001218  6700 0006                178          BEQ EXIT
0000121C                           179          
0000121C  6000 FF22                180          BRA     STARTCHECK
00001220                           181  
00001220                           182  
00001220                           183  
00001220  13C4 0000A070            184  EXIT    MOVE.B D4,$A070
00001226                           185      
00001226  4284                     186      CLR.L D4
00001228  D839 0000A000            187      ADD.B $A000,D4
0000122E  E98C                     188      LSL.L #4,D4
00001230  D839 0000A010            189      ADD.B $A010,D4
00001236  E98C                     190      LSL.L #4,D4
00001238  D839 0000A020            191      ADD.B $A020,D4
0000123E  E98C                     192      LSL.L #4,D4
00001240  D839 0000A030            193      ADD.B $A030,D4
00001246  E98C                     194      LSL.L #4,D4
00001248  D839 0000A040            195      ADD.B $A040,D4
0000124E  E98C                     196      LSL.L #4,D4
00001250  D839 0000A050            197      ADD.B $A050,D4
00001256  E98C                     198      LSL.L #4,D4
00001258  D839 0000A060            199      ADD.B $A060,D4
0000125E  E98C                     200      LSL.L #4,D4
00001260  D839 0000A070            201      ADD.B $A070,D4
00001266                           202      
00001266  2E04                     203      MOVE.L D4,D7
00001268  4244                     204      CLR D4
0000126A  B43C 0001                205      CMP.B #1,D2
0000126E  6700 0020                206      BEQ STOREADRESSES
00001272  2C07                     207      MOVE.L D7,D6
00001274  143C 0001                208      MOVE.B #1,D2
00001278  7A00                     209      MOVE.L #0,D5
0000127A  6000 FDF4                210      BRA LOADDATATWO
0000127E                           211      
0000127E                           212  ;---------------------------------------------------------
0000127E                           213  
0000127E                           214  LARGERISSUE
0000127E  43F9 00002F3B            215      LEA     OUTOFORDER,A1
00001284  103C 000E                216      MOVE.B  #14,D0     ; moves #14 into data register D0
00001288  4E4F                     217      TRAP    #15       ; Displays message via trap 14
0000128A  7400                     218      MOVE.L  #0,D2
0000128C  6000 FD90                219      BRA     LOADDATAONE
00001290                           220  
00001290                           221  STOREADRESSES
00001290  23C7 000030FC            222      MOVE.L  D7,ENDINGADDRESS
00001296  23C6 000030F4            223      MOVE.L  D6,STARTINGADDRESS
0000129C                           224  LARGERTHAN    
0000129C  BE86                     225      CMP.L D6,D7
0000129E  6DDE                     226      BLT LARGERISSUE
000012A0  4247                     227      CLR     D7
000012A2  2C79 000030F4            228      MOVE.L   STARTINGADDRESS,A6
000012A8                           229      
000012A8                           230  MEMORYGRABBER
000012A8  43F9 0000307C            231      LEA     CLEAR,A1 
000012AE  103C 000E                232      MOVE.B  #14,D0  
000012B2  4E4F                     233      TRAP    #15 
000012B4                           234  
000012B4  2879 000030FC            235      MOVE.L  ENDINGADDRESS,A4
000012BA  BDCC                     236      CMPA.L  A4,A6
000012BC  6C00 0066                237      BGE     ENDING 
000012C0                           238      
000012C0  0C79 0019 00003100       239      CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
000012C8  6C00 0038                240      BGE     PAGEBREAK
000012CC  5279 00003100            241      ADD.W   #1,CYCLECOUNTER
000012D2                           242  
000012D2  4EB9 00002A2A            243      JSR CLEARMR     * CLEAR MODES AND REGISTERS
000012D8                           244      
000012D8  23CE 000030F8            245      MOVE.L      A6,CURRENTADDRESS   
000012DE  2239 000030F8            246      MOVE.L      CURRENTADDRESS,D1
000012E4  143C 0010                247      MOVE.B      #16,D2
000012E8  103C 000F                248      MOVE.B      #15,D0     ; moves #14 into data register D0
000012EC  4E4F                     249      TRAP        #15  
000012EE                           250      
000012EE  4EB9 0000270A            251      JSR     PRINTCLRSPOT      * print space
000012F4                           252      
000012F4  361E                     253      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012F6  33C3 00003102            254      MOVE.W      D3, COMMANDDATA
000012FC                           255   
000012FC  6000 00B4                256      BRA         COMPARE_GROUPS
00001300                           257      
00001300  60A6                     258      BRA MEMORYGRABBER
00001302                           259      
00001302                           260  PAGEBREAK
00001302  43F9 00002EE7            261      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
00001308  103C 000E                262      MOVE.B   #14,D0     ; moves #14 into data register D0
0000130C  4E4F                     263      TRAP     #15       ; Displays message via trap 14
0000130E  43F9 000030F3            264      LEA     INPUT,A1
00001314  103C 0002                265      MOVE.B  #2,D0 *takes the string of what the user enters
00001318  4E4F                     266      TRAP    #15
0000131A  33FC 0000 00003100       267      MOVE.W #0,CYCLECOUNTER
00001322  6084                     268      BRA MEMORYGRABBER
00001324                           269   
00001324                           270  ENDING 
00001324  33FC 0000 00003100       271      MOVE.W #0,CYCLECOUNTER
0000132C  43F9 00003000            272      LEA     FINALMESSAGE1,A1     * Prints End of Program message
00001332  103C 000E                273      MOVE.B  #14,D0
00001336  4E4F                     274      TRAP    #15
00001338  43F9 0000302A            275      LEA     FINALMESSAGE2,A1     * Prints End of Program message
0000133E  103C 000E                276      MOVE.B  #14,D0
00001342  4E4F                     277      TRAP    #15
00001344  43F9 000030F3            278      LEA     INPUT,A1
0000134A  103C 0005                279      MOVE.B  #5,D0 *takes the single charater the user enters
0000134E  4E4F                     280      TRAP    #15
00001350  B23C 0031                281      CMP.B #49,D1
00001354  6700 FCAA                282      BEQ START
00001358  B23C 0030                283      CMP.B #48,D1
0000135C  6700 0010                284      BEQ GOODBYE
00001360  43F9 00002F0F            285      LEA     BADVAL,A1     * Prints End of Program message
00001366  103C 000E                286      MOVE.B  #14,D0
0000136A  4E4F                     287      TRAP    #15
0000136C  60B6                     288      BRA ENDING
0000136E                           289  
0000136E                           290  GOODBYE
0000136E  43F9 00003123            291      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001374  103C 000E                292      MOVE.B   #14,D0     ; moves #14 into data register D0
00001378  4E4F                     293      TRAP     #15  
0000137A  43F9 00003054            294      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
00001380  103C 000E                295      MOVE.B  #14,D0
00001384  4E4F                     296      TRAP    #15
00001386  FFFF FFFF                297      SIMHALT             ; halt simulator   
0000138A                           298      
0000138A                           299  ;-------------------------- OP CODE SECTION -------------------------------
0000138A                           300  
0000138A                           301  READ_BITS
0000138A  4287                     302      CLR.L   D7
0000138C  4284                     303      CLR.L   D4
0000138E  1E39 00003104            304      MOVE.B  Bits,D7
00001394                           305      
00001394                           306  LOOP_READ_BITS    
00001394  BE3C 0000                307      CMP.B   #0,D7           * counter
00001398  6700 164E                308      BEQ     RETURN
0000139C                           309      
0000139C  E34C                     310      LSL.W   #1,D4           * make space for new bit
0000139E  E34B                     311      LSL.W   #1,D3          
000013A0                           312  
000013A0  6500 0008                313      BCS     SET             * if 1, then branch to SET
000013A4  5307                     314      SUBI.B  #1,D7          
000013A6  4EF8 1394                315      JMP     LOOP_READ_BITS
000013AA                           316  SET
000013AA  5244                     317      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013AC  5307                     318      SUBI.B  #1, D7
000013AE  4EF8 1394                319      JMP     LOOP_READ_BITS  
000013B2                           320      
000013B2                           321  
000013B2                           322  
000013B2                           323  COMPARE_GROUPS              * comapres the 4 bits of the instruction
000013B2  13FC 0004 00003104       324      MOVE.B  #4,Bits         
000013BA  4EB8 138A                325      JSR     READ_BITS       * get the first 4 bits and store it in D4
000013BE                           326  
000013BE  B87C 0001                327      CMP.W   #%0001,D4      
000013C2                           328      *BEQ     CHECK_MOVE_B    * if equal, goes to CHECK_MOVE.B
000013C2                           329      
000013C2  B87C 0002                330      CMP.W   #%0010,D4      
000013C6                           331      *BEQ     COMPARE_0010    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
000013C6                           332      
000013C6  B87C 0003                333      CMP.W   #%0011,D4      
000013CA                           334      *BEQ     COMPARE_0011    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
000013CA                           335      
000013CA  B87C 0004                336      CMP.W   #%0100,D4      
000013CE  6700 0046                337      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
000013D2                           338      
000013D2  B87C 0005                339      CMP.W   #%0101,D4      
000013D6  6700 02E2                340      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
000013DA                           341      
000013DA  B87C 0006                342      CMP.W   #%0110,D4      
000013DE  6700 035E                343      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
000013E2                           344      
000013E2  B87C 0007                345      CMP.W   #%0111,D4      
000013E6  6700 0448                346      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
000013EA                           347      
000013EA  B87C 0008                348      CMP.W   #%1000,D4      
000013EE  6700 049E                349      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
000013F2                           350      
000013F2  B87C 0009                351      CMP.W   #%1001,D4      
000013F6  6700 050C                352      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
000013FA                           353      
000013FA  B87C 000C                354      CMP.W   #%1100,D4      
000013FE  6700 057C                355      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
00001402                           356      
00001402  B87C 000D                357      CMP.W   #%1101,D4      
00001406  6700 0366                358      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
0000140A                           359      
0000140A  B87C 000E                360      CMP.W   #%1110,D4      
0000140E  6700 05E4                361      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
00001412                           362      
00001412  6600 1602                363      BNE     PRINT_DATA      * all other instructions are not supported 
00001416                           364  
00001416                           365  
00001416                           366  
00001416                           367  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
00001416                           368  
00001416                           369  COMPARE_0100
00001416  0803 000C                370      BTST.L  #$0C,D3             * compare bit 8 for LEA
0000141A  6600 0032                371      BNE     CHECK_LEA
0000141E                           372      
0000141E  13FC 0004 00003104       373      MOVE.B  #4,Bits
00001426  4EB8 138A                374      JSR     READ_BITS
0000142A                           375      
0000142A  B87C 0006                376      CMP.W   #%0110,D4
0000142E  6700 00AA                377      BEQ     CHECK_NOT           * goes to NOT
00001432                           378      
00001432  B87C 0008                379      CMP.W   #%1000,D4
00001436  6700 0126                380      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
0000143A                           381      
0000143A  B87C 000C                382      CMP.W   #%1100,D4       
0000143E  6700 01CC                383      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
00001442                           384      
00001442  B87C 000E                385      CMP.W   #%1110,D4
00001446  6700 01CC                386      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
0000144A                           387      
0000144A  6600 15CA                388      BNE     PRINT_DATA
0000144E                           389  
0000144E                           390  CHECK_LEA
0000144E  13FC 0003 00003104       391      MOVE.B  #3,Bits  
00001456  4EB8 138A                392      JSR     READ_BITS 
0000145A  13C4 00003116            393      MOVE.B  D4,DEST_REG  
00001460                           394  
00001460  13FC 0003 00003104       395      MOVE.B  #3,Bits
00001468  4EB8 138A                396      JSR     READ_BITS
0000146C  B83C 0007                397      CMP.B   #7,D4               * if mode = 111 = continue
00001470  6600 15A4                398      BNE     PRINT_DATA
00001474                           399  
00001474  13FC 0003 00003104       400      MOVE.B  #3,Bits
0000147C  4EB8 138A                401      JSR     READ_BITS 
00001480  13C4 00003118            402      MOVE.B  D4,SRC_MODE           
00001486                           403  
00001486  13FC 0003 00003104       404      MOVE.B  #3,Bits 
0000148E  4EB8 138A                405      JSR     READ_BITS 
00001492  13C4 00003119            406      MOVE.B  D4,SRC_REG 
00001498                           407      
00001498                           408      *MOVE.B  #3,CmdIndex         
00001498  4EB9 00002922            409      JSR     CHECK_SOURCE                * Check Source Mode
0000149E                           410      
0000149E  0C39 000F 00003130       411      CMP.B   #$F,SrcMode         * If SrcMode is invalid
000014A6  6700 156E                412      BEQ     PRINT_DATA
000014AA                           413      
000014AA  0C39 0002 00003130       414      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
000014B2  6700 0EC2                415      BEQ     PRINTLEA        
000014B6                           416      
000014B6  0C39 0007 00003130       417      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
000014BE  6700 0EB6                418      BEQ     PRINTLEA    
000014C2                           419      
000014C2  0C39 0008 00003130       420      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
000014CA  6700 0EAA                421      BEQ     PRINTLEA
000014CE                           422              
000014CE  13FC 0001 0000312D       423      MOVE.B  #1,INVALID_EA   
000014D6  6000 0E9E                424      BRA     PRINTLEA    
000014DA                           425      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000014DA                           426  
000014DA                           427      
000014DA                           428  CHECK_NOT 
000014DA                           429      * TODO : TEST
000014DA  13FC 0002 00003104       430      MOVE.B  #2,Bits             
000014E2  4EB8 138A                431      JSR     READ_BITS             
000014E6  13C4 00003120            432      MOVE.B  D4,SIZE              * Stores size 
000014EC                           433      
000014EC  B83C 0003                434      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
000014F0  6700 1524                435      BEQ     PRINT_DATA          * Else, If 11 size invalid
000014F4                           436      
000014F4  13FC 0003 00003104       437      MOVE.B  #3,Bits       
000014FC  4EB8 138A                438      JSR     READ_BITS       
00001500  13C4 00003117            439      MOVE.B  D4,DEST_MODE             
00001506                           440  
00001506  13FC 0003 00003104       441      MOVE.B  #3,Bits       
0000150E  4EB8 138A                442      JSR     READ_BITS
00001512  13C4 00003116            443      MOVE.B  D4,DEST_REG             
00001518                           444      
00001518                           445      *MOVE.B  #2,CmdIndex 
00001518  4EB9 00002822            446      JSR     CHECK_DESTINATION               * Check Destination Mode
0000151E                           447  
0000151E  0C39 000F 0000312E       448      CMP.B   #$F,DstMode         * If DstMode is invalid
00001526  6700 14EE                449      BEQ     PRINT_DATA      
0000152A                           450  
0000152A  0C39 000E 0000312E       451      CMP.B   #$E,DstMode         * If DstMode is invalid EA
00001532  13FC 0001 0000312D       452      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
0000153A                           453      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
0000153A                           454  
0000153A  0C39 0001 0000312E       455      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
00001542  13FC 0001 0000312D       456      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
0000154A                           457      
0000154A  0C39 000B 0000312E       458      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
00001552  13FC 0001 0000312D       459      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
0000155A  6000 0E60                460      BRA     PRINTNOT
0000155E                           461  
0000155E                           462  CHECK_MOVEM_1000 
0000155E                           463      * TODO : TEST WITH EA 
0000155E  13FC 0001 00003104       464      MOVE.B  #1,Bits
00001566  4EB8 138A                465      JSR     READ_BITS
0000156A  B83C 0001                466      CMP.B   #%1,D4
0000156E  6600 14A6                467      BNE     PRINT_DATA
00001572                           468      
00001572  13FC 0001 00003104       469      MOVE.B  #1,Bits
0000157A  4EB8 138A                470      JSR     READ_BITS
0000157E  13C4 00003120            471      MOVE.B  D4,SIZE
00001584                           472      
00001584                           473    *  JSR     SETSIZE1
00001584                           474  
00001584  13FC 0003 00003104       475      MOVE.B  #3,Bits
0000158C  4EB8 138A                476      JSR     READ_BITS
00001590  13C4 0000311A            477      MOVE.B  D4,TEMP_MODE
00001596                           478      
00001596  13FC 0003 00003104       479      MOVE.B  #3,Bits
0000159E  4EB8 138A                480      JSR     READ_BITS
000015A2  13C4 0000311B            481      MOVE.B  D4,TEMP_REG
000015A8                           482      
000015A8  4EB9 000028A2            483      JSR     CHECK_TEMP
000015AE  4EB9 000029A2            484      JSR     CHECK_XBIT
000015B4                           485      
000015B4  0C39 000F 0000312F       486      CMP.B   #$F,TempMode        * If TempMode is invalid
000015BC  6700 1458                487      BEQ     PRINT_DATA              * Print DATA instead
000015C0                           488  
000015C0  0C39 000E 0000312F       489      CMP.B   #$E,TempMode        * If TempMode is invalid EA
000015C8                           490    *  BEQ     SETINVEA           * 
000015C8  13FC 0001 0000312D       491      MOVE.B  #1,INVALID_EA
000015D0                           492     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000015D0                           493  
000015D0  0C39 0002 0000312F       494      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
000015D8  6700 0D76                495      BEQ     PRINTMOVEM              
000015DC                           496  
000015DC  0C39 0007 0000312F       497      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
000015E4  6700 0D6A                498      BEQ     PRINTMOVEM   
000015E8                           499  
000015E8  0C39 0008 0000312F       500      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
000015F0  6700 0D5E                501      BEQ     PRINTMOVEM   
000015F4                           502                 
000015F4  0C39 0004 0000312E       503      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
000015FC  6700 0D52                504      BEQ     PRINTMOVEM   
00001600                           505  
00001600  0C39 0003 00003130       506      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
00001608  6700 0D46                507      BEQ     PRINTMOVEM   
0000160C                           508     * BRA     SETINVEA
0000160C                           509      
0000160C                           510  CHECK_MOVEM_1100     
0000160C  13FC 0001 0000312C       511      MOVE.B      #1,XBIT
00001614                           512      
00001614                           513  
00001614                           514  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
00001614  13FC 0002 00003104       515      MOVE.B  #2,Bits
0000161C  4EB8 138A                516      JSR     READ_BITS
00001620                           517      
00001620  B83C 0002                518      CMP.B   #%10,D4
00001624  6700 000E                519      BEQ     CHECK_JSR           * goes to JSR
00001628                           520      
00001628  B83C 0001                521      CMP.B   #%01,D4 
0000162C  6700 006C                522      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
00001630                           523  
00001630  6600 13E4                524      BNE     PRINT_DATA
00001634                           525  
00001634                           526  CHECK_JSR       * TODO: TEST
00001634                           527  
00001634  13FC 0003 00003104       528      MOVE.B  #3,Bits
0000163C  4EB8 138A                529      JSR     READ_BITS
00001640  13C4 00003117            530      MOVE.B  D4,DEST_MODE
00001646                           531      
00001646  13FC 0003 00003104       532      MOVE.B  #3,Bits
0000164E  4EB8 138A                533      JSR     READ_BITS
00001652  13C4 00003116            534      MOVE.B  D4,DEST_REG
00001658                           535      
00001658                           536      *MOVE.B  #4,INDEX
00001658  4EB9 00002822            537      JSR     CHECK_DESTINATION
0000165E                           538      
0000165E  0C39 000F 0000312E       539      CMP.B   #$F,DstMode         * if invalid print DATA
00001666  6700 13AE                540      BEQ     PRINT_DATA
0000166A                           541      
0000166A  0C39 0002 0000312E       542      CMP.B   #$2,DstMode         * if DstMode 010        
00001672  6700 0D74                543      BEQ     PRINTJSR
00001676                           544      
00001676  0C39 0007 0000312E       545      CMP.B   #$7,DstMode         * if DstMode 111 + 000
0000167E  6700 0D68                546      BEQ     PRINTJSR
00001682                           547      
00001682  0C39 0008 0000312E       548      CMP.B   #$8,DstMode         * if DstMode 111 + 001
0000168A  6700 0D5C                549      BEQ     PRINTJSR
0000168E                           550      
0000168E  13FC 0001 0000312D       551      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
00001696                           552      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001696  6000 0D50                553      BRA     PRINTJSR
0000169A                           554      
0000169A                           555  CHECK_NOP_RTS
0000169A  13FC 0006 00003104       556      MOVE.B  #6,Bits
000016A2  4EB8 138A                557      JSR     READ_BITS
000016A6                           558      
000016A6  B83C 0031                559      CMP.B   #%110001,D4
000016AA  6700 0C94                560      BEQ     PRINTNOP            
000016AE                           561      
000016AE  B83C 0035                562      CMP.B   #%110101,D4
000016B2  6700 0D60                563      BEQ     PRINTRTS       
000016B6                           564          
000016B6  6600 135E                565      BNE     PRINT_DATA
000016BA                           566  
000016BA                           567  ************************** ADDQ ***************************
000016BA                           568  CHECK_ADDQ
000016BA  13FC 0003 00003104       569      MOVE.B  #3,Bits 
000016C2  4EB8 138A                570      JSR     READ_BITS
000016C6  13C4 0000311C            571      MOVE.B  D4,DATA_FIELD
000016CC                           572      
000016CC  4EB9 000029EA            573      JSR     FORMAT_DATA     
000016D2                           574      
000016D2  13FC 0001 00003104       575      MOVE.B  #1,Bits
000016DA  4EB8 138A                576      JSR     READ_BITS
000016DE  B83C 0000                577      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
000016E2  6600 1332                578      BNE     PRINT_DATA          * goes to PRINT_DATA
000016E6                           579  
000016E6  13FC 0002 00003104       580      MOVE.B  #2,Bits
000016EE  4EB8 138A                581      JSR     READ_BITS
000016F2  13C4 00003120            582      MOVE.B  D4,SIZE             * store size into SIZE
000016F8  0C39 0003 00003120       583      CMP.B   #%11,SIZE           * cannot be #%11
00001700  6700 1314                584      BEQ     PRINT_DATA
00001704                           585  
00001704  13FC 0003 00003104       586      MOVE.B  #3,Bits
0000170C  4EB8 138A                587      JSR     READ_BITS
00001710  13C4 00003117            588      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
00001716                           589      
00001716  13FC 0003 00003104       590      MOVE.B  #3,Bits
0000171E  4EB8 138A                591      JSR     READ_BITS
00001722  13C4 00003116            592      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
00001728                           593      
00001728  4EB9 00002822            594      JSR     CHECK_DESTINATION    
0000172E                           595      
0000172E  0C39 000F 00003117       596      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
00001736  6700 12DE                597      BEQ     PRINT_DATA         
0000173A                           598      
0000173A                           599   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
0000173A                           600   *   BEQ     INVALID_EA          * TODO 
0000173A                           601      
0000173A                           602   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
0000173A                           603   *   BEQ     INVALID_EA         * TODO
0000173A                           604      
0000173A  6000 0CE8                605      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
0000173E                           606  
0000173E                           607  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
0000173E                           608  COMPARE_0110  * TODO : store condition and 8-bit displacement 
0000173E  13FC 0004 00003104       609      MOVE.B  #4,Bits 
00001746  4EB8 138A                610      JSR     READ_BITS
0000174A                           611      
0000174A  B83C 000E                612      CMP.B   #%1110,D4
0000174E  6700 0D20                613      BEQ     PRINTBGT 
00001752                           614      
00001752  B83C 000F                615      CMP.B   #%1111,D4
00001756  6700 0D44                616      BEQ     PRINTBLE 
0000175A                           617      
0000175A  B83C 0007                618      CMP.B   #%0111,D4
0000175E  6700 0D26                619      BEQ     PRINTBEQ  
00001762                           620      
00001762  B83C 0000                621      CMP.B   #%0000,D4
00001766  6700 0D4A                622      BEQ     PRINTBRA
0000176A                           623      
0000176A  6000 12AA                624      BRA     PRINT_DATA 
0000176E                           625  
0000176E                           626  ************************** ADD, ADDA **********************
0000176E                           627  COMPARE_1101    * ADD and ADDA 
0000176E  13FC 0003 00003104       628      MOVE.B  #3,Bits
00001776  4EB8 138A                629      JSR     READ_BITS
0000177A  13C4 0000311B            630      MOVE.B  D4,TEMP_REG
00001780  13C4 00003116            631      MOVE.B  D4,DEST_REG
00001786                           632      
00001786  13FC 0001 00003104       633      MOVE.B  #1,Bits
0000178E  4EB8 138A                634      JSR     READ_BITS
00001792  13C4 0000312C            635      MOVE.B  D4,XBit
00001798                           636      
00001798  13FC 0002 00003104       637      MOVE.B  #2,Bits
000017A0  4EB8 138A                638      JSR     READ_BITS
000017A4  13C4 00003120            639      MOVE.B  D4,SIZE
000017AA                           640  
000017AA  4EB9 000029A2            641      JSR     CHECK_XBIT
000017B0                           642  
000017B0  13FC 0003 00003104       643      MOVE.B  #3,Bits
000017B8  4EB8 138A                644      JSR     READ_BITS
000017BC  13C4 0000311A            645      MOVE.B  D4,TEMP_MODE
000017C2                           646      
000017C2  13FC 0003 00003104       647      MOVE.B  #3,Bits
000017CA  4EB8 138A                648      JSR     READ_BITS
000017CE  13C4 0000311B            649      MOVE.B  D4,TEMP_REG   
000017D4                           650      
000017D4  4EB9 000028A2            651      JSR     CHECK_TEMP   
000017DA  0C39 000F 0000312F       652      CMP.B   #$F, TempMode
000017E2  6700 1232                653      BEQ     PRINT_DATA
000017E6                           654    *  CMP.B   #$E,TempMode    
000017E6                           655    *  BEQ     INVALID_EA              * TODO
000017E6                           656      
000017E6  0C39 0003 00003120       657      CMP.B   #%11,SIZE 
000017EE  6700 0020                658      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
000017F2                           659      
000017F2  4EF9 000017F8            660      JMP          CHECK_ADD
000017F8                           661      
000017F8                           662  CHECK_ADD    
000017F8  0C39 0000 00003120       663      CMP.B   #%00,SIZE
00001800  6600 000A                664      BNE     CCHECK_ADD  
00001804                           665      
00001804  0C39 0001 0000312F       666      CMP.B   #$1,TempMode       * if TempMode is invalid
0000180C                           667    *  BEQ     INVALID_EA              * TODO 
0000180C                           668  CCHECK_ADD
0000180C  6000 0D64                669      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
00001810                           670  
00001810                           671  
00001810                           672  CHECK_ADDA
00001810  13FC 0001 00003120       673      MOVE.B  #%01,SIZE
00001818                           674      
00001818                           675  *    JSR     CHECK_SOUCE   
00001818                           676  *    CMP.B   #$F,SrcMde
00001818                           677  *    BEQ     PRINT_DATA
00001818                           678  *    CMP.B   #$E,SrcMode
00001818                           679  *    BEQ     INVALID_EA                  * TODO
00001818                           680     
00001818  0C39 0000 0000312C       681      CMP.B   #%0,XBIT
00001820  6700 0D72                682      BEQ     PRINTADDA   
00001824                           683                 
00001824  13FC 0002 00003120       684      MOVE.B  #%10,SIZE
0000182C  6000 0D66                685      BRA     PRINTADDA 
00001830                           686   
00001830                           687  ************************** MOVEQ ********************************
00001830                           688  CHECK_MOVEQ
00001830  13FC 0003 00003104       689      MOVE.B  #3,Bits         * read next 3 bits
00001838  4EB8 138A                690      JSR     READ_BITS       * store them in D4
0000183C  13C4 00003116            691      MOVE.B  D4,DEST_REG     * move register value (used in EA)
00001842  1439 00003116            692      MOVE.B  DEST_REG,D2
00001848  163C 0000                693      MOVE.B  #%000,D3
0000184C                           694      
0000184C  13FC 0001 00003104       695      MOVE.B  #1,Bits         * read the next bit into D4
00001854  4EB8 138A                696      JSR     READ_BITS
00001858  B83C 0000                697      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
0000185C  6600 11B8                698      BNE     PRINT_DATA      * goes to PRINT_DATA ?
00001860                           699      
00001860  13FC 0008 00003104       700      MOVE.B  #8,Bits        
00001868  4EB8 138A                701      JSR     READ_BITS
0000186C  23C4 0000311C            702      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
00001872                           703      
00001872  13FC 0007 00003118       704      MOVE.B  #%111,SRC_MODE  * 
0000187A  13FC 0004 00003119       705      MOVE.B  #%100,SRC_REG   * 
00001882  13FC 0004 00002652       706      MOVE.B  #4,SizeSplit
0000188A  6000 0C3C                707      BRA     PRINTMOVEQ 
0000188E                           708      
0000188E                           709  ************************* OR *********************************
0000188E                           710  CHECK_OR
0000188E  13FC 0003 00003104       711      MOVE.B  #3,Bits
00001896  4EB8 138A                712      JSR     READ_BITS
0000189A  13C4 0000311B            713      MOVE.B  D4,TEMP_REG
000018A0                           714      
000018A0  13FC 0001 00003104       715      MOVE.B  #1,Bits
000018A8  4EB8 138A                716      JSR     READ_BITS
000018AC  13C4 0000312C            717      MOVE.B  D4,XBit
000018B2                           718      
000018B2  13FC 0002 00003104       719      MOVE.B  #2,Bits
000018BA  4EB8 138A                720      JSR     READ_BITS
000018BE  13C4 00003120            721      MOVE.B  D4,SIZE
000018C4                           722  
000018C4  4EB9 000029A2            723      JSR     CHECK_XBIT
000018CA                           724      
000018CA  13FC 0003 00003104       725      MOVE.B  #3,Bits
000018D2  4EB8 138A                726      JSR     READ_BITS
000018D6  13C4 0000311A            727      MOVE.B  D4,TEMP_MODE    * store TEMP_MODE
000018DC                           728      
000018DC  13FC 0003 00003104       729      MOVE.B  #3,Bits
000018E4  4EB8 138A                730      JSR     READ_BITS
000018E8  13C4 0000311B            731      MOVE.B  D4,TEMP_REG    * store TEMP_REG    
000018EE                           732      
000018EE  4EB9 000028A2            733      JSR     CHECK_TEMP   
000018F4  0C39 000F 0000312F       734      CMP.B   #$F, TempMode
000018FC  6700 1118                735      BEQ     PRINT_DATA
00001900                           736    *  CMP.B   #$E,TempMode    
00001900                           737    *  BEQ     INVALID_EA              * TODO
00001900                           738      
00001900  6000 0C0A                739      BRA     PRINTOR
00001904                           740  
00001904                           741  ********************* SUB **********************
00001904                           742  CHECK_SUB
00001904  13FC 0003 00003104       743      MOVE.B  #3,Bits
0000190C  4EB8 138A                744      JSR     READ_BITS
00001910  13C4 0000311B            745      MOVE.B  D4,TEMP_REG
00001916                           746      
00001916  13FC 0001 00003104       747      MOVE.B  #1,Bits
0000191E  4EB8 138A                748      JSR     READ_BITS
00001922  13C4 0000312C            749      MOVE.B  D4,XBit
00001928                           750      
00001928  13FC 0002 00003104       751      MOVE.B  #2,Bits
00001930  4EB8 138A                752      JSR     READ_BITS
00001934  13C4 00003120            753      MOVE.B  D4,SIZE
0000193A                           754  
0000193A                           755    *  MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
0000193A                           756          
0000193A                           757    *  MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
0000193A  4EB9 000029A2            758      JSR     CHECK_XBIT
00001940                           759      
00001940  13FC 0003 00003104       760      MOVE.B  #3,Bits
00001948  4EB8 138A                761      JSR     READ_BITS
0000194C  13C4 0000311A            762      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001952                           763      
00001952  13FC 0003 00003104       764      MOVE.B  #3,Bits
0000195A  4EB8 138A                765      JSR     READ_BITS
0000195E  13C4 0000311B            766      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001964                           767      
00001964                           768      *MOVE.B  #7,INDEX
00001964  4EB9 000028A2            769      JSR     CHECK_TEMP   
0000196A  0C39 000F 0000312F       770      CMP.B   #$F, TempMode
00001972  6700 10A2                771      BEQ     PRINT_DATA
00001976                           772    *  CMP.B   #$E,TempMode    
00001976                           773    *  BEQ     INVALID_EA              * TODO
00001976                           774      
00001976  4EF9 0000252E            775      JMP     PRINTSUB
0000197C                           776  
0000197C                           777  
0000197C                           778  ******************* AND ***********************
0000197C                           779  CHECK_AND
0000197C  13FC 0003 00003104       780      MOVE.B  #3,Bits
00001984  4EB8 138A                781      JSR     READ_BITS
00001988  13C4 0000311B            782      MOVE.B  D4,TEMP_REG
0000198E                           783      
0000198E  13FC 0001 00003104       784      MOVE.B  #1,Bits
00001996  4EB8 138A                785      JSR     READ_BITS
0000199A  13C4 0000312C            786      MOVE.B  D4,XBit
000019A0                           787      
000019A0  13FC 0002 00003104       788      MOVE.B  #2,Bits
000019A8  4EB8 138A                789      JSR     READ_BITS
000019AC  13C4 00003120            790      MOVE.B  D4,SIZE
000019B2                           791  
000019B2  4EB9 000029A2            792      JSR     CHECK_XBIT
000019B8                           793      
000019B8  13FC 0003 00003104       794      MOVE.B  #3,Bits
000019C0  4EB8 138A                795      JSR     READ_BITS
000019C4  13C4 0000311A            796      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
000019CA                           797      
000019CA  13FC 0003 00003104       798      MOVE.B  #3,Bits
000019D2  4EB8 138A                799      JSR     READ_BITS
000019D6  13C4 0000311B            800      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
000019DC                           801      
000019DC  4EB9 000028A2            802      JSR     CHECK_TEMP   
000019E2  0C39 000F 0000312F       803      CMP.B   #$F, TempMode
000019EA  6700 102A                804      BEQ     PRINT_DATA
000019EE                           805    *  CMP.B   #$E,TempMode    
000019EE                           806    *  BEQ     INVALID_EA              * TODO
000019EE                           807      
000019EE  4EF9 00002550            808      JMP     PRINTAND
000019F4                           809  
000019F4                           810      
000019F4                           811  ******************************************
000019F4                           812  *        THE GROUP 14
000019F4                           813  *        LS,AS AND ROTATION
000019F4                           814  *        
000019F4                           815  ******************************************
000019F4                           816  COMPARE_1110 
000019F4  4245                     817              CLR D5     ;STORING ISOLATED BITS
000019F6  4244                     818              CLR D4
000019F8  3839 00003102            819              MOVE.W COMMANDDATA,D4
000019FE  2A04                     820              MOVE.L   D4,D5
00001A00  0285 000000C0            821              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001A06  EC8D                     822              LSR.L    #6,D5            ;NORMALIZE
00001A08  13C5 00003120            823              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001A0E  BA3C 0003                824              CMP.B    #%11,D5    
00001A12  6700 0298                825              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001A16  4245                     826              CLR D5
00001A18  2A04                     827              MOVE.L   D4,D5      
00001A1A  0285 00000018            828              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001A20  E68D                     829              LSR.L   #3,D5
00001A22  BA3C 0001                830              CMP.B   #%001,D5
00001A26  6700 0020                831              BEQ     G_LS    ;LOGICAL SHIFTS
00001A2A  BA3C 0003                832              CMP.B   #%011,D5
00001A2E  6700 00E4                833              BEQ     G_RO    ;ROTAIONS
00001A32  BA3C 0000                834              CMP.B   #%000,D5
00001A36  6700 01A8                835              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001A3A                           836              
00001A3A  13FC 0001 00000001       837              MOVE.B #1,BAD_FLAG
00001A42  4EF9 00002A16            838              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001A48                           839  
00001A48                           840  G_LS               ;GROUP LOGICAL SHIFT
00001A48  4245                     841       CLR   D5
00001A4A  23C4 00003142            842       MOVE.L D4,IR_IL
00001A50  02B9 00000020 00003142   843       ANDI.L  #$0020,IR_IL
00001A5A  2A39 00003142            844       MOVE.L  IR_IL,D5
00001A60  EA8D                     845       LSR.L   #5,D5
00001A62  BA3C 0001                846       CMP.B   #$1,D5
00001A66  6700 0056                847       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001A6A  4245                     848       CLR D5
00001A6C  2A04                     849       MOVE.L  D4,D5
00001A6E  0285 00000100            850       ANDI.L  #$0100,D5
00001A74  E08D                     851       LSR.L  #8,D5
00001A76  23C5 0000313A            852       MOVE.L  D5,DR
00001A7C  4245                     853       CLR D5
00001A7E  2A04                     854       MOVE.L  D4,D5
00001A80  0285 00000E00            855       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001A86  E08D                     856       LSR.L   #8,D5
00001A88  E28D                     857       LSR.L   #1,D5
00001A8A  BABC 00000007            858       CMP.L   #7,D5
00001A90  6E00 0F84                859       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001A94  BABC 00000000            860       CMP.L   #0,D5
00001A9A  6D00 0F7A                861       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001A9E  13C5 00003146            862       MOVE.B  D5,S_COUNT
00001AA4  4EB9 000022FC            863       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001AAA  4245                     864       CLR     D5
00001AAC  2A04                     865       MOVE.L  D4,D5
00001AAE  0285 00000007            866       ANDI.L   #$0007,D5
00001AB4  13C5 0000314B            867       MOVE.B   D5,dRN
00001ABA  6000 0722                868       BRA      PR_LS             
00001ABE                           869       
00001ABE                           870  GLS_EA 
00001ABE  4245                     871       CLR D5
00001AC0  4244                     872       CLR D4
00001AC2  3839 00003102            873       MOVE.W COMMANDDATA,D4
00001AC8                           874  
00001AC8  2A04                     875       MOVE.L  D4,D5
00001ACA  0285 00000100            876       ANDI.L  #$0100,D5
00001AD0  E08D                     877       LSR.L  #8,D5
00001AD2  23C5 0000313A            878       MOVE.L  D5,DR     ;DIRECTION
00001AD8  4245                     879       CLR D5
00001ADA  2A04                     880       MOVE.L  D4,D5
00001ADC  0285 00000E00            881       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001AE2  E08D                     882       LSR.L   #8,D5
00001AE4  E28D                     883       LSR.L   #1,D5
00001AE6  BABC 00000007            884       CMP.L   #7,D5
00001AEC  6E00 0F28                885       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001AF0  BABC 00000000            886       CMP.L   #0,D5
00001AF6  6D00 0F1E                887       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001AFA  13C5 0000314A            888       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001B00  4245                     889       CLR     D5
00001B02  2A04                     890       MOVE.L   D4,D5
00001B04  0285 00000007            891       ANDI.L   #$0007,D5
00001B0A  13C5 0000314B            892       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001B10  6000 04F0                893       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001B14                           894  G_RO            ;GROUP ROTATION
00001B14  4245                     895       CLR   D5
00001B16  23C4 00003142            896       MOVE.L D4,IR_IL
00001B1C  02B9 00000020 00003142   897       ANDI.L  #$0020,IR_IL
00001B26  2A39 00003142            898       MOVE.L  IR_IL,D5
00001B2C  EA8D                     899       LSR.L   #5,D5
00001B2E  BA3C 0001                900       CMP.B   #$1,D5
00001B32  6700 0056                901       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001B36  4245                     902       CLR D5
00001B38  2A04                     903       MOVE.L  D4,D5
00001B3A  0285 00000100            904       ANDI.L  #$0100,D5
00001B40  E08D                     905       LSR.L  #8,D5
00001B42  23C5 0000313A            906       MOVE.L  D5,DR
00001B48  4245                     907       CLR D5
00001B4A  2A04                     908       MOVE.L  D4,D5
00001B4C  0285 00000E00            909       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001B52  E08D                     910       LSR.L   #8,D5
00001B54  E28D                     911       LSR.L   #1,D5
00001B56  BABC 00000007            912       CMP.L   #7,D5
00001B5C  6E00 0EB8                913       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001B60  BABC 00000000            914       CMP.L   #0,D5
00001B66  6D00 0EAE                915       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001B6A  13C5 00003146            916       MOVE.B  D5,S_COUNT
00001B70  4EB9 000022FC            917       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001B76  4245                     918       CLR     D5
00001B78  2A04                     919       MOVE.L  D4,D5
00001B7A  0285 00000007            920       ANDI.L   #$0007,D5
00001B80  13C5 0000314B            921       MOVE.B   D5,dRN
00001B86  6000 05B2                922       BRA      PR_RO    ;PRINT ROTATION   
00001B8A                           923  
00001B8A                           924  GRO_EA 
00001B8A  4245                     925       CLR D5
00001B8C  4244                     926       CLR D4
00001B8E  3839 00003102            927       MOVE.W COMMANDDATA,D4
00001B94                           928  
00001B94  2A04                     929       MOVE.L  D4,D5
00001B96  0285 00000100            930       ANDI.L  #$0100,D5
00001B9C  E08D                     931       LSR.L  #8,D5
00001B9E  23C5 0000313A            932       MOVE.L  D5,DR     ;DIRECTION
00001BA4  4245                     933       CLR D5
00001BA6  2A04                     934       MOVE.L  D4,D5
00001BA8  0285 00000E00            935       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001BAE  E08D                     936       LSR.L   #8,D5
00001BB0  E28D                     937       LSR.L   #1,D5
00001BB2  BABC 00000007            938       CMP.L   #7,D5
00001BB8  6E00 0E5C                939       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001BBC  BABC 00000000            940       CMP.L   #0,D5
00001BC2  6D00 0E52                941       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001BC6  13C5 0000314A            942       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001BCC  4245                     943       CLR     D5
00001BCE  2A04                     944       MOVE.L   D4,D5
00001BD0  0285 00000007            945       ANDI.L   #$0007,D5
00001BD6  13C5 0000314B            946       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001BDC  6000 04C0                947       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001BE0                           948  
00001BE0                           949  
00001BE0                           950  
00001BE0                           951  G_AS         ;GROUP ARITHMATIC SHIFT
00001BE0  4245                     952       CLR   D5
00001BE2  23C4 00003142            953       MOVE.L D4,IR_IL
00001BE8  02B9 00000020 00003142   954       ANDI.L  #$0020,IR_IL
00001BF2  2A39 00003142            955       MOVE.L  IR_IL,D5
00001BF8  EA8D                     956       LSR.L   #5,D5
00001BFA  BA3C 0001                957       CMP.B   #$1,D5
00001BFE  6700 0056                958       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001C02  4245                     959       CLR D5
00001C04  2A04                     960       MOVE.L  D4,D5
00001C06  0285 00000100            961       ANDI.L  #$0100,D5
00001C0C  E08D                     962       LSR.L  #8,D5
00001C0E  23C5 0000313A            963       MOVE.L  D5,DR
00001C14  4245                     964       CLR D5
00001C16  2A04                     965       MOVE.L  D4,D5
00001C18  0285 00000E00            966       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C1E  E08D                     967       LSR.L   #8,D5
00001C20  E28D                     968       LSR.L   #1,D5
00001C22  BABC 00000007            969       CMP.L   #7,D5
00001C28  6E00 0DEC                970       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C2C  BABC 00000000            971       CMP.L   #0,D5
00001C32  6D00 0DE2                972       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C36  13C5 00003146            973       MOVE.B  D5,S_COUNT
00001C3C  4EB9 000022FC            974       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001C42  4245                     975       CLR     D5
00001C44  2A04                     976       MOVE.L  D4,D5
00001C46  0285 00000007            977       ANDI.L   #$0007,D5
00001C4C  13C5 0000314B            978       MOVE.B   D5,dRN
00001C52  6000 0538                979       BRA      PR_AS    ;PRINT ROTATION 
00001C56                           980  
00001C56                           981  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001C56  4245                     982       CLR D5
00001C58  4244                     983       CLR D4
00001C5A  3839 00003102            984       MOVE.W COMMANDDATA,D4
00001C60                           985  
00001C60  2A04                     986       MOVE.L  D4,D5
00001C62  0285 00000100            987       ANDI.L  #$0100,D5
00001C68  E08D                     988       LSR.L  #8,D5
00001C6A  23C5 0000313A            989       MOVE.L  D5,DR     ;DIRECTION
00001C70  4245                     990       CLR D5
00001C72  2A04                     991       MOVE.L  D4,D5
00001C74  0285 00000E00            992       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C7A  E08D                     993       LSR.L   #8,D5
00001C7C  E28D                     994       LSR.L   #1,D5
00001C7E  BABC 00000007            995       CMP.L   #7,D5
00001C84  6E00 0D90                996       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C88  BABC 00000000            997       CMP.L   #0,D5
00001C8E  6D00 0D86                998       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C92  13C5 0000314A            999       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001C98  4245                    1000       CLR     D5
00001C9A  2A04                    1001       MOVE.L   D4,D5
00001C9C  0285 00000007           1002       ANDI.L   #$0007,D5
00001CA2  13C5 0000314B           1003       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001CA8  6000 02BC               1004       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001CAC                          1005  
00001CAC                          1006  G14_MEMS 
00001CAC  4245                    1007         CLR D5
00001CAE  2A04                    1008         MOVE.L  D4,D5
00001CB0  CABC 00000E00           1009         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001CB6  E08D                    1010         LSR.L   #8,D5
00001CB8  E28D                    1011         LSR.L   #1,D5
00001CBA  BA3C 0001               1012         CMP.B   #%001,D5
00001CBE  6700 0012               1013         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001CC2  BA3C 0003               1014         CMP.B   #%011,D5
00001CC6  6700 0070               1015         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001CCA  BA3C 0000               1016         CMP.B   #%000,D5
00001CCE  6700 00CE               1017         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001CD2                          1018  
00001CD2                          1019  G14_MEMS_LS 
00001CD2  4245                    1020             CLR D5
00001CD4  2A04                    1021             MOVE.L  D4,D5
00001CD6  0285 00000100           1022             ANDI.L  #$0100,D5
00001CDC  E08D                    1023             LSR.L  #8,D5
00001CDE  13C5 0000313A           1024             MOVE.B  D5,DR     ;DIRECTION
00001CE4  4245                    1025             CLR D5
00001CE6  2A04                    1026             MOVE.L D4,D5
00001CE8  0285 00000038           1027             ANDI.L  #$0038,D5
00001CEE  E68D                    1028             LSR.L  #3,D5
00001CF0  13C5 0000314E           1029             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001CF6  4245                    1030             CLR D5
00001CF8  2A04                    1031             MOVE.L D4,D5
00001CFA  0285 00000007           1032             ANDI.L  #$0007,D5
00001D00  13C5 0000314B           1033             MOVE.B  D5,dRN
00001D06  0CB9 00000000 0000314E  1034             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001D10  6700 0D04               1035             BEQ    PRINT_DATA
00001D14  0CB9 00000001 0000314E  1036             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001D1E  6700 0CF6               1037             BEQ     PRINT_DATA
00001D22  13C5 0000314D           1038             MOVE.B  D5,dRG     ;DESTINATION REG
00001D28  0C39 0007 0000314E      1039             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001D30  6700 00F2               1040             BEQ     CHECK_ID_LS 
00001D34  6000 0168               1041             BRA     PR_G14_MEMS_LS             
00001D38                          1042       
00001D38                          1043  
00001D38                          1044  G14_MEMS_RO
00001D38  4245                    1045             CLR D5
00001D3A  2A04                    1046             MOVE.L  D4,D5
00001D3C  0285 00000100           1047             ANDI.L  #$0100,D5
00001D42  E08D                    1048             LSR.L  #8,D5
00001D44  13C5 0000313A           1049             MOVE.B  D5,DR     ;DIRECTION
00001D4A  4245                    1050             CLR D5
00001D4C  2A04                    1051             MOVE.L D4,D5
00001D4E  0285 00000038           1052             ANDI.L  #$0038,D5
00001D54  E68D                    1053             LSR.L  #3,D5
00001D56  13C5 0000314E           1054             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001D5C  4245                    1055             CLR D5
00001D5E  2A04                    1056             MOVE.L D4,D5
00001D60  0285 00000007           1057             ANDI.L  #$0007,D5
00001D66  13C5 0000314B           1058             MOVE.B  D5,dRN
00001D6C  0CB9 00000000 0000314E  1059             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001D76  6700 0C9E               1060             BEQ    PRINT_DATA
00001D7A  0CB9 00000001 0000314E  1061             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001D84  6700 0C90               1062             BEQ     PRINT_DATA
00001D88  13C5 0000314D           1063             MOVE.B  D5,dRG     ;DESTINATION REG
00001D8E  0C39 0007 0000314E      1064             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001D96  6700 007C               1065             BEQ     CHECK_ID_RO 
00001D9A  6000 0166               1066             BRA     PR_G14_MEMS_RO         
00001D9E                          1067  
00001D9E                          1068  G14_MEMS_AS
00001D9E  4245                    1069             CLR D5
00001DA0  2A04                    1070             MOVE.L  D4,D5
00001DA2  0285 00000100           1071             ANDI.L  #$0100,D5
00001DA8  E08D                    1072             LSR.L  #8,D5
00001DAA  13C5 0000313A           1073             MOVE.B  D5,DR     ;DIRECTION
00001DB0  4245                    1074             CLR D5
00001DB2  2A04                    1075             MOVE.L D4,D5
00001DB4  0285 00000038           1076             ANDI.L  #$0038,D5
00001DBA  E68D                    1077             LSR.L  #3,D5
00001DBC  13C5 0000314E           1078             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001DC2  4245                    1079             CLR D5
00001DC4  2A04                    1080             MOVE.L D4,D5
00001DC6  0285 00000007           1081             ANDI.L  #$0007,D5
00001DCC  13C5 0000314B           1082             MOVE.B  D5,dRN
00001DD2  0CB9 00000000 0000314E  1083             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001DDC  6700 0C38               1084             BEQ    PRINT_DATA
00001DE0  0CB9 00000001 0000314E  1085             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001DEA  6700 0C2A               1086             BEQ     PRINT_DATA
00001DEE  13C5 0000314D           1087             MOVE.B  D5,dRG     ;DESTINATION REG
00001DF4  0C39 0007 0000314E      1088             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001DFC  6700 0006               1089             BEQ     CHECK_ID_AS 
00001E00  6000 0032               1090             BRA     PR_G14_MEMS_AS                          
00001E04                          1091             
00001E04                          1092  
00001E04                          1093  
00001E04  0C39 0004 0000314D      1094  CHECK_ID_AS  CMP.B #$4,dRG
00001E0C  6700 0C08               1095               BEQ   PRINT_DATA
00001E10  6000 0022               1096               BRA     PR_G14_MEMS_AS
00001E14                          1097               
00001E14  0C39 0004 0000314D      1098  CHECK_ID_RO  CMP.B #$4,dRG
00001E1C  6700 0BF8               1099               BEQ   PRINT_DATA
00001E20  6000 00E0               1100               BRA     PR_G14_MEMS_RO
00001E24                          1101    
00001E24  0C39 0004 0000314D      1102  CHECK_ID_LS  CMP.B #$4,dRG
00001E2C  6700 0BE8               1103               BEQ   PRINT_DATA
00001E30  6000 006C               1104               BRA    PR_G14_MEMS_LS
00001E34                          1105                               
00001E34                          1106  PR_G14_MEMS_AS
00001E34  4EB9 0000270A           1107       JSR     PRINTCLRSPOT      * print space
00001E3A                          1108   
00001E3A  0C39 0000 0000313A      1109       CMP.B #$0,DR 
00001E42  6700 002E               1110       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001E46                          1111      
00001E46                          1112      *******PRINT LSL*******
00001E46  43F9 000030E2           1113       LEA       PASL,A1   MEM LEFT SHIF
00001E4C  103C 000E               1114       MOVE.B   #14,D0     ; moves #14 into data register D0
00001E50  4E4F                    1115       TRAP     #15
00001E52                          1116  
00001E52  4EB9 0000270A           1117       JSR     PRINTCLRSPOT      * print space
00001E58                          1118   
00001E58  4243                    1119       CLR D3
00001E5A  4242                    1120       CLR D2
00001E5C  1439 0000314E           1121       MOVE.B  dMODE,D2
00001E62  1639 0000314B           1122       MOVE.B  dRN,D3
00001E68  4EB9 00002A84           1123       JSR     EA_START
00001E6E                          1124       
00001E6E  6000 F438               1125       BRA MEMORYGRABBER
00001E72                          1126  
00001E72                          1127       
00001E72                          1128  PR_ASR_MEM   ;MEM RIGHT SHIFT
00001E72  43F9 000030DE           1129       LEA       PASR,A1   MEM RIGHT SHIF
00001E78  103C 000E               1130       MOVE.B   #14,D0     ; moves #14 into data register D0
00001E7C  4E4F                    1131       TRAP     #15
00001E7E  4EB9 0000270A           1132       JSR     PRINTCLRSPOT      * print space
00001E84                          1133  
00001E84  4243                    1134       CLR D3
00001E86  4242                    1135       CLR D2
00001E88  1439 0000314E           1136       MOVE.B  dMODE,D2
00001E8E  1639 0000314B           1137       MOVE.B  dRN,D3
00001E94  4EB9 00002A84           1138       JSR     EA_START
00001E9A                          1139       
00001E9A  6000 F40C               1140       BRA MEMORYGRABBER
00001E9E                          1141               
00001E9E                          1142  
00001E9E                          1143  PR_G14_MEMS_LS 
00001E9E  0C39 0000 0000313A      1144       CMP.B #$0,DR 
00001EA6  6700 002E               1145       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001EAA                          1146      
00001EAA                          1147      *******PRINT LSL*******
00001EAA  43F9 000030D6           1148       LEA       PLSL,A1   MEM LEFT SHIF
00001EB0  103C 000E               1149       MOVE.B   #14,D0     ; moves #14 into data register D0
00001EB4  4E4F                    1150       TRAP     #15 
00001EB6                          1151       
00001EB6  4EB9 0000270A           1152       JSR     PRINTCLRSPOT      * print space
00001EBC                          1153       
00001EBC  4243                    1154       CLR D3
00001EBE  4242                    1155       CLR D2
00001EC0  1439 0000314E           1156       MOVE.B  dMODE,D2
00001EC6  1639 0000314B           1157       MOVE.B  dRN,D3
00001ECC  4EB9 00002A84           1158       JSR     EA_START
00001ED2                          1159       
00001ED2  6000 F3D4               1160       BRA MEMORYGRABBER
00001ED6                          1161       
00001ED6                          1162  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001ED6  43F9 000030DA           1163       LEA       PLSR,A1   MEM RIGHT SHIF
00001EDC  103C 000E               1164       MOVE.B   #14,D0     ; moves #14 into data register D0
00001EE0  4E4F                    1165       TRAP     #15
00001EE2  4EB9 0000270A           1166       JSR     PRINTCLRSPOT      * print space
00001EE8  4243                    1167       CLR D3
00001EEA  4242                    1168       CLR D2
00001EEC  1439 0000314E           1169       MOVE.B  dMODE,D2
00001EF2  1639 0000314B           1170       MOVE.B  dRN,D3
00001EF8  4EB9 00002A84           1171       JSR     EA_START
00001EFE                          1172       
00001EFE  6000 F3A8               1173       BRA    MEMORYGRABBER
00001F02                          1174  
00001F02                          1175  PR_G14_MEMS_RO
00001F02  0C39 0000 0000313A      1176       CMP.B #$0,DR 
00001F0A  6700 002E               1177       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001F0E                          1178      
00001F0E                          1179      *******PRINT ASL*******
00001F0E  43F9 000030E6           1180       LEA       PROL,A1   ROTATE MEM LEFT SHIF
00001F14  103C 000E               1181       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F18  4E4F                    1182       TRAP     #15
00001F1A                          1183  
00001F1A  4EB9 0000270A           1184       JSR     PRINTCLRSPOT
00001F20                          1185        
00001F20  4243                    1186       CLR D3
00001F22  4242                    1187       CLR D2
00001F24  1439 0000314E           1188       MOVE.B  dMODE,D2
00001F2A  1639 0000314B           1189       MOVE.B  dRN,D3
00001F30  4EB9 00002A84           1190       JSR     EA_START
00001F36                          1191       
00001F36  6000 F370               1192       BRA MEMORYGRABBER
00001F3A                          1193  
00001F3A                          1194  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001F3A  43F9 000030EA           1195       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
00001F40  103C 000E               1196       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F44  4E4F                    1197       TRAP     #15
00001F46  4EB9 0000270A           1198       JSR     PRINTCLRSPOT      * print space
00001F4C                          1199  
00001F4C  4243                    1200       CLR D3
00001F4E  4242                    1201       CLR D2
00001F50  1439 0000314E           1202       MOVE.B  dMODE,D2
00001F56  1639 0000314B           1203       MOVE.B  dRN,D3
00001F5C  4EB9 00002A84           1204       JSR     EA_START
00001F62                          1205       
00001F62  6000 F344               1206       BRA MEMORYGRABBER
00001F66                          1207  
00001F66                          1208  
00001F66                          1209  PR_G_AS_EA
00001F66  0CB9 00000000 0000313A  1210          CMP.L #$0,DR 
00001F70  6700 004C               1211          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00001F74                          1212       
00001F74                          1213          *******PRINT ASL*******
00001F74  43F9 000030E2           1214          LEA       PASL,A1
00001F7A  103C 000E               1215          MOVE.B   #14,D0     ; moves #14 into data register D0
00001F7E  4E4F                    1216          TRAP     #15 
00001F80  4EB9 00002680           1217          JSR      SIZEPRINT
00001F86                          1218          
00001F86  4EB9 0000270A           1219          JSR     PRINTCLRSPOT
00001F8C                          1220          
00001F8C  4242                    1221          CLR D2
00001F8E  4243                    1222          CLR D3
00001F90  143C 0000               1223          MOVE.B  #%000,D2     ; mode data register
00001F94  1639 0000314A           1224          MOVE.B  sRN,D3       ; source register number
00001F9A  4EB9 00002A84           1225          JSR     EA_START
00001FA0                          1226          
00001FA0  4EB9 00002718           1227          JSR     PRINTCOMA   ; print coma
00001FA6                          1228          
00001FA6  4243                    1229          CLR D3
00001FA8  4242                    1230          CLR D2
00001FAA  143C 0000               1231          MOVE.B  #%000,D2      ; mode data register
00001FAE  1639 0000314B           1232          MOVE.B  dRN,D3        ; destination register
00001FB4  4EB9 00002A84           1233          JSR     EA_START
00001FBA                          1234          
00001FBA  6000 F2EC               1235          BRA   MEMORYGRABBER
00001FBE                          1236  
00001FBE                          1237          
00001FBE                          1238  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
00001FBE  43F9 000030DE           1239           LEA       PASR,A1
00001FC4  103C 000E               1240          MOVE.B   #14,D0     ; moves #14 into data register D0
00001FC8  4E4F                    1241          TRAP     #15 
00001FCA  4EB9 00002652           1242          JSR      SIZESPLIT
00001FD0                          1243          
00001FD0  4242                    1244          CLR D2
00001FD2  4243                    1245          CLR D3
00001FD4  143C 0000               1246          MOVE.B  #%000,D2     ; mode data register
00001FD8  1639 0000314A           1247          MOVE.B  sRN,D3       ; source register number
00001FDE  4EB9 00002A84           1248          JSR     EA_START
00001FE4  4EB9 00002718           1249          JSR     PRINTCOMA   ; print coma
00001FEA  4243                    1250          CLR D3
00001FEC  4242                    1251          CLR D2
00001FEE  143C 0000               1252          MOVE.B  #%000,D2      ; mode data register
00001FF2  1639 0000314B           1253          MOVE.B  dRN,D3        ; destination register
00001FF8  4EB9 00002A84           1254          JSR     EA_START
00001FFE                          1255          
00001FFE  6000 F2A8               1256          BRA   MEMORYGRABBER
00002002                          1257  
00002002                          1258  
00002002                          1259  PR_G_LS_EA
00002002  0CB9 00000000 0000313A  1260          CMP.L #$0,DR 
0000200C  6700 004C               1261          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002010                          1262       
00002010                          1263          *******PRINT LSL*******
00002010  43F9 000030D6           1264          LEA       PLSL,A1
00002016  103C 000E               1265          MOVE.B   #14,D0     ; moves #14 into data register D0
0000201A  4E4F                    1266          TRAP     #15 
0000201C  4EB9 00002680           1267          JSR      SIZEPRINT
00002022                          1268          
00002022  4EB9 0000270A           1269          JSR     PRINTCLRSPOT
00002028                          1270          
00002028  4242                    1271          CLR D2
0000202A  4243                    1272          CLR D3
0000202C  143C 0000               1273          MOVE.B  #%000,D2     ; mode data register
00002030  1639 0000314A           1274          MOVE.B  sRN,D3       ; source register number
00002036  4EB9 00002A84           1275          JSR     EA_START
0000203C                          1276          
0000203C  4EB9 00002718           1277          JSR     PRINTCOMA   ; print coma
00002042                          1278          
00002042  4243                    1279          CLR D3
00002044  4242                    1280          CLR D2
00002046  143C 0000               1281          MOVE.B  #%000,D2      ; mode data register
0000204A  1639 0000314B           1282          MOVE.B  dRN,D3        ; destination register
00002050  4EB9 00002A84           1283          JSR     EA_START
00002056                          1284          
00002056  6000 F250               1285          BRA   MEMORYGRABBER
0000205A                          1286          
0000205A                          1287  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
0000205A  43F9 000030DA           1288           LEA       PLSR,A1
00002060  103C 000E               1289           MOVE.B   #14,D0     ; moves #14 into data register D0
00002064  4E4F                    1290          TRAP     #15 
00002066  4EB9 00002680           1291          JSR      SIZEPRINT
0000206C                          1292          
0000206C  4242                    1293          CLR D2
0000206E  4243                    1294          CLR D3
00002070  143C 0000               1295          MOVE.B  #%000,D2     ; mode data register
00002074  1639 0000314A           1296          MOVE.B  sRN,D3       ; source register number
0000207A  4EB9 00002A84           1297          JSR     EA_START
00002080  4EB9 00002718           1298          JSR     PRINTCOMA   ; print coma
00002086  4243                    1299          CLR D3
00002088  4242                    1300          CLR D2
0000208A  143C 0000               1301          MOVE.B  #%000,D2      ; mode data register
0000208E  1639 0000314B           1302          MOVE.B  dRN,D3        ; destination register
00002094  4EB9 00002A84           1303          JSR     EA_START
0000209A                          1304          
0000209A  6000 F20C               1305          BRA   MEMORYGRABBER
0000209E                          1306  
0000209E                          1307  
0000209E                          1308  PR_G_RO_EA        
0000209E  0CB9 00000000 0000313A  1309          CMP.L #$0,DR 
000020A8  6700 004C               1310          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000020AC                          1311       
000020AC                          1312          *******PRINT LSL*******
000020AC  43F9 000030E6           1313          LEA       PROL,A1
000020B2  103C 000E               1314          MOVE.B   #14,D0     ; moves #14 into data register D0
000020B6  4E4F                    1315          TRAP     #15 
000020B8  4EB9 00002680           1316          JSR      SIZEPRINT
000020BE                          1317          
000020BE  4EB9 0000270A           1318          JSR     PRINTCLRSPOT
000020C4                          1319          
000020C4  4242                    1320          CLR D2
000020C6  4243                    1321          CLR D3
000020C8  143C 0000               1322          MOVE.B  #%000,D2     ; mode data register
000020CC  1639 0000314A           1323          MOVE.B  sRN,D3       ; source register number
000020D2  4EB9 00002A84           1324          JSR     EA_START
000020D8  4EB9 00002718           1325          JSR     PRINTCOMA   ; print coma
000020DE  4243                    1326          CLR D3
000020E0  4242                    1327          CLR D2
000020E2  143C 0000               1328          MOVE.B  #%000,D2      ; mode data register
000020E6  1639 0000314B           1329          MOVE.B  dRN,D3        ; destination register
000020EC  4EB9 00002A84           1330          JSR     EA_START
000020F2                          1331          
000020F2  6000 F1B4               1332          BRA   MEMORYGRABBER
000020F6                          1333  
000020F6                          1334          
000020F6                          1335  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
000020F6  43F9 000030EA           1336          LEA       PROR,A1
000020FC  103C 000E               1337          MOVE.B   #14,D0     ; moves #14 into data register D0
00002100  4E4F                    1338          TRAP     #15 
00002102  4EB9 00002680           1339          JSR      SIZEPRINT
00002108                          1340  
00002108  4242                    1341          CLR D2
0000210A  4243                    1342          CLR D3
0000210C  143C 0000               1343          MOVE.B  #%000,D2     ; mode data register
00002110  1639 0000314A           1344          MOVE.B  sRN,D3       ; source register number
00002116  4EB9 00002A84           1345          JSR     EA_START
0000211C  4EB9 00002718           1346          JSR     PRINTCOMA   ; print coma
00002122  4243                    1347          CLR D3
00002124  4242                    1348          CLR D2
00002126  143C 0000               1349          MOVE.B  #%000,D2      ; mode data register
0000212A  1639 0000314B           1350          MOVE.B  dRN,D3        ; destination register
00002130  4EB9 00002A84           1351          JSR     EA_START
00002136                          1352          
00002136  6000 F170               1353          BRA   MEMORYGRABBER
0000213A                          1354  
0000213A                          1355  PR_RO 
0000213A  0CB9 00000000 0000313A  1356       CMP.L #$0,DR 
00002144  6700 0172               1357       BEQ   PR_ROR   ;RIGHT SHIFT
00002148                          1358      
00002148                          1359      *******PRINT ASL*******
00002148  43F9 000030E6           1360       LEA       PROL,A1
0000214E  103C 000E               1361       MOVE.B   #14,D0     ; moves #14 into data register D0
00002152  4E4F                    1362       TRAP     #15 
00002154                          1363  
00002154  4EB9 00002680           1364       JSR      SIZEPRINT
0000215A                          1365  
0000215A  4EB9 00002726           1366       JSR     PRINTHASH   * print hash
00002160                          1367  
00002160  4241                    1368      CLR D1
00002162  1239 00003146           1369      MOVE.B   S_COUNT,D1
00002168  103C 0003               1370      MOVE.B   #3,D0
0000216C  4E4F                    1371      TRAP     #15
0000216E  4EB9 00002718           1372      JSR     PRINTCOMA   ; print coma
00002174  4243                    1373      CLR D3
00002176  4242                    1374      CLR D2
00002178  143C 0000               1375      MOVE.B  #%000,D2
0000217C  1639 0000314B           1376      MOVE.B  dRN,D3
00002182  4EB9 00002A84           1377      JSR     EA_START
00002188                          1378      
00002188  6000 F11E               1379      BRA    MEMORYGRABBER
0000218C                          1380  
0000218C                          1381  
0000218C                          1382  PR_AS 
0000218C  0CB9 00000000 0000313A  1383      CMP.L #$0,DR 
00002196  6700 00DC               1384      BEQ   PR_ASR   ;RIGHT SHIFT
0000219A                          1385      
0000219A                          1386      *******PRINT ASL*******
0000219A  43F9 000030E2           1387       LEA       PASL,A1
000021A0  103C 000E               1388       MOVE.B   #14,D0     ; moves #14 into data register D0
000021A4  4E4F                    1389       TRAP     #15 
000021A6                          1390  
000021A6  4EB9 00002680           1391      JSR      SIZEPRINT
000021AC                          1392  
000021AC  4EB9 00002726           1393      JSR     PRINTHASH   ; print hash
000021B2                          1394      
000021B2  4241                    1395      CLR D1
000021B4  1239 00003146           1396      MOVE.B   S_COUNT,D1
000021BA  103C 0003               1397      MOVE.B   #3,D0
000021BE  4E4F                    1398      TRAP     #15
000021C0  4EB9 00002718           1399      JSR     PRINTCOMA   ; print coma
000021C6  4243                    1400      CLR D3
000021C8  4242                    1401      CLR D2
000021CA  143C 0000               1402      MOVE.B  #%000,D2
000021CE  1639 0000314B           1403      MOVE.B  dRN,D3
000021D4  4EB9 00002A84           1404      JSR     EA_START
000021DA                          1405  
000021DA  6000 F0CC               1406      BRA    MEMORYGRABBER
000021DE                          1407                        
000021DE                          1408                          
000021DE                          1409  PR_LS 
000021DE  0CB9 00000000 0000313A  1410      CMP.L #$0,DR 
000021E8  6700 0046               1411      BEQ   PR_LSR   ;RIGHT SHIFT
000021EC                          1412      
000021EC                          1413      *******PRINT LSL*******
000021EC  43F9 000030D6           1414       LEA       PLSL,A1
000021F2  103C 000E               1415       MOVE.B   #14,D0     ; moves #14 into data register D0
000021F6  4E4F                    1416       TRAP     #15 
000021F8  4EB9 00002680           1417      JSR      SIZEPRINT
000021FE                          1418  
000021FE  4EB9 00002726           1419      JSR     PRINTHASH   ; print hash
00002204                          1420      
00002204  4241                    1421      CLR D1
00002206  1239 00003146           1422      MOVE.B   S_COUNT,D1
0000220C  103C 0003               1423      MOVE.B   #3,D0
00002210  4E4F                    1424      TRAP     #15
00002212                          1425      
00002212  4EB9 00002718           1426      JSR     PRINTCOMA   ; print coma
00002218                          1427      
00002218  4243                    1428      CLR D3
0000221A  4242                    1429      CLR D2
0000221C  143C 0000               1430      MOVE.B  #%000,D2
00002220  1639 0000314B           1431      MOVE.B  dRN,D3
00002226  4EB9 00002A84           1432      JSR     EA_START
0000222C                          1433      
0000222C  6000 F07A               1434      BRA    MEMORYGRABBER
00002230                          1435      
00002230                          1436            
00002230                          1437  PR_LSR 
00002230  43F9 000030DA           1438      LEA   PLSR,A1
00002236  103C 000E               1439        MOVE.B   #14,D0     ; moves #14 into data register D0
0000223A  4E4F                    1440        TRAP     #15       ; Displays message via trap 14 
0000223C  4EB9 00002680           1441        JSR      SIZEPRINT
00002242                          1442  
00002242  4EB9 00002726           1443        JSR     PRINTHASH   ; print hash
00002248                          1444        
00002248  4241                    1445        CLR D1
0000224A  1239 00003146           1446        MOVE.B   S_COUNT,D1
00002250  103C 0003               1447        MOVE.B   #3,D0
00002254  4E4F                    1448        TRAP     #15
00002256  4EB9 00002718           1449        JSR     PRINTCOMA   ; print coma
0000225C  4243                    1450        CLR D3
0000225E  4242                    1451        CLR D2
00002260  143C 0000               1452        MOVE.B #%000,D2
00002264  1639 0000314B           1453        MOVE.B  dRN,D3
0000226A  4EB9 00002A84           1454        JSR   EA_START
00002270                          1455        
00002270  6000 F036               1456        BRA MEMORYGRABBER
00002274                          1457        
00002274                          1458        
00002274                          1459  PR_ASR 
00002274  43F9 000030DE           1460      LEA   PASR,A1
0000227A  103C 000E               1461         MOVE.B   #14,D0     ; moves #14 into data register D0
0000227E  4E4F                    1462        TRAP     #15       ; Displays message via trap 14 
00002280  4EB9 00002680           1463        JSR      SIZEPRINT
00002286                          1464  
00002286  4EB9 00002726           1465        JSR     PRINTHASH   ; print hash
0000228C                          1466        
0000228C  4241                    1467        CLR D1
0000228E  1239 00003146           1468        MOVE.B   S_COUNT,D1
00002294  103C 0003               1469        MOVE.B   #3,D0
00002298  4E4F                    1470        TRAP     #15
0000229A  4EB9 00002718           1471        JSR     PRINTCOMA   ; print coma
000022A0  4243                    1472        CLR D3
000022A2  4242                    1473        CLR D2
000022A4  143C 0000               1474        MOVE.B #%000,D2
000022A8  1639 0000314B           1475        MOVE.B  dRN,D3
000022AE  4EB9 00002A84           1476        JSR   EA_START
000022B4                          1477  
000022B4  6000 EFF2               1478        BRA MEMORYGRABBER
000022B8                          1479  
000022B8                          1480        
000022B8                          1481  PR_ROR 
000022B8  43F9 000030EA           1482        LEA   PROR,A1
000022BE  103C 000E               1483        MOVE.B   #14,D0     ; moves #14 into data register D0
000022C2  4E4F                    1484        TRAP     #15       ; Displays message via trap 14 
000022C4  4EB9 00002680           1485        JSR      SIZEPRINT
000022CA                          1486  
000022CA  4EB9 00002726           1487        JSR     PRINTHASH   ; print hash
000022D0                          1488        
000022D0  4241                    1489        CLR D1
000022D2  1239 00003146           1490        MOVE.B   S_COUNT,D1
000022D8  103C 0003               1491        MOVE.B   #3,D0
000022DC  4E4F                    1492        TRAP     #15
000022DE  4EB9 00002718           1493        JSR     PRINTCOMA   ; print coma
000022E4  4243                    1494        CLR D3
000022E6  4242                    1495        CLR D2
000022E8  143C 0000               1496        MOVE.B #%000,D2
000022EC  1639 0000314B           1497        MOVE.B  dRN,D3
000022F2  4EB9 00002A84           1498        JSR   EA_START
000022F8                          1499        
000022F8  6000 EFAE               1500        BRA MEMORYGRABBER
000022FC                          1501        
000022FC                          1502        
000022FC                          1503  ;-----------------------extra parts for above code to function
000022FC                          1504        
000022FC                          1505  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
000022FC  0C39 0000 00003146      1506           CMP.B #$0,S_COUNT
00002304  6700 0004               1507           BEQ   IS_EIGHT
00002308  4E75                    1508           RTS
0000230A                          1509           
0000230A  13FC 0008 00003146      1510  IS_EIGHT  MOVE.B #8,S_COUNT
00002312  4E75                    1511            RTS
00002314                          1512  
00002314                          1513  ;---------------------------------------------------------
00002314                          1514                  ;MOVE SECTION
00002314  43F9 00003082           1515  PRINTMOVE LEA PMOVE,A1
0000231A  103C 000E               1516      MOVE.B   #14,D0     ; moves #14 into data register D0
0000231E  4E4F                    1517      TRAP     #15       ; Displays message via trap 14
00002320  4EB9 00002652           1518      JSR     SIZESPLIT
00002326  6000 04A8               1519      BRA EADN
0000232A                          1520      
0000232A  43F9 0000308D           1521  PRINTMOVEA LEA PMOVEA,A1
00002330  103C 000E               1522      MOVE.B   #14,D0     ; moves #14 into data register D0
00002334  4E4F                    1523      TRAP     #15       ; Displays message via trap 14
00002336  4EB9 00002652           1524      JSR     SIZESPLIT
0000233C  6000 0492               1525      BRA EADN
00002340                          1526      
00002340                          1527                      ;First set of commands
00002340                          1528  PRINTNOP    
00002340  43F9 00003099           1529      LEA     PNOP,A1
00002346  103C 000E               1530      MOVE.B  #14,D0     ; moves #14 into data register D0
0000234A  4E4F                    1531      TRAP    #15       ; Displays message via trap 14
0000234C                          1532      
0000234C  6000 EF5A               1533      BRA     MEMORYGRABBER
00002350                          1534  
00002350                          1535  PRINTMOVEM  
00002350  43F9 00003087           1536      LEA     PMOVEM,A1
00002356  103C 000E               1537      MOVE.B  #14,D0     ; moves #14 into data register D0
0000235A  4E4F                    1538      TRAP    #15       ; Displays message via trap 14
0000235C  4EB9 000026C8           1539      JSR     SIZEPRINT3 
00002362                          1540      
00002362  4284                    1541      CLR.L   D4
00002364  3818                    1542      MOVE.W  (A0)+,D4            * Move list mask into D4
00002366                          1543      
00002366                          1544      * TODO : CHECK THE INVELID_EA FLAG
00002366                          1545      
00002366                          1546  * TODO:     
00002366  0C39 0000 0000312C      1547      CMP.B   #%0,XBit
0000236E  6700 0006               1548      BEQ     PRINT_REG_TO_MEM
00002372  6000 0002               1549      BRA     PRINT_MEM_TO_REG
00002376                          1550  PRINT_REG_TO_MEM
00002376                          1551  PRINT_MEM_TO_REG
00002376                          1552  
00002376                          1553  PRINTLEA    
00002376  43F9 0000309D           1554      LEA PLEA,A1
0000237C  103C 000E               1555      MOVE.B   #14,D0     ; moves #14 into data register D0
00002380  4E4F                    1556      TRAP     #15       ; Displays message via trap 14
00002382  4EB9 0000270A           1557      JSR     PRINTCLRSPOT
00002388                          1558      * TODO : CHECK THE INVELID_EA FLAG
00002388                          1559  
00002388  4243                    1560      CLR     D3
0000238A  4242                    1561      CLR     D2
0000238C  1439 00003118           1562      MOVE.B  SRC_MODE,D2
00002392  1639 00003119           1563      MOVE.B  SRC_REG,D3
00002398  4EB9 00002A84           1564      JSR     EA_START
0000239E                          1565  
0000239E  4EB9 00002718           1566      JSR     PRINTCOMA   ; print coma
000023A4                          1567      
000023A4                          1568     * MOVE.B  #%001,DEST_MODE
000023A4  4243                    1569      CLR     D3
000023A6  4242                    1570      CLR     D2
000023A8  143C 0001               1571      MOVE.B  #%001,D2
000023AC  1639 00003116           1572      MOVE.B  DEST_REG,D3
000023B2  4EB9 00002A84           1573      JSR     EA_START
000023B8                          1574  
000023B8  6000 EEEE               1575      BRA     MEMORYGRABBER
000023BC                          1576  
000023BC                          1577  PRINTNOT    
000023BC  43F9 000030A1           1578      LEA PNOT,A1
000023C2  103C 000E               1579      MOVE.B   #14,D0
000023C6  4E4F                    1580      TRAP     #15
000023C8  4EB9 000026A4           1581      JSR     SIZEPRINT2    
000023CE                          1582      
000023CE  4243                    1583      CLR     D3
000023D0  4242                    1584      CLR     D2
000023D2  1439 00003117           1585      MOVE.B  DEST_MODE,D2
000023D8  1639 00003116           1586      MOVE.B  DEST_REG,D3    
000023DE  4EB9 00002A84           1587      JSR     EA_START
000023E4                          1588      
000023E4  6000 EEC2               1589      BRA     MEMORYGRABBER
000023E8                          1590  
000023E8                          1591  PRINTJSR    
000023E8  43F9 000030A5           1592      LEA     PJSR,A1
000023EE  103C 000E               1593      MOVE.B  #14,D0 
000023F2  4E4F                    1594      TRAP    #15      
000023F4  4EB9 0000270A           1595      JSR     PRINTCLRSPOT
000023FA                          1596      
000023FA  4243                    1597      CLR     D3
000023FC  4242                    1598      CLR     D2
000023FE  1439 00003117           1599      MOVE.B  DEST_MODE,D2
00002404  1639 00003116           1600      MOVE.B  DEST_REG,D3    
0000240A  4EB9 00002A84           1601      JSR     EA_START
00002410                          1602      
00002410  6000 EE96               1603      BRA     MEMORYGRABBER
00002414                          1604  
00002414                          1605  
00002414  43F9 000030A9           1606  PRINTRTS    LEA PRTS,A1
0000241A  103C 000E               1607      MOVE.B   #14,D0     ; moves #14 into data register D0
0000241E  4E4F                    1608      TRAP     #15       ; Displays message via trap 14
00002420                          1609      
00002420  6000 EE86               1610      BRA     MEMORYGRABBER
00002424                          1611      
00002424                          1612                  ;ADDQ SECTION
00002424                          1613  PRINTADDQ 
00002424  43F9 000030D1           1614      LEA     PADDQ,A1
0000242A  103C 000E               1615      MOVE.B  #14,D0     ; moves #14 into data register D0
0000242E  4E4F                    1616      TRAP    #15       ; Displays message via trap 14
00002430  4EB9 000026A4           1617      JSR     SIZEPRINT2
00002436                          1618  
00002436  4EB9 00002726           1619      JSR     PRINTHASH   ; print hash
0000243C  4EB9 00002732           1620      JSR     PRINTDOLLARSIGN     ; print dollar sign
00002442                          1621      
00002442  4241                    1622      CLR     D1
00002444  1239 0000311C           1623      MOVE.B  DATA_FIELD,D1
0000244A  103C 0003               1624      MOVE.B  #3,D0     
0000244E  4E4F                    1625      TRAP    #15 
00002450                          1626      
00002450  4EB9 00002718           1627      JSR     PRINTCOMA   ; print coma
00002456                          1628      
00002456  4243                    1629      CLR     D3
00002458  4242                    1630      CLR     D2
0000245A  1439 00003117           1631      MOVE.B  DEST_MODE,D2
00002460  1639 00003116           1632      MOVE.B  DEST_REG,D3    
00002466  4EB9 00002A84           1633      JSR     EA_START
0000246C                          1634  
0000246C  6000 EE3A               1635      BRA      MEMORYGRABBER
00002470                          1636  
00002470                          1637                  ;SECOND SET OF COMMANDS
00002470  43F9 000030AD           1638  PRINTBGT LEA PBGT,A1
00002476  103C 000E               1639      MOVE.B   #14,D0     ; moves #14 into data register D0
0000247A  4E4F                    1640      TRAP     #15       ; Displays message via trap 14
0000247C  4EB9 00002652           1641      JSR SIZESPLIT
00002482  6000 034C               1642      BRA EADN
00002486                          1643  
00002486  43F9 000030B1           1644  PRINTBEQ LEA PBEQ,A1
0000248C  103C 000E               1645      MOVE.B   #14,D0     ; moves #14 into data register D0
00002490  4E4F                    1646      TRAP     #15       ; Displays message via trap 14
00002492  4EB9 00002652           1647      JSR SIZESPLIT
00002498  6000 0336               1648      BRA EADN
0000249C                          1649  
0000249C  43F9 000030B5           1650  PRINTBLE LEA PBLE,A1
000024A2  103C 000E               1651      MOVE.B   #14,D0     ; moves #14 into data register D0
000024A6  4E4F                    1652      TRAP     #15       ; Displays message via trap 14
000024A8  4EB9 00002652           1653      JSR SIZESPLIT
000024AE  6000 0320               1654      BRA EADN
000024B2                          1655  
000024B2  43F9 000030B9           1656  PRINTBRA LEA PBRA,A1
000024B8  103C 000E               1657      MOVE.B   #14,D0     ; moves #14 into data register D0
000024BC  4E4F                    1658      TRAP     #15       ; Displays message via trap 14
000024BE  4EB9 00002652           1659      JSR SIZESPLIT
000024C4  6000 030A               1660      BRA EADN
000024C8                          1661      
000024C8                          1662                  ;MOVEQ SECTION
000024C8                          1663  PRINTMOVEQ 
000024C8  43F9 00003093           1664      LEA PMOVEQ,A1
000024CE  103C 000E               1665      MOVE.B   #14,D0     ; moves #14 into data register D0
000024D2  4E4F                    1666      TRAP     #15       ; Displays message via trap 14
000024D4                          1667      
000024D4  4EB9 0000270A           1668      JSR     PRINTCLRSPOT
000024DA  4EB9 00002726           1669      JSR     PRINTHASH   ; print hash
000024E0  4EB9 00002732           1670      JSR     PRINTDOLLARSIGN     ; print dollar sign  
000024E6                          1671   
000024E6  2239 0000311C           1672      MOVE.L      DATA_FIELD,D1
000024EC  143C 0010               1673      MOVE.B      #16,D2
000024F0  103C 000F               1674      MOVE.B      #15,D0     ; moves #14 into data register D0
000024F4  4E4F                    1675      TRAP        #15 
000024F6                          1676      
000024F6  4EB9 00002718           1677      JSR     PRINTCOMA   ; print coma
000024FC  1E3C 0000               1678      MOVE.B #0,D7
00002500  7400                    1679      MOVE.L #%000,D2
00002502  1639 00003116           1680      MOVE.B DEST_REG,D3
00002508  6000 02C6               1681      BRA EADN
0000250C                          1682  
0000250C                          1683                  ;OR SECTION
0000250C                          1684  PRINTOR 
0000250C  43F9 000030BD           1685      LEA     POR,A1
00002512  103C 000E               1686      MOVE.B  #14,D0     ; moves #14 into data register D0
00002516  4E4F                    1687      TRAP    #15       ; Displays message via trap 14
00002518  4EB9 000026A4           1688      JSR     SIZEPRINT2 
0000251E                          1689      
0000251E                          1690      * TODO : CHECK THE INVELID_EA FLAG
0000251E                          1691      
0000251E  0C39 0000 0000312C      1692      CMP.B   #%0,XBit
00002526  6700 0218               1693      BEQ     PRINT_EA_TO_DN
0000252A  6000 025C               1694      BRA     PRINT_DN_TO_EA
0000252E                          1695      
0000252E                          1696  
0000252E                          1697                  ;SUB SECTION
0000252E                          1698  PRINTSUB 
0000252E  43F9 000030C0           1699      LEA PSUB,A1
00002534  103C 000E               1700      MOVE.B   #14,D0     ; moves #14 into data register D0
00002538  4E4F                    1701      TRAP     #15       ; Displays message via trap 14 
0000253A  4EB9 000026A4           1702      JSR     SIZEPRINT2 
00002540                          1703      
00002540                          1704      * TODO : CHECK THE INVELID_EA FLAG
00002540                          1705      
00002540  0C39 0000 0000312C      1706      CMP.B   #%0,XBit
00002548  6700 01F6               1707      BEQ     PRINT_EA_TO_DN
0000254C  6000 023A               1708      BRA     PRINT_DN_TO_EA
00002550                          1709      
00002550                          1710  
00002550                          1711                  ;AND SECTION
00002550                          1712  PRINTAND 
00002550  43F9 000030C4           1713      LEA PAND,A1
00002556  103C 000E               1714      MOVE.B   #14,D0     ; moves #14 into data register D0
0000255A  4E4F                    1715      TRAP     #15       ; Displays message via trap 14
0000255C  4EB9 000026A4           1716      JSR     SIZEPRINT2 
00002562                          1717      
00002562                          1718      * TODO : CHECK THE INVELID_EA FLAG
00002562                          1719      
00002562  0C39 0000 0000312C      1720      CMP.B   #%0,XBit
0000256A  6700 01D4               1721      BEQ     PRINT_EA_TO_DN
0000256E  6000 0218               1722      BRA     PRINT_DN_TO_EA
00002572                          1723  
00002572                          1724                  ;ADD SPLIT              
00002572                          1725  PRINTADD 
00002572  43F9 000030C8           1726      LEA PADD,A1
00002578  103C 000E               1727      MOVE.B   #14,D0     ; moves #14 into data register D0
0000257C  4E4F                    1728      TRAP     #15       ; Displays message via trap 14
0000257E                          1729      
0000257E  4EB9 000026A4           1730      JSR     SIZEPRINT2 
00002584                          1731      
00002584                          1732      * TODO : CHECK THE INVELID_EA FLAG
00002584                          1733      
00002584  0C39 0000 0000312C      1734      CMP.B   #%0,XBit
0000258C  6700 01B2               1735      BEQ     PRINT_EA_TO_DN
00002590  6000 01F6               1736      BRA     PRINT_DN_TO_EA
00002594                          1737      
00002594                          1738  PRINTADDA 
00002594  43F9 000030CC           1739      LEA PADDA,A1
0000259A  103C 000E               1740      MOVE.B   #14,D0     ; moves #14 into data register D0
0000259E  4E4F                    1741      TRAP     #15       ; Displays message via trap 14
000025A0  4EB9 000026A4           1742      JSR     SIZEPRINT2 
000025A6                          1743      
000025A6                          1744      * TODO : CHECK THE INVELID_EA FLAG
000025A6                          1745      
000025A6  13F9 0000311A 00003118  1746      MOVE.B  TEMP_MODE,SRC_MODE
000025B0  13F9 0000311B 00003119  1747      MOVE.B  TEMP_REG,SRC_REG
000025BA  4243                    1748      CLR     D3
000025BC  4242                    1749      CLR     D2
000025BE  1439 00003118           1750      MOVE.B  SRC_MODE,D2
000025C4  1639 00003119           1751      MOVE.B  SRC_REG,D3
000025CA  4EB9 00002A84           1752      JSR     EA_START
000025D0                          1753  
000025D0  4EB9 00002718           1754      JSR     PRINTCOMA   ; print coma
000025D6                          1755      
000025D6                          1756     * MOVE.B  #%001,DEST_MODE
000025D6  4243                    1757      CLR     D3
000025D8  4242                    1758      CLR     D2
000025DA  143C 0001               1759      MOVE.B  #%001,D2
000025DE  1639 00003116           1760      MOVE.B  DEST_REG,D3
000025E4  4EB9 00002A84           1761      JSR     EA_START
000025EA                          1762  
000025EA  6000 ECBC               1763      BRA     MEMORYGRABBER
000025EE                          1764      
000025EE                          1765                  ;THIRD ROTATE SPLIT   
000025EE                          1766  PRINTROTATESPLIT 
000025EE  0C79 0000 00003081      1767      CMP #0,CommandDetail   
000025F6                          1768      *BEQ PRINTLSL
000025F6  0C79 0001 00003081      1769      CMP #1,CommandDetail   
000025FE                          1770      *BEQ PRINTLSLDOUBLE
000025FE  0C79 0002 00003081      1771      CMP #2,CommandDetail   
00002606                          1772      *BEQ PRINTLSR
00002606  0C79 0003 00003081      1773      CMP #3,CommandDetail   
0000260E                          1774      *BEQ PRINTLSRDOUBLE
0000260E  0C79 0004 00003081      1775      CMP #4,CommandDetail   
00002616                          1776      *BEQ PRINTASR
00002616  0C79 0005 00003081      1777      CMP #5,CommandDetail   
0000261E                          1778      *BEQ PRINTASRDOUBLE
0000261E  0C79 0006 00003081      1779      CMP #6,CommandDetail   
00002626                          1780      *BEQ PRINTASL
00002626  0C79 0007 00003081      1781      CMP #7,CommandDetail   
0000262E                          1782      *BEQ PRINTASLDOUBLE
0000262E  0C79 0008 00003081      1783      CMP #8,CommandDetail   
00002636                          1784      *BEQ PRINTROL
00002636  0C79 0009 00003081      1785      CMP #9,CommandDetail   
0000263E                          1786      *BEQ PRINTROLDOUBLE
0000263E  0C79 000A 00003081      1787      CMP #10,CommandDetail
00002646                          1788      *BEQ PRINTROR     
00002646  0C79 000B 00003081      1789      CMP #11,CommandDetail
0000264E                          1790      *BEQ PRINTRORDOUBLE            
0000264E  6000 EC58               1791      BRA MEMORYGRABBER    
00002652                          1792  
00002652                          1793  
00002652                          1794                  ;SIZE PRINTER
00002652                          1795  SIZESPLIT   
00002652  0CB9 00000001 00003106  1796      CMP.L #1,SizeValue
0000265C  6700 0082               1797      BEQ PRINTB
00002660  0CB9 00000002 00003106  1798      CMP.L #2,SizeValue
0000266A  6700 0082               1799      BEQ PRINTW
0000266E  0CB9 00000003 00003106  1800      CMP.L #3,SizeValue
00002678  6700 0082               1801      BEQ PRINTL
0000267C  6000 008C               1802      BRA PRINTCLRSPOT ; go to EA/DN section
00002680                          1803  
00002680                          1804  SIZEPRINT 
00002680  0C39 0000 00003120      1805       CMP.B  #$0,SIZE
00002688  6700 0056               1806       BEQ    PRINTB
0000268C  0C39 0001 00003120      1807       CMP.B  #$1,SIZE
00002694  6700 0058               1808       BEQ    PRINTW      
00002698  0C39 0002 00003120      1809       CMP.B  #$2,SIZE
000026A0  6700 005A               1810       BEQ    PRINTL 
000026A4                          1811  
000026A4                          1812  SIZEPRINT2   
000026A4  0C39 0000 00003120      1813      CMP.B   #$00,SIZE
000026AC  6700 0032               1814      BEQ     PRINTB
000026B0  0C39 0001 00003120      1815      CMP.B   #$01,SIZE
000026B8  6700 0034               1816      BEQ     PRINTW
000026BC  0C39 0010 00003120      1817      CMP.B   #$10,SIZE
000026C4  6000 0036               1818      BRA     PRINTL
000026C8                          1819  
000026C8                          1820  SIZEPRINT3
000026C8  0C39 0000 00003120      1821      CMP.B   #$0,SIZE
000026D0  6700 001C               1822      BEQ     PRINTW
000026D4  0C39 0001 00003120      1823      CMP.B   #$1,SIZE
000026DC  6700 001E               1824      BEQ     PRINTL
000026E0                          1825  
000026E0                          1826  PRINTB  
000026E0  43F9 0000310A           1827      LEA     PB,A1
000026E6  103C 000E               1828      MOVE.B  #14,D0     ; moves #14 into data register D0
000026EA  4E4F                    1829      TRAP    #15       ; Displays message via trap 14
000026EC  4E75                    1830      RTS
000026EE                          1831  
000026EE                          1832  PRINTW      
000026EE  43F9 0000310E           1833      LEA     PW,A1
000026F4  103C 000E               1834      MOVE.B  #14,D0     ; moves #14 into data register D0
000026F8  4E4F                    1835      TRAP    #15       ; Displays message via trap 14
000026FA  4E75                    1836      RTS
000026FC                          1837      
000026FC                          1838  PRINTL 
000026FC  43F9 00003112           1839      LEA     PL,A1
00002702  103C 000E               1840      MOVE.B  #14,D0     ; moves #14 into data register D0
00002706  4E4F                    1841      TRAP    #15       ; Displays message via trap 14
00002708  4E75                    1842      RTS
0000270A                          1843  
0000270A                          1844  PRINTCLRSPOT 
0000270A  43F9 00003123           1845      LEA     CLRSPOT,A1
00002710  103C 000E               1846      MOVE.B  #14,D0     ; moves #14 into data register D0
00002714  4E4F                    1847      TRAP    #15       ; Displays message via trap 14
00002716  4E75                    1848      RTS
00002718                          1849  
00002718                          1850  PRINTCOMA   
00002718  43F9 00003129           1851      LEA     COMA,A1
0000271E  103C 000E               1852      MOVE.B  #14,D0     
00002722  4E4F                    1853      TRAP    #15
00002724  4E75                    1854      RTS
00002726                          1855  
00002726                          1856  PRINTHASH 
00002726  43F9 00003121           1857      LEA     HASH,A1    * print hash
0000272C  700E                    1858      MOVEQ   #14,D0
0000272E  4E4F                    1859      TRAP    #15
00002730  4E75                    1860      RTS
00002732                          1861  
00002732                          1862  PRINTDOLLARSIGN   
00002732  43F9 00003127           1863      LEA     DOLLARSIGN,A1   * print dollar sign
00002738  103C 000E               1864      MOVE.B  #14,D0
0000273C  4E4F                    1865      TRAP    #15 
0000273E  4E75                    1866      RTS
00002740                          1867  
00002740                          1868  PRINT_EA_TO_DN
00002740  13F9 0000311A 00003118  1869      MOVE.B  TEMP_MODE,SRC_MODE
0000274A  13F9 0000311B 00003119  1870      MOVE.B  TEMP_REG,SRC_REG
00002754  4243                    1871      CLR     D3
00002756  4242                    1872      CLR     D2
00002758  1439 00003118           1873      MOVE.B  SRC_MODE,D2
0000275E  1639 00003119           1874      MOVE.B  SRC_REG,D3
00002764  4EB9 00002A84           1875      JSR     EA_START
0000276A                          1876  
0000276A  4EB8 2718               1877      JSR     PRINTCOMA   ; print coma
0000276E                          1878   
0000276E  4243                    1879      CLR     D3
00002770  4242                    1880      CLR     D2
00002772  1439 00003117           1881      MOVE.B  DEST_MODE,D2
00002778  1639 00003116           1882      MOVE.B  DEST_REG,D3
0000277E  4EB9 00002A84           1883      JSR     EA_START
00002784                          1884  
00002784  6000 EB22               1885      BRA     MEMORYGRABBER
00002788                          1886      
00002788                          1887  PRINT_DN_TO_EA    
00002788  4243                    1888      CLR     D3
0000278A  4242                    1889      CLR     D2
0000278C  1439 00003117           1890      MOVE.B  DEST_MODE,D2
00002792  1639 00003119           1891      MOVE.B  SRC_REG,D3
00002798  4EB9 00002A84           1892      JSR     EA_START
0000279E                          1893      
0000279E  4EB8 2718               1894      JSR     PRINTCOMA   ; print coma
000027A2                          1895      
000027A2  13F9 0000311A 00003118  1896      MOVE.B  TEMP_MODE,SRC_MODE
000027AC  13F9 0000311B 00003119  1897      MOVE.B  TEMP_REG,SRC_REG
000027B6  4243                    1898      CLR     D3
000027B8  4242                    1899      CLR     D2
000027BA  1439 00003118           1900      MOVE.B  SRC_MODE,D2
000027C0  1639 00003119           1901      MOVE.B  SRC_REG,D3
000027C6  4EB9 00002A84           1902      JSR     EA_START
000027CC                          1903      
000027CC  6000 EADA               1904      BRA     MEMORYGRABBER
000027D0                          1905  
000027D0                          1906  
000027D0                          1907                  ;PRINT EA/DN
000027D0                          1908  EADN 
000027D0  BE3C 0000               1909      CMP.B   #0,D7
000027D4  6700 0030               1910      BEQ     PRINTNOTRAIL
000027D8  BE3C 0001               1911      CMP.B   #1,D7
000027DC  6700 000E               1912      BEQ     PRINTONETRAIL 
000027E0  BE3C 0002               1913      CMP.B   #2,D7
000027E4  6700 0010               1914      BEQ     PRINTTWOTRAIL
000027E8                          1915      
000027E8  6000 EABE               1916      BRA     MEMORYGRABBER
000027EC                          1917      
000027EC                          1918  PRINTONETRAIL 
000027EC  4EB9 00002A84           1919      JSR EA_Start
000027F2  6000 EAB4               1920      BRA MEMORYGRABBER
000027F6                          1921  
000027F6                          1922  PRINTTWOTRAIL 
000027F6  4EB9 00002A84           1923      JSR EA_Start
000027FC  4EB9 00002A84           1924      JSR EA_Start
00002802  6000 EAA4               1925      BRA MEMORYGRABBER
00002806                          1926      
00002806                          1927  PRINTNOTRAIL 
00002806  4EB9 00002A84           1928      JSR EA_Start
0000280C  6000 EA9A               1929      BRA MEMORYGRABBER
00002810                          1930  
00002810                          1931  CLOSINGSTATEMENTS     
00002810  43F9 0000307C           1932      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002816  103C 000E               1933      MOVE.B   #14,D0     ; moves #14 into data register D0
0000281A  4E4F                    1934      TRAP     #15       ; Displays message via trap 14
0000281C                          1935     
0000281C                          1936  STOP    
0000281C  103C 0009               1937      MOVE.B #9,D0        ; moves #9 into data register D0
00002820  4E4F                    1938      TRAP     #15       ; halt simulator via trap 9
00002822                          1939     
00002822                          1940      
00002822                          1941  ;----------------------------- ADDED THIS FOR OP CODE PART 
00002822                          1942  ********* CHECK DESTINATION ***********
00002822                          1943  CHECK_DESTINATION
00002822  13FC 000F 0000312E      1944      MOVE.B  #$F,DstMode
0000282A                          1945      
0000282A  0C39 0007 00003117      1946      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
00002832  6700 0026               1947      BEQ     CHECK_DEST_REG             * Checks registers
00002836                          1948      
00002836  0C39 0005 00003117      1949      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
0000283E  6700 0058               1950      BEQ     R_CHECK_DEST    * Print DATA instead 
00002842                          1951      
00002842  0C39 0006 00003117      1952      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
0000284A  6700 004C               1953      BEQ     R_CHECK_DEST    * Print DATA instead
0000284E                          1954      
0000284E  13F9 00003117 0000312E  1955      MOVE.B  DEST_MODE,DstMode
00002858  4E75                    1956      RTS
0000285A                          1957  CHECK_DEST_REG
0000285A  0C39 0002 00003116      1958      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002862  6700 0034               1959      BEQ     R_CHECK_DEST
00002866                          1960  
00002866  0C39 0003 00003116      1961      CMP.B   #3,DEST_REG         * if DEST_REG = 011
0000286E  6700 0028               1962      BEQ     R_CHECK_DEST
00002872                          1963      
00002872  0C39 0005 00003116      1964      CMP.B   #5,DEST_REG             * if DEST_REG = 101
0000287A  6C00 016C               1965      BGE     RETURN
0000287E                          1966      
0000287E  13F9 00003117 0000312E  1967      MOVE.B  DEST_MODE,DstMode
00002888  4286                    1968      CLR.L   D6
0000288A  1C39 00003116           1969      MOVE.B  DEST_REG,D6
00002890  DD39 0000312E           1970      ADD.B   D6,DstMode
00002896  4E75                    1971      RTS
00002898                          1972  R_CHECK_DEST
00002898  13FC 000E 0000312E      1973      MOVE.B  #$E,DstMode
000028A0  4E75                    1974      RTS
000028A2                          1975  ********* CHECK TEMP ***********
000028A2                          1976  CHECK_TEMP
000028A2                          1977  
000028A2  13FC 000F 0000312F      1978      MOVE.B  #$F,TempMode
000028AA                          1979      
000028AA  0C39 0007 0000311A      1980      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
000028B2  6700 0026               1981      BEQ     CHECK_TEMP_REG      * Checks registers
000028B6                          1982  
000028B6  0C39 0005 0000311A      1983      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
000028BE  6700 0058               1984      BEQ     R_CHECK_TEMP    * 
000028C2                          1985      
000028C2  0C39 0006 0000311A      1986      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
000028CA  6700 004C               1987      BEQ     R_CHECK_TEMP    * 
000028CE                          1988      
000028CE  13F9 0000311A 0000312F  1989      MOVE.B  TEMP_MODE,TempMode
000028D8  4E75                    1990      RTS
000028DA                          1991  CHECK_TEMP_REG
000028DA  0C39 0002 0000311B      1992      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
000028E2  6700 0034               1993      BEQ     R_CHECK_TEMP
000028E6                          1994  
000028E6  0C39 0003 0000311B      1995      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
000028EE  6700 0028               1996      BEQ     R_CHECK_TEMP
000028F2                          1997      
000028F2  0C39 0005 0000311B      1998      CMP.B   #5,TEMP_REG             * if RRRT = 101
000028FA  6700 00EC               1999      BEQ     RETURN
000028FE                          2000      
000028FE  13F9 0000311A 0000312F  2001      MOVE.B  TEMP_MODE,TempMode
00002908  4286                    2002      CLR.L   D6
0000290A  1C39 0000311B           2003      MOVE.B  TEMP_REG,D6
00002910  DD39 0000312F           2004      ADD.B   D6,TempMode
00002916  4E75                    2005      RTS
00002918                          2006  R_CHECK_TEMP
00002918  13FC 000E 0000312F      2007      MOVE.B  #$E,TempMode
00002920  4E75                    2008      RTS
00002922                          2009  ******************** CHECK_SOURCE ******************** 
00002922                          2010  CHECK_SOURCE    * TODO
00002922  13FC 000F 00003130      2011      MOVE.B  #$F,SrcMode
0000292A                          2012      
0000292A  0C39 0007 00003118      2013      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002932  6700 0026               2014      BEQ     CHECK_SOURCE_REG    * Checks registers
00002936                          2015  
00002936  0C39 0005 00003118      2016      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
0000293E  6700 0058               2017      BEQ     R_CHECK_SOURCE 
00002942                          2018      
00002942  0C39 0006 00003118      2019      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
0000294A  6700 004C               2020      BEQ     R_CHECK_SOURCE 
0000294E                          2021      
0000294E  13F9 00003118 00003130  2022      MOVE.B  SRC_MODE,SrcMode
00002958  4E75                    2023      RTS
0000295A                          2024  CHECK_SOURCE_REG
0000295A  0C39 0002 00003119      2025      CMP.B   #2,SRC_REG             * if RRRS = 010
00002962  6700 0034               2026      BEQ     R_CHECK_SOURCE
00002966                          2027  
00002966  0C39 0003 00003119      2028      CMP.B   #3,SRC_REG          * if RRRS = 011
0000296E  6700 0028               2029      BEQ     R_CHECK_SOURCE
00002972                          2030      
00002972  0C39 0005 00003119      2031      CMP.B   #5,SRC_REG      * if RRRS = 101
0000297A  6C00 006C               2032      BGE     RETURN
0000297E                          2033      
0000297E  13F9 00003118 00003130  2034      MOVE.B  SRC_MODE,SrcMode
00002988  4286                    2035      CLR.L   D6
0000298A  1C39 00003119           2036      MOVE.B  SRC_REG,D6
00002990  DD39 00003130           2037      ADD.B   D6,SrcMode
00002996  4E75                    2038      RTS
00002998                          2039  R_CHECK_SOURCE
00002998  13FC 000E 00003130      2040      MOVE.B  #$E,SrcMode
000029A0  4E75                    2041      RTS
000029A2                          2042  ******************** XBIT ********************
000029A2                          2043  CHECK_XBIT      
000029A2  0C39 0000 0000312C      2044      CMP.B   #%0,XBit
000029AA  6700 0008               2045      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
000029AE  6600 001E               2046      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
000029B2  4E75                    2047      RTS
000029B4                          2048  TEMP_TO_DEST
000029B4  13F9 0000311B 00003116  2049      MOVE.B  TEMP_REG,DEST_REG
000029BE  13F9 0000311A 00003117  2050      MOVE.B  TEMP_MODE,DEST_MODE
000029C8  4EB8 2822               2051      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
000029CC  4E75                    2052      RTS
000029CE                          2053  TEMP_TO_SRC
000029CE  13F9 0000311B 00003119  2054      MOVE.B  TEMP_REG,SRC_REG
000029D8  13F9 0000311A 00003118  2055      MOVE.B  TEMP_MODE,SRC_MODE
000029E2  4EB8 2922               2056      JSR     CHECK_SOURCE                 
000029E6  4E75                    2057      RTS
000029E8                          2058    
000029E8                          2059  ******************** OTHER COMMANDS ********************
000029E8                          2060  RETURN
000029E8  4E75                    2061      RTS
000029EA                          2062  
000029EA                          2063  FORMAT_DATA
000029EA  0C39 0000 0000311C      2064      CMP.B   #0,DATA_FIELD
000029F2  66F4                    2065      BNE     RETURN
000029F4  13FC 0008 0000311C      2066      MOVE.B  #8,DATA_FIELD
000029FC  4E75                    2067      RTS
000029FE                          2068  
000029FE                          2069  CHECK_DATA_NEG
000029FE  BC3C 0080               2070      CMP.B   #128,D6
00002A02  6700 0004               2071      BEQ     PRINT_NEG
00002A06  4E75                    2072      RTS
00002A08                          2073      
00002A08                          2074  PRINT_NEG
00002A08  43F9 00003125           2075      LEA     NEG,A1      * print "-"
00002A0E  103C 000E               2076      MOVE.B  #14,D0
00002A12  4E4F                    2077      TRAP    #15
00002A14  4E75                    2078      RTS
00002A16                          2079  
00002A16                          2080  PRINT_DATA
00002A16  43F9 000030EE           2081      LEA     PDATA,A1
00002A1C  103C 000E               2082      MOVE.B  #14,D0
00002A20  4E4F                    2083      TRAP    #15
00002A22                          2084      
00002A22  4EB8 270A               2085      JSR     PRINTCLRSPOT      * print space
00002A26                          2086      
00002A26                          2087      * TODO: PRINT #$
00002A26                          2088      * TODO: PRINT COMMANDDATA 
00002A26  6000 E880               2089      BRA     MEMORYGRABBER
00002A2A                          2090      
00002A2A                          2091      
00002A2A                          2092  *SETINVEA
00002A2A                          2093      *MOVE.B  #1,INVALID_EA
00002A2A                          2094      *RTS     
00002A2A                          2095      
00002A2A                          2096  CLEARMR
00002A2A  13FC 0000 00003116      2097      MOVE.B  #0,DEST_REG 
00002A32  13FC 0000 00003117      2098      MOVE.B  #0,DEST_MODE
00002A3A  13FC 0000 00003118      2099      MOVE.B  #0,SRC_MODE
00002A42  13FC 0000 00003119      2100      MOVE.B  #0,SRC_REG
00002A4A  13FC 0000 0000311A      2101      MOVE.B  #0,TEMP_MODE
00002A52  13FC 0000 0000311B      2102      MOVE.B  #0,TEMP_REG 
00002A5A  13FC 0000 00003120      2103      MOVE.B  #0,SIZE
00002A62  13FC 0000 00003106      2104      MOVE.B  #0,SizeValue
00002A6A  23FC 00000000 0000311C  2105      MOVE.L  #0,DATA_FIELD
00002A74  7200                    2106      MOVE.L #0,D1
00002A76  7400                    2107      MOVE.L #0,D2
00002A78  7600                    2108      MOVE.L #0,D3
00002A7A  7800                    2109      MOVE.L #0,D4
00002A7C  7A00                    2110      MOVE.L #0,D5
00002A7E  7C00                    2111      MOVE.L #0,D6
00002A80  7E00                    2112      MOVE.L #0,D7
00002A82  4E75                    2113      RTS  
00002A84                          2114  
00002A84                          2115  *************    
00002A84                          2116  
00002A84                          2117  *******************************************************
00002A84                          2118  * EA subroutine
00002A84                          2119  * Purpose: Generate EA
00002A84                          2120  *         Addresses used: 
00002A84                          2121  *            D2 FOR MODE
00002A84                          2122  *            D3 FOR REGISTER
00002A84                          2123  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002A84                          2124  *            D1 FOR PRINTING
00002A84                          2125  *            A6 MIMICKS INSTRUCTION BUFFER
00002A84                          2126  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002A84                          2127  ***************************************************
00002A84                          2128  
00002A84  0C39 000F 00003131      2129  EA_start        CMP.B      #$F,STATE
00002A8C  6700 039A               2130                  BEQ        EA_FINISH
00002A90  4EF9 00002E2A           2131                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002A96                          2132  
00002A96  B47C 0000               2133  Continue_EA     CMP.W       #MODE000,D2             
00002A9A  6700 0036               2134                  BEQ         DATA_REGISTER                 
00002A9E  B47C 0001               2135                  CMP.W       #MODE001,D2               
00002AA2  6700 004A               2136                  BEQ         ADDRESS_REGISTER                 
00002AA6  B47C 0002               2137                  CMP.W       #MODE010,D2              
00002AAA  6700 005E               2138                  BEQ         ADDRESS_REGISTER_DIRECT               
00002AAE  B47C 0003               2139                  CMP.W       #MODE011,D2              
00002AB2  6700 0086               2140                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002AB6  B47C 0004               2141                  CMP.W       #MODE100,D2          
00002ABA  6700 00B8               2142                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002ABE  B47C 0007               2143                  CMP.W       #MODE111,D2          
00002AC2  6700 00EA               2144                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002AC6  13FC 0001 00003131      2145                  MOVE.B      #BAD_FLAG,STATE               
00002ACE  6000 0358               2146                  BRA         EA_FINISH              
00002AD2                          2147                  
00002AD2                          2148  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002AD2  123C 0044               2149                  MOVE.B   #D,D1
00002AD6  103C 0006               2150                  MOVE.B  #6,D0
00002ADA  4E4F                    2151                  TRAP    #15
00002ADC  0685 00000030           2152                  ADDI.L   #$30,D5
00002AE2  1205                    2153                  MOVE.B   D5,D1
00002AE4  103C 0006               2154                  MOVE.B  #6,D0
00002AE8  4E4F                    2155                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002AEA  6000 033C               2156                  BRA      EA_FINISH
00002AEE                          2157                      
00002AEE                          2158  
00002AEE  123C 0041               2159  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002AF2  103C 0006               2160                   MOVE.B  #6,D0
00002AF6  4E4F                    2161                   TRAP    #15
00002AF8  0685 00000030           2162                   ADDI.L   #$30,D5
00002AFE  1205                    2163                   MOVE.B   D5,D1
00002B00  103C 0006               2164                   MOVE.B  #6,D0
00002B04  4E4F                    2165                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002B06  6000 0320               2166                   BRA      EA_FINISH
00002B0A                          2167  
00002B0A                          2168                   
00002B0A                          2169  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002B0A  123C 0028               2170                          MOVE.B   #OPEN_PARENTHESIS,D1
00002B0E  103C 0006               2171                          MOVE.B   #6,D0
00002B12  4E4F                    2172                          TRAP     #15
00002B14  123C 0041               2173                          MOVE.B   #A,D1
00002B18  103C 0006               2174                          MOVE.B  #6,D0
00002B1C  4E4F                    2175                          TRAP    #15
00002B1E  0685 00000030           2176                          ADDI.L   #$30,D5
00002B24  1205                    2177                          MOVE.B   D5,D1
00002B26  103C 0006               2178                          MOVE.B  #6,D0
00002B2A  4E4F                    2179                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002B2C  123C 0029               2180                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002B30  103C 0006               2181                          MOVE.B  #6,D0
00002B34  4E4F                    2182                          TRAP    #15
00002B36  6000 02F0               2183                          BRA      EA_FINISH
00002B3A                          2184  
00002B3A                          2185  
00002B3A                          2186  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002B3A  123C 0028               2187                             MOVE.B   #OPEN_PARENTHESIS,D1
00002B3E  103C 0006               2188                             MOVE.B   #6,D0
00002B42  4E4F                    2189                             TRAP     #15
00002B44  123C 0041               2190                             MOVE.B   #A,D1
00002B48  103C 0006               2191                             MOVE.B  #6,D0
00002B4C  4E4F                    2192                             TRAP    #15
00002B4E  0685 00000030           2193                             ADDI.L   #$30,D5
00002B54  1205                    2194                             MOVE.B   D5,D1
00002B56  103C 0006               2195                             MOVE.B  #6,D0
00002B5A  4E4F                    2196                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002B5C  123C 0029               2197                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002B60  103C 0006               2198                             MOVE.B  #6,D0
00002B64  4E4F                    2199                             TRAP    #15
00002B66                          2200                           *  MOVE.B   #PLUS_SIGN,(A4)+
00002B66  123C 002B               2201                           MOVE.B   #PLUS_SIGN,D1
00002B6A  103C 0006               2202                             MOVE.B  #6,D0
00002B6E  4E4F                    2203                             TRAP    #15
00002B70  6000 02B6               2204                             BRA      EA_FINISH
00002B74                          2205  
00002B74                          2206  
00002B74                          2207  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002B74  123C 002D               2208                             MOVE.B   #MINUS_SIGN,D1
00002B78  103C 0006               2209                             MOVE.B   #6,D0
00002B7C  4E4F                    2210                             TRAP        #15
00002B7E  123C 0028               2211                             MOVE.B   #OPEN_PARENTHESIS,D1
00002B82  103C 0006               2212                             MOVE.B   #6,D0
00002B86  4E4F                    2213                             TRAP     #15
00002B88  123C 0041               2214                             MOVE.B   #A,D1
00002B8C  103C 0006               2215                             MOVE.B  #6,D0
00002B90  4E4F                    2216                             TRAP    #15
00002B92  0685 00000030           2217                             ADDI.L   #$30,D5
00002B98  1205                    2218                             MOVE.B   D5,D1
00002B9A  103C 0006               2219                             MOVE.B  #6,D0
00002B9E  4E4F                    2220                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002BA0  123C 0029               2221                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002BA4  103C 0006               2222                             MOVE.B  #6,D0
00002BA8  4E4F                    2223                             TRAP    #15
00002BAA  6000 027C               2224                             BRA      EA_FINISH
00002BAE                          2225  
00002BAE                          2226  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002BAE  6000 0002               2227                                BRA  CONTINUE_A_I_A
00002BB2                          2228                                
00002BB2                          2229                                
00002BB2                          2230  CONTINUE_A_I_A                
00002BB2  BA3C 0004               2231                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002BB6  6700 001E               2232                                BEQ         IMMIDIATE_REGISTER                
00002BBA  BA3C 0000               2233                                CMP.B       #0,D5                ; WORD ADDRESSING
00002BBE  6700 0048               2234                                BEQ         WORD_ADDRESSING                
00002BC2  BA3C 0001               2235                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002BC6  6700 0054               2236                                BEQ         LONG_ADDRESSING              
00002BCA  13FC 0001 00003131      2237                                MOVE.B      #BAD_FLAG,STATE              
00002BD2  6000 0254               2238                                BRA         EA_FINISH                * jump to end   
00002BD6                          2239                                
00002BD6                          2240                                
00002BD6  123C 0023               2241  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002BDA  103C 0006               2242                                MOVE.B #6,D0
00002BDE  4E4F                    2243                                TRAP   #15
00002BE0  0C39 0001 00003120      2244                                CMP.B #1,SIZE   ;BYTE
00002BE8  6700 0046               2245                                BEQ   GETBYTE
00002BEC  0C39 0002 00003120      2246                                CMP.B #2,SIZE   ;BYTE
00002BF4  6700 0044               2247                                BEQ   GETWORD
00002BF8  0C39 0003 00003120      2248                                CMP.B #3,SIZE   ;BYTE
00002C00  6700 0042               2249                                BEQ   GETLONG
00002C04  6000 003E               2250                                BRA   GETLONG
00002C08                          2251                                
00002C08                          2252  
00002C08  123C 0024               2253  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002C0C  103C 0006               2254                               MOVE.B #6,D0
00002C10  4E4F                    2255                               TRAP  #15
00002C12  3E1E                    2256                               MOVE.W  (A6)+,D7
00002C14  6000 00BE               2257                               BRA   PRINT_WORD
00002C18  6000 020E               2258                               BRA   EA_FINISH
00002C1C                          2259  
00002C1C  123C 0024               2260  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002C20  103C 0006               2261                               MOVE.B #6,D0
00002C24  4E4F                    2262                               TRAP  #15
00002C26  2E1E                    2263                               MOVE.L  (A6)+,D7
00002C28  6000 0128               2264                               BRA   PRINT_LONG
00002C2C  6000 01FA               2265                               BRA   EA_FINISH                            
00002C30                          2266  
00002C30                          2267  GETBYTE      
00002C30  1E1E                    2268                  MOVE.B   (A6)+,D7    
00002C32  6B00 001A               2269                  BMI     ADD_NEGATIVE
00002C36  6000 0024               2270                  BRA     PRINT_BRANCHING
00002C3A                          2271  GETWORD                
00002C3A  3E1E                    2272                  MOVE.W   (A6)+,D7
00002C3C  6B00 0010               2273                  BMI     ADD_NEGATIVE
00002C40  6000 001A               2274                  BRA     PRINT_BRANCHING
00002C44                          2275  GETLONG                
00002C44                          2276                  
00002C44  2E1E                    2277                  MOVE.L   (A6)+,D7
00002C46  6B00 0006               2278                  BMI     ADD_NEGATIVE
00002C4A  6000 0010               2279                  BRA     PRINT_BRANCHING
00002C4E                          2280                  
00002C4E  123C 002D               2281  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00002C52  123C 0006               2282                  MOVE.B #6,D1
00002C56  4E4F                    2283                  TRAP   #15
00002C58  6000 0002               2284                  BRA    PRINT_BRANCHING
00002C5C                          2285  
00002C5C                          2286  
00002C5C  0C39 0001 00003120      2287  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002C64  6700 001C               2288                  BEQ    PRINT_BYTE    
00002C68  0C39 0002 00003120      2289                  CMP.B #2,SIZE   ;WORD
00002C70  6700 0062               2290                  BEQ    PRINT_WORD
00002C74  0C39 0003 00003120      2291                  CMP.B  #3,SIZE  ;LONG
00002C7C  6700 00D4               2292                  BEQ    PRINT_LONG
00002C80  60DA                    2293                  BRA    PRINT_BRANCHING
00002C82                          2294  
00002C82                          2295  
00002C82                          2296  
00002C82                          2297  
00002C82                          2298                  
00002C82                          2299  **** BYTE DATA PRINTING***********************
00002C82  4241                    2300  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002C84                          2301                 
00002C84                          2302  
00002C84  BEBC 0000000F           2303                 CMP.L   #$F,D7              
00002C8A  6F00 0006               2304                 BLE     BYTE_ONE_LOOP                  
00002C8E  6000 000E               2305                 BRA     READ_BYTE
00002C92                          2306  
00002C92                          2307  BYTE_ONE_LOOP
00002C92  13FC 0001 0000314C      2308                  MOVE.B  #1,NUMBER_OF_HEX  
00002C9A  6000 0002               2309                  BRA     READ_BYTE
00002C9E                          2310      
00002C9E                          2311  READ_BYTE                           
00002C9E  0C39 0000 0000314C      2312      CMP.B   #0,NUMBER_OF_HEX               
00002CA6  6700 0014               2313      BEQ     COPYBYTE
00002CAA                          2314      
00002CAA  123C 0030               2315      MOVE.B  #$30,D1             
00002CAE  103C 0006               2316      MOVE.B  #6,D0               
00002CB2  4E4F                    2317      TRAP    #15
00002CB4                          2318  
00002CB4  5339 0000314C           2319      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002CBA  60E2                    2320      BRA     READ_BYTE           ; LOOP
00002CBC                          2321      
00002CBC                          2322  COPYBYTE
00002CBC  2207                    2323      MOVE.L  D7,D1               ; COPY DATA 
00002CBE  143C 0010               2324      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002CC2  103C 000F               2325      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002CC6  4E4F                    2326      TRAP    #15
00002CC8  13FC 0000 0000314C      2327      MOVE.B  #0,NUMBER_OF_HEX
00002CD0  6000 0156               2328      BRA  EA_FINISH
00002CD4                          2329  
00002CD4                          2330  
00002CD4                          2331  
00002CD4                          2332  
00002CD4                          2333  
00002CD4                          2334  ******PRINT WORD DATA******************
00002CD4  4241                    2335  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002CD6                          2336                 
00002CD6                          2337  
00002CD6  BEBC 0000000F           2338                 CMP.L   #$F,D7              
00002CDC  6F00 001A               2339                 BLE     WORD_ONE_LOOP
00002CE0  BEBC 000000FF           2340                 CMP.L   #$FF,D7              
00002CE6  6F00 001C               2341                 BLE     WORD_TWO_LOOP
00002CEA  BEBC 00000FFF           2342                 CMP.L   #$FFF,D7              
00002CF0  6F00 001E               2343                 BLE     WORD_THREE_LOOP                  
00002CF4  6000 0026               2344                 BRA     READ_WORD
00002CF8                          2345  
00002CF8                          2346  WORD_ONE_LOOP
00002CF8  13FC 0001 0000314C      2347                  MOVE.B  #1,NUMBER_OF_HEX  
00002D00  6000 001A               2348                  BRA     READ_WORD
00002D04                          2349                  
00002D04                          2350  WORD_TWO_LOOP
00002D04  13FC 0002 0000314C      2351                  MOVE.B  #2,NUMBER_OF_HEX  
00002D0C  6000 000E               2352                  BRA     READ_WORD
00002D10                          2353                  
00002D10                          2354  WORD_THREE_LOOP
00002D10  13FC 0003 0000314C      2355                  MOVE.B  #3,NUMBER_OF_HEX  
00002D18  6000 0002               2356                  BRA     READ_WORD                
00002D1C                          2357      
00002D1C                          2358  READ_WORD                           
00002D1C  0C39 0000 0000314C      2359      CMP.B   #0,NUMBER_OF_HEX               
00002D24  6700 0014               2360      BEQ     COPYWORD
00002D28                          2361      
00002D28  123C 0030               2362      MOVE.B  #$30,D1             
00002D2C  103C 0006               2363      MOVE.B  #6,D0               
00002D30  4E4F                    2364      TRAP    #15
00002D32                          2365  
00002D32  5339 0000314C           2366      SUBI.B  #1,NUMBER_OF_HEX              
00002D38  60E2                    2367      BRA     READ_WORD                   ; LOOP
00002D3A                          2368  
00002D3A                          2369  COPYWORD
00002D3A  2207                    2370      MOVE.L  D7,D1               ; COPY DATA 
00002D3C  143C 0010               2371      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002D40  103C 000F               2372      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002D44  4E4F                    2373      TRAP    #15
00002D46  13FC 0000 0000314C      2374      MOVE.B  #0,NUMBER_OF_HEX
00002D4E  6000 00D8               2375      BRA  EA_FINISH
00002D52                          2376  
00002D52                          2377  ****************PRINT LONG DATA*****************
00002D52  4241                    2378  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00002D54                          2379                 
00002D54                          2380  
00002D54  BEBC 0000000F           2381                 CMP.L   #$F,D7              
00002D5A  6F00 0042               2382                 BLE     LONG_ONE_LOOP
00002D5E  BEBC 000000FF           2383                 CMP.L   #$FF,D7              
00002D64  6F00 0044               2384                 BLE     LONG_TWO_LOOP
00002D68  BEBC 00000FFF           2385                 CMP.L   #$FFF,D7              
00002D6E  6F00 0046               2386                 BLE     LONG_THREE_LOOP
00002D72  BEBC 0000FFFF           2387                 CMP.L   #$FFFF,D7              
00002D78  6F00 0048               2388                 BLE     LONG_FOUR_LOOP
00002D7C  BEBC 000FFFFF           2389                 CMP.L   #$FFFFF,D7              
00002D82  6F00 004A               2390                 BLE     LONG_FIVE_LOOP
00002D86  BEBC 00FFFFFF           2391                 CMP.L   #$FFFFFF,D7              
00002D8C  6F00 004C               2392                 BLE     LONG_SIX_LOOP
00002D90  BEBC 0FFFFFFF           2393                 CMP.L   #$FFFFFFF,D7              
00002D96  6F00 004E               2394                 BLE     LONG_SEVEN_LOOP                  
00002D9A  6000 0056               2395                 BRA     READ_LONG
00002D9E                          2396  
00002D9E                          2397  LONG_ONE_LOOP
00002D9E  13FC 0001 0000314C      2398                  MOVE.B  #1,NUMBER_OF_HEX  
00002DA6  6000 004A               2399                  BRA     READ_LONG
00002DAA                          2400                  
00002DAA                          2401  LONG_TWO_LOOP
00002DAA  13FC 0002 0000314C      2402                  MOVE.B  #2,NUMBER_OF_HEX  
00002DB2  6000 003E               2403                  BRA     READ_LONG
00002DB6                          2404                  
00002DB6                          2405  LONG_THREE_LOOP
00002DB6  13FC 0003 0000314C      2406                  MOVE.B  #3,NUMBER_OF_HEX  
00002DBE  6000 0032               2407                  BRA     READ_LONG                
00002DC2                          2408  LONG_FOUR_LOOP
00002DC2  13FC 0004 0000314C      2409                  MOVE.B  #4,NUMBER_OF_HEX  
00002DCA  6000 0026               2410                  BRA     READ_LONG
00002DCE                          2411                  
00002DCE                          2412  LONG_FIVE_LOOP
00002DCE  13FC 0005 0000314C      2413                  MOVE.B  #5,NUMBER_OF_HEX  
00002DD6  6000 001A               2414                  BRA     READ_LONG
00002DDA                          2415                  
00002DDA                          2416  LONG_SIX_LOOP
00002DDA  13FC 0006 0000314C      2417                  MOVE.B  #6,NUMBER_OF_HEX  
00002DE2  6000 000E               2418                  BRA     READ_LONG
00002DE6                          2419  LONG_SEVEN_LOOP
00002DE6  13FC 0007 0000314C      2420                  MOVE.B  #7,NUMBER_OF_HEX  
00002DEE  6000 0002               2421                  BRA     READ_LONG
00002DF2                          2422  
00002DF2                          2423       
00002DF2                          2424  READ_LONG                           
00002DF2  0C39 0000 0000314C      2425      CMP.B   #0,NUMBER_OF_HEX               
00002DFA  6700 0014               2426      BEQ     COPYLONG
00002DFE  123C 0030               2427      MOVE.B  #$30,D1             
00002E02  103C 0006               2428      MOVE.B  #6,D0               
00002E06  4E4F                    2429      TRAP    #15
00002E08                          2430  
00002E08  5339 0000314C           2431      SUBI.B  #1,NUMBER_OF_HEX               
00002E0E  60E2                    2432      BRA     READ_LONG                   ; LOOP
00002E10                          2433  
00002E10                          2434  COPYLONG
00002E10  2207                    2435      MOVE.L  D7,D1               ; COPY DATA 
00002E12  143C 0010               2436      MOVE.B  #16,D2              ; USIGN BASE TO 16
00002E16  103C 000F               2437      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002E1A  4E4F                    2438      TRAP    #15
00002E1C  13FC 0000 0000314C      2439      MOVE.B  #0,NUMBER_OF_HEX
00002E24  6000 0002               2440      BRA  EA_FINISH
00002E28                          2441  
00002E28                          2442    
00002E28                          2443  
00002E28  4E75                    2444  EA_FINISH      RTS
00002E2A                          2445  
00002E2A                          2446  
00002E2A                          2447  
00002E2A                          2448  
00002E2A                          2449  ************************************************
00002E2A                          2450  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
00002E2A                          2451  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
00002E2A                          2452  ************************************************
00002E2A                          2453  REGISTER_NUMBER_TO_DECIMAL 
00002E2A  B67C 0000               2454                             CMP.W       #REG_0,D3
00002E2E  6700 0046               2455                             BEQ         RG0
00002E32  B67C 0001               2456                             CMP.W       #REG_1,D3
00002E36  6700 0046               2457                             BEQ         RG1
00002E3A  B67C 0002               2458                             CMP.W       #REG_2,D3
00002E3E  6700 0046               2459                             BEQ         RG2
00002E42  B67C 0003               2460                             CMP.W       #REG_3,D3
00002E46  6700 0046               2461                             BEQ         RG3
00002E4A  B67C 0004               2462                             CMP.W       #REG_4,D3
00002E4E  6700 0046               2463                             BEQ         RG4
00002E52  B67C 0005               2464                             CMP.W       #REG_5,D3
00002E56  6700 0046               2465                             BEQ         RG5
00002E5A  B67C 0006               2466                             CMP.W       #REG_6,D3
00002E5E  6700 0046               2467                             BEQ         RG6
00002E62  B67C 0007               2468                             CMP.W       #REG_7,D3
00002E66  6700 0046               2469                             BEQ         RG7
00002E6A  13FC 0001 00003131      2470                             MOVE.B      #BAD_FLAG,STATE
00002E72  4EF8 2A96               2471                             JMP         CONTINUE_EA
00002E76                          2472   
00002E76  1A3C 0000               2473  RG0    MOVE.B   #0,D5
00002E7A  4EF8 2A96               2474         JMP      Continue_EA
00002E7E  1A3C 0001               2475  RG1    MOVE.B   #1,D5
00002E82  4EF8 2A96               2476         JMP      Continue_EA
00002E86  1A3C 0002               2477  RG2    MOVE.B   #2,D5
00002E8A  4EF8 2A96               2478         JMP      Continue_EA
00002E8E  1A3C 0003               2479  RG3    MOVE.B   #3,D5
00002E92  4EF8 2A96               2480         JMP      Continue_EA
00002E96  1A3C 0004               2481  RG4    MOVE.B   #4,D5
00002E9A  4EF8 2A96               2482         JMP      Continue_EA
00002E9E  1A3C 0005               2483  RG5    MOVE.B   #5,D5
00002EA2  4EF8 2A96               2484         JMP      Continue_EA
00002EA6  1A3C 0006               2485  RG6    MOVE.B   #6,D5
00002EAA  4EF8 2A96               2486         JMP      Continue_EA
00002EAE  1A3C 0007               2487  RG7    MOVE.B   #7,D5
00002EB2  4EF8 2A96               2488         JMP      Continue_EA 
00002EB6                          2489      
00002EB6                          2490  ;------------------------------------------------
00002EB6                          2491      
00002EB6                          2492  Float   DS.L 1 #0
00002EBA                          2493  
00002EBA                          2494  ValOne    DS.B 1 #0
00002EBB                          2495  ValTwo    DS.B 1 #0
00002EBC                          2496  ValThree    DS.B 1 #0
00002EBD                          2497  ValFour    DS.B 1 #0
00002EBE                          2498  ValFive    DS.B 1 #0
00002EBF                          2499  ValSix    DS.B 1 #0
00002EC0                          2500  ValSeven    DS.B 1 #0
00002EC1                          2501  ValEight    DS.B 1 #0
00002EC2                          2502  
00002EC2                          2503  Addsum DS.W 1 #0
00002EC4                          2504  CarryBit DS.B 1 #0   
00002EC5                          2505  
00002EC5                          2506  Trailers DS.B 1 #0
00002EC6                          2507  Source DS.L 1 #0
00002ECA                          2508  Destination DS.L 1 #0
00002ECE                          2509  
00002ECE                          2510          ;generic command lines
00002ECE= 57 65 6C 63 6F 6D ...   2511  WELCOME DC.B 'Welcome to our decoder',CR,LF,0
00002EE7= 50 6C 65 61 73 65 ...   2512  USERPAGEBREAK DC.B 'Please Press enter to see next 25 codes',0
00002F0F= 4E 75 6D 62 65 72 ...   2513  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
00002F3B= 53 65 63 6F 6E 64 ...   2514  OUTOFORDER DC.B    'Second Num lower than the first Num, please reenter second Num',CR,LF,0
00002F7C= 50 6C 65 61 73 65 ...   2515  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory address, perferablly in 8 byte form: ',0 
00002FBF= 50 6C 65 61 73 65 ...   2516  MESSAGESECONDADRESS DC.B    'Please enter ending memory address, perferablly in 8 byte form: ',0 
00003000= 59 6F 75 20 68 61 ...   2517  FINALMESSAGE1    DC.B    'You have reached the end of the program',CR,LF,0
0000302A= 50 6C 65 61 73 65 ...   2518  FINALMESSAGE2    DC.B    'Please enter 0 to exit, or 1 to restart: ',0
00003054= 45 78 69 74 69 6E ...   2519  GOODBYEMESSAGE    DC.B    'Exiting, have a good rest of your day',CR,LF,0
0000307C= 20 0D 0A 00             2520  CLEAR DC.B      ' ',CR,LF,0
00003080                          2521  
00003080                          2522          ;the collection of actual command lines to print
00003080                          2523  CommandPrinter    DS.B 1 #0
00003081                          2524  CommandDetail    DS.B 1 #0
00003082= 4D 4F 56 45 00          2525  PMOVE DC.B      'MOVE',0
00003087= 4D 4F 56 45 4D 00       2526  PMOVEM DC.B      'MOVEM',0
0000308D= 4D 4F 56 45 41 00       2527  PMOVEA DC.B      'MOVEA',0
00003093= 4D 4F 56 45 51 00       2528  PMOVEQ DC.B      'MOVEQ',0
00003099= 4E 4F 50 00             2529  PNOP DC.B      'NOP',0
0000309D= 4C 45 41 00             2530  PLEA DC.B      'LEA',0
000030A1= 4E 4F 54 00             2531  PNOT DC.B      'NOT',0
000030A5= 4A 53 52 00             2532  PJSR DC.B      'JSR',0
000030A9= 52 54 53 00             2533  PRTS DC.B      'RTS',0
000030AD= 42 47 54 00             2534  PBGT DC.B      'BGT',0
000030B1= 42 45 51 00             2535  PBEQ DC.B      'BEQ',0
000030B5= 42 4C 45 00             2536  PBLE DC.B      'BLE',0
000030B9= 42 52 41 00             2537  PBRA DC.B      'BRA',0
000030BD= 4F 52 00                2538  POR DC.B      'OR',0
000030C0= 53 55 42 00             2539  PSUB DC.B      'SUB',0
000030C4= 41 4E 44 00             2540  PAND DC.B      'AND',0
000030C8= 41 44 44 00             2541  PADD DC.B      'ADD',0
000030CC= 41 44 44 41 00          2542  PADDA DC.B      'ADDA',0
000030D1= 41 44 44 51 00          2543  PADDQ DC.B      'ADDQ',0
000030D6= 4C 53 4C 00             2544  PLSL DC.B      'LSL',0
000030DA= 4C 53 52 00             2545  PLSR DC.B      'LSR',0
000030DE= 41 53 52 00             2546  PASR DC.B      'ASR',0
000030E2= 41 53 4C 00             2547  PASL DC.B      'ASL',0
000030E6= 52 4F 4C 00             2548  PROL DC.B      'ROL',0
000030EA= 52 4F 52 00             2549  PROR DC.B      'ROR',0
000030EE                          2550  
000030EE= 44 41 54 41 00          2551  PDATA   DC.B    'DATA',0
000030F3                          2552  
000030F3= 00                      2553  INPUT   DC.B    0
000030F4                          2554  
000030F4= 00000000                2555  STARTINGADDRESS     DC.L 0
000030F8= 00000000                2556  CURRENTADDRESS      DC.L 0
000030FC= 00000000                2557  ENDINGADDRESS       DC.L 0
00003100= 0000                    2558  CYCLECOUNTER        DC.W 0
00003102= 0000                    2559  COMMANDDATA         DC.W 0
00003104= 00                      2560  Bits                DC.B 0
00003105                          2561  
00003105                          2562          ;the sizes to print
00003106                          2563  SizeValue           DS.L 1 #0
0000310A= 2E 42 20 00             2564  PB DC.B      '.B ',0
0000310E= 2E 57 20 00             2565  PW DC.B      '.W ',0
00003112= 2E 4C 20 00             2566  PL DC.B      '.L ',0
00003116                          2567  
00003116                          2568  ;----- ADDED FOR THE OP CODE PART
00003116                          2569  
00003116= 00                      2570  DEST_REG        DC.B    0
00003117= 00                      2571  DEST_MODE       DC.B    0
00003118                          2572  
00003118= 00                      2573  SRC_MODE        DC.B    0
00003119= 00                      2574  SRC_REG         DC.B    0
0000311A                          2575  
0000311A= 00                      2576  TEMP_MODE       DC.B    0
0000311B= 00                      2577  TEMP_REG        DC.B    0
0000311C                          2578  
0000311C                          2579  DATA_FIELD      DS.L    1 #0
00003120= 00                      2580  SIZE            DC.B    0
00003121                          2581  
00003121= 23 00                   2582  HASH            DC.B    '#',0
00003123= 20 00                   2583  CLRSPOT         DC.B    ' ',0
00003125= 2D 00                   2584  NEG             DC.B    '-',0
00003127= 24 00                   2585  DOLLARSIGN      DC.B    '$',0
00003129= 2C 00                   2586  COMA            DC.B    ',',0
0000312B                          2587  
0000312B= 00                      2588  INDEX           DC.B    0
0000312C                          2589  
0000312C= 00                      2590  XBIT            DC.B    0
0000312D= 00                      2591  INVALID_EA      DC.B    0
0000312E                          2592  
0000312E= 00                      2593  DstMode         DC.B    0
0000312F= 00                      2594  TempMode        DC.B    0
00003130= 00                      2595  SrcMode         DC.B    0
00003131                          2596  
00003131                          2597  ;------ ADDED FOR EA CODE PART
00003131                          2598  
00003131  =00000000               2599  REG_0  EQU         %000
00003131  =00000001               2600  REG_1  EQU         %001
00003131  =00000002               2601  REG_2  EQU         %010
00003131  =00000003               2602  REG_3  EQU         %011
00003131  =00000004               2603  REG_4  EQU         %100
00003131  =00000005               2604  REG_5  EQU         %101
00003131  =00000006               2605  REG_6  EQU         %110
00003131  =00000007               2606  REG_7  EQU         %111
00003131                          2607  
00003131  =00000000               2608  MODE000       EQU         %000                   * MODE Dn
00003131  =00000001               2609  MODE001       EQU         %001                   * MODE An
00003131  =00000002               2610  MODE010       EQU         %010                   * MODE (An)
00003131  =00000003               2611  MODE011       EQU         %011                   * MODE (An)+
00003131  =00000004               2612  MODE100       EQU         %100                   * MODE -(An)
00003131  =00000007               2613  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
00003131                          2614  
00003131= 00                      2615  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
00003132  =00000001               2616  BAD_FLAG      EQU         1
00003132= 00008000                2617  word          DC.L        $8000
00003136                          2618  SIZE_IL       DS.L        1             ;SIZE ISOLATION
0000313A                          2619  DR            DS.L        1             ;DIRECTION ISOLATION
0000313E                          2620  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
00003142                          2621  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
00003146                          2622  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
0000314A                          2623  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
0000314B                          2624  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
0000314C= 00                      2625  NUMBER_OF_HEX DC.B        0
0000314D                          2626  dRG           DS.B        1
0000314E                          2627  dMODE         DS.B        1
0000314F                          2628  sRG           DS.B        1
00003150                          2629  
00003150= 00000100                2630  print_buffer  DC.l       $100
00003154                          2631  
00003154                          2632  ***** ASCII VALUES FOR EA CHARACTERS**************
00003154  =00000044               2633  D                       EQU      $44
00003154  =00000041               2634  A                       EQU      $41
00003154  =00000028               2635  OPEN_PARENTHESIS        EQU      $28
00003154  =00000024               2636  DOLLAR_SIGN             EQU      $24
00003154  =00000029               2637  CLOSED_PARENTHESIS      EQU      $29
00003154  =0000002B               2638  PLUS_SIGN               EQU      $2B
00003154  =0000002D               2639  MINUS_SIGN              EQU      $2D
00003154  =00000023               2640  HASH_TAG                EQU      $23
00003154  =00000025               2641  PERCENT_SIGN            EQU      $25
00003154                          2642  
00003154                          2643  
00003154                          2644      
00003154                          2645      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2BAE
ADDRESS_REGISTER    2AEE
ADDRESS_REGISTER_DECREMENT  2B74
ADDRESS_REGISTER_DIRECT  2B0A
ADDRESS_REGISTER_INCREMENT  2B3A
ADDSUM              2EC2
ADD_NEGATIVE        2C4E
BADVAL              2F0F
BAD_FLAG            1
BITS                3104
BYTE_ONE_LOOP       2C92
CARRYBIT            2EC4
CCHECK_ADD          180C
CHAR1               1178
CHAR2               1190
CHARSUB             11A8
CHECK_ADD           17F8
CHECK_ADDA          1810
CHECK_ADDQ          16BA
CHECK_AND           197C
CHECK_DATA_NEG      29FE
CHECK_DESTINATION   2822
CHECK_DEST_REG      285A
CHECK_ID_AS         1E04
CHECK_ID_LS         1E24
CHECK_ID_RO         1E14
CHECK_JSR           1634
CHECK_LEA           144E
CHECK_MOVEM_1000    155E
CHECK_MOVEM_1100    160C
CHECK_MOVEQ         1830
CHECK_NOP_JSR_RTS   1614
CHECK_NOP_RTS       169A
CHECK_NOT           14DA
CHECK_OR            188E
CHECK_SOURCE        2922
CHECK_SOURCE_REG    295A
CHECK_SUB           1904
CHECK_TEMP          28A2
CHECK_TEMP_REG      28DA
CHECK_XBIT          29A2
CLEAR               307C
CLEARMR             2A2A
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   2810
CLRSPOT             3123
COMA                3129
COMMANDDATA         3102
COMMANDDETAIL       3081
COMMANDPRINTER      3080
COMPARE_0100        1416
COMPARE_0110        173E
COMPARE_1101        176E
COMPARE_1110        19F4
COMPARE_GROUPS      13B2
CONTINUE_A_I_A      2BB2
CONTINUE_EA         2A96
COPYBYTE            2CBC
COPYLONG            2E10
COPYWORD            2D3A
CR                  D
CURRENTADDRESS      30F8
CYCLECOUNTER        3100
D                   44
DATA_FIELD          311C
DATA_REGISTER       2AD2
DESTINATION         2ECA
DEST_MODE           3117
DEST_REG            3116
DMODE               314E
DOLLARSIGN          3127
DOLLAR_SIGN         24
DONE                11D2
DR                  313A
DRG                 314D
DRN                 314B
DSTMODE             312E
EADN                27D0
EA_FINISH           2E28
EA_START            2A84
EIGHT_SHIFT         22FC
ENDING              1324
ENDINGADDRESS       30FC
ENTRYLOOP           11C0
EXIT                1220
FINALMESSAGE1       3000
FINALMESSAGE2       302A
FLOAT               2EB6
FORMAT_DATA         29EA
G14_MEMS            1CAC
G14_MEMS_AS         1D9E
G14_MEMS_LS         1CD2
G14_MEMS_RO         1D38
G14_TYPE            313E
GAS_EA              1C56
GETBYTE             2C30
GETLONG             2C44
GETWORD             2C3A
GLS_EA              1ABE
GOODBYE             136E
GOODBYEMESSAGE      3054
GRO_EA              1B8A
G_AS                1BE0
G_LS                1A48
G_RO                1B14
HASH                3121
HASH_TAG            23
IMMIDIATE_REGISTER  2BD6
INDEX               312B
INPUT               30F3
INT2                1158
INTSUB              1170
INVALID             11B0
INVALID_EA          312D
IR_IL               3142
IS_EIGHT            230A
LARGERISSUE         127E
LARGERTHAN          129C
LF                  A
LOADDATAONE         101E
LOADDATATWO         1070
LONG_ADDRESSING     2C1C
LONG_FIVE_LOOP      2DCE
LONG_FOUR_LOOP      2DC2
LONG_ONE_LOOP       2D9E
LONG_SEVEN_LOOP     2DE6
LONG_SIX_LOOP       2DDA
LONG_THREE_LOOP     2DB6
LONG_TWO_LOOP       2DAA
LOOP_READ_BITS      1394
MEMORYGRABBER       12A8
MESSAGEFIRSTADRESS  2F7C
MESSAGESECONDADRESS  2FBF
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
NEG                 3125
NUMBER_OF_HEX       314C
OPEN_PARENTHESIS    28
OUTOFORDER          2F3B
PADD                30C8
PADDA               30CC
PADDQ               30D1
PAGEBREAK           1302
PAND                30C4
PASL                30E2
PASR                30DE
PB                  310A
PBEQ                30B1
PBGT                30AD
PBLE                30B5
PBRA                30B9
PDATA               30EE
PERCENT_SIGN        25
PJSR                30A5
PL                  3112
PLEA                309D
PLSL                30D6
PLSR                30DA
PLUS_SIGN           2B
PMOVE               3082
PMOVEA              308D
PMOVEM              3087
PMOVEQ              3093
PNOP                3099
PNOT                30A1
POR                 30BD
PRINTADD            2572
PRINTADDA           2594
PRINTADDQ           2424
PRINTAND            2550
PRINTB              26E0
PRINTBEQ            2486
PRINTBGT            2470
PRINTBLE            249C
PRINTBRA            24B2
PRINTCLRSPOT        270A
PRINTCOMA           2718
PRINTDOLLARSIGN     2732
PRINTHASH           2726
PRINTJSR            23E8
PRINTL              26FC
PRINTLEA            2376
PRINTMOVE           2314
PRINTMOVEA          232A
PRINTMOVEM          2350
PRINTMOVEQ          24C8
PRINTNOP            2340
PRINTNOT            23BC
PRINTNOTRAIL        2806
PRINTONETRAIL       27EC
PRINTOR             250C
PRINTROTATESPLIT    25EE
PRINTRTS            2414
PRINTSUB            252E
PRINTTWOTRAIL       27F6
PRINTW              26EE
PRINT_BRANCHING     2C5C
PRINT_BUFFER        3150
PRINT_BYTE          2C82
PRINT_DATA          2A16
PRINT_DN_TO_EA      2788
PRINT_EA_TO_DN      2740
PRINT_LONG          2D52
PRINT_MEM_TO_REG    2376
PRINT_NEG           2A08
PRINT_REG_TO_MEM    2376
PRINT_WORD          2CD4
PROL                30E6
PROR                30EA
PRTS                30A9
PR_AS               218C
PR_ASR              2274
PR_ASR_EA           1FBE
PR_ASR_MEM          1E72
PR_G14_MEMS_AS      1E34
PR_G14_MEMS_LS      1E9E
PR_G14_MEMS_RO      1F02
PR_G_AS_EA          1F66
PR_G_LS_EA          2002
PR_G_RO_EA          209E
PR_LS               21DE
PR_LSR              2230
PR_LSR_EA           205A
PR_LSR_MEM          1ED6
PR_RO               213A
PR_ROR              22B8
PR_ROR_EA           20F6
PR_ROR_MEM          1F3A
PSUB                30C0
PW                  310E
READ_BITS           138A
READ_BYTE           2C9E
READ_LONG           2DF2
READ_WORD           2D1C
REGISTER_NUMBER_TO_DECIMAL  2E2A
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              29E8
RG0                 2E76
RG1                 2E7E
RG2                 2E86
RG3                 2E8E
RG4                 2E96
RG5                 2E9E
RG6                 2EA6
RG7                 2EAE
R_CHECK_DEST        2898
R_CHECK_SOURCE      2998
R_CHECK_TEMP        2918
SET                 13AA
SIZE                3120
SIZEPRINT           2680
SIZEPRINT2          26A4
SIZEPRINT3          26C8
SIZESPLIT           2652
SIZEVALUE           3106
SIZE_IL             3136
SOURCE              2EC6
SRCMODE             3130
SRC_MODE            3118
SRC_REG             3119
SRG                 314F
SRN                 314A
START               1000
STARTCHECK          1140
STARTINGADDRESS     30F4
STATE               3131
STOP                281C
STOREADRESSES       1290
S_COUNT             3146
TEMPMODE            312F
TEMP_MODE           311A
TEMP_REG            311B
TEMP_TO_DEST        29B4
TEMP_TO_SRC         29CE
TRAILERS            2EC5
USERPAGEBREAK       2EE7
VAL1                10C6
VAL2                10D0
VAL3                10E0
VAL4                10F0
VAL5                1100
VAL6                1110
VAL7                1120
VAL8                1130
VALEIGHT            2EC1
VALFIVE             2EBE
VALFOUR             2EBD
VALONE              2EBA
VALSEVEN            2EC0
VALSIX              2EBF
VALTHREE            2EBC
VALTWO              2EBB
WELCOME             2ECE
WORD                3132
WORD_ADDRESSING     2C08
WORD_ONE_LOOP       2CF8
WORD_THREE_LOOP     2D10
WORD_TWO_LOOP       2D04
XBIT                312C
