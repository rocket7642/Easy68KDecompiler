00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/7/2021 9:30:39 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 00003294             13      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001006  103C 000E                 14      MOVE.B   #14,D0     ; moves #14 into data register D0
0000100A  4E4F                      15      TRAP     #15  
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 0000303C             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 14  
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22      
0000101E                            23  * TODO: a welcome message with format message 
0000101E                            24      
0000101E                            25  LOADDATAONE
0000101E  43F9 000030EA             26      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001024  103C 000E                 27      MOVE.B   #14,D0     ; moves #14 into data register D0
00001028  4E4F                      28      TRAP     #15       ; Displays message via trap 14    
0000102A                            29      
0000102A  43F9 00003263             30      LEA     INPUT,A1
00001030  103C 0002                 31      MOVE.B  #2,D0 *takes the string of what the user enters
00001034  4E4F                      32      TRAP    #15
00001036                            33      
00001036  4280                      34      CLR.L   D0
00001038                            35      
00001038                            36      * TODO: check if the input if odd - invalid imput
00001038                            37      
00001038                            38  
00001038                            39      
00001038  1A3C 0000                 40      MOVE.B  #0,D5
0000103C                            41      
0000103C  13D9 0000A000             42      MOVE.B (A1)+,$A000
00001042  13D9 0000A010             43      MOVE.B (A1)+,$A010
00001048  13D9 0000A020             44      MOVE.B (A1)+,$A020
0000104E  13D9 0000A030             45      MOVE.B (A1)+,$A030
00001054  13D9 0000A040             46      MOVE.B (A1)+,$A040
0000105A  13D9 0000A050             47      MOVE.B (A1)+,$A050
00001060  13D9 0000A060             48      MOVE.B (A1)+,$A060
00001066  13D9 0000A070             49      MOVE.B (A1)+,$A070
0000106C                            50      
0000106C  6000 0058                 51      BRA VAL1
00001070                            52  
00001070                            53  LOADDATATWO    
00001070  43F9 0000312D             54      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001076  103C 000E                 55      MOVE.B   #14,D0     ; moves #14 into data register D0
0000107A  4E4F                      56      TRAP     #15       ; Displays message via trap 14    
0000107C                            57      
0000107C  43F9 00003263             58      LEA     INPUT,A1
00001082  103C 0002                 59      MOVE.B  #2,D0 *takes the string of what the user enters
00001086  4E4F                      60      TRAP    #15
00001088                            61      
00001088  1A3C 0000                 62      MOVE.B  #0,D5
0000108C                            63      
0000108C  13D9 0000A000             64      MOVE.B (A1)+,$A000
00001092  13D9 0000A010             65      MOVE.B (A1)+,$A010
00001098  13D9 0000A020             66      MOVE.B (A1)+,$A020
0000109E  13D9 0000A030             67      MOVE.B (A1)+,$A030
000010A4  13D9 0000A040             68      MOVE.B (A1)+,$A040
000010AA  13D9 0000A050             69      MOVE.B (A1)+,$A050
000010B0  13D9 0000A060             70      MOVE.B (A1)+,$A060
000010B6  13D9 0000A070             71      MOVE.B (A1)+,$A070
000010BC                            72      
000010BC  43F9 0000312D             73      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010C2                            74      
000010C2  6000 0002                 75      BRA VAL1
000010C6                            76  
000010C6                            77      
000010C6                            78  VAL1    
000010C6  1839 0000A000             79      MOVE.B $A000,D4
000010CC  6000 0072                 80      BRA STARTCHECK
000010D0  13C4 0000A000             81  VAL2    MOVE.B D4,$A000
000010D6  1839 0000A010             82      MOVE.B $A010,D4
000010DC  6000 0062                 83      BRA STARTCHECK
000010E0  13C4 0000A010             84  VAL3    MOVE.B D4,$A010
000010E6  1839 0000A020             85      MOVE.B $A020,D4
000010EC  6000 0052                 86      BRA STARTCHECK
000010F0  13C4 0000A020             87  VAL4    MOVE.B D4,$A020
000010F6  1839 0000A030             88      MOVE.B $A030,D4
000010FC  6000 0042                 89      BRA STARTCHECK
00001100  13C4 0000A030             90  VAL5    MOVE.B D4,$A030
00001106  1839 0000A040             91      MOVE.B $A040,D4
0000110C  6000 0032                 92      BRA STARTCHECK
00001110  13C4 0000A040             93  VAL6    MOVE.B D4,$A040
00001116  1839 0000A050             94      MOVE.B $A050,D4
0000111C  6000 0022                 95      BRA STARTCHECK
00001120  13C4 0000A050             96  VAL7    MOVE.B D4,$A050
00001126  1839 0000A060             97      MOVE.B $A060,D4
0000112C  6000 0012                 98      BRA STARTCHECK
00001130  13C4 0000A060             99  VAL8    MOVE.B D4,$A060
00001136  1839 0000A070            100      MOVE.B $A070,D4
0000113C  6000 0002                101      BRA STARTCHECK
00001140                           102    
00001140                           103  STARTCHECK  
00001140  B83C 0030                104      CMP.B   #48,D4
00001144  6D00 006A                105      BLT INVALID
00001148  B83C 0030                106      CMP.B   #48,D4
0000114C  6700 0022                107      BEQ INTSUB
00001150  B83C 0030                108      CMP.B   #48,D4
00001154  6E00 0002                109      BGT INT2
00001158                           110      
00001158                           111  
00001158                           112  INT2 
00001158                           113      
00001158  B83C 0039                114      CMP.B   #57,D4
0000115C  6D00 0012                115      BLT INTSUB
00001160  B83C 0039                116      CMP.B   #57,D4
00001164  6700 000A                117      BEQ INTSUB
00001168  B83C 0039                118      CMP.B   #57,D4
0000116C  6E00 000A                119      BGT CHAR1
00001170                           120      
00001170                           121  INTSUB 
00001170  0404 0030                122      SUB.B #$30,D4
00001174  6000 005C                123      BRA     DONE
00001178                           124  
00001178                           125  CHAR1 
00001178                           126      
00001178  B83C 0041                127      CMP.B   #65,D4
0000117C  6D00 0032                128      BLT INVALID
00001180  B83C 0041                129      CMP.B   #65,D4
00001184  6700 0022                130      BEQ CHARSUB
00001188  B83C 0041                131      CMP.B   #65,D4
0000118C  6E00 0002                132      BGT CHAR2
00001190                           133      
00001190                           134  CHAR2 
00001190                           135      
00001190  B83C 0046                136      CMP.B   #70,D4
00001194  6D00 0012                137      BLT CHARSUB
00001198  B83C 0046                138      CMP.B   #70,D4
0000119C  6700 000A                139      BEQ CHARSUB
000011A0  B83C 0046                140      CMP.B   #70,D4
000011A4  6E00 000A                141      BGT INVALID
000011A8                           142      
000011A8                           143  CHARSUB 
000011A8  0404 0037                144      SUB.B #$37,D4
000011AC  6000 0024                145      BRA DONE
000011B0                           146      
000011B0                           147  INVALID 
000011B0  43F9 0000307D            148      LEA BADVAL,A1
000011B6  103C 000E                149      MOVE.B   #14,D0     ; moves #14 into data register D0
000011BA  4E4F                     150      TRAP     #15       ; Displays message via trap 14
000011BC  6000 0002                151      BRA     ENTRYLOOP
000011C0                           152      
000011C0                           153  ENTRYLOOP
000011C0  B43C 0000                154      CMP.B #0,D2
000011C4  6700 FE58                155      BEQ LOADDATAONE
000011C8  B43C 0001                156      CMP.B #1,D2
000011CC  6700 FEA2                157      BEQ LOADDATATWO
000011D0  4E75                     158      RTS
000011D2                           159      
000011D2                           160  DONE     
000011D2                           161  
000011D2  5205                     162          ADD.B #1,D5
000011D4  BA3C 0000                163          CMP.B #0,D5
000011D8  6700 FEEC                164          BEQ VAL1
000011DC  BA3C 0001                165          CMP.B #1,D5
000011E0  6700 FEEE                166          BEQ VAL2
000011E4  BA3C 0002                167          CMP.B #2,D5
000011E8  6700 FEF6                168          BEQ VAL3
000011EC  BA3C 0003                169          CMP.B #3,D5
000011F0  6700 FEFE                170          BEQ VAL4
000011F4  BA3C 0004                171          CMP.B #4,D5
000011F8  6700 FF06                172          BEQ VAL5
000011FC  BA3C 0005                173          CMP.B #5,D5
00001200  6700 FF0E                174          BEQ VAL6
00001204  BA3C 0006                175          CMP.B #6,D5
00001208  6700 FF16                176          BEQ VAL7
0000120C  BA3C 0007                177          CMP.B #7,D5
00001210  6700 FF1E                178          BEQ VAL8
00001214  BA3C 0008                179          CMP.B #8,D5
00001218  6700 0006                180          BEQ EXIT
0000121C                           181          
0000121C  6000 FF22                182          BRA     STARTCHECK
00001220                           183  
00001220                           184  
00001220                           185  
00001220  13C4 0000A070            186  EXIT    MOVE.B D4,$A070
00001226                           187      
00001226  4284                     188      CLR.L D4
00001228  D839 0000A000            189      ADD.B $A000,D4
0000122E  E98C                     190      LSL.L #4,D4
00001230  D839 0000A010            191      ADD.B $A010,D4
00001236  E98C                     192      LSL.L #4,D4
00001238  D839 0000A020            193      ADD.B $A020,D4
0000123E  E98C                     194      LSL.L #4,D4
00001240  D839 0000A030            195      ADD.B $A030,D4
00001246  E98C                     196      LSL.L #4,D4
00001248  D839 0000A040            197      ADD.B $A040,D4
0000124E  E98C                     198      LSL.L #4,D4
00001250  D839 0000A050            199      ADD.B $A050,D4
00001256  E98C                     200      LSL.L #4,D4
00001258  D839 0000A060            201      ADD.B $A060,D4
0000125E  E98C                     202      LSL.L #4,D4
00001260  D839 0000A070            203      ADD.B $A070,D4
00001266                           204      
00001266  2E04                     205      MOVE.L D4,D7
00001268  4244                     206      CLR D4
0000126A  B43C 0001                207      CMP.B #1,D2
0000126E  6700 0020                208      BEQ STOREADRESSES
00001272  2C07                     209      MOVE.L D7,D6
00001274  143C 0001                210      MOVE.B #1,D2
00001278  7A00                     211      MOVE.L #0,D5
0000127A  6000 FDF4                212      BRA LOADDATATWO
0000127E                           213      
0000127E                           214  ;---------------------------------------------------------
0000127E                           215  
0000127E                           216  LARGERISSUE
0000127E  43F9 000030A9            217      LEA OUTOFORDER,A1
00001284  103C 000E                218      MOVE.B   #14,D0     ; moves #14 into data register D0
00001288  4E4F                     219      TRAP     #15       ; Displays message via trap 14
0000128A  7400                     220      MOVE.L #0,D2
0000128C  6000 FD90                221      BRA LOADDATAONE
00001290                           222  
00001290                           223  STOREADRESSES
00001290  23C7 0000326C            224      MOVE.L  D7,ENDINGADDRESS
00001296  23C6 00003264            225      MOVE.L  D6,STARTINGADDRESS
0000129C                           226  LARGERTHAN    
0000129C  BE86                     227      CMP.L D6,D7
0000129E  6DDE                     228      BLT LARGERISSUE
000012A0  4247                     229      CLR     D7
000012A2  2C79 00003264            230      MOVE.L   STARTINGADDRESS,A6
000012A8                           231      
000012A8                           232  MEMORYGRABBER
000012A8  2879 0000326C            233      MOVE.L  ENDINGADDRESS,A4
000012AE  BDCC                     234      CMPA.L  A4,A6
000012B0  6C00 0066                235      BGE     ENDING 
000012B4                           236      
000012B4  0C79 0019 00003270       237       CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
000012BC  6C00 0038                238       BGE     PAGEBREAK
000012C0  5279 00003270            239       ADD.W   #1,CYCLECOUNTER
000012C6                           240      
000012C6                           241      * TODO: CLEAR MODES AND REGISTERS
000012C6                           242      
000012C6  23CE 00003268            243      MOVE.L      A6,CURRENTADDRESS   
000012CC  2239 00003268            244      MOVE.L      CURRENTADDRESS,D1
000012D2  143C 0010                245      MOVE.B      #16,D2
000012D6  103C 000F                246      MOVE.B      #15,D0     ; moves #14 into data register D0
000012DA  4E4F                     247      TRAP        #15  
000012DC  43F9 00003294            248      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
000012E2  103C 000E                249      MOVE.B   #14,D0     ; moves #14 into data register D0
000012E6  4E4F                     250      TRAP     #15  
000012E8                           251      
000012E8  361E                     252      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012EA  33C3 00003272            253      MOVE.W      D3, COMMANDDATA
000012F0                           254   
000012F0  6000 00B4                255      BRA         COMPARE_GROUPS
000012F4                           256      
000012F4  60B2                     257      BRA MEMORYGRABBER
000012F6                           258      
000012F6                           259  PAGEBREAK
000012F6  43F9 00003055            260      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
000012FC  103C 000E                261      MOVE.B   #14,D0     ; moves #14 into data register D0
00001300  4E4F                     262      TRAP     #15       ; Displays message via trap 14
00001302  43F9 00003263            263      LEA     INPUT,A1
00001308  103C 0002                264      MOVE.B  #2,D0 *takes the string of what the user enters
0000130C  4E4F                     265      TRAP    #15
0000130E  33FC 0000 00003270       266      MOVE.W #0,CYCLECOUNTER
00001316  6090                     267      BRA MEMORYGRABBER
00001318                           268  
00001318                           269  ENDING 
00001318  33FC 0000 00003270       270      MOVE.W #0,CYCLECOUNTER
00001320  43F9 0000316E            271      LEA     FINALMESSAGE1,A1     * Prints End of Program message
00001326  103C 000E                272      MOVE.B  #14,D0
0000132A  4E4F                     273      TRAP    #15
0000132C  43F9 00003198            274      LEA     FINALMESSAGE2,A1     * Prints End of Program message
00001332  103C 000E                275      MOVE.B  #14,D0
00001336  4E4F                     276      TRAP    #15
00001338  43F9 00003263            277      LEA     INPUT,A1
0000133E  103C 0005                278      MOVE.B  #5,D0 *takes the single charater the user enters
00001342  4E4F                     279      TRAP    #15
00001344  B23C 0031                280      CMP.B #49,D1
00001348  6700 FCB6                281      BEQ START
0000134C  B23C 0030                282      CMP.B #48,D1
00001350  6700 0010                283      BEQ GOODBYE
00001354  43F9 0000307D            284      LEA     BADVAL,A1     * Prints End of Program message
0000135A  103C 000E                285      MOVE.B  #14,D0
0000135E  4E4F                     286      TRAP    #15
00001360  60B6                     287      BRA ENDING
00001362                           288      
00001362                           289  GOODBYE
00001362  43F9 00003294            290      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001368  103C 000E                291      MOVE.B   #14,D0     ; moves #14 into data register D0
0000136C  4E4F                     292      TRAP     #15  
0000136E  43F9 000031C2            293      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
00001374  103C 000E                294      MOVE.B  #14,D0
00001378  4E4F                     295      TRAP    #15
0000137A  FFFF FFFF                296      SIMHALT             ; halt simulator
0000137E                           297      
0000137E                           298  
0000137E                           299  ;-------------------------- OP CODE SECTION -------------------------------
0000137E                           300  
0000137E                           301  READ_BITS
0000137E  4287                     302      CLR.L   D7
00001380  4284                     303      CLR.L   D4
00001382  1E39 00003274            304      MOVE.B  Bits,D7
00001388                           305      
00001388                           306  LOOP_READ_BITS    
00001388  BE3C 0000                307      CMP.B   #0,D7           * counter
0000138C  6700 1768                308      BEQ     RETURN
00001390                           309      
00001390  E34C                     310      LSL.W   #1,D4           * make space for new bit
00001392  E34B                     311      LSL.W   #1,D3          
00001394                           312  
00001394  6500 0008                313      BCS     SET             * if 1, then branch to SET
00001398  5307                     314      SUBI.B  #1,D7          
0000139A  4EF8 1388                315      JMP     LOOP_READ_BITS
0000139E                           316  SET
0000139E  5244                     317      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013A0  5307                     318      SUBI.B  #1, D7
000013A2  4EF8 1388                319      JMP     LOOP_READ_BITS  
000013A6                           320      
000013A6                           321  
000013A6                           322  
000013A6                           323  COMPARE_GROUPS              * comapres the 4 bits of the instruction
000013A6  13FC 0004 00003274       324      MOVE.B  #4,Bits         
000013AE  4EB8 137E                325      JSR     READ_BITS       * get the first 4 bits and store it in D4
000013B2                           326  
000013B2  B87C 0001                327      CMP.W   #%0001,D4      
000013B6                           328      *BEQ     CHECK_MOVE_B    * if equal, goes to CHECK_MOVE.B
000013B6                           329      
000013B6  B87C 0002                330      CMP.W   #%0010,D4      
000013BA                           331      *BEQ     COMPARE_0010    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
000013BA                           332      
000013BA  B87C 0003                333      CMP.W   #%0011,D4      
000013BE                           334      *BEQ     COMPARE_0011    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
000013BE                           335      
000013BE  B87C 0004                336      CMP.W   #%0100,D4      
000013C2  6700 0046                337      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
000013C6                           338      
000013C6  B87C 0005                339      CMP.W   #%0101,D4      
000013CA  6700 02EE                340      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
000013CE                           341      
000013CE  B87C 0006                342      CMP.W   #%0110,D4      
000013D2  6700 0370                343      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
000013D6                           344      
000013D6  B87C 0007                345      CMP.W   #%0111,D4      
000013DA  6700 04D0                346      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
000013DE                           347      
000013DE  B87C 0008                348      CMP.W   #%1000,D4      
000013E2  6700 0526                349      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
000013E6                           350      
000013E6  B87C 0009                351      CMP.W   #%1001,D4      
000013EA  6700 05AC                352      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
000013EE                           353      
000013EE  B87C 000C                354      CMP.W   #%1100,D4      
000013F2  6700 0632                355      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
000013F6                           356      
000013F6  B87C 000D                357      CMP.W   #%1101,D4      
000013FA  6700 0378                358      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
000013FE                           359      
000013FE  B87C 000E                360      CMP.W   #%1110,D4      
00001402  6700 06B0                361      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
00001406                           362      
00001406  6600 171C                363      BNE     PRINT_DATA      * all other instructions are not supported 
0000140A                           364  
0000140A                           365  
0000140A                           366  
0000140A                           367  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
0000140A                           368  
0000140A                           369  COMPARE_0100
0000140A  0803 000C                370      BTST.L  #$0C,D3             * compare bit 8 for LEA
0000140E  6600 0032                371      BNE     CHECK_LEA
00001412                           372      
00001412  13FC 0004 00003274       373      MOVE.B  #4,Bits
0000141A  4EB8 137E                374      JSR     READ_BITS
0000141E                           375      
0000141E  B87C 0006                376      CMP.W   #%0110,D4
00001422  6700 00AA                377      BEQ     CHECK_NOT           * goes to NOT
00001426                           378      
00001426  B87C 0008                379      CMP.W   #%1000,D4
0000142A  6700 012C                380      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
0000142E                           381      
0000142E  B87C 000C                382      CMP.W   #%1100,D4       
00001432  6700 01D8                383      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
00001436                           384      
00001436  B87C 000E                385      CMP.W   #%1110,D4
0000143A  6700 01D8                386      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
0000143E                           387      
0000143E  6600 16E4                388      BNE     PRINT_DATA
00001442                           389  
00001442                           390  CHECK_LEA
00001442  13FC 0003 00003274       391      MOVE.B  #3,Bits  
0000144A  4EB8 137E                392      JSR     READ_BITS 
0000144E  13C4 00003286            393      MOVE.B  D4,DEST_REG  
00001454                           394  
00001454  13FC 0003 00003274       395      MOVE.B  #3,Bits
0000145C  4EB8 137E                396      JSR     READ_BITS
00001460  B83C 0007                397      CMP.B   #7,D4               * if mode = 111 = continue
00001464  6600 16BE                398      BNE     PRINT_DATA
00001468                           399  
00001468  13FC 0003 00003274       400      MOVE.B  #3,Bits
00001470  4EB8 137E                401      JSR     READ_BITS 
00001474  13C4 00003288            402      MOVE.B  D4,SRC_MODE           
0000147A                           403  
0000147A  13FC 0003 00003274       404      MOVE.B  #3,Bits 
00001482  4EB8 137E                405      JSR     READ_BITS 
00001486  13C4 00003289            406      MOVE.B  D4,SRC_REG 
0000148C                           407      
0000148C                           408      *MOVE.B  #3,CmdIndex         
0000148C  4EB9 00002A30            409      JSR     CHECK_SOURCE                * Check Source Mode
00001492                           410      
00001492  0C39 000F 000032A1       411      CMP.B   #$F,SrcMode         * If SrcMode is invalid
0000149A  6700 1688                412      BEQ     PRINT_DATA
0000149E                           413      
0000149E  0C39 0002 000032A1       414      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
000014A6  6700 10CC                415      BEQ     PRINTLEA        
000014AA                           416      
000014AA  0C39 0007 000032A1       417      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
000014B2  6700 10C0                418      BEQ     PRINTLEA    
000014B6                           419      
000014B6  0C39 0008 000032A1       420      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
000014BE  6700 10B4                421      BEQ     PRINTLEA
000014C2                           422              
000014C2  13FC 0001 0000329E       423      MOVE.B  #1,INVALID_EA   
000014CA  6000 10A8                424      BRA     PRINTLEA    
000014CE                           425      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000014CE                           426  
000014CE                           427      
000014CE                           428  CHECK_NOT 
000014CE                           429      * TODO : TEST
000014CE  13FC 0002 00003274       430      MOVE.B  #2,Bits             
000014D6  4EB8 137E                431      JSR     READ_BITS             
000014DA  13C4 00003291            432      MOVE.B  D4,SIZE_BITS               * Stores size 
000014E0                           433      
000014E0  4EB9 00002B50            434      JSR     SETSIZE2             * set correct size for printing
000014E6                           435      
000014E6  B83C 0003                436      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
000014EA  6700 1638                437      BEQ     PRINT_DATA          * Else, If 11 size invalid
000014EE                           438      
000014EE  13FC 0003 00003274       439      MOVE.B  #3,Bits       
000014F6  4EB8 137E                440      JSR     READ_BITS       
000014FA  13C4 00003287            441      MOVE.B  D4,DEST_MODE             
00001500                           442  
00001500  13FC 0003 00003274       443      MOVE.B  #3,Bits       
00001508  4EB8 137E                444      JSR     READ_BITS
0000150C  13C4 00003286            445      MOVE.B  D4,DEST_REG             
00001512                           446      
00001512                           447      *MOVE.B  #2,CmdIndex 
00001512  4EB9 00002930            448      JSR     CHECK_DESTINATION               * Check Destination Mode
00001518                           449  
00001518  0C39 000F 0000329F       450      CMP.B   #$F,DstMode         * If DstMode is invalid
00001520  6700 1602                451      BEQ     PRINT_DATA      
00001524                           452  
00001524  0C39 000E 0000329F       453      CMP.B   #$E,DstMode         * If DstMode is invalid EA
0000152C  13FC 0001 0000329E       454      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001534                           455      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001534                           456  
00001534  0C39 0001 0000329F       457      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
0000153C  13FC 0001 0000329E       458      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001544                           459      
00001544  0C39 000B 0000329F       460      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
0000154C  13FC 0001 0000329E       461      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001554  6000 1034                462      BRA     PRINTNOT
00001558                           463  
00001558                           464  CHECK_MOVEM_1000 
00001558                           465      * TODO : TEST WITH EA 
00001558  13FC 0001 00003274       466      MOVE.B  #1,Bits
00001560  4EB8 137E                467      JSR     READ_BITS
00001564  B83C 0001                468      CMP.B   #%1,D4
00001568  6600 15BA                469      BNE     PRINT_DATA
0000156C                           470      
0000156C  13FC 0001 00003274       471      MOVE.B  #1,Bits
00001574  4EB8 137E                472      JSR     READ_BITS
00001578  13C4 00003291            473      MOVE.B  D4,SIZE_BITS
0000157E                           474      
0000157E  4EB9 00002B36            475      JSR     SETSIZE1
00001584                           476  
00001584  13FC 0003 00003274       477      MOVE.B  #3,Bits
0000158C  4EB8 137E                478      JSR     READ_BITS
00001590  13C4 0000328A            479      MOVE.B  D4,TEMP_MODE
00001596                           480      
00001596  13FC 0003 00003274       481      MOVE.B  #3,Bits
0000159E  4EB8 137E                482      JSR     READ_BITS
000015A2  13C4 0000328B            483      MOVE.B  D4,TEMP_REG
000015A8                           484      
000015A8  4EB9 000029B0            485      JSR     CHECK_TEMP
000015AE  4EB9 00002AB0            486      JSR     CHECK_XBIT
000015B4                           487      
000015B4  0C39 000F 000032A0       488      CMP.B   #$F,TempMode        * If TempMode is invalid
000015BC  6700 1566                489      BEQ     PRINT_DATA              * Print DATA instead
000015C0                           490  
000015C0  0C39 000E 000032A0       491      CMP.B   #$E,TempMode        * If TempMode is invalid EA
000015C8                           492    *  BEQ     SETINVEA           * 
000015C8  13FC 0001 0000329E       493      MOVE.B  #1,INVALID_EA
000015D0                           494     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000015D0                           495  
000015D0  0C39 0002 000032A0       496      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
000015D8  6700 0F84                497      BEQ     PRINTMOVEM              
000015DC                           498  
000015DC  0C39 0007 000032A0       499      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
000015E4  6700 0F78                500      BEQ     PRINTMOVEM   
000015E8                           501  
000015E8  0C39 0008 000032A0       502      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
000015F0  6700 0F6C                503      BEQ     PRINTMOVEM   
000015F4                           504                 
000015F4  0C39 0004 0000329F       505      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
000015FC  6700 0F60                506      BEQ     PRINTMOVEM   
00001600                           507  
00001600  0C39 0003 000032A1       508      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
00001608  6700 0F54                509      BEQ     PRINTMOVEM   
0000160C                           510     * BRA     SETINVEA
0000160C                           511      
0000160C                           512  CHECK_MOVEM_1100     
0000160C  13FC 0001 0000329D       513      MOVE.B      #1,XBIT
00001614                           514      
00001614                           515  
00001614                           516  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
00001614  13FC 0002 00003274       517      MOVE.B  #2,Bits
0000161C  4EB8 137E                518      JSR     READ_BITS
00001620                           519      
00001620  B83C 0002                520      CMP.B   #%10,D4
00001624  6700 000E                521      BEQ     CHECK_JSR           * goes to JSR
00001628                           522      
00001628  B83C 0001                523      CMP.B   #%01,D4 
0000162C  6700 006C                524      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
00001630                           525  
00001630  6600 14F2                526      BNE     PRINT_DATA
00001634                           527  
00001634                           528  CHECK_JSR       * TODO: TEST
00001634                           529  
00001634  13FC 0003 00003274       530      MOVE.B  #3,Bits
0000163C  4EB8 137E                531      JSR     READ_BITS
00001640  13C4 00003287            532      MOVE.B  D4,DEST_MODE
00001646                           533      
00001646  13FC 0003 00003274       534      MOVE.B  #3,Bits
0000164E  4EB8 137E                535      JSR     READ_BITS
00001652  13C4 00003286            536      MOVE.B  D4,DEST_REG
00001658                           537      
00001658                           538      *MOVE.B  #4,INDEX
00001658  4EB9 00002930            539      JSR     CHECK_DESTINATION
0000165E                           540      
0000165E  0C39 000F 0000329F       541      CMP.B   #$F,DstMode         * if invalid print DATA
00001666  6700 14BC                542      BEQ     PRINT_DATA
0000166A                           543      
0000166A  0C39 0002 0000329F       544      CMP.B   #$2,DstMode         * if DstMode 010        
00001672  6700 0F2C                545      BEQ     PRINTJSR
00001676                           546      
00001676  0C39 0007 0000329F       547      CMP.B   #$7,DstMode         * if DstMode 111 + 000
0000167E  6700 0F20                548      BEQ     PRINTJSR
00001682                           549      
00001682  0C39 0008 0000329F       550      CMP.B   #$8,DstMode         * if DstMode 111 + 001
0000168A  6700 0F14                551      BEQ     PRINTJSR
0000168E                           552      
0000168E  13FC 0001 0000329E       553      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
00001696                           554      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001696  6000 0F08                555      BRA     PRINTJSR
0000169A                           556      
0000169A                           557  CHECK_NOP_RTS
0000169A  13FC 0006 00003274       558      MOVE.B  #6,Bits
000016A2  4EB8 137E                559      JSR READ_BITS
000016A6                           560      
000016A6  B83C 0031                561      CMP.B   #%110001,D4
000016AA  6700 0EA2                562      BEQ     PRINTNOP            
000016AE                           563      
000016AE  B83C 0035                564      CMP.B   #%110101,D4
000016B2  6700 0F02                565      BEQ     PRINTRTS       
000016B6                           566          
000016B6  6600 146C                567      BNE     PRINT_DATA
000016BA                           568  
000016BA                           569  ************************** ADDQ ***************************
000016BA                           570  CHECK_ADDQ
000016BA  13FC 0003 00003274       571      MOVE.B  #3,Bits 
000016C2  4EB8 137E                572      JSR     READ_BITS
000016C6  13C4 0000328C            573      MOVE.B  D4,DATA_FIELD
000016CC                           574      
000016CC  4EB9 00002AF8            575      JSR     FORMAT_DATA     
000016D2                           576      
000016D2  13FC 0001 00003274       577      MOVE.B  #1,Bits
000016DA  4EB8 137E                578      JSR     READ_BITS
000016DE  B83C 0000                579      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
000016E2  6600 1440                580      BNE     PRINT_DATA          * goes to PRINT_DATA
000016E6                           581  
000016E6  13FC 0002 00003274       582      MOVE.B  #2,Bits
000016EE  4EB8 137E                583      JSR     READ_BITS
000016F2  13C4 00003291            584      MOVE.B  D4,SIZE_BITS             * store size into SIZE
000016F8  0C39 0003 00003291       585      CMP.B   #%11,SIZE_BITS           * cannot be #%11
00001700  6700 1422                586      BEQ     PRINT_DATA
00001704  4EB9 00002B50            587      JSR     SETSIZE2            * for printing 
0000170A                           588  
0000170A  13FC 0003 00003274       589      MOVE.B  #3,Bits
00001712  4EB8 137E                590      JSR     READ_BITS
00001716  13C4 00003287            591      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
0000171C                           592      
0000171C  13FC 0003 00003274       593      MOVE.B  #3,Bits
00001724  4EB8 137E                594      JSR     READ_BITS
00001728  13C4 00003286            595      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
0000172E                           596      
0000172E  4EB9 00002930            597      JSR     CHECK_DESTINATION    
00001734                           598      
00001734  0C39 000F 00003287       599      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
0000173C  6700 13E6                600      BEQ     PRINT_DATA         
00001740                           601      
00001740                           602   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
00001740                           603   *   BEQ     INVALID_EA          * TODO 
00001740                           604      
00001740                           605   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
00001740                           606   *   BEQ     INVALID_EA         * TODO
00001740                           607      
00001740  6000 0E84                608      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
00001744                           609  
00001744                           610  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
00001744                           611  COMPARE_0110  * TODO : store condition and 8-bit displacement 
00001744  13FC 0004 00003274       612      MOVE.B  #4,Bits 
0000174C  4EB8 137E                613      JSR     READ_BITS
00001750                           614      
00001750  B83C 000E                615      CMP.B   #%1110,D4
00001754  6700 0ECE                616      BEQ     PRINTBGT 
00001758                           617      
00001758  B83C 000F                618      CMP.B   #%1111,D4
0000175C  6700 0EF2                619      BEQ     PRINTBLE 
00001760                           620      
00001760  B83C 0007                621      CMP.B   #%0111,D4
00001764  6700 0ED4                622      BEQ     PRINTBEQ  
00001768                           623      
00001768  B83C 0000                624      CMP.B   #%0000,D4
0000176C  6700 0EF8                625      BEQ     PRINTBRA
00001770                           626      
00001770  6000 13B2                627      BRA     PRINT_DATA 
00001774                           628  
00001774                           629  ************************** ADD, ADDA **********************
00001774                           630  COMPARE_1101    * ADD and ADDA 
00001774  13FC 0003 00003274       631      MOVE.B  #3,Bits
0000177C  4EB8 137E                632      JSR     READ_BITS
00001780  13C4 0000328B            633      MOVE.B  D4,TEMP_REG ;push to EA storage (probably D2)
00001786                           634      
00001786  13FC 0001 00003274       635      MOVE.B  #1,Bits
0000178E  4EB8 137E                636      JSR     READ_BITS
00001792  13C4 0000329D            637      MOVE.B  D4,XBit
00001798                           638      
00001798  13FC 0002 00003274       639      MOVE.B  #2,Bits
000017A0  4EB8 137E                640      JSR     READ_BITS
000017A4  13C4 00003291            641      MOVE.B  D4,SIZE_BITS
000017AA                           642      
000017AA  13FC 0001 0000328A       643      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
000017B2  0C39 0003 00003291       644      CMP.B   #%11,SIZE_BITS 
000017BA  6700 0072                645      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
000017BE                           646      
000017BE  13FC 0000 0000328A       647      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
000017C6  4EB9 00002AB0            648      JSR     CHECK_XBIT
000017CC                           649      
000017CC                           650      ;These two need to be pushed to EA for second variable, order determined
000017CC                           651      ;by size
000017CC  13FC 0003 00003274       652      MOVE.B  #3,Bits
000017D4  4EB8 137E                653      JSR     READ_BITS
000017D8  13C4 0000328A            654      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
000017DE                           655      
000017DE  13FC 0003 00003274       656      MOVE.B  #3,Bits
000017E6  4EB8 137E                657      JSR     READ_BITS
000017EA  13C4 0000328B            658      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
000017F0                           659      
000017F0  13FC 0007 0000329C       660      MOVE.B  #7,INDEX
000017F8  4EB9 000029B0            661      JSR     CHECK_TEMP   
000017FE  0C39 000F 000032A0       662      CMP.B   #$F, TempMode
00001806  6700 131C                663      BEQ     PRINT_DATA
0000180A                           664    *  CMP.B   #$E,TempMode    
0000180A                           665    *  BEQ     INVALID_EA              * TODO
0000180A                           666      
0000180A  4EF9 00001810            667      JMP     CHECK_ADD
00001810                           668      
00001810                           669  CHECK_ADD
00001810  4EB9 00002B50            670      JSR     SETSIZE2
00001816  0C39 0000 00003291       671      CMP.B   #%00,SIZE_BITS
0000181E  6600 000A                672      BNE     CCHECK_ADD  
00001822                           673      
00001822  0C39 0001 000032A0       674      CMP.B   #$1,TempMode       * if TempMode is invalid
0000182A                           675    *  BEQ     INVALID_EA              * TODO 
0000182A                           676  CCHECK_ADD
0000182A  6000 0F70                677      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
0000182E                           678  
0000182E                           679  
0000182E                           680  CHECK_ADDA
0000182E  13FC 0001 00003291       681      MOVE.B  #%01,SIZE_BITS
00001836                           682  
00001836  0C39 0000 0000329D       683      CMP.B   #%0,XBIT
0000183E  6700 0010                684      BEQ     CCHECK_ADDA
00001842  13FC 0002 00003291       685      MOVE.B  #%10,SIZE_BITS
0000184A                           686      
0000184A  4EB9 00002B50            687      JSR     SETSIZE2
00001850                           688  
00001850                           689  CCHECK_ADDA
00001850  4EB9 00002B50            690      JSR     SETSIZE2
00001856                           691      
00001856  13F9 0000328B 00003286   692      MOVE.B  TEMP_REG,DEST_REG
00001860  13F9 0000328A 00003287   693      MOVE.B  TEMP_MODE,DEST_MODE     * set MOVE_DEST to 'An'
0000186A  13FC 0001 0000329F       694      MOVE.B  #$1,DstMode
00001872                           695      
00001872  13FC 0003 00003274       696      MOVE.B  #3,Bits        
0000187A  4EB8 137E                697      JSR     READ_BITS
0000187E  13C4 00003288            698      MOVE.B  D4,SRC_MODE    
00001884                           699      
00001884  13FC 0003 00003274       700      MOVE.B  #3,Bits        
0000188C  4EB8 137E                701      JSR     READ_BITS
00001890  13C4 00003289            702      MOVE.B  D4,SRC_REG
00001896                           703      
00001896                           704     * MOVE.B  #8,INDEX
00001896  4EB9 00002A30            705      JSR     CHECK_SOURCE
0000189C  0C39 000F 000032A1       706      CMP.B   #$F,SrcMode
000018A4  6700 127E                707      BEQ     PRINT_DATA
000018A8                           708     * CMP.B   #$E,SrcMode
000018A8                           709     * BEQ     INVALID_EA                  * TODO 
000018A8                           710      
000018A8  6000 0F08                711      BRA     PRINTADDA                  * TODO: check the name I/O; check what need EA
000018AC                           712  
000018AC                           713  ************************** MOVEQ ********************************
000018AC                           714  CHECK_MOVEQ
000018AC  13FC 0003 00003274       715      MOVE.B  #3,Bits         * read next 3 bits
000018B4  4EB8 137E                716      JSR     READ_BITS       * store them in D4
000018B8  13C4 00003286            717      MOVE.B  D4,DEST_REG     * move register value (used in EA)
000018BE  1439 00003286            718      MOVE.B  DEST_REG,D2
000018C4  163C 0000                719      MOVE.B  #%000,D3
000018C8                           720      
000018C8  13FC 0001 00003274       721      MOVE.B  #1,Bits         * read the next bit into D4
000018D0  4EB8 137E                722      JSR     READ_BITS
000018D4  B83C 0000                723      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
000018D8  6600 124A                724      BNE     PRINT_DATA      * goes to PRINT_DATA ?
000018DC                           725      
000018DC  13FC 0008 00003274       726      MOVE.B  #8,Bits        
000018E4  4EB8 137E                727      JSR     READ_BITS
000018E8  23C4 0000328C            728      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
000018EE                           729      
000018EE  13FC 0007 00003288       730      MOVE.B  #%111,SRC_MODE  * 
000018F6  13FC 0004 00003289       731      MOVE.B  #%100,SRC_REG   * 
000018FE  13FC 0004 0000282C       732      MOVE.B  #4,SizeSplit
00001906  6000 0D74                733      BRA     PRINTMOVEQ 
0000190A                           734      
0000190A                           735  ************************* OR *********************************
0000190A                           736  CHECK_OR
0000190A  13FC 0003 00003274       737      MOVE.B  #3,Bits
00001912  4EB8 137E                738      JSR     READ_BITS
00001916  13C4 0000328B            739      MOVE.B  D4,TEMP_REG
0000191C                           740      
0000191C  13FC 0001 00003274       741      MOVE.B  #1,Bits
00001924  4EB8 137E                742      JSR     READ_BITS
00001928  13C4 0000329D            743      MOVE.B  D4,XBit
0000192E                           744      
0000192E  13FC 0002 00003274       745      MOVE.B  #2,Bits
00001936  4EB8 137E                746      JSR     READ_BITS
0000193A  13C4 00003291            747      MOVE.B  D4,SIZE_BITS
00001940                           748      
00001940  4EB9 00002B50            749      JSR     SETSIZE2
00001946                           750  
00001946  13FC 0001 0000328A       751      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
0000194E                           752          
0000194E  13FC 0000 0000328A       753      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001956  4EB9 00002AB0            754      JSR     CHECK_XBIT
0000195C                           755      
0000195C  13FC 0003 00003274       756      MOVE.B  #3,Bits
00001964  4EB8 137E                757      JSR     READ_BITS
00001968  13C4 0000328A            758      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
0000196E                           759      
0000196E  13FC 0003 00003274       760      MOVE.B  #3,Bits
00001976  4EB8 137E                761      JSR     READ_BITS
0000197A  13C4 0000328B            762      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001980                           763      
00001980                           764      *MOVE.B  #7,INDEX
00001980  4EB9 000029B0            765      JSR     CHECK_TEMP   
00001986  0C39 000F 000032A0       766      CMP.B   #$F, TempMode
0000198E  6700 1194                767      BEQ     PRINT_DATA
00001992                           768    *  CMP.B   #$E,TempMode    
00001992                           769    *  BEQ     INVALID_EA              * TODO
00001992                           770      
00001992  4EF9 000026C0            771      JMP     PRINTOR
00001998                           772  
00001998                           773  ********************* SUB **********************
00001998                           774  CHECK_SUB
00001998  13FC 0003 00003274       775      MOVE.B  #3,Bits
000019A0  4EB8 137E                776      JSR     READ_BITS
000019A4  13C4 0000328B            777      MOVE.B  D4,TEMP_REG
000019AA                           778      
000019AA  13FC 0001 00003274       779      MOVE.B  #1,Bits
000019B2  4EB8 137E                780      JSR     READ_BITS
000019B6  13C4 0000329D            781      MOVE.B  D4,XBit
000019BC                           782      
000019BC  13FC 0002 00003274       783      MOVE.B  #2,Bits
000019C4  4EB8 137E                784      JSR     READ_BITS
000019C8  13C4 00003291            785      MOVE.B  D4,SIZE_BITS
000019CE                           786      
000019CE  4EB9 00002B50            787      JSR     SETSIZE2
000019D4                           788  
000019D4  13FC 0001 0000328A       789      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
000019DC                           790          
000019DC  13FC 0000 0000328A       791      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
000019E4  4EB9 00002AB0            792      JSR     CHECK_XBIT
000019EA                           793      
000019EA  13FC 0003 00003274       794      MOVE.B  #3,Bits
000019F2  4EB8 137E                795      JSR     READ_BITS
000019F6  13C4 0000328A            796      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
000019FC                           797      
000019FC  13FC 0003 00003274       798      MOVE.B  #3,Bits
00001A04  4EB8 137E                799      JSR     READ_BITS
00001A08  13C4 0000328B            800      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001A0E                           801      
00001A0E                           802      *MOVE.B  #7,INDEX
00001A0E  4EB9 000029B0            803      JSR     CHECK_TEMP   
00001A14  0C39 000F 000032A0       804      CMP.B   #$F, TempMode
00001A1C  6700 1106                805      BEQ     PRINT_DATA
00001A20                           806    *  CMP.B   #$E,TempMode    
00001A20                           807    *  BEQ     INVALID_EA              * TODO
00001A20                           808      
00001A20  4EF9 00002770            809      JMP     PRINTSUB
00001A26                           810  
00001A26                           811  
00001A26                           812  ******************* AND ***********************
00001A26                           813  CHECK_AND
00001A26  13FC 0003 00003274       814      MOVE.B  #3,Bits
00001A2E  4EB8 137E                815      JSR     READ_BITS
00001A32  13C4 0000328B            816      MOVE.B  D4,TEMP_REG
00001A38                           817      
00001A38  13FC 0001 00003274       818      MOVE.B  #1,Bits
00001A40  4EB8 137E                819      JSR     READ_BITS
00001A44  13C4 0000329D            820      MOVE.B  D4,XBit
00001A4A                           821      
00001A4A  13FC 0002 00003274       822      MOVE.B  #2,Bits
00001A52  4EB8 137E                823      JSR     READ_BITS
00001A56  13C4 00003291            824      MOVE.B  D4,SIZE_BITS
00001A5C                           825      
00001A5C  4EB9 00002B50            826      JSR     SETSIZE2
00001A62                           827  
00001A62  13FC 0001 0000328A       828      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
00001A6A                           829          
00001A6A  13FC 0000 0000328A       830      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001A72  4EB9 00002AB0            831      JSR     CHECK_XBIT
00001A78                           832      
00001A78  13FC 0003 00003274       833      MOVE.B  #3,Bits
00001A80  4EB8 137E                834      JSR     READ_BITS
00001A84  13C4 0000328A            835      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001A8A                           836      
00001A8A  13FC 0003 00003274       837      MOVE.B  #3,Bits
00001A92  4EB8 137E                838      JSR     READ_BITS
00001A96  13C4 0000328B            839      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001A9C                           840      
00001A9C                           841      *MOVE.B  #7,INDEX
00001A9C  4EB9 000029B0            842      JSR     CHECK_TEMP   
00001AA2  0C39 000F 000032A0       843      CMP.B   #$F, TempMode
00001AAA  6700 1078                844      BEQ     PRINT_DATA
00001AAE                           845    *  CMP.B   #$E,TempMode    
00001AAE                           846    *  BEQ     INVALID_EA              * TODO
00001AAE                           847      
00001AAE  4EF9 00002786            848      JMP     PRINTAND
00001AB4                           849  
00001AB4                           850      
00001AB4                           851  **************************************LS,AS and ROTATE section********************************* 
00001AB4                           852  COMPARE_1110 
00001AB4  4245                     853              CLR D5     ;STORING ISOLATED BITS
00001AB6  4244                     854              CLR D4
00001AB8  3839 00003272            855              MOVE.W COMMANDDATA,D4
00001ABE  2A04                     856              MOVE.L   D4,D5
00001AC0  0285 000000C0            857              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001AC6  EC8D                     858              LSR.L    #6,D5            ;NORMALIZE
00001AC8  13C5 00003290            859              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001ACE  13F9 00003290 00003276   860              MOVE.B   SIZE,SizeValue
00001AD8  5239 00003276            861              ADD.B    #1,SizeValue
00001ADE  BA3C 0003                862              CMP.B    #%11,D5    
00001AE2  6700 0298                863              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001AE6  4245                     864              CLR D5
00001AE8  2A04                     865              MOVE.L   D4,D5      
00001AEA  0285 00000018            866              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001AF0  E68D                     867              LSR.L   #3,D5
00001AF2  BA3C 0001                868              CMP.B   #%001,D5
00001AF6  6700 0020                869              BEQ     G_LS    ;LOGICAL SHIFTS
00001AFA  BA3C 0003                870              CMP.B   #%011,D5
00001AFE  6700 00E4                871              BEQ     G_RO    ;ROTAIONS
00001B02  BA3C 0000                872              CMP.B   #%000,D5
00001B06  6700 01A8                873              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001B0A                           874              
00001B0A  13FC 0001 00000001       875              MOVE.B #1,BAD_FLAG
00001B12  4EF9 00002B24            876              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001B18                           877  
00001B18                           878  G_LS               ;GROUP LOGICAL SHIFT
00001B18  4245                     879       CLR   D5
00001B1A  23C4 000032B4            880       MOVE.L D4,IR_IL
00001B20  02B9 00000020 000032B4   881       ANDI.L  #$0020,IR_IL
00001B2A  2A39 000032B4            882       MOVE.L  IR_IL,D5
00001B30  EA8D                     883       LSR.L   #5,D5
00001B32  BA3C 0001                884       CMP.B   #$1,D5
00001B36  6700 0056                885       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001B3A  4245                     886       CLR D5
00001B3C  2A04                     887       MOVE.L  D4,D5
00001B3E  0285 00000100            888       ANDI.L  #$0100,D5
00001B44  E08D                     889       LSR.L  #8,D5
00001B46  23C5 000032AC            890       MOVE.L  D5,DR
00001B4C  4245                     891       CLR D5
00001B4E  2A04                     892       MOVE.L  D4,D5
00001B50  0285 00000E00            893       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001B56  E08D                     894       LSR.L   #8,D5
00001B58  E28D                     895       LSR.L   #1,D5
00001B5A  BABC 00000007            896       CMP.L   #7,D5
00001B60  6E00 0FC2                897       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001B64  BABC 00000000            898       CMP.L   #0,D5
00001B6A  6D00 0FB8                899       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001B6E  13C5 000032B8            900       MOVE.B  D5,S_COUNT
00001B74  4EB9 0000250A            901       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001B7A  4245                     902       CLR     D5
00001B7C  2A04                     903       MOVE.L  D4,D5
00001B7E  0285 00000007            904       ANDI.L   #$0007,D5
00001B84  13C5 000032BD            905       MOVE.B   D5,dRN
00001B8A  6000 0812                906       BRA      PR_LS             
00001B8E                           907       
00001B8E                           908  GLS_EA 
00001B8E  4245                     909       CLR D5
00001B90  4244                     910       CLR D4
00001B92  3839 00003272            911       MOVE.W COMMANDDATA,D4
00001B98                           912  
00001B98  2A04                     913       MOVE.L  D4,D5
00001B9A  0285 00000100            914       ANDI.L  #$0100,D5
00001BA0  E08D                     915       LSR.L  #8,D5
00001BA2  23C5 000032AC            916       MOVE.L  D5,DR     ;DIRECTION
00001BA8  4245                     917       CLR D5
00001BAA  2A04                     918       MOVE.L  D4,D5
00001BAC  0285 00000E00            919       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001BB2  E08D                     920       LSR.L   #8,D5
00001BB4  E28D                     921       LSR.L   #1,D5
00001BB6  BABC 00000007            922       CMP.L   #7,D5
00001BBC  6E00 0F66                923       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001BC0  BABC 00000000            924       CMP.L   #0,D5
00001BC6  6D00 0F5C                925       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001BCA  13C5 000032BC            926       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001BD0  4245                     927       CLR     D5
00001BD2  2A04                     928       MOVE.L   D4,D5
00001BD4  0285 00000007            929       ANDI.L   #$0007,D5
00001BDA  13C5 000032BD            930       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001BE0  6000 0568                931       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001BE4                           932  G_RO            ;GROUP ROTATION
00001BE4  4245                     933       CLR   D5
00001BE6  23C4 000032B4            934       MOVE.L D4,IR_IL
00001BEC  02B9 00000020 000032B4   935       ANDI.L  #$0020,IR_IL
00001BF6  2A39 000032B4            936       MOVE.L  IR_IL,D5
00001BFC  EA8D                     937       LSR.L   #5,D5
00001BFE  BA3C 0001                938       CMP.B   #$1,D5
00001C02  6700 0056                939       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001C06  4245                     940       CLR D5
00001C08  2A04                     941       MOVE.L  D4,D5
00001C0A  0285 00000100            942       ANDI.L  #$0100,D5
00001C10  E08D                     943       LSR.L  #8,D5
00001C12  23C5 000032AC            944       MOVE.L  D5,DR
00001C18  4245                     945       CLR D5
00001C1A  2A04                     946       MOVE.L  D4,D5
00001C1C  0285 00000E00            947       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C22  E08D                     948       LSR.L   #8,D5
00001C24  E28D                     949       LSR.L   #1,D5
00001C26  BABC 00000007            950       CMP.L   #7,D5
00001C2C  6E00 0EF6                951       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C30  BABC 00000000            952       CMP.L   #0,D5
00001C36  6D00 0EEC                953       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C3A  13C5 000032B8            954       MOVE.B  D5,S_COUNT
00001C40  4EB9 0000250A            955       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001C46  4245                     956       CLR     D5
00001C48  2A04                     957       MOVE.L  D4,D5
00001C4A  0285 00000007            958       ANDI.L   #$0007,D5
00001C50  13C5 000032BD            959       MOVE.B   D5,dRN
00001C56  6000 0672                960       BRA      PR_RO    ;PRINT ROTATION   
00001C5A                           961  
00001C5A                           962  GRO_EA 
00001C5A  4245                     963       CLR D5
00001C5C  4244                     964       CLR D4
00001C5E  3839 00003272            965       MOVE.W COMMANDDATA,D4
00001C64                           966  
00001C64  2A04                     967       MOVE.L  D4,D5
00001C66  0285 00000100            968       ANDI.L  #$0100,D5
00001C6C  E08D                     969       LSR.L  #8,D5
00001C6E  23C5 000032AC            970       MOVE.L  D5,DR     ;DIRECTION
00001C74  4245                     971       CLR D5
00001C76  2A04                     972       MOVE.L  D4,D5
00001C78  0285 00000E00            973       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C7E  E08D                     974       LSR.L   #8,D5
00001C80  E28D                     975       LSR.L   #1,D5
00001C82  BABC 00000007            976       CMP.L   #7,D5
00001C88  6E00 0E9A                977       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C8C  BABC 00000000            978       CMP.L   #0,D5
00001C92  6D00 0E90                979       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C96  13C5 000032BC            980       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001C9C  4245                     981       CLR     D5
00001C9E  2A04                     982       MOVE.L   D4,D5
00001CA0  0285 00000007            983       ANDI.L   #$0007,D5
00001CA6  13C5 000032BD            984       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001CAC  6000 055C                985       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001CB0                           986  
00001CB0                           987  
00001CB0                           988  
00001CB0                           989  G_AS         ;GROUP ARITHMATIC SHIFT
00001CB0  4245                     990       CLR   D5
00001CB2  23C4 000032B4            991       MOVE.L D4,IR_IL
00001CB8  02B9 00000020 000032B4   992       ANDI.L  #$0020,IR_IL
00001CC2  2A39 000032B4            993       MOVE.L  IR_IL,D5
00001CC8  EA8D                     994       LSR.L   #5,D5
00001CCA  BA3C 0001                995       CMP.B   #$1,D5
00001CCE  6700 0056                996       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001CD2  4245                     997       CLR D5
00001CD4  2A04                     998       MOVE.L  D4,D5
00001CD6  0285 00000100            999       ANDI.L  #$0100,D5
00001CDC  E08D                    1000       LSR.L  #8,D5
00001CDE  23C5 000032AC           1001       MOVE.L  D5,DR
00001CE4  4245                    1002       CLR D5
00001CE6  2A04                    1003       MOVE.L  D4,D5
00001CE8  0285 00000E00           1004       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001CEE  E08D                    1005       LSR.L   #8,D5
00001CF0  E28D                    1006       LSR.L   #1,D5
00001CF2  BABC 00000007           1007       CMP.L   #7,D5
00001CF8  6E00 0E2A               1008       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001CFC  BABC 00000000           1009       CMP.L   #0,D5
00001D02  6D00 0E20               1010       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D06  13C5 000032B8           1011       MOVE.B  D5,S_COUNT
00001D0C  4EB9 0000250A           1012       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001D12  4245                    1013       CLR     D5
00001D14  2A04                    1014       MOVE.L  D4,D5
00001D16  0285 00000007           1015       ANDI.L   #$0007,D5
00001D1C  13C5 000032BD           1016       MOVE.B   D5,dRN
00001D22  6000 0610               1017       BRA      PR_AS    ;PRINT ROTATION 
00001D26                          1018  
00001D26                          1019  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001D26  4245                    1020       CLR D5
00001D28  4244                    1021       CLR D4
00001D2A  3839 00003272           1022       MOVE.W COMMANDDATA,D4
00001D30                          1023  
00001D30  2A04                    1024       MOVE.L  D4,D5
00001D32  0285 00000100           1025       ANDI.L  #$0100,D5
00001D38  E08D                    1026       LSR.L  #8,D5
00001D3A  23C5 000032AC           1027       MOVE.L  D5,DR     ;DIRECTION
00001D40  4245                    1028       CLR D5
00001D42  2A04                    1029       MOVE.L  D4,D5
00001D44  0285 00000E00           1030       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001D4A  E08D                    1031       LSR.L   #8,D5
00001D4C  E28D                    1032       LSR.L   #1,D5
00001D4E  BABC 00000007           1033       CMP.L   #7,D5
00001D54  6E00 0DCE               1034       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D58  BABC 00000000           1035       CMP.L   #0,D5
00001D5E  6D00 0DC4               1036       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D62  13C5 000032BC           1037       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001D68  4245                    1038       CLR     D5
00001D6A  2A04                    1039       MOVE.L   D4,D5
00001D6C  0285 00000007           1040       ANDI.L   #$0007,D5
00001D72  13C5 000032BD           1041       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001D78  6000 0310               1042       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001D7C                          1043  
00001D7C                          1044  G14_MEMS 
00001D7C  4245                    1045         CLR D5
00001D7E  2A04                    1046         MOVE.L  D4,D5
00001D80  CABC 00000E00           1047         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001D86  E08D                    1048         LSR.L   #8,D5
00001D88  E28D                    1049         LSR.L   #1,D5
00001D8A  BA3C 0001               1050         CMP.B   #%001,D5
00001D8E  6700 0012               1051         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001D92  BA3C 0003               1052         CMP.B   #%011,D5
00001D96  6700 0070               1053         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001D9A  BA3C 0000               1054         CMP.B   #%000,D5
00001D9E  6700 00CE               1055         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001DA2                          1056  
00001DA2                          1057  G14_MEMS_LS 
00001DA2  4245                    1058             CLR D5
00001DA4  2A04                    1059             MOVE.L  D4,D5
00001DA6  0285 00000100           1060             ANDI.L  #$0100,D5
00001DAC  E08D                    1061             LSR.L  #8,D5
00001DAE  13C5 000032AC           1062             MOVE.B  D5,DR     ;DIRECTION
00001DB4  4245                    1063             CLR D5
00001DB6  2A04                    1064             MOVE.L D4,D5
00001DB8  0285 00000038           1065             ANDI.L  #$0038,D5
00001DBE  E68D                    1066             LSR.L  #3,D5
00001DC0  13C5 000032C0           1067             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001DC6  4245                    1068             CLR D5
00001DC8  2A04                    1069             MOVE.L D4,D5
00001DCA  0285 00000007           1070             ANDI.L  #$0007,D5
00001DD0  13C5 000032BD           1071             MOVE.B  D5,dRN
00001DD6  0CB9 00000000 000032C0  1072             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001DE0  6700 0D42               1073             BEQ    PRINT_DATA
00001DE4  0CB9 00000001 000032C0  1074             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001DEE  6700 0D34               1075             BEQ     PRINT_DATA
00001DF2  13C5 000032BF           1076             MOVE.B  D5,dRG     ;DESTINATION REG
00001DF8  0C39 0007 000032C0      1077             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001E00  6700 00F2               1078             BEQ     CHECK_ID_LS 
00001E04  6000 0180               1079             BRA     PR_G14_MEMS_LS             
00001E08                          1080       
00001E08                          1081  
00001E08                          1082  G14_MEMS_RO
00001E08  4245                    1083             CLR D5
00001E0A  2A04                    1084             MOVE.L  D4,D5
00001E0C  0285 00000100           1085             ANDI.L  #$0100,D5
00001E12  E08D                    1086             LSR.L  #8,D5
00001E14  13C5 000032AC           1087             MOVE.B  D5,DR     ;DIRECTION
00001E1A  4245                    1088             CLR D5
00001E1C  2A04                    1089             MOVE.L D4,D5
00001E1E  0285 00000038           1090             ANDI.L  #$0038,D5
00001E24  E68D                    1091             LSR.L  #3,D5
00001E26  13C5 000032C0           1092             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001E2C  4245                    1093             CLR D5
00001E2E  2A04                    1094             MOVE.L D4,D5
00001E30  0285 00000007           1095             ANDI.L  #$0007,D5
00001E36  13C5 000032BD           1096             MOVE.B  D5,dRN
00001E3C  0CB9 00000000 000032C0  1097             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001E46  6700 0CDC               1098             BEQ    PRINT_DATA
00001E4A  0CB9 00000001 000032C0  1099             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001E54  6700 0CCE               1100             BEQ     PRINT_DATA
00001E58  13C5 000032BF           1101             MOVE.B  D5,dRG     ;DESTINATION REG
00001E5E  0C39 0007 000032C0      1102             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001E66  6700 007C               1103             BEQ     CHECK_ID_RO 
00001E6A  6000 019C               1104             BRA     PR_G14_MEMS_RO         
00001E6E                          1105  
00001E6E                          1106  G14_MEMS_AS
00001E6E  4245                    1107             CLR D5
00001E70  2A04                    1108             MOVE.L  D4,D5
00001E72  0285 00000100           1109             ANDI.L  #$0100,D5
00001E78  E08D                    1110             LSR.L  #8,D5
00001E7A  13C5 000032AC           1111             MOVE.B  D5,DR     ;DIRECTION
00001E80  4245                    1112             CLR D5
00001E82  2A04                    1113             MOVE.L D4,D5
00001E84  0285 00000038           1114             ANDI.L  #$0038,D5
00001E8A  E68D                    1115             LSR.L  #3,D5
00001E8C  13C5 000032C0           1116             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001E92  4245                    1117             CLR D5
00001E94  2A04                    1118             MOVE.L D4,D5
00001E96  0285 00000007           1119             ANDI.L  #$0007,D5
00001E9C  13C5 000032BD           1120             MOVE.B  D5,dRN
00001EA2  0CB9 00000000 000032C0  1121             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001EAC  6700 0C76               1122             BEQ    PRINT_DATA
00001EB0  0CB9 00000001 000032C0  1123             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001EBA  6700 0C68               1124             BEQ     PRINT_DATA
00001EBE  13C5 000032BF           1125             MOVE.B  D5,dRG     ;DESTINATION REG
00001EC4  0C39 0007 000032C0      1126             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001ECC  6700 0006               1127             BEQ     CHECK_ID_AS 
00001ED0  6000 0032               1128             BRA     PR_G14_MEMS_AS                          
00001ED4                          1129             
00001ED4                          1130  
00001ED4                          1131  
00001ED4  0C39 0004 000032BF      1132  CHECK_ID_AS  CMP.B #$4,dRG
00001EDC  6700 0C46               1133               BEQ   PRINT_DATA
00001EE0  6000 0022               1134               BRA     PR_G14_MEMS_AS
00001EE4                          1135               
00001EE4  0C39 0004 000032BF      1136  CHECK_ID_RO  CMP.B #$4,dRG
00001EEC  6700 0C36               1137               BEQ   PRINT_DATA
00001EF0  6000 0116               1138               BRA     PR_G14_MEMS_RO
00001EF4                          1139    
00001EF4  0C39 0004 000032BF      1140  CHECK_ID_LS  CMP.B #$4,dRG
00001EFC  6700 0C26               1141               BEQ   PRINT_DATA
00001F00  6000 0084               1142               BRA    PR_G14_MEMS_LS
00001F04                          1143                               
00001F04                          1144  PR_G14_MEMS_AS
00001F04  4EB9 00002884           1145       JSR     PRINTCLRSPOT      * print space
00001F0A                          1146   
00001F0A  0C39 0000 000032AC      1147       CMP.B #$0,DR 
00001F12  6700 003A               1148       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001F16                          1149      
00001F16                          1150      *******PRINT LSL*******
00001F16  43F9 00003252           1151       LEA       PASL,A1   MEM LEFT SHIF
00001F1C  103C 000E               1152       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F20  4E4F                    1153       TRAP     #15
00001F22                          1154  
00001F22  4EB9 00002884           1155       JSR     PRINTCLRSPOT      * print space
00001F28                          1156   
00001F28  4243                    1157       CLR D3
00001F2A  4242                    1158       CLR D2
00001F2C  1439 000032C0           1159       MOVE.B  dMODE,D2
00001F32  1639 000032BD           1160       MOVE.B  dRN,D3
00001F38  4EB9 00002BF2           1161       JSR     EA_START
00001F3E                          1162       
00001F3E  43F9 000031EA           1163       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F44  103C 000E               1164       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F48  4E4F                    1165       TRAP     #15       ; Displays message via trap 14
00001F4A                          1166       
00001F4A  6000 F35C               1167       BRA MEMORYGRABBER
00001F4E                          1168  
00001F4E                          1169       
00001F4E                          1170  PR_ASR_MEM   ;MEM RIGHT SHIFT
00001F4E                          1171            
00001F4E  43F9 0000324E           1172       LEA       PASR,A1   MEM RIGHT SHIF
00001F54  103C 000E               1173       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F58  4E4F                    1174       TRAP     #15
00001F5A                          1175  
00001F5A  4EB9 00002884           1176       JSR     PRINTCLRSPOT      * print space
00001F60                          1177   
00001F60  4243                    1178       CLR D3
00001F62  4242                    1179       CLR D2
00001F64  1439 000032C0           1180       MOVE.B  dMODE,D2
00001F6A  1639 000032BD           1181       MOVE.B  dRN,D3
00001F70  4EB9 00002BF2           1182       JSR     EA_START
00001F76                          1183       
00001F76  43F9 000031EA           1184       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F7C  103C 000E               1185       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F80  4E4F                    1186       TRAP     #15       ; Displays message via trap 14
00001F82                          1187       
00001F82  6000 F324               1188       BRA MEMORYGRABBER
00001F86                          1189  
00001F86                          1190  
00001F86                          1191               
00001F86                          1192  
00001F86                          1193  PR_G14_MEMS_LS
00001F86  4EB9 00002884           1194       JSR     PRINTCLRSPOT      * print space
00001F8C                          1195   
00001F8C  0C39 0000 000032AC      1196       CMP.B #$0,DR 
00001F94  6700 003A               1197       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001F98                          1198      
00001F98                          1199      *******PRINT LSL*******
00001F98  43F9 00003246           1200       LEA       PLSL,A1   MEM LEFT SHIF
00001F9E  103C 000E               1201       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FA2  4E4F                    1202       TRAP     #15 
00001FA4                          1203       
00001FA4  4EB9 00002884           1204       JSR     PRINTCLRSPOT      * print space
00001FAA                          1205       
00001FAA  4243                    1206       CLR D3
00001FAC  4242                    1207       CLR D2
00001FAE  1439 000032C0           1208       MOVE.B  dMODE,D2
00001FB4  1639 000032BD           1209       MOVE.B  dRN,D3
00001FBA  4EB9 00002BF2           1210       JSR     EA_START
00001FC0                          1211       
00001FC0  43F9 000031EA           1212       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001FC6  103C 000E               1213       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FCA  4E4F                    1214       TRAP     #15       ; Displays message via trap 14
00001FCC                          1215       
00001FCC  6000 F2DA               1216       BRA MEMORYGRABBER
00001FD0                          1217       
00001FD0                          1218  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001FD0  43F9 0000324A           1219       LEA       PLSR,A1   MEM RIGHT SHIF
00001FD6  103C 000E               1220       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FDA  4E4F                    1221       TRAP     #15
00001FDC                          1222       
00001FDC  4EB9 00002884           1223       JSR     PRINTCLRSPOT
00001FE2                          1224   
00001FE2  4243                    1225       CLR D3
00001FE4  4242                    1226       CLR D2
00001FE6  1439 000032C0           1227       MOVE.B  dMODE,D2
00001FEC  1639 000032BD           1228       MOVE.B  dRN,D3
00001FF2  4EB9 00002BF2           1229       JSR     EA_START
00001FF8                          1230       
00001FF8  43F9 000031EA           1231       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001FFE  103C 000E               1232       MOVE.B   #14,D0     ; moves #14 into data register D0
00002002  4E4F                    1233       TRAP     #15       ; Displays message via trap 14
00002004                          1234       
00002004  6000 F2A2               1235       BRA    MEMORYGRABBER
00002008                          1236  
00002008                          1237  PR_G14_MEMS_RO
00002008  4EB9 00002884           1238       JSR     PRINTCLRSPOT      * print space
0000200E                          1239       
0000200E  0C39 0000 000032AC      1240       CMP.B #$0,DR 
00002016  6700 003A               1241       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
0000201A                          1242      
0000201A                          1243      *******PRINT ASL*******
0000201A  43F9 00003256           1244       LEA       PROL,A1   ROTATE MEM LEFT SHIF
00002020  103C 000E               1245       MOVE.B   #14,D0     ; moves #14 into data register D0
00002024  4E4F                    1246       TRAP     #15
00002026                          1247  
00002026  4EB9 00002884           1248       JSR     PRINTCLRSPOT
0000202C                          1249        
0000202C  4243                    1250       CLR D3
0000202E  4242                    1251       CLR D2
00002030  1439 000032C0           1252       MOVE.B  dMODE,D2
00002036  1639 000032BD           1253       MOVE.B  dRN,D3
0000203C  4EB9 00002BF2           1254       JSR     EA_START
00002042                          1255       
00002042  43F9 000031EA           1256       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002048  103C 000E               1257       MOVE.B   #14,D0     ; moves #14 into data register D0
0000204C  4E4F                    1258       TRAP     #15       ; Displays message via trap 14
0000204E                          1259       
0000204E  6000 F258               1260       BRA MEMORYGRABBER
00002052                          1261  
00002052                          1262  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00002052  43F9 0000325A           1263       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
00002058  103C 000E               1264       MOVE.B   #14,D0     ; moves #14 into data register D0
0000205C  4E4F                    1265       TRAP     #15
0000205E                          1266  
0000205E  4EB9 00002884           1267       JSR     PRINTCLRSPOT
00002064                          1268   
00002064  4243                    1269       CLR D3
00002066  4242                    1270       CLR D2
00002068  1439 000032C0           1271       MOVE.B  dMODE,D2
0000206E  1639 000032BD           1272       MOVE.B  dRN,D3
00002074  4EB9 00002BF2           1273       JSR     EA_START
0000207A                          1274       
0000207A  43F9 000031EA           1275       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002080  103C 000E               1276       MOVE.B   #14,D0     ; moves #14 into data register D0
00002084  4E4F                    1277       TRAP     #15       ; Displays message via trap 14
00002086                          1278       
00002086  6000 F220               1279       BRA MEMORYGRABBER
0000208A                          1280  
0000208A                          1281  
0000208A                          1282  
0000208A                          1283  
0000208A                          1284  PR_G_AS_EA
0000208A  4EB9 00002884           1285         JSR     PRINTCLRSPOT      * print space
00002090                          1286  
00002090  0CB9 00000000 000032AC  1287          CMP.L #$0,DR 
0000209A  6700 0058               1288          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000209E                          1289       
0000209E                          1290          *******PRINT ASL*******
0000209E  43F9 00003252           1291          LEA       PASL,A1
000020A4  103C 000E               1292          MOVE.B   #14,D0     ; moves #14 into data register D0
000020A8  4E4F                    1293          TRAP     #15 
000020AA  4EB9 0000282C           1294          JSR      SIZESPLIT
000020B0                          1295          
000020B0  4EB9 00002884           1296          JSR     PRINTCLRSPOT
000020B6                          1297          
000020B6  4242                    1298          CLR D2
000020B8  4243                    1299          CLR D3
000020BA  143C 0000               1300          MOVE.B  #%000,D2     ; mode data register
000020BE  1639 000032BC           1301          MOVE.B  sRN,D3       ; source register number
000020C4  4EB9 00002BF2           1302          JSR     EA_START
000020CA  4EB9 00002892           1303          JSR     PRINTCOMA   ; print coma
000020D0  4243                    1304          CLR D3
000020D2  4242                    1305          CLR D2
000020D4  143C 0000               1306          MOVE.B  #%000,D2      ; mode data register
000020D8  1639 000032BD           1307          MOVE.B  dRN,D3        ; destination register
000020DE  4EB9 00002BF2           1308          JSR     EA_START
000020E4                          1309          
000020E4  43F9 000031EA           1310          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000020EA  103C 000E               1311          MOVE.B   #14,D0     ; moves #14 into data register D0
000020EE  4E4F                    1312          TRAP     #15       ; Displays message via trap 14
000020F0                          1313          
000020F0  6000 F1B6               1314          BRA   MEMORYGRABBER
000020F4                          1315  
000020F4                          1316          
000020F4                          1317  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
000020F4  43F9 0000324E           1318           LEA       PASR,A1
000020FA  103C 000E               1319          MOVE.B   #14,D0     ; moves #14 into data register D0
000020FE  4E4F                    1320          TRAP     #15 
00002100  4EB9 0000282C           1321          JSR      SIZESPLIT
00002106                          1322          
00002106  4EB9 00002884           1323          JSR     PRINTCLRSPOT
0000210C                          1324          
0000210C  4242                    1325          CLR D2
0000210E  4243                    1326          CLR D3
00002110  143C 0000               1327          MOVE.B  #%000,D2     ; mode data register
00002114  1639 000032BC           1328          MOVE.B  sRN,D3       ; source register number
0000211A  4EB9 00002BF2           1329          JSR     EA_START
00002120  4EB9 00002892           1330          JSR     PRINTCOMA   ; print coma
00002126  4243                    1331          CLR D3
00002128  4242                    1332          CLR D2
0000212A  143C 0000               1333          MOVE.B  #%000,D2      ; mode data register
0000212E  1639 000032BD           1334          MOVE.B  dRN,D3        ; destination register
00002134  4EB9 00002BF2           1335          JSR     EA_START
0000213A                          1336          
0000213A  43F9 000031EA           1337          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002140  103C 000E               1338          MOVE.B   #14,D0     ; moves #14 into data register D0
00002144  4E4F                    1339          TRAP     #15       ; Displays message via trap 14
00002146                          1340          
00002146  6000 F160               1341          BRA   MEMORYGRABBER
0000214A                          1342  
0000214A                          1343  
0000214A                          1344  PR_G_LS_EA
0000214A  4EB9 00002884           1345          JSR     PRINTCLRSPOT      * print space
00002150                          1346  
00002150  0CB9 00000000 000032AC  1347          CMP.L #$0,DR 
0000215A  6700 0058               1348          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000215E                          1349       
0000215E                          1350          *******PRINT LSL*******
0000215E  43F9 00003246           1351          LEA       PLSL,A1
00002164  103C 000E               1352          MOVE.B   #14,D0     ; moves #14 into data register D0
00002168  4E4F                    1353          TRAP     #15 
0000216A  4EB9 0000282C           1354          JSR      SIZESPLIT
00002170                          1355          
00002170  4EB9 00002884           1356          JSR     PRINTCLRSPOT
00002176                          1357          
00002176  4242                    1358          CLR D2
00002178  4243                    1359          CLR D3
0000217A  143C 0000               1360          MOVE.B  #%000,D2     ; mode data register
0000217E  1639 000032BC           1361          MOVE.B  sRN,D3       ; source register number
00002184  4EB9 00002BF2           1362          JSR     EA_START
0000218A  4EB9 00002892           1363          JSR     PRINTCOMA   ; print coma
00002190  4243                    1364          CLR D3
00002192  4242                    1365          CLR D2
00002194  143C 0000               1366          MOVE.B  #%000,D2      ; mode data register
00002198  1639 000032BD           1367          MOVE.B  dRN,D3        ; destination register
0000219E  4EB9 00002BF2           1368          JSR     EA_START
000021A4                          1369          
000021A4  43F9 000031EA           1370          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000021AA  103C 000E               1371          MOVE.B   #14,D0     ; moves #14 into data register D0
000021AE  4E4F                    1372          TRAP     #15       ; Displays message via trap 14
000021B0                          1373          
000021B0  6000 F0F6               1374          BRA   MEMORYGRABBER
000021B4                          1375          
000021B4                          1376  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
000021B4  43F9 0000324A           1377           LEA       PLSR,A1
000021BA  103C 000E               1378           MOVE.B   #14,D0     ; moves #14 into data register D0
000021BE  4E4F                    1379          TRAP     #15 
000021C0  4EB9 0000282C           1380          JSR      SIZESPLIT
000021C6                          1381          
000021C6  4EB9 00002884           1382          JSR     PRINTCLRSPOT
000021CC                          1383          
000021CC  4242                    1384          CLR D2
000021CE  4243                    1385          CLR D3
000021D0  143C 0000               1386          MOVE.B  #%000,D2     ; mode data register
000021D4  1639 000032BC           1387          MOVE.B  sRN,D3       ; source register number
000021DA  4EB9 00002BF2           1388          JSR     EA_START
000021E0  4EB9 00002892           1389          JSR     PRINTCOMA   ; print coma
000021E6  4243                    1390          CLR D3
000021E8  4242                    1391          CLR D2
000021EA  143C 0000               1392          MOVE.B  #%000,D2      ; mode data register
000021EE  1639 000032BD           1393          MOVE.B  dRN,D3        ; destination register
000021F4  4EB9 00002BF2           1394          JSR     EA_START
000021FA                          1395          
000021FA  43F9 000031EA           1396          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002200  103C 000E               1397          MOVE.B   #14,D0     ; moves #14 into data register D0
00002204  4E4F                    1398          TRAP     #15       ; Displays message via trap 14
00002206                          1399          
00002206  6000 F0A0               1400          BRA   MEMORYGRABBER
0000220A                          1401  
0000220A                          1402  
0000220A                          1403  PR_G_RO_EA
0000220A  4EB9 00002884           1404          JSR     PRINTCLRSPOT      * print space 
00002210                          1405          
00002210  0CB9 00000000 000032AC  1406           CMP.L #$0,DR 
0000221A  6700 0058               1407          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000221E                          1408       
0000221E                          1409          *******PRINT LSL*******
0000221E  43F9 00003256           1410          LEA       PROL,A1
00002224  103C 000E               1411          MOVE.B   #14,D0     ; moves #14 into data register D0
00002228  4E4F                    1412          TRAP     #15 
0000222A  4EB9 0000282C           1413          JSR      SIZESPLIT
00002230                          1414          
00002230  4EB9 00002884           1415          JSR     PRINTCLRSPOT
00002236                          1416          
00002236  4242                    1417          CLR D2
00002238  4243                    1418          CLR D3
0000223A  143C 0000               1419          MOVE.B  #%000,D2     ; mode data register
0000223E  1639 000032BC           1420          MOVE.B  sRN,D3       ; source register number
00002244  4EB9 00002BF2           1421          JSR     EA_START
0000224A  4EB9 00002892           1422          JSR     PRINTCOMA   ; print coma
00002250  4243                    1423          CLR D3
00002252  4242                    1424          CLR D2
00002254  143C 0000               1425          MOVE.B  #%000,D2      ; mode data register
00002258  1639 000032BD           1426          MOVE.B  dRN,D3        ; destination register
0000225E  4EB9 00002BF2           1427          JSR     EA_START
00002264                          1428          
00002264  43F9 000031EA           1429          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000226A  103C 000E               1430          MOVE.B   #14,D0     ; moves #14 into data register D0
0000226E  4E4F                    1431          TRAP     #15       ; Displays message via trap 14
00002270                          1432          
00002270  6000 F036               1433          BRA   MEMORYGRABBER
00002274                          1434  
00002274                          1435          
00002274                          1436  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
00002274  43F9 0000325A           1437          LEA       PROR,A1
0000227A  103C 000E               1438          MOVE.B   #14,D0     ; moves #14 into data register D0
0000227E  4E4F                    1439          TRAP     #15 
00002280  4EB9 0000282C           1440          JSR      SIZESPLIT
00002286                          1441          
00002286  4EB9 00002884           1442          JSR     PRINTCLRSPOT
0000228C                          1443          
0000228C  4242                    1444          CLR D2
0000228E  4243                    1445          CLR D3
00002290  143C 0000               1446          MOVE.B  #%000,D2     ; mode data register
00002294  1639 000032BC           1447          MOVE.B  sRN,D3       ; source register number
0000229A  4EB9 00002BF2           1448          JSR     EA_START
000022A0  4EB9 00002892           1449          JSR     PRINTCOMA   ; print coma
000022A6  4243                    1450          CLR D3
000022A8  4242                    1451          CLR D2
000022AA  143C 0000               1452          MOVE.B  #%000,D2      ; mode data register
000022AE  1639 000032BD           1453          MOVE.B  dRN,D3        ; destination register
000022B4  4EB9 00002BF2           1454          JSR     EA_START
000022BA                          1455          
000022BA  43F9 000031EA           1456          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000022C0  103C 000E               1457          MOVE.B   #14,D0     ; moves #14 into data register D0
000022C4  4E4F                    1458          TRAP     #15       ; Displays message via trap 14
000022C6                          1459          
000022C6  6000 EFE0               1460          BRA   MEMORYGRABBER
000022CA                          1461  
000022CA                          1462  PR_RO 
000022CA  4EB9 00002884           1463       JSR     PRINTCLRSPOT      * print space
000022D0                          1464   
000022D0  0CB9 00000000 000032AC  1465       CMP.L #$0,DR 
000022DA  6700 01D8               1466       BEQ   PR_ROR   ;RIGHT SHIFT
000022DE                          1467      
000022DE                          1468      *******PRINT ASL*******
000022DE  43F9 00003256           1469       LEA       PROL,A1
000022E4  103C 000E               1470       MOVE.B   #14,D0     ; moves #14 into data register D0
000022E8  4E4F                    1471       TRAP     #15 
000022EA                          1472  
000022EA  4EB9 0000282C           1473       JSR      SIZESPLIT
000022F0                          1474      
000022F0  4EB9 00002884           1475       JSR     PRINTCLRSPOT
000022F6  4EB9 000028A0           1476      JSR     PRINTHASH   * print hash
000022FC                          1477  
000022FC                          1478      
000022FC  4241                    1479      CLR D1
000022FE  1239 000032B8           1480      MOVE.B   S_COUNT,D1
00002304  103C 0003               1481      MOVE.B   #3,D0
00002308  4E4F                    1482      TRAP     #15
0000230A  4EB9 00002892           1483      JSR     PRINTCOMA   ; print coma
00002310  4243                    1484      CLR D3
00002312  4242                    1485      CLR D2
00002314  143C 0000               1486      MOVE.B  #%000,D2
00002318  1639 000032BD           1487      MOVE.B  dRN,D3
0000231E  4EB9 00002BF2           1488      JSR     EA_START
00002324                          1489      
00002324  43F9 000031EA           1490      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000232A  103C 000E               1491      MOVE.B   #14,D0     ; moves #14 into data register D0
0000232E  4E4F                    1492      TRAP     #15       ; Displays message via trap 14
00002330                          1493  
00002330                          1494      
00002330  6000 EF76               1495      BRA    MEMORYGRABBER
00002334                          1496  
00002334                          1497  
00002334                          1498  
00002334                          1499  PR_AS 
00002334  4EB9 00002884           1500       JSR     PRINTCLRSPOT      * print space
0000233A                          1501  
0000233A  0CB9 00000000 000032AC  1502       CMP.L #$0,DR 
00002344  6700 0118               1503      BEQ   PR_ASR   ;RIGHT SHIFT
00002348                          1504      
00002348                          1505      *******PRINT ASL*******
00002348  43F9 00003252           1506       LEA       PASL,A1
0000234E  103C 000E               1507       MOVE.B   #14,D0     ; moves #14 into data register D0
00002352  4E4F                    1508       TRAP     #15 
00002354                          1509  
00002354  4EB9 0000282C           1510      JSR      SIZESPLIT
0000235A                          1511      
0000235A  4EB9 00002884           1512      JSR     PRINTCLRSPOT
00002360  4EB9 000028A0           1513      JSR     PRINTHASH   ; print hash
00002366                          1514      
00002366  4241                    1515      CLR D1
00002368  1239 000032B8           1516      MOVE.B   S_COUNT,D1
0000236E  103C 0003               1517      MOVE.B   #3,D0
00002372  4E4F                    1518      TRAP     #15
00002374  4EB9 00002892           1519      JSR     PRINTCOMA   ; print coma
0000237A  4243                    1520      CLR D3
0000237C  4242                    1521      CLR D2
0000237E  143C 0000               1522      MOVE.B  #%000,D2
00002382  1639 000032BD           1523      MOVE.B  dRN,D3
00002388  4EB9 00002BF2           1524      JSR     EA_START
0000238E                          1525      
0000238E  43F9 000031EA           1526      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002394  103C 000E               1527      MOVE.B   #14,D0     ; moves #14 into data register D0
00002398  4E4F                    1528      TRAP     #15       ; Displays message via trap 14
0000239A                          1529  
0000239A  6000 EF0C               1530      BRA    MEMORYGRABBER
0000239E                          1531  
0000239E                          1532                        
0000239E                          1533                          
0000239E                          1534  PR_LS 
0000239E  4EB9 00002884           1535      JSR     PRINTCLRSPOT      * print space
000023A4                          1536  
000023A4  0CB9 00000000 000032AC  1537      CMP.L #$0,DR 
000023AE  6700 0058               1538      BEQ   PR_LSR   ;RIGHT SHIFT
000023B2                          1539      
000023B2                          1540      *******PRINT LSL*******
000023B2  43F9 00003246           1541       LEA       PLSL,A1
000023B8  103C 000E               1542       MOVE.B   #14,D0     ; moves #14 into data register D0
000023BC  4E4F                    1543       TRAP     #15 
000023BE                          1544  
000023BE  4EB9 0000282C           1545      JSR      SIZESPLIT
000023C4                          1546      
000023C4  4EB9 00002884           1547      JSR     PRINTCLRSPOT
000023CA  4EB9 000028A0           1548      JSR     PRINTHASH   ; print hash
000023D0                          1549      
000023D0  4241                    1550      CLR D1
000023D2  1239 000032B8           1551      MOVE.B   S_COUNT,D1
000023D8  103C 0003               1552      MOVE.B   #3,D0
000023DC  4E4F                    1553      TRAP     #15
000023DE  4EB9 00002892           1554      JSR     PRINTCOMA   ; print coma
000023E4  4243                    1555      CLR D3
000023E6  4242                    1556      CLR D2
000023E8  143C 0000               1557      MOVE.B  #%000,D2
000023EC  1639 000032BD           1558      MOVE.B  dRN,D3
000023F2  4EB9 00002BF2           1559      JSR     EA_START
000023F8                          1560      
000023F8  43F9 000031EA           1561      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000023FE  103C 000E               1562      MOVE.B   #14,D0     ; moves #14 into data register D0
00002402  4E4F                    1563      TRAP     #15       ; Displays message via trap 14
00002404                          1564  
00002404                          1565      
00002404  6000 EEA2               1566      BRA    MEMORYGRABBER
00002408                          1567            
00002408  43F9 0000324A           1568  PR_LSR LEA   PLSR,A1
0000240E  103C 000E               1569        MOVE.B   #14,D0     ; moves #14 into data register D0
00002412  4E4F                    1570        TRAP     #15       ; Displays message via trap 14 
00002414  4EB9 0000282C           1571        JSR      SIZESPLIT
0000241A                          1572        
0000241A  4EB9 00002884           1573        JSR     PRINTCLRSPOT
00002420  4EB9 000028A0           1574        JSR     PRINTHASH   ; print hash
00002426                          1575        
00002426  4241                    1576        CLR D1
00002428  1239 000032B8           1577        MOVE.B   S_COUNT,D1
0000242E  103C 0003               1578        MOVE.B   #3,D0
00002432  4E4F                    1579        TRAP     #15
00002434  4EB9 00002892           1580        JSR     PRINTCOMA   ; print coma
0000243A  4243                    1581        CLR D3
0000243C  4242                    1582        CLR D2
0000243E  143C 0000               1583        MOVE.B #%000,D2
00002442  1639 000032BD           1584        MOVE.B  dRN,D3
00002448  4EB9 00002BF2           1585        JSR   EA_START
0000244E                          1586        
0000244E  43F9 000031EA           1587        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002454  103C 000E               1588        MOVE.B   #14,D0     ; moves #14 into data register D0
00002458  4E4F                    1589        TRAP     #15       ; Displays message via trap 14
0000245A                          1590  
0000245A                          1591        
0000245A  6000 EE4C               1592        BRA MEMORYGRABBER
0000245E                          1593        
0000245E  43F9 0000324E           1594  PR_ASR LEA   PASR,A1
00002464  103C 000E               1595         MOVE.B   #14,D0     ; moves #14 into data register D0
00002468  4E4F                    1596        TRAP     #15       ; Displays message via trap 14 
0000246A  4EB9 0000282C           1597        JSR      SIZESPLIT
00002470                          1598        
00002470  4EB9 00002884           1599        JSR     PRINTCLRSPOT
00002476  4EB9 000028A0           1600        JSR     PRINTHASH   ; print hash
0000247C                          1601        
0000247C  4241                    1602        CLR D1
0000247E  1239 000032B8           1603        MOVE.B   S_COUNT,D1
00002484  103C 0003               1604        MOVE.B   #3,D0
00002488  4E4F                    1605        TRAP     #15
0000248A  4EB9 00002892           1606        JSR     PRINTCOMA   ; print coma
00002490  4243                    1607        CLR D3
00002492  4242                    1608        CLR D2
00002494  143C 0000               1609        MOVE.B #%000,D2
00002498  1639 000032BD           1610        MOVE.B  dRN,D3
0000249E  4EB9 00002BF2           1611        JSR   EA_START
000024A4                          1612        
000024A4  43F9 000031EA           1613        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000024AA  103C 000E               1614        MOVE.B   #14,D0     ; moves #14 into data register D0
000024AE  4E4F                    1615        TRAP     #15       ; Displays message via trap 14
000024B0                          1616  
000024B0  6000 EDF6               1617        BRA MEMORYGRABBER
000024B4                          1618  
000024B4                          1619        
000024B4  43F9 0000325A           1620  PR_ROR LEA   PROR,A1
000024BA  103C 000E               1621        MOVE.B   #14,D0     ; moves #14 into data register D0
000024BE  4E4F                    1622        TRAP     #15       ; Displays message via trap 14 
000024C0  4EB9 0000282C           1623        JSR      SIZESPLIT
000024C6                          1624        
000024C6  4EB9 00002884           1625        JSR     PRINTCLRSPOT
000024CC  4EB9 000028A0           1626        JSR     PRINTHASH   ; print hash
000024D2                          1627        
000024D2  4241                    1628        CLR D1
000024D4  1239 000032B8           1629        MOVE.B   S_COUNT,D1
000024DA  103C 0003               1630        MOVE.B   #3,D0
000024DE  4E4F                    1631        TRAP     #15
000024E0  4EB9 00002892           1632        JSR     PRINTCOMA   ; print coma
000024E6  4243                    1633        CLR D3
000024E8  4242                    1634        CLR D2
000024EA  143C 0000               1635        MOVE.B #%000,D2
000024EE  1639 000032BD           1636        MOVE.B  dRN,D3
000024F4  4EB9 00002BF2           1637        JSR   EA_START
000024FA                          1638        
000024FA  43F9 000031EA           1639        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002500  103C 000E               1640        MOVE.B   #14,D0     ; moves #14 into data register D0
00002504  4E4F                    1641        TRAP     #15       ; Displays message via trap 14
00002506                          1642  
00002506                          1643        
00002506  6000 EDA0               1644        BRA MEMORYGRABBER
0000250A                          1645        
0000250A                          1646  ;-----------------------extra parts for above code to function
0000250A                          1647  
0000250A                          1648  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
0000250A  0C39 0000 000032B8      1649           CMP.B #$0,S_COUNT
00002512  6700 0004               1650           BEQ   IS_EIGHT
00002516  4E75                    1651           RTS
00002518                          1652           
00002518  13FC 0008 000032B8      1653  IS_EIGHT  MOVE.B #8,S_COUNT
00002520  4E75                    1654            RTS
00002522                          1655  
00002522                          1656  ;---------------------------------------------------------
00002522                          1657                  ;MOVE SECTION
00002522  43F9 000031F0           1658  PRINTMOVE LEA PMOVE,A1
00002528  103C 000E               1659      MOVE.B   #14,D0     ; moves #14 into data register D0
0000252C  4E4F                    1660      TRAP     #15       ; Displays message via trap 14
0000252E  4EB9 0000282C           1661      JSR     SIZESPLIT
00002534  6000 0384               1662      BRA EADN
00002538                          1663      
00002538  43F9 000031FC           1664  PRINTMOVEA LEA PMOVEA,A1
0000253E  103C 000E               1665      MOVE.B   #14,D0     ; moves #14 into data register D0
00002542  4E4F                    1666      TRAP     #15       ; Displays message via trap 14
00002544  4EB9 0000282C           1667      JSR     SIZESPLIT
0000254A  6000 036E               1668      BRA EADN
0000254E                          1669      
0000254E                          1670                      ;First set of commands
0000254E  43F9 00003209           1671  PRINTNOP    LEA PNOP,A1
00002554  103C 000E               1672      MOVE.B   #14,D0     ; moves #14 into data register D0
00002558  4E4F                    1673      TRAP     #15       ; Displays message via trap 14
0000255A                          1674      
0000255A  6000 ED4C               1675      BRA     MEMORYGRABBER
0000255E                          1676  
0000255E  43F9 000031F5           1677  PRINTMOVEM  LEA PMOVEM,A1
00002564  103C 000E               1678      MOVE.B   #14,D0     ; moves #14 into data register D0
00002568  4E4F                    1679      TRAP     #15       ; Displays message via trap 14
0000256A  4EB9 0000282C           1680      JSR     SIZESPLIT
00002570  6000 0348               1681      BRA EADN
00002574                          1682  
00002574  43F9 0000320D           1683  PRINTLEA    LEA PLEA,A1
0000257A  103C 000E               1684      MOVE.B   #14,D0     ; moves #14 into data register D0
0000257E  4E4F                    1685      TRAP     #15       ; Displays message via trap 14
00002580  4EB9 0000282C           1686      JSR     SIZESPLIT
00002586  6000 0332               1687      BRA EADN
0000258A                          1688  
0000258A  43F9 00003211           1689  PRINTNOT    LEA PNOT,A1
00002590  103C 000E               1690      MOVE.B   #14,D0     ; moves #14 into data register D0
00002594  4E4F                    1691      TRAP     #15       ; Displays message via trap 14
00002596  4EB9 0000282C           1692      JSR     SIZESPLIT
0000259C  6000 031C               1693      BRA EADN
000025A0                          1694  
000025A0  43F9 00003215           1695  PRINTJSR    LEA PJSR,A1
000025A6  103C 000E               1696      MOVE.B   #14,D0     ; moves #14 into data register D0
000025AA  4E4F                    1697      TRAP     #15       ; Displays message via trap 14
000025AC  4EB9 0000282C           1698      JSR     SIZESPLIT
000025B2  6000 0306               1699      BRA EADN
000025B6                          1700  
000025B6  43F9 00003219           1701  PRINTRTS    LEA PRTS,A1
000025BC  103C 000E               1702      MOVE.B   #14,D0     ; moves #14 into data register D0
000025C0  4E4F                    1703      TRAP     #15       ; Displays message via trap 14
000025C2                          1704      
000025C2  6000 ECE4               1705      BRA     MEMORYGRABBER
000025C6                          1706      
000025C6                          1707                  ;ADDQ SECTION
000025C6                          1708  PRINTADDQ 
000025C6  43F9 00003241           1709      LEA     PADDQ,A1
000025CC  103C 000E               1710      MOVE.B  #14,D0     ; moves #14 into data register D0
000025D0  4E4F                    1711      TRAP    #15       ; Displays message via trap 14
000025D2  4EB9 0000282C           1712      JSR     SIZESPLIT
000025D8                          1713      
000025D8  4EB9 00002884           1714      JSR     PRINTCLRSPOT 
000025DE  4EB9 000028A0           1715      JSR     PRINTHASH   ; print hash
000025E4  4EB9 000028AC           1716      JSR     PRINTDOLLARSIGN     ; print dollar sign
000025EA                          1717      
000025EA  4241                    1718      CLR     D1
000025EC  1239 0000328C           1719      MOVE.B  DATA_FIELD,D1
000025F2  103C 0003               1720      MOVE.B  #3,D0     
000025F6  4E4F                    1721      TRAP    #15 
000025F8                          1722      
000025F8  4EB9 00002892           1723      JSR     PRINTCOMA   ; print coma
000025FE                          1724      
000025FE  4243                    1725      CLR     D3
00002600  4242                    1726      CLR     D2
00002602  1439 00003287           1727      MOVE.B  DEST_MODE,D2
00002608  1639 00003286           1728      MOVE.B  DEST_REG,D3
0000260E                          1729      
0000260E  4EB9 00002BF2           1730      JSR     EA_START
00002614                          1731      
00002614  43F9 000031EA           1732      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
0000261A  103C 000E               1733      MOVE.B  #14,D0     ; moves #14 into data register D0
0000261E  4E4F                    1734      TRAP    #15       ; Displays message via trap 14
00002620                          1735      
00002620  6000 EC86               1736     BRA      MEMORYGRABBER
00002624                          1737  
00002624                          1738                  ;SECOND SET OF COMMANDS
00002624  43F9 0000321D           1739  PRINTBGT LEA PBGT,A1
0000262A  103C 000E               1740      MOVE.B   #14,D0     ; moves #14 into data register D0
0000262E  4E4F                    1741      TRAP     #15       ; Displays message via trap 14
00002630  4EB9 0000282C           1742      JSR SIZESPLIT
00002636  6000 0282               1743      BRA EADN
0000263A                          1744  
0000263A  43F9 00003221           1745  PRINTBEQ LEA PBEQ,A1
00002640  103C 000E               1746      MOVE.B   #14,D0     ; moves #14 into data register D0
00002644  4E4F                    1747      TRAP     #15       ; Displays message via trap 14
00002646  4EB9 0000282C           1748      JSR SIZESPLIT
0000264C  6000 026C               1749      BRA EADN
00002650                          1750  
00002650  43F9 00003225           1751  PRINTBLE LEA PBLE,A1
00002656  103C 000E               1752      MOVE.B   #14,D0     ; moves #14 into data register D0
0000265A  4E4F                    1753      TRAP     #15       ; Displays message via trap 14
0000265C  4EB9 0000282C           1754      JSR SIZESPLIT
00002662  6000 0256               1755      BRA EADN
00002666                          1756  
00002666  43F9 00003229           1757  PRINTBRA LEA PBRA,A1
0000266C  103C 000E               1758      MOVE.B   #14,D0     ; moves #14 into data register D0
00002670  4E4F                    1759      TRAP     #15       ; Displays message via trap 14
00002672  4EB9 0000282C           1760      JSR SIZESPLIT
00002678  6000 0240               1761      BRA EADN
0000267C                          1762      
0000267C                          1763                  ;MOVEQ SECTION
0000267C                          1764  PRINTMOVEQ 
0000267C  43F9 00003202           1765      LEA PMOVEQ,A1
00002682  103C 000E               1766      MOVE.B   #14,D0     ; moves #14 into data register D0
00002686  4E4F                    1767      TRAP     #15       ; Displays message via trap 14
00002688                          1768      
00002688  4EB9 00002884           1769      JSR     PRINTCLRSPOT
0000268E  4EB9 000028A0           1770      JSR     PRINTHASH   ; print hash
00002694  4EB9 000028AC           1771      JSR     PRINTDOLLARSIGN     ; print dollar sign  
0000269A                          1772   
0000269A  2239 0000328C           1773      MOVE.L      DATA_FIELD,D1
000026A0  143C 0010               1774      MOVE.B      #16,D2
000026A4  103C 000F               1775      MOVE.B      #15,D0     ; moves #14 into data register D0
000026A8  4E4F                    1776      TRAP        #15 
000026AA                          1777      
000026AA  4EB9 00002892           1778      JSR     PRINTCOMA   ; print coma
000026B0  1E3C 0000               1779      MOVE.B #0,D7
000026B4  7400                    1780      MOVE.L #%000,D2
000026B6  1639 00003286           1781      MOVE.B DEST_REG,D3
000026BC  6000 01FC               1782      BRA EADN
000026C0                          1783  
000026C0                          1784                  ;OR SECTION
000026C0                          1785  PRINTOR 
000026C0  43F9 0000322D           1786      LEA     POR,A1
000026C6  103C 000E               1787      MOVE.B  #14,D0     ; moves #14 into data register D0
000026CA  4E4F                    1788      TRAP    #15       ; Displays message via trap 14
000026CC  4EB9 0000282C           1789      JSR     SIZESPLIT
000026D2                          1790      
000026D2  4EB9 00002884           1791      JSR     PRINTCLRSPOT
000026D8  4EB9 000028A0           1792      JSR     PRINTHASH   ; print hash
000026DE  4EB9 000028AC           1793      JSR     PRINTDOLLARSIGN     ; print dollar sign   
000026E4                          1794      
000026E4                          1795      * TODO : CHECK THE INVELID_EA FLAG
000026E4                          1796      
000026E4  0C39 0000 0000329D      1797      CMP.B   #%0,XBit
000026EC  6700 0006               1798      BEQ     PRINT_EA_TO_REG
000026F0  6000 0060               1799      BRA     PRINT_REG_TO_EA
000026F4                          1800      
000026F4                          1801     * BRA EADN
000026F4                          1802  
000026F4                          1803  PRINT_EA_TO_REG
000026F4  13F9 0000328A 00003288  1804      MOVE.B  TEMP_MODE,SRC_MODE
000026FE  13F9 0000328B 00003289  1805      MOVE.B  TEMP_REG,SRC_REG
00002708  4286                    1806      CLR.L   D6
0000270A  1C39 00003289           1807      MOVE.B  SRC_REG,D6             * Set 'n' = RRRD
00002710  13F9 000032A0 000032A1  1808      MOVE.B  TempMode,SrcMode
0000271A                          1809    *TODO:  JSR     PRTSRC              * Print Source EA
0000271A                          1810      
0000271A  4243                    1811      CLR     D3
0000271C  4242                    1812      CLR     D2
0000271E  1439 00003288           1813      MOVE.B  SRC_MODE,D2
00002724  1639 00003289           1814      MOVE.B  SRC_REG,D3
0000272A                          1815  
0000272A  4EB9 00002892           1816      JSR     PRINTCOMA   ; print coma
00002730  4286                    1817      CLR.L   D6
00002732  1C39 00003286           1818      MOVE.B  DEST_REG,D6             * Set 'n' = RRRD
00002738                          1819   *TODO:   JSR     PRTDST              * Print Destination EA
00002738                          1820   
00002738  4243                    1821      CLR     D3
0000273A  4242                    1822      CLR     D2
0000273C  1439 00003287           1823      MOVE.B  DEST_MODE,D2
00002742  1639 00003286           1824      MOVE.B  DEST_REG,D3
00002748                          1825  
00002748                          1826   
00002748                          1827     * MOVE.B  #0,ListActive
00002748  13FC 0000 0000329D      1828      MOVE.B  #0,XBit
00002750  4E75                    1829      RTS
00002752                          1830      
00002752                          1831  PRINT_REG_TO_EA
00002752  4286                    1832      CLR.L   D6
00002754                          1833     * MOVE.B  RRRS,D6             * Set 'n' = RRRS
00002754                          1834     * JSR     PRTSRC              * Print Source EA
00002754                          1835  
00002754  4EB9 00002892           1836      JSR     PRINTCOMA   ; print coma
0000275A                          1837  
0000275A                          1838    *  MOVE.B  MMMT,MMMD
0000275A                          1839    *  MOVE.B  RRRT,RRRD
0000275A  4286                    1840      CLR.L   D6
0000275C                          1841    *  MOVE.B  RRRD,D6             * Set 'n' = RRRD
0000275C  13F9 000032A0 0000329F  1842      MOVE.B  TempMode,DstMode
00002766                          1843    *  JSR     PRTDST              * Print Destination EA
00002766                          1844    *  MOVE.B  #0,ListActive
00002766  13FC 0000 0000329D      1845      MOVE.B  #0,XBit
0000276E  4E75                    1846      RTS
00002770                          1847  
00002770                          1848                  ;SUB SECTION
00002770  43F9 00003230           1849  PRINTSUB LEA PSUB,A1
00002776  103C 000E               1850      MOVE.B   #14,D0     ; moves #14 into data register D0
0000277A  4E4F                    1851      TRAP     #15       ; Displays message via trap 14
0000277C  4EB9 0000282C           1852      JSR SIZESPLIT
00002782  6000 0136               1853      BRA EADN
00002786                          1854  
00002786                          1855                  ;AND SECTION
00002786  43F9 00003234           1856  PRINTAND LEA PAND,A1
0000278C  103C 000E               1857      MOVE.B   #14,D0     ; moves #14 into data register D0
00002790  4E4F                    1858      TRAP     #15       ; Displays message via trap 14
00002792  4EB9 0000282C           1859      JSR SIZESPLIT
00002798  6000 0120               1860      BRA EADN
0000279C                          1861  
0000279C                          1862                  ;ADD SPLIT              
0000279C  43F9 00003238           1863  PRINTADD LEA PADD,A1
000027A2  103C 000E               1864      MOVE.B   #14,D0     ; moves #14 into data register D0
000027A6  4E4F                    1865      TRAP     #15       ; Displays message via trap 14
000027A8  4EB9 0000282C           1866      JSR     SIZESPLIT
000027AE  6000 010A               1867      BRA EADN
000027B2                          1868      
000027B2  43F9 0000323C           1869  PRINTADDA LEA PADDA,A1
000027B8  103C 000E               1870      MOVE.B   #14,D0     ; moves #14 into data register D0
000027BC  4E4F                    1871      TRAP     #15       ; Displays message via trap 14
000027BE  4EB9 0000282C           1872      JSR     SIZESPLIT
000027C4  6000 00F4               1873      BRA EADN
000027C8                          1874      
000027C8                          1875                  ;THIRD ROTATE SPLIT   
000027C8                          1876  PRINTROTATESPLIT 
000027C8  0C79 0000 000031EF      1877      CMP #0,CommandDetail   
000027D0                          1878      *BEQ PRINTLSL
000027D0  0C79 0001 000031EF      1879      CMP #1,CommandDetail   
000027D8                          1880      *BEQ PRINTLSLDOUBLE
000027D8  0C79 0002 000031EF      1881      CMP #2,CommandDetail   
000027E0                          1882      *BEQ PRINTLSR
000027E0  0C79 0003 000031EF      1883      CMP #3,CommandDetail   
000027E8                          1884      *BEQ PRINTLSRDOUBLE
000027E8  0C79 0004 000031EF      1885      CMP #4,CommandDetail   
000027F0                          1886      *BEQ PRINTASR
000027F0  0C79 0005 000031EF      1887      CMP #5,CommandDetail   
000027F8                          1888      *BEQ PRINTASRDOUBLE
000027F8  0C79 0006 000031EF      1889      CMP #6,CommandDetail   
00002800                          1890      *BEQ PRINTASL
00002800  0C79 0007 000031EF      1891      CMP #7,CommandDetail   
00002808                          1892      *BEQ PRINTASLDOUBLE
00002808  0C79 0008 000031EF      1893      CMP #8,CommandDetail   
00002810                          1894      *BEQ PRINTROL
00002810  0C79 0009 000031EF      1895      CMP #9,CommandDetail   
00002818                          1896      *BEQ PRINTROLDOUBLE
00002818  0C79 000A 000031EF      1897      CMP #10,CommandDetail
00002820                          1898      *BEQ PRINTROR     
00002820  0C79 000B 000031EF      1899      CMP #11,CommandDetail
00002828                          1900      *BEQ PRINTRORDOUBLE            
00002828  6000 EA7E               1901      BRA MEMORYGRABBER    
0000282C                          1902  
0000282C                          1903  
0000282C                          1904                  ;SIZE PRINTER
0000282C                          1905  SIZESPLIT   
0000282C  0CB9 00000001 00003276  1906      CMP.L #1,SizeValue
00002836  6700 003E               1907      BEQ PRINTB
0000283A  0CB9 00000002 00003276  1908      CMP.L #2,SizeValue
00002844  6700 0022               1909      BEQ PRINTW
00002848  0CB9 00000003 00003276  1910      CMP.L #3,SizeValue
00002852  6700 0006               1911      BEQ PRINTL
00002856  6000 002C               1912      BRA PRINTCLRSPOT ; go to EA/DN section
0000285A                          1913      
0000285A  43F9 00003282           1914  PRINTL LEA PL,A1
00002860  103C 000E               1915      MOVE.B   #14,D0     ; moves #14 into data register D0
00002864  4E4F                    1916      TRAP     #15       ; Displays message via trap 14
00002866  4E75                    1917      RTS
00002868                          1918  
00002868  43F9 0000327E           1919  PRINTW      LEA PW,A1
0000286E  103C 000E               1920      MOVE.B   #14,D0     ; moves #14 into data register D0
00002872  4E4F                    1921      TRAP     #15       ; Displays message via trap 14
00002874  4E75                    1922      RTS
00002876                          1923  
00002876  43F9 0000327A           1924  PRINTB  LEA PB,A1
0000287C  103C 000E               1925      MOVE.B   #14,D0     ; moves #14 into data register D0
00002880  4E4F                    1926      TRAP     #15       ; Displays message via trap 14
00002882  4E75                    1927      RTS
00002884                          1928      
00002884                          1929  PRINTCLRSPOT 
00002884  43F9 00003294           1930      LEA CLRSPOT,A1
0000288A  103C 000E               1931      MOVE.B   #14,D0     ; moves #14 into data register D0
0000288E  4E4F                    1932      TRAP     #15       ; Displays message via trap 14
00002890  4E75                    1933      RTS
00002892                          1934  
00002892                          1935  PRINTCOMA   
00002892  43F9 0000329A           1936      LEA     COMA,A1
00002898  103C 000E               1937      MOVE.B  #14,D0     
0000289C  4E4F                    1938      TRAP    #15
0000289E  4E75                    1939      RTS
000028A0                          1940  
000028A0                          1941  PRINTHASH 
000028A0  43F9 00003292           1942      LEA     HASH,A1    * print hash
000028A6  700E                    1943      MOVEQ   #14,D0
000028A8  4E4F                    1944      TRAP    #15
000028AA  4E75                    1945      RTS
000028AC                          1946  
000028AC                          1947  PRINTDOLLARSIGN   
000028AC  43F9 00003298           1948      LEA     DOLLARSIGN,A1   * print dollar sign
000028B2  103C 000E               1949      MOVE.B   #14,D0
000028B6  4E4F                    1950      TRAP     #15 
000028B8  4E75                    1951      RTS
000028BA                          1952  
000028BA                          1953                  ;PRINT EA/DN
000028BA                          1954  EADN 
000028BA  BE3C 0000               1955      CMP.B   #0,D7
000028BE  6700 0048               1956      BEQ     PRINTNOTRAIL
000028C2  BE3C 0001               1957      CMP.B   #1,D7
000028C6  6700 000E               1958      BEQ     PRINTONETRAIL 
000028CA  BE3C 0002               1959      CMP.B   #2,D7
000028CE  6700 001C               1960      BEQ     PRINTTWOTRAIL
000028D2                          1961      
000028D2  6000 E9D4               1962      BRA     MEMORYGRABBER
000028D6                          1963      
000028D6                          1964  PRINTONETRAIL 
000028D6  4EB9 00002BF2           1965      JSR EA_Start
000028DC  43F9 000031EA           1966      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000028E2  103C 000E               1967      MOVE.B   #14,D0     ; moves #14 into data register D0
000028E6  4E4F                    1968      TRAP     #15       ; Displays message via trap 14
000028E8  6000 E9BE               1969      BRA MEMORYGRABBER
000028EC                          1970  
000028EC                          1971  PRINTTWOTRAIL 
000028EC  4EB9 00002BF2           1972      JSR EA_Start
000028F2  4EB9 00002BF2           1973      JSR EA_Start
000028F8  43F9 000031EA           1974      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000028FE  103C 000E               1975      MOVE.B   #14,D0     ; moves #14 into data register D0
00002902  4E4F                    1976      TRAP     #15       ; Displays message via trap 14
00002904  6000 E9A2               1977      BRA MEMORYGRABBER
00002908                          1978      
00002908                          1979  PRINTNOTRAIL 
00002908  4EB9 00002BF2           1980      JSR EA_Start
0000290E  43F9 000031EA           1981      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002914  103C 000E               1982      MOVE.B   #14,D0     ; moves #14 into data register D0
00002918  4E4F                    1983      TRAP     #15       ; Displays message via trap 14
0000291A  6000 E98C               1984      BRA MEMORYGRABBER
0000291E                          1985  
0000291E                          1986  CLOSINGSTATEMENTS     
0000291E  43F9 000031EA           1987      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002924  103C 000E               1988      MOVE.B   #14,D0     ; moves #14 into data register D0
00002928  4E4F                    1989      TRAP     #15       ; Displays message via trap 14
0000292A                          1990     
0000292A                          1991  STOP    
0000292A  103C 0009               1992      MOVE.B #9,D0        ; moves #9 into data register D0
0000292E  4E4F                    1993      TRAP     #15       ; halt simulator via trap 9   
00002930                          1994      
00002930                          1995  ;----------------------------- ADDED THIS FOR OP CODE PART 
00002930                          1996  ********* CHECK DESTINATION ***********
00002930                          1997  CHECK_DESTINATION
00002930  13FC 000F 0000329F      1998      MOVE.B  #$F,DstMode
00002938                          1999      
00002938  0C39 0007 00003287      2000      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
00002940  6700 0026               2001      BEQ     CHECK_DEST_REG             * Checks registers
00002944                          2002      
00002944  0C39 0005 00003287      2003      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
0000294C  6700 0058               2004      BEQ     R_CHECK_DEST    * Print DATA instead 
00002950                          2005      
00002950  0C39 0006 00003287      2006      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002958  6700 004C               2007      BEQ     R_CHECK_DEST    * Print DATA instead
0000295C                          2008      
0000295C  13F9 00003287 0000329F  2009      MOVE.B  DEST_MODE,DstMode
00002966  4E75                    2010      RTS
00002968                          2011  CHECK_DEST_REG
00002968  0C39 0002 00003286      2012      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002970  6700 0034               2013      BEQ     R_CHECK_DEST
00002974                          2014  
00002974  0C39 0003 00003286      2015      CMP.B   #3,DEST_REG         * if DEST_REG = 011
0000297C  6700 0028               2016      BEQ     R_CHECK_DEST
00002980                          2017      
00002980  0C39 0005 00003286      2018      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002988  6C00 016C               2019      BGE     RETURN
0000298C                          2020      
0000298C  13F9 00003287 0000329F  2021      MOVE.B  DEST_MODE,DstMode
00002996  4286                    2022      CLR.L   D6
00002998  1C39 00003286           2023      MOVE.B  DEST_REG,D6
0000299E  DD39 0000329F           2024      ADD.B   D6,DstMode
000029A4  4E75                    2025      RTS
000029A6                          2026  R_CHECK_DEST
000029A6  13FC 000E 0000329F      2027      MOVE.B  #$E,DstMode
000029AE  4E75                    2028      RTS
000029B0                          2029  ********* CHECK TEMP ***********
000029B0                          2030  CHECK_TEMP
000029B0                          2031  
000029B0  13FC 000F 000032A0      2032      MOVE.B  #$F,TempMode
000029B8                          2033      
000029B8  0C39 0007 0000328A      2034      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
000029C0  6700 0026               2035      BEQ     CHECK_TEMP_REG      * Checks registers
000029C4                          2036  
000029C4  0C39 0005 0000328A      2037      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
000029CC  6700 0058               2038      BEQ     R_CHECK_TEMP    * 
000029D0                          2039      
000029D0  0C39 0006 0000328A      2040      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
000029D8  6700 004C               2041      BEQ     R_CHECK_TEMP    * 
000029DC                          2042      
000029DC  13F9 0000328A 000032A0  2043      MOVE.B  TEMP_MODE,TempMode
000029E6  4E75                    2044      RTS
000029E8                          2045  CHECK_TEMP_REG
000029E8  0C39 0002 0000328B      2046      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
000029F0  6700 0034               2047      BEQ     R_CHECK_TEMP
000029F4                          2048  
000029F4  0C39 0003 0000328B      2049      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
000029FC  6700 0028               2050      BEQ     R_CHECK_TEMP
00002A00                          2051      
00002A00  0C39 0005 0000328B      2052      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002A08  6700 00EC               2053      BEQ     RETURN
00002A0C                          2054      
00002A0C  13F9 0000328A 000032A0  2055      MOVE.B  TEMP_MODE,TempMode
00002A16  4286                    2056      CLR.L   D6
00002A18  1C39 0000328B           2057      MOVE.B  TEMP_REG,D6
00002A1E  DD39 000032A0           2058      ADD.B   D6,TempMode
00002A24  4E75                    2059      RTS
00002A26                          2060  R_CHECK_TEMP
00002A26  13FC 000E 000032A0      2061      MOVE.B  #$E,TempMode
00002A2E  4E75                    2062      RTS
00002A30                          2063  ******************** CHECK_SOURCE ******************** 
00002A30                          2064  CHECK_SOURCE    * TODO
00002A30  13FC 000F 000032A1      2065      MOVE.B  #$F,SrcMode
00002A38                          2066      
00002A38  0C39 0007 00003288      2067      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002A40  6700 0026               2068      BEQ     CHECK_SOURCE_REG    * Checks registers
00002A44                          2069  
00002A44  0C39 0005 00003288      2070      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
00002A4C  6700 0058               2071      BEQ     R_CHECK_SOURCE 
00002A50                          2072      
00002A50  0C39 0006 00003288      2073      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002A58  6700 004C               2074      BEQ     R_CHECK_SOURCE 
00002A5C                          2075      
00002A5C  13F9 00003288 000032A1  2076      MOVE.B  SRC_MODE,SrcMode
00002A66  4E75                    2077      RTS
00002A68                          2078  CHECK_SOURCE_REG
00002A68  0C39 0002 00003289      2079      CMP.B   #2,SRC_REG             * if RRRS = 010
00002A70  6700 0034               2080      BEQ     R_CHECK_SOURCE
00002A74                          2081  
00002A74  0C39 0003 00003289      2082      CMP.B   #3,SRC_REG          * if RRRS = 011
00002A7C  6700 0028               2083      BEQ     R_CHECK_SOURCE
00002A80                          2084      
00002A80  0C39 0005 00003289      2085      CMP.B   #5,SRC_REG      * if RRRS = 101
00002A88  6C00 006C               2086      BGE     RETURN
00002A8C                          2087      
00002A8C  13F9 00003288 000032A1  2088      MOVE.B  SRC_MODE,SrcMode
00002A96  4286                    2089      CLR.L   D6
00002A98  1C39 00003289           2090      MOVE.B  SRC_REG,D6
00002A9E  DD39 000032A1           2091      ADD.B   D6,SrcMode
00002AA4  4E75                    2092      RTS
00002AA6                          2093  R_CHECK_SOURCE
00002AA6  13FC 000E 000032A1      2094      MOVE.B  #$E,SrcMode
00002AAE  4E75                    2095      RTS
00002AB0                          2096  ******************** XBIT ********************
00002AB0                          2097  CHECK_XBIT      
00002AB0  0C39 0000 0000329D      2098      CMP.B   #%0,XBit
00002AB8  6700 0008               2099      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002ABC  6600 001E               2100      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002AC0  4E75                    2101      RTS
00002AC2                          2102  TEMP_TO_DEST
00002AC2  13F9 0000328B 00003286  2103      MOVE.B  TEMP_REG,DEST_REG
00002ACC  13F9 0000328A 00003287  2104      MOVE.B  TEMP_MODE,DEST_MODE
00002AD6  4EB8 2930               2105      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002ADA  4E75                    2106      RTS
00002ADC                          2107  TEMP_TO_SRC
00002ADC  13F9 0000328B 00003289  2108      MOVE.B  TEMP_REG,SRC_REG
00002AE6  13F9 0000328A 00003288  2109      MOVE.B  TEMP_MODE,SRC_MODE
00002AF0  4EB8 2A30               2110      JSR     CHECK_SOURCE                 
00002AF4  4E75                    2111      RTS
00002AF6                          2112    
00002AF6                          2113  ******************** OTHER COMMANDS ********************
00002AF6                          2114  RETURN
00002AF6  4E75                    2115      RTS
00002AF8                          2116  
00002AF8                          2117  FORMAT_DATA
00002AF8  0C39 0000 0000328C      2118      CMP.B   #0,DATA_FIELD
00002B00  66F4                    2119      BNE     RETURN
00002B02  13FC 0008 0000328C      2120      MOVE.B  #8,DATA_FIELD
00002B0A  4E75                    2121      RTS
00002B0C                          2122  
00002B0C                          2123  CHECK_DATA_NEG
00002B0C  BC3C 0080               2124      CMP.B   #128,D6
00002B10  6700 0004               2125      BEQ     PRINT_NEG
00002B14  4E75                    2126      RTS
00002B16                          2127      
00002B16                          2128  PRINT_NEG
00002B16  43F9 00003296           2129      LEA     NEG,A1      * print "-"
00002B1C  103C 000E               2130      MOVE.B  #14,D0
00002B20  4E4F                    2131      TRAP    #15
00002B22  4E75                    2132      RTS
00002B24                          2133  
00002B24                          2134  PRINT_DATA
00002B24  43F9 0000325E           2135      LEA     PDATA,A1
00002B2A  103C 000E               2136      MOVE.B  #14,D0
00002B2E  4E4F                    2137      TRAP    #15
00002B30                          2138      
00002B30  4EB8 2884               2139      JSR     PRINTCLRSPOT      * print space
00002B34                          2140      
00002B34                          2141      * TODO: PRINT #$
00002B34                          2142      * TODO: PRINT COMMANDDATA 
00002B34  4E75                    2143      RTS
00002B36                          2144      
00002B36                          2145  * SET SIZE FOR SIZESPLIT    
00002B36                          2146  SETSIZE1
00002B36  0C39 0000 00003291      2147      CMP.B   #%0,SIZE_BITS
00002B3E  6700 0040               2148      BEQ     SETSIZEW
00002B42  0C39 0001 00003291      2149      CMP.B   #%1,SIZE_BITS
00002B4A  6700 0040               2150      BEQ     SETSIZEL
00002B4E  4E75                    2151      RTS
00002B50                          2152  SETSIZE2
00002B50  0C39 0000 00003291      2153      CMP.B   #%00,SIZE_BITS
00002B58  6700 001A               2154      BEQ     SETSIZEB
00002B5C  0C39 0001 00003291      2155      CMP.B   #%01,SIZE_BITS
00002B64  6700 001A               2156      BEQ     SETSIZEW
00002B68  0C39 0002 00003291      2157      CMP.B   #%10,SIZE_BITS
00002B70  6700 001A               2158      BEQ     SETSIZEL
00002B74                          2159  SETSIZEB
00002B74  23FC 00000001 00003276  2160      MOVE.L  #1,SizeValue
00002B7E  4E75                    2161      RTS
00002B80                          2162  SETSIZEW
00002B80  23FC 00000002 00003276  2163      MOVE.L  #2,SizeValue 
00002B8A  4E75                    2164      RTS
00002B8C                          2165  SETSIZEL
00002B8C  23FC 00000003 00003276  2166      MOVE.L  #3,SizeValue
00002B96  4E75                    2167      RTS
00002B98                          2168      
00002B98                          2169  *SETINVEA
00002B98                          2170      *MOVE.B  #1,INVALID_EA
00002B98                          2171      *RTS     
00002B98                          2172      
00002B98                          2173  CLEARMR
00002B98  13FC 0000 00003286      2174      MOVE.B  #0,DEST_REG 
00002BA0  13FC 0000 00003287      2175      MOVE.B  #0,DEST_MODE
00002BA8  13FC 0000 00003288      2176      MOVE.B  #0,SRC_MODE
00002BB0  13FC 0000 00003289      2177      MOVE.B  #0,SRC_REG
00002BB8  13FC 0000 0000328A      2178      MOVE.B  #0,TEMP_MODE
00002BC0  13FC 0000 0000328B      2179      MOVE.B  #0,TEMP_REG 
00002BC8  13FC 0000 00003291      2180      MOVE.B  #0,SIZE_BITS
00002BD0  13FC 0000 00003276      2181      MOVE.B  #0,SizeValue
00002BD8  23FC 00000000 0000328C  2182      MOVE.L  #0,DATA_FIELD
00002BE2  7200                    2183      MOVE.L #0,D1
00002BE4  7400                    2184      MOVE.L #0,D2
00002BE6  7600                    2185      MOVE.L #0,D3
00002BE8  7800                    2186      MOVE.L #0,D4
00002BEA  7A00                    2187      MOVE.L #0,D5
00002BEC  7C00                    2188      MOVE.L #0,D6
00002BEE  7E00                    2189      MOVE.L #0,D7
00002BF0  4E75                    2190      RTS  
00002BF2                          2191  
00002BF2                          2192  *************    
00002BF2                          2193  
00002BF2                          2194  *******************************************************
00002BF2                          2195  * EA subroutine
00002BF2                          2196  * Purpose: Generate EA
00002BF2                          2197  *         Addresses used: 
00002BF2                          2198  *            D2 FOR MODE
00002BF2                          2199  *            D3 FOR REGISTER
00002BF2                          2200  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002BF2                          2201  *            D1 FOR PRINTING
00002BF2                          2202  *            A6 MIMICKS INSTRUCTION BUFFER
00002BF2                          2203  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002BF2                          2204  ***************************************************
00002BF2                          2205  
00002BF2  0C39 000F 000032A2      2206  EA_start        CMP.B      #$F,STATE
00002BFA  6700 039A               2207                  BEQ        EA_FINISH
00002BFE  4EF9 00002F98           2208                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002C04                          2209  
00002C04  B47C 0000               2210  Continue_EA     CMP.W       #MODE000,D2             
00002C08  6700 0036               2211                  BEQ         DATA_REGISTER                 
00002C0C  B47C 0001               2212                  CMP.W       #MODE001,D2               
00002C10  6700 004A               2213                  BEQ         ADDRESS_REGISTER                 
00002C14  B47C 0002               2214                  CMP.W       #MODE010,D2              
00002C18  6700 005E               2215                  BEQ         ADDRESS_REGISTER_DIRECT               
00002C1C  B47C 0003               2216                  CMP.W       #MODE011,D2              
00002C20  6700 0086               2217                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002C24  B47C 0004               2218                  CMP.W       #MODE100,D2          
00002C28  6700 00B8               2219                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002C2C  B47C 0007               2220                  CMP.W       #MODE111,D2          
00002C30  6700 00EA               2221                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002C34  13FC 0001 000032A2      2222                  MOVE.B      #BAD_FLAG,STATE               
00002C3C  6000 0358               2223                  BRA         EA_FINISH              
00002C40                          2224                  
00002C40                          2225  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002C40  123C 0044               2226                  MOVE.B   #D,D1
00002C44  103C 0006               2227                  MOVE.B  #6,D0
00002C48  4E4F                    2228                  TRAP    #15
00002C4A  0685 00000030           2229                  ADDI.L   #$30,D5
00002C50  1205                    2230                  MOVE.B   D5,D1
00002C52  103C 0006               2231                  MOVE.B  #6,D0
00002C56  4E4F                    2232                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C58  6000 033C               2233                  BRA      EA_FINISH
00002C5C                          2234                      
00002C5C                          2235  
00002C5C  123C 0041               2236  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002C60  103C 0006               2237                   MOVE.B  #6,D0
00002C64  4E4F                    2238                   TRAP    #15
00002C66  0685 00000030           2239                   ADDI.L   #$30,D5
00002C6C  1205                    2240                   MOVE.B   D5,D1
00002C6E  103C 0006               2241                   MOVE.B  #6,D0
00002C72  4E4F                    2242                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C74  6000 0320               2243                   BRA      EA_FINISH
00002C78                          2244  
00002C78                          2245                   
00002C78                          2246  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002C78  123C 0028               2247                          MOVE.B   #OPEN_PARENTHESIS,D1
00002C7C  103C 0006               2248                          MOVE.B   #6,D0
00002C80  4E4F                    2249                          TRAP     #15
00002C82  123C 0041               2250                          MOVE.B   #A,D1
00002C86  103C 0006               2251                          MOVE.B  #6,D0
00002C8A  4E4F                    2252                          TRAP    #15
00002C8C  0685 00000030           2253                          ADDI.L   #$30,D5
00002C92  1205                    2254                          MOVE.B   D5,D1
00002C94  103C 0006               2255                          MOVE.B  #6,D0
00002C98  4E4F                    2256                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C9A  123C 0029               2257                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002C9E  103C 0006               2258                          MOVE.B  #6,D0
00002CA2  4E4F                    2259                          TRAP    #15
00002CA4  6000 02F0               2260                          BRA      EA_FINISH
00002CA8                          2261  
00002CA8                          2262  
00002CA8                          2263  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002CA8  123C 0028               2264                             MOVE.B   #OPEN_PARENTHESIS,D1
00002CAC  103C 0006               2265                             MOVE.B   #6,D0
00002CB0  4E4F                    2266                             TRAP     #15
00002CB2  123C 0041               2267                             MOVE.B   #A,D1
00002CB6  103C 0006               2268                             MOVE.B  #6,D0
00002CBA  4E4F                    2269                             TRAP    #15
00002CBC  0685 00000030           2270                             ADDI.L   #$30,D5
00002CC2  1205                    2271                             MOVE.B   D5,D1
00002CC4  103C 0006               2272                             MOVE.B  #6,D0
00002CC8  4E4F                    2273                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002CCA  123C 0029               2274                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002CCE  103C 0006               2275                             MOVE.B  #6,D0
00002CD2  4E4F                    2276                             TRAP    #15
00002CD4  18FC 002B               2277                             MOVE.B   #PLUS_SIGN,(A4)+
00002CD8  103C 0006               2278                             MOVE.B  #6,D0
00002CDC  4E4F                    2279                             TRAP    #15
00002CDE  6000 02B6               2280                             BRA      EA_FINISH
00002CE2                          2281  
00002CE2                          2282  
00002CE2                          2283  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002CE2  123C 002D               2284                             MOVE.B   #MINUS_SIGN,D1
00002CE6  103C 0006               2285                             MOVE.B   #6,D0
00002CEA  4E4F                    2286                             TRAP        #15
00002CEC  123C 0028               2287                             MOVE.B   #OPEN_PARENTHESIS,D1
00002CF0  103C 0006               2288                             MOVE.B   #6,D0
00002CF4  4E4F                    2289                             TRAP     #15
00002CF6  123C 0041               2290                             MOVE.B   #A,D1
00002CFA  103C 0006               2291                             MOVE.B  #6,D0
00002CFE  4E4F                    2292                             TRAP    #15
00002D00  0685 00000030           2293                             ADDI.L   #$30,D5
00002D06  1205                    2294                             MOVE.B   D5,D1
00002D08  103C 0006               2295                             MOVE.B  #6,D0
00002D0C  4E4F                    2296                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002D0E  123C 0029               2297                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002D12  103C 0006               2298                             MOVE.B  #6,D0
00002D16  4E4F                    2299                             TRAP    #15
00002D18  6000 027C               2300                             BRA      EA_FINISH
00002D1C                          2301  
00002D1C                          2302  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002D1C  6000 0002               2303                                BRA  CONTINUE_A_I_A
00002D20                          2304                                
00002D20                          2305                                
00002D20                          2306  CONTINUE_A_I_A                
00002D20  BA3C 0004               2307                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002D24  6700 001E               2308                                BEQ         IMMIDIATE_REGISTER                
00002D28  BA3C 0000               2309                                CMP.B       #0,D5                ; WORD ADDRESSING
00002D2C  6700 0048               2310                                BEQ         WORD_ADDRESSING                
00002D30  BA3C 0001               2311                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002D34  6700 0054               2312                                BEQ         LONG_ADDRESSING              
00002D38  13FC 0001 000032A2      2313                                MOVE.B      #BAD_FLAG,STATE              
00002D40  6000 0254               2314                                BRA         EA_FINISH                * jump to end   
00002D44                          2315                                
00002D44                          2316                                
00002D44  123C 0023               2317  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002D48  103C 0006               2318                                MOVE.B #6,D0
00002D4C  4E4F                    2319                                TRAP   #15
00002D4E  0C39 0001 00003290      2320                                CMP.B #1,SIZE   ;BYTE
00002D56  6700 0046               2321                                BEQ   GETBYTE
00002D5A  0C39 0002 00003290      2322                                CMP.B #2,SIZE   ;BYTE
00002D62  6700 0044               2323                                BEQ   GETWORD
00002D66  0C39 0003 00003290      2324                                CMP.B #3,SIZE   ;BYTE
00002D6E  6700 0042               2325                                BEQ   GETLONG
00002D72  6000 003E               2326                                BRA   GETLONG
00002D76                          2327                                
00002D76                          2328  
00002D76  123C 0024               2329  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002D7A  103C 0006               2330                               MOVE.B #6,D0
00002D7E  4E4F                    2331                               TRAP  #15
00002D80  3E1E                    2332                               MOVE.W  (A6)+,D7
00002D82  6000 00BE               2333                               BRA   PRINT_WORD
00002D86  6000 020E               2334                               BRA   EA_FINISH
00002D8A                          2335  
00002D8A  123C 0024               2336  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002D8E  103C 0006               2337                               MOVE.B #6,D0
00002D92  4E4F                    2338                               TRAP  #15
00002D94  2E1E                    2339                               MOVE.L  (A6)+,D7
00002D96  6000 0128               2340                               BRA   PRINT_LONG
00002D9A  6000 01FA               2341                               BRA   EA_FINISH                            
00002D9E                          2342  
00002D9E                          2343  GETBYTE      
00002D9E  1E1E                    2344                  MOVE.B   (A6)+,D7    
00002DA0  6B00 001A               2345                  BMI     ADD_NEGATIVE
00002DA4  6000 0024               2346                  BRA     PRINT_BRANCHING
00002DA8                          2347  GETWORD                
00002DA8  3E1E                    2348                  MOVE.W   (A6)+,D7
00002DAA  6B00 0010               2349                  BMI     ADD_NEGATIVE
00002DAE  6000 001A               2350                  BRA     PRINT_BRANCHING
00002DB2                          2351  GETLONG                
00002DB2                          2352                  
00002DB2  2E1E                    2353                  MOVE.L   (A6)+,D7
00002DB4  6B00 0006               2354                  BMI     ADD_NEGATIVE
00002DB8  6000 0010               2355                  BRA     PRINT_BRANCHING
00002DBC                          2356                  
00002DBC  123C 002D               2357  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00002DC0  123C 0006               2358                  MOVE.B #6,D1
00002DC4  4E4F                    2359                  TRAP   #15
00002DC6  6000 0002               2360                  BRA    PRINT_BRANCHING
00002DCA                          2361  
00002DCA                          2362  
00002DCA  0C39 0001 00003290      2363  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002DD2  6700 001C               2364                  BEQ    PRINT_BYTE    
00002DD6  0C39 0002 00003290      2365                  CMP.B #2,SIZE   ;WORD
00002DDE  6700 0062               2366                  BEQ    PRINT_WORD
00002DE2  0C39 0003 00003290      2367                  CMP.B  #3,SIZE  ;LONG
00002DEA  6700 00D4               2368                  BEQ    PRINT_LONG
00002DEE  60DA                    2369                  BRA    PRINT_BRANCHING
00002DF0                          2370  
00002DF0                          2371  
00002DF0                          2372  
00002DF0                          2373  
00002DF0                          2374                  
00002DF0                          2375  **** BYTE DATA PRINTING***********************
00002DF0  4241                    2376  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002DF2                          2377                 
00002DF2                          2378  
00002DF2  BEBC 0000000F           2379                 CMP.L   #$F,D7              
00002DF8  6F00 0006               2380                 BLE     BYTE_ONE_LOOP                  
00002DFC  6000 000E               2381                 BRA     READ_BYTE
00002E00                          2382  
00002E00                          2383  BYTE_ONE_LOOP
00002E00  13FC 0001 000032BE      2384                  MOVE.B  #1,NUMBER_OF_HEX  
00002E08  6000 0002               2385                  BRA     READ_BYTE
00002E0C                          2386      
00002E0C                          2387  READ_BYTE                           
00002E0C  0C39 0000 000032BE      2388      CMP.B   #0,NUMBER_OF_HEX               
00002E14  6700 0014               2389      BEQ     COPYBYTE
00002E18                          2390      
00002E18  123C 0030               2391      MOVE.B  #$30,D1             
00002E1C  103C 0006               2392      MOVE.B  #6,D0               
00002E20  4E4F                    2393      TRAP    #15
00002E22                          2394  
00002E22  5339 000032BE           2395      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002E28  60E2                    2396      BRA     READ_BYTE           ; LOOP
00002E2A                          2397      
00002E2A                          2398  COPYBYTE
00002E2A  2207                    2399      MOVE.L  D7,D1               ; COPY DATA 
00002E2C  143C 0010               2400      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002E30  103C 000F               2401      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002E34  4E4F                    2402      TRAP    #15
00002E36  13FC 0000 000032BE      2403      MOVE.B  #0,NUMBER_OF_HEX
00002E3E  6000 0156               2404      BRA  EA_FINISH
00002E42                          2405  
00002E42                          2406  
00002E42                          2407  
00002E42                          2408  
00002E42                          2409  
00002E42                          2410  ******PRINT WORD DATA******************
00002E42  4241                    2411  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002E44                          2412                 
00002E44                          2413  
00002E44  BEBC 0000000F           2414                 CMP.L   #$F,D7              
00002E4A  6F00 001A               2415                 BLE     WORD_ONE_LOOP
00002E4E  BEBC 000000FF           2416                 CMP.L   #$FF,D7              
00002E54  6F00 001C               2417                 BLE     WORD_TWO_LOOP
00002E58  BEBC 00000FFF           2418                 CMP.L   #$FFF,D7              
00002E5E  6F00 001E               2419                 BLE     WORD_THREE_LOOP                  
00002E62  6000 0026               2420                 BRA     READ_WORD
00002E66                          2421  
00002E66                          2422  WORD_ONE_LOOP
00002E66  13FC 0001 000032BE      2423                  MOVE.B  #1,NUMBER_OF_HEX  
00002E6E  6000 001A               2424                  BRA     READ_WORD
00002E72                          2425                  
00002E72                          2426  WORD_TWO_LOOP
00002E72  13FC 0002 000032BE      2427                  MOVE.B  #2,NUMBER_OF_HEX  
00002E7A  6000 000E               2428                  BRA     READ_WORD
00002E7E                          2429                  
00002E7E                          2430  WORD_THREE_LOOP
00002E7E  13FC 0003 000032BE      2431                  MOVE.B  #3,NUMBER_OF_HEX  
00002E86  6000 0002               2432                  BRA     READ_WORD                
00002E8A                          2433      
00002E8A                          2434  READ_WORD                           
00002E8A  0C39 0000 000032BE      2435      CMP.B   #0,NUMBER_OF_HEX               
00002E92  6700 0014               2436      BEQ     COPYWORD
00002E96                          2437      
00002E96  123C 0030               2438      MOVE.B  #$30,D1             
00002E9A  103C 0006               2439      MOVE.B  #6,D0               
00002E9E  4E4F                    2440      TRAP    #15
00002EA0                          2441  
00002EA0  5339 000032BE           2442      SUBI.B  #1,NUMBER_OF_HEX              
00002EA6  60E2                    2443      BRA     READ_WORD                   ; LOOP
00002EA8                          2444  
00002EA8                          2445  COPYWORD
00002EA8  2207                    2446      MOVE.L  D7,D1               ; COPY DATA 
00002EAA  143C 0010               2447      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002EAE  103C 000F               2448      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002EB2  4E4F                    2449      TRAP    #15
00002EB4  13FC 0000 000032BE      2450      MOVE.B  #0,NUMBER_OF_HEX
00002EBC  6000 00D8               2451      BRA  EA_FINISH
00002EC0                          2452  
00002EC0                          2453  ****************PRINT LONG DATA*****************
00002EC0  4241                    2454  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00002EC2                          2455                 
00002EC2                          2456  
00002EC2  BEBC 0000000F           2457                 CMP.L   #$F,D7              
00002EC8  6F00 0042               2458                 BLE     LONG_ONE_LOOP
00002ECC  BEBC 000000FF           2459                 CMP.L   #$FF,D7              
00002ED2  6F00 0044               2460                 BLE     LONG_TWO_LOOP
00002ED6  BEBC 00000FFF           2461                 CMP.L   #$FFF,D7              
00002EDC  6F00 0046               2462                 BLE     LONG_THREE_LOOP
00002EE0  BEBC 0000FFFF           2463                 CMP.L   #$FFFF,D7              
00002EE6  6F00 0048               2464                 BLE     LONG_FOUR_LOOP
00002EEA  BEBC 000FFFFF           2465                 CMP.L   #$FFFFF,D7              
00002EF0  6F00 004A               2466                 BLE     LONG_FIVE_LOOP
00002EF4  BEBC 00FFFFFF           2467                 CMP.L   #$FFFFFF,D7              
00002EFA  6F00 004C               2468                 BLE     LONG_SIX_LOOP
00002EFE  BEBC 0FFFFFFF           2469                 CMP.L   #$FFFFFFF,D7              
00002F04  6F00 004E               2470                 BLE     LONG_SEVEN_LOOP                  
00002F08  6000 0056               2471                 BRA     READ_LONG
00002F0C                          2472  
00002F0C                          2473  LONG_ONE_LOOP
00002F0C  13FC 0001 000032BE      2474                  MOVE.B  #1,NUMBER_OF_HEX  
00002F14  6000 004A               2475                  BRA     READ_LONG
00002F18                          2476                  
00002F18                          2477  LONG_TWO_LOOP
00002F18  13FC 0002 000032BE      2478                  MOVE.B  #2,NUMBER_OF_HEX  
00002F20  6000 003E               2479                  BRA     READ_LONG
00002F24                          2480                  
00002F24                          2481  LONG_THREE_LOOP
00002F24  13FC 0003 000032BE      2482                  MOVE.B  #3,NUMBER_OF_HEX  
00002F2C  6000 0032               2483                  BRA     READ_LONG                
00002F30                          2484  LONG_FOUR_LOOP
00002F30  13FC 0004 000032BE      2485                  MOVE.B  #4,NUMBER_OF_HEX  
00002F38  6000 0026               2486                  BRA     READ_LONG
00002F3C                          2487                  
00002F3C                          2488  LONG_FIVE_LOOP
00002F3C  13FC 0005 000032BE      2489                  MOVE.B  #5,NUMBER_OF_HEX  
00002F44  6000 001A               2490                  BRA     READ_LONG
00002F48                          2491                  
00002F48                          2492  LONG_SIX_LOOP
00002F48  13FC 0006 000032BE      2493                  MOVE.B  #6,NUMBER_OF_HEX  
00002F50  6000 000E               2494                  BRA     READ_LONG
00002F54                          2495  LONG_SEVEN_LOOP
00002F54  13FC 0007 000032BE      2496                  MOVE.B  #7,NUMBER_OF_HEX  
00002F5C  6000 0002               2497                  BRA     READ_LONG
00002F60                          2498  
00002F60                          2499       
00002F60                          2500  READ_LONG                           
00002F60  0C39 0000 000032BE      2501      CMP.B   #0,NUMBER_OF_HEX               
00002F68  6700 0014               2502      BEQ     COPYLONG
00002F6C  123C 0030               2503      MOVE.B  #$30,D1             
00002F70  103C 0006               2504      MOVE.B  #6,D0               
00002F74  4E4F                    2505      TRAP    #15
00002F76                          2506  
00002F76  5339 000032BE           2507      SUBI.B  #1,NUMBER_OF_HEX               
00002F7C  60E2                    2508      BRA     READ_LONG                   ; LOOP
00002F7E                          2509  
00002F7E                          2510  COPYLONG
00002F7E  2207                    2511      MOVE.L  D7,D1               ; COPY DATA 
00002F80  143C 0010               2512      MOVE.B  #16,D2              ; USIGN BASE TO 16
00002F84  103C 000F               2513      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002F88  4E4F                    2514      TRAP    #15
00002F8A  13FC 0000 000032BE      2515      MOVE.B  #0,NUMBER_OF_HEX
00002F92  6000 0002               2516      BRA  EA_FINISH
00002F96                          2517  
00002F96                          2518    
00002F96                          2519  
00002F96                          2520  
00002F96                          2521  
00002F96                          2522  
00002F96                          2523  
00002F96                          2524  
00002F96                          2525  
00002F96  4E75                    2526  EA_FINISH      RTS
00002F98                          2527  
00002F98                          2528  
00002F98                          2529  
00002F98                          2530  
00002F98                          2531  ************************************************
00002F98                          2532  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
00002F98                          2533  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
00002F98                          2534  ************************************************
00002F98                          2535  REGISTER_NUMBER_TO_DECIMAL 
00002F98  B67C 0000               2536                             CMP.W       #REG_0,D3
00002F9C  6700 0046               2537                             BEQ         RG0
00002FA0  B67C 0001               2538                             CMP.W       #REG_1,D3
00002FA4  6700 0046               2539                             BEQ         RG1
00002FA8  B67C 0002               2540                             CMP.W       #REG_2,D3
00002FAC  6700 0046               2541                             BEQ         RG2
00002FB0  B67C 0003               2542                             CMP.W       #REG_3,D3
00002FB4  6700 0046               2543                             BEQ         RG3
00002FB8  B67C 0004               2544                             CMP.W       #REG_4,D3
00002FBC  6700 0046               2545                             BEQ         RG4
00002FC0  B67C 0005               2546                             CMP.W       #REG_5,D3
00002FC4  6700 0046               2547                             BEQ         RG5
00002FC8  B67C 0006               2548                             CMP.W       #REG_6,D3
00002FCC  6700 0046               2549                             BEQ         RG6
00002FD0  B67C 0007               2550                             CMP.W       #REG_7,D3
00002FD4  6700 0046               2551                             BEQ         RG7
00002FD8  13FC 0001 000032A2      2552                             MOVE.B      #BAD_FLAG,STATE
00002FE0  4EF8 2C04               2553                             JMP         CONTINUE_EA
00002FE4                          2554   
00002FE4  1A3C 0000               2555  RG0    MOVE.B   #0,D5
00002FE8  4EF8 2C04               2556         JMP      Continue_EA
00002FEC  1A3C 0001               2557  RG1    MOVE.B   #1,D5
00002FF0  4EF8 2C04               2558         JMP      Continue_EA
00002FF4  1A3C 0002               2559  RG2    MOVE.B   #2,D5
00002FF8  4EF8 2C04               2560         JMP      Continue_EA
00002FFC  1A3C 0003               2561  RG3    MOVE.B   #3,D5
00003000  4EF8 2C04               2562         JMP      Continue_EA
00003004  1A3C 0004               2563  RG4    MOVE.B   #4,D5
00003008  4EF8 2C04               2564         JMP      Continue_EA
0000300C  1A3C 0005               2565  RG5    MOVE.B   #5,D5
00003010  4EF8 2C04               2566         JMP      Continue_EA
00003014  1A3C 0006               2567  RG6    MOVE.B   #6,D5
00003018  4EF8 2C04               2568         JMP      Continue_EA
0000301C  1A3C 0007               2569  RG7    MOVE.B   #7,D5
00003020  4EF8 2C04               2570         JMP      Continue_EA 
00003024                          2571      
00003024                          2572  ;------------------------------------------------
00003024                          2573      
00003024                          2574  Float   DS.L 1 #0
00003028                          2575  
00003028                          2576  ValOne    DS.B 1 #0
00003029                          2577  ValTwo    DS.B 1 #0
0000302A                          2578  ValThree    DS.B 1 #0
0000302B                          2579  ValFour    DS.B 1 #0
0000302C                          2580  ValFive    DS.B 1 #0
0000302D                          2581  ValSix    DS.B 1 #0
0000302E                          2582  ValSeven    DS.B 1 #0
0000302F                          2583  ValEight    DS.B 1 #0
00003030                          2584  
00003030                          2585  Addsum DS.W 1 #0
00003032                          2586  CarryBit DS.B 1 #0   
00003033                          2587  
00003033                          2588  Trailers DS.B 1 #0
00003034                          2589  Source DS.L 1 #0
00003038                          2590  Destination DS.L 1 #0
0000303C                          2591  
0000303C                          2592          ;generic command lines
0000303C= 57 65 6C 63 6F 6D ...   2593  WELCOME DC.B 'Welcome to our decoder',CR,LF,0
00003055= 50 6C 65 61 73 65 ...   2594  USERPAGEBREAK DC.B 'Please Press enter to see next 25 codes',0
0000307D= 4E 75 6D 62 65 72 ...   2595  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
000030A9= 53 65 63 6F 6E 64 ...   2596  OUTOFORDER DC.B    'Second Num lower than the first Num, please reenter second Num',CR,LF,0
000030EA= 50 6C 65 61 73 65 ...   2597  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory address, perferablly in 8 byte form: ',0 
0000312D= 50 6C 65 61 73 65 ...   2598  MESSAGESECONDADRESS DC.B    'Please enter ending memory address, perferablly in 8 byte form: ',0 
0000316E= 59 6F 75 20 68 61 ...   2599  FINALMESSAGE1    DC.B    'You have reached the end of the program',CR,LF,0
00003198= 50 6C 65 61 73 65 ...   2600  FINALMESSAGE2    DC.B    'Please enter 0 to exit, or 1 to restart: ',0
000031C2= 45 78 69 74 69 6E ...   2601  GOODBYEMESSAGE    DC.B    'Exiting, have a good rest of your day',CR,LF,0
000031EA= 20 0D 0A 00             2602  CLEAR DC.B      ' ',CR,LF,0
000031EE                          2603  
000031EE                          2604          ;the collection of actual command lines to print
000031EE                          2605  CommandPrinter    DS.B 1 #0
000031EF                          2606  CommandDetail    DS.B 1 #0
000031F0= 4D 4F 56 45 00          2607  PMOVE DC.B      'MOVE',0
000031F5= 4D 4F 56 45 4D 20 00    2608  PMOVEM DC.B      'MOVEM ',0
000031FC= 4D 4F 56 45 41 00       2609  PMOVEA DC.B      'MOVEA',0
00003202= 4D 4F 56 45 51 20 00    2610  PMOVEQ DC.B      'MOVEQ ',0
00003209= 4E 4F 50 00             2611  PNOP DC.B      'NOP',0
0000320D= 4C 45 41 00             2612  PLEA DC.B      'LEA',0
00003211= 4E 4F 54 00             2613  PNOT DC.B      'NOT',0
00003215= 4A 53 52 00             2614  PJSR DC.B      'JSR',0
00003219= 52 54 53 00             2615  PRTS DC.B      'RTS',0
0000321D= 42 47 54 00             2616  PBGT DC.B      'BGT',0
00003221= 42 45 51 00             2617  PBEQ DC.B      'BEQ',0
00003225= 42 4C 45 00             2618  PBLE DC.B      'BLE',0
00003229= 42 52 41 00             2619  PBRA DC.B      'BRA',0
0000322D= 4F 52 00                2620  POR DC.B      'OR',0
00003230= 53 55 42 00             2621  PSUB DC.B      'SUB',0
00003234= 41 4E 44 00             2622  PAND DC.B      'AND',0
00003238= 41 44 44 00             2623  PADD DC.B      'ADD',0
0000323C= 41 44 44 41 00          2624  PADDA DC.B      'ADDA',0
00003241= 41 44 44 51 00          2625  PADDQ DC.B      'ADDQ',0
00003246= 4C 53 4C 00             2626  PLSL DC.B      'LSL',0
0000324A= 4C 53 52 00             2627  PLSR DC.B      'LSR',0
0000324E= 41 53 52 00             2628  PASR DC.B      'ASR',0
00003252= 41 53 4C 00             2629  PASL DC.B      'ASL',0
00003256= 52 4F 4C 00             2630  PROL DC.B      'ROL',0
0000325A= 52 4F 52 00             2631  PROR DC.B      'ROR',0
0000325E                          2632  
0000325E= 44 41 54 41 00          2633  PDATA   DC.B    'DATA',0
00003263                          2634  
00003263= 00                      2635  INPUT   DC.B    0
00003264                          2636  
00003264= 00000000                2637  STARTINGADDRESS     DC.L 0
00003268= 00000000                2638  CURRENTADDRESS      DC.L 0
0000326C= 00000000                2639  ENDINGADDRESS       DC.L 0
00003270= 0000                    2640  CYCLECOUNTER        DC.W 0
00003272= 0000                    2641  COMMANDDATA         DC.W 0
00003274= 00                      2642  Bits                DC.B 0
00003275                          2643  
00003275                          2644          ;the sizes to print
00003276                          2645  SizeValue           DS.L 1 #0
0000327A= 2E 42 20 00             2646  PB DC.B      '.B ',0
0000327E= 2E 57 20 00             2647  PW DC.B      '.W ',0
00003282= 2E 4C 20 00             2648  PL DC.B      '.L ',0
00003286                          2649  
00003286                          2650  ;----- ADDED FOR THE OP CODE PART
00003286                          2651  
00003286= 00                      2652  DEST_REG        DC.B    0
00003287= 00                      2653  DEST_MODE       DC.B    0
00003288                          2654  
00003288= 00                      2655  SRC_MODE        DC.B    0
00003289= 00                      2656  SRC_REG         DC.B    0
0000328A                          2657  
0000328A= 00                      2658  TEMP_MODE       DC.B    0
0000328B= 00                      2659  TEMP_REG        DC.B    0
0000328C                          2660  
0000328C                          2661  DATA_FIELD      DS.L    1 #0
00003290= 00                      2662  SIZE            DC.B    0
00003291= 00                      2663  SIZE_BITS        DC.B    0
00003292                          2664  
00003292= 23 00                   2665  HASH            DC.B    '#',0
00003294= 20 00                   2666  CLRSPOT         DC.B    ' ',0
00003296= 2D 00                   2667  NEG             DC.B    '-',0
00003298= 24 00                   2668  DOLLARSIGN      DC.B    '$',0
0000329A= 2C 00                   2669  COMA            DC.B    ',',0
0000329C                          2670  
0000329C= 00                      2671  INDEX           DC.B    0
0000329D                          2672  
0000329D= 00                      2673  XBIT            DC.B    0
0000329E= 00                      2674  INVALID_EA      DC.B    0
0000329F                          2675  
0000329F= 00                      2676  DstMode         DC.B    0
000032A0= 00                      2677  TempMode        DC.B    0
000032A1= 00                      2678  SrcMode         DC.B    0
000032A2                          2679  
000032A2                          2680  ;------ ADDED FOR EA CODE PART
000032A2                          2681  
000032A2  =00000000               2682  REG_0  EQU         %000
000032A2  =00000001               2683  REG_1  EQU         %001
000032A2  =00000002               2684  REG_2  EQU         %010
000032A2  =00000003               2685  REG_3  EQU         %011
000032A2  =00000004               2686  REG_4  EQU         %100
000032A2  =00000005               2687  REG_5  EQU         %101
000032A2  =00000006               2688  REG_6  EQU         %110
000032A2  =00000007               2689  REG_7  EQU         %111
000032A2                          2690  
000032A2  =00000000               2691  MODE000       EQU         %000                   * MODE Dn
000032A2  =00000001               2692  MODE001       EQU         %001                   * MODE An
000032A2  =00000002               2693  MODE010       EQU         %010                   * MODE (An)
000032A2  =00000003               2694  MODE011       EQU         %011                   * MODE (An)+
000032A2  =00000004               2695  MODE100       EQU         %100                   * MODE -(An)
000032A2  =00000007               2696  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
000032A2                          2697  
000032A2= 00                      2698  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
000032A3  =00000001               2699  BAD_FLAG      EQU         1
000032A4= 00008000                2700  word          DC.L        $8000
000032A8                          2701  SIZE_IL       DS.L        1             ;SIZE ISOLATION
000032AC                          2702  DR            DS.L        1             ;DIRECTION ISOLATION
000032B0                          2703  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
000032B4                          2704  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
000032B8                          2705  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
000032BC                          2706  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
000032BD                          2707  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
000032BE= 00                      2708  NUMBER_OF_HEX DC.B        0
000032BF                          2709  dRG           DS.B        1
000032C0                          2710  dMODE         DS.B        1
000032C1                          2711  sRG           DS.B        1
000032C2                          2712  
000032C2= 00000100                2713  print_buffer  DC.l       $100
000032C6                          2714  
000032C6                          2715  ***** ASCII VALUES FOR EA CHARACTERS**************
000032C6  =00000044               2716  D                       EQU      $44
000032C6  =00000041               2717  A                       EQU      $41
000032C6  =00000028               2718  OPEN_PARENTHESIS        EQU      $28
000032C6  =00000024               2719  DOLLAR_SIGN             EQU      $24
000032C6  =00000029               2720  CLOSED_PARENTHESIS      EQU      $29
000032C6  =0000002B               2721  PLUS_SIGN               EQU      $2B
000032C6  =0000002D               2722  MINUS_SIGN              EQU      $2D
000032C6  =00000023               2723  HASH_TAG                EQU      $23
000032C6  =00000025               2724  PERCENT_SIGN            EQU      $25
000032C6                          2725  
000032C6                          2726  
000032C6                          2727      
000032C6                          2728      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2D1C
ADDRESS_REGISTER    2C5C
ADDRESS_REGISTER_DECREMENT  2CE2
ADDRESS_REGISTER_DIRECT  2C78
ADDRESS_REGISTER_INCREMENT  2CA8
ADDSUM              3030
ADD_NEGATIVE        2DBC
BADVAL              307D
BAD_FLAG            1
BITS                3274
BYTE_ONE_LOOP       2E00
CARRYBIT            3032
CCHECK_ADD          182A
CCHECK_ADDA         1850
CHAR1               1178
CHAR2               1190
CHARSUB             11A8
CHECK_ADD           1810
CHECK_ADDA          182E
CHECK_ADDQ          16BA
CHECK_AND           1A26
CHECK_DATA_NEG      2B0C
CHECK_DESTINATION   2930
CHECK_DEST_REG      2968
CHECK_ID_AS         1ED4
CHECK_ID_LS         1EF4
CHECK_ID_RO         1EE4
CHECK_JSR           1634
CHECK_LEA           1442
CHECK_MOVEM_1000    1558
CHECK_MOVEM_1100    160C
CHECK_MOVEQ         18AC
CHECK_NOP_JSR_RTS   1614
CHECK_NOP_RTS       169A
CHECK_NOT           14CE
CHECK_OR            190A
CHECK_SOURCE        2A30
CHECK_SOURCE_REG    2A68
CHECK_SUB           1998
CHECK_TEMP          29B0
CHECK_TEMP_REG      29E8
CHECK_XBIT          2AB0
CLEAR               31EA
CLEARMR             2B98
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   291E
CLRSPOT             3294
COMA                329A
COMMANDDATA         3272
COMMANDDETAIL       31EF
COMMANDPRINTER      31EE
COMPARE_0100        140A
COMPARE_0110        1744
COMPARE_1101        1774
COMPARE_1110        1AB4
COMPARE_GROUPS      13A6
CONTINUE_A_I_A      2D20
CONTINUE_EA         2C04
COPYBYTE            2E2A
COPYLONG            2F7E
COPYWORD            2EA8
CR                  D
CURRENTADDRESS      3268
CYCLECOUNTER        3270
D                   44
DATA_FIELD          328C
DATA_REGISTER       2C40
DESTINATION         3038
DEST_MODE           3287
DEST_REG            3286
DMODE               32C0
DOLLARSIGN          3298
DOLLAR_SIGN         24
DONE                11D2
DR                  32AC
DRG                 32BF
DRN                 32BD
DSTMODE             329F
EADN                28BA
EA_FINISH           2F96
EA_START            2BF2
EIGHT_SHIFT         250A
ENDING              1318
ENDINGADDRESS       326C
ENTRYLOOP           11C0
EXIT                1220
FINALMESSAGE1       316E
FINALMESSAGE2       3198
FLOAT               3024
FORMAT_DATA         2AF8
G14_MEMS            1D7C
G14_MEMS_AS         1E6E
G14_MEMS_LS         1DA2
G14_MEMS_RO         1E08
G14_TYPE            32B0
GAS_EA              1D26
GETBYTE             2D9E
GETLONG             2DB2
GETWORD             2DA8
GLS_EA              1B8E
GOODBYE             1362
GOODBYEMESSAGE      31C2
GRO_EA              1C5A
G_AS                1CB0
G_LS                1B18
G_RO                1BE4
HASH                3292
HASH_TAG            23
IMMIDIATE_REGISTER  2D44
INDEX               329C
INPUT               3263
INT2                1158
INTSUB              1170
INVALID             11B0
INVALID_EA          329E
IR_IL               32B4
IS_EIGHT            2518
LARGERISSUE         127E
LARGERTHAN          129C
LF                  A
LOADDATAONE         101E
LOADDATATWO         1070
LONG_ADDRESSING     2D8A
LONG_FIVE_LOOP      2F3C
LONG_FOUR_LOOP      2F30
LONG_ONE_LOOP       2F0C
LONG_SEVEN_LOOP     2F54
LONG_SIX_LOOP       2F48
LONG_THREE_LOOP     2F24
LONG_TWO_LOOP       2F18
LOOP_READ_BITS      1388
MEMORYGRABBER       12A8
MESSAGEFIRSTADRESS  30EA
MESSAGESECONDADRESS  312D
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
NEG                 3296
NUMBER_OF_HEX       32BE
OPEN_PARENTHESIS    28
OUTOFORDER          30A9
PADD                3238
PADDA               323C
PADDQ               3241
PAGEBREAK           12F6
PAND                3234
PASL                3252
PASR                324E
PB                  327A
PBEQ                3221
PBGT                321D
PBLE                3225
PBRA                3229
PDATA               325E
PERCENT_SIGN        25
PJSR                3215
PL                  3282
PLEA                320D
PLSL                3246
PLSR                324A
PLUS_SIGN           2B
PMOVE               31F0
PMOVEA              31FC
PMOVEM              31F5
PMOVEQ              3202
PNOP                3209
PNOT                3211
POR                 322D
PRINTADD            279C
PRINTADDA           27B2
PRINTADDQ           25C6
PRINTAND            2786
PRINTB              2876
PRINTBEQ            263A
PRINTBGT            2624
PRINTBLE            2650
PRINTBRA            2666
PRINTCLRSPOT        2884
PRINTCOMA           2892
PRINTDOLLARSIGN     28AC
PRINTHASH           28A0
PRINTJSR            25A0
PRINTL              285A
PRINTLEA            2574
PRINTMOVE           2522
PRINTMOVEA          2538
PRINTMOVEM          255E
PRINTMOVEQ          267C
PRINTNOP            254E
PRINTNOT            258A
PRINTNOTRAIL        2908
PRINTONETRAIL       28D6
PRINTOR             26C0
PRINTROTATESPLIT    27C8
PRINTRTS            25B6
PRINTSUB            2770
PRINTTWOTRAIL       28EC
PRINTW              2868
PRINT_BRANCHING     2DCA
PRINT_BUFFER        32C2
PRINT_BYTE          2DF0
PRINT_DATA          2B24
PRINT_EA_TO_REG     26F4
PRINT_LONG          2EC0
PRINT_NEG           2B16
PRINT_REG_TO_EA     2752
PRINT_WORD          2E42
PROL                3256
PROR                325A
PRTS                3219
PR_AS               2334
PR_ASR              245E
PR_ASR_EA           20F4
PR_ASR_MEM          1F4E
PR_G14_MEMS_AS      1F04
PR_G14_MEMS_LS      1F86
PR_G14_MEMS_RO      2008
PR_G_AS_EA          208A
PR_G_LS_EA          214A
PR_G_RO_EA          220A
PR_LS               239E
PR_LSR              2408
PR_LSR_EA           21B4
PR_LSR_MEM          1FD0
PR_RO               22CA
PR_ROR              24B4
PR_ROR_EA           2274
PR_ROR_MEM          2052
PSUB                3230
PW                  327E
READ_BITS           137E
READ_BYTE           2E0C
READ_LONG           2F60
READ_WORD           2E8A
REGISTER_NUMBER_TO_DECIMAL  2F98
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2AF6
RG0                 2FE4
RG1                 2FEC
RG2                 2FF4
RG3                 2FFC
RG4                 3004
RG5                 300C
RG6                 3014
RG7                 301C
R_CHECK_DEST        29A6
R_CHECK_SOURCE      2AA6
R_CHECK_TEMP        2A26
SET                 139E
SETSIZE1            2B36
SETSIZE2            2B50
SETSIZEB            2B74
SETSIZEL            2B8C
SETSIZEW            2B80
SIZE                3290
SIZESPLIT           282C
SIZEVALUE           3276
SIZE_BITS           3291
SIZE_IL             32A8
SOURCE              3034
SRCMODE             32A1
SRC_MODE            3288
SRC_REG             3289
SRG                 32C1
SRN                 32BC
START               1000
STARTCHECK          1140
STARTINGADDRESS     3264
STATE               32A2
STOP                292A
STOREADRESSES       1290
S_COUNT             32B8
TEMPMODE            32A0
TEMP_MODE           328A
TEMP_REG            328B
TEMP_TO_DEST        2AC2
TEMP_TO_SRC         2ADC
TRAILERS            3033
USERPAGEBREAK       3055
VAL1                10C6
VAL2                10D0
VAL3                10E0
VAL4                10F0
VAL5                1100
VAL6                1110
VAL7                1120
VAL8                1130
VALEIGHT            302F
VALFIVE             302C
VALFOUR             302B
VALONE              3028
VALSEVEN            302E
VALSIX              302D
VALTHREE            302A
VALTWO              3029
WELCOME             303C
WORD                32A4
WORD_ADDRESSING     2D76
WORD_ONE_LOOP       2E66
WORD_THREE_LOOP     2E7E
WORD_TWO_LOOP       2E72
XBIT                329D
