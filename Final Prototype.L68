00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/8/2021 12:53:03 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 000033D4             13      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001006  103C 000E                 14      MOVE.B   #14,D0     ; moves #14 into data register D0
0000100A  4E4F                      15      TRAP     #15  
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 0000317C             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 14  
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22      
0000101E                            23  * TODO: a welcome message with format message 
0000101E                            24      
0000101E                            25  LOADDATAONE
0000101E  43F9 0000322A             26      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001024  103C 000E                 27      MOVE.B   #14,D0     ; moves #14 into data register D0
00001028  4E4F                      28      TRAP     #15       ; Displays message via trap 14    
0000102A                            29      
0000102A  43F9 000033A3             30      LEA     INPUT,A1
00001030  103C 0002                 31      MOVE.B  #2,D0 *takes the string of what the user enters
00001034  4E4F                      32      TRAP    #15
00001036                            33      
00001036  4280                      34      CLR.L   D0
00001038                            35      
00001038                            36      * TODO: check if the input if odd - invalid imput
00001038                            37      
00001038                            38  
00001038                            39      
00001038  1A3C 0000                 40      MOVE.B  #0,D5
0000103C                            41      
0000103C  13D9 0000A000             42      MOVE.B (A1)+,$A000
00001042  13D9 0000A010             43      MOVE.B (A1)+,$A010
00001048  13D9 0000A020             44      MOVE.B (A1)+,$A020
0000104E  13D9 0000A030             45      MOVE.B (A1)+,$A030
00001054  13D9 0000A040             46      MOVE.B (A1)+,$A040
0000105A  13D9 0000A050             47      MOVE.B (A1)+,$A050
00001060  13D9 0000A060             48      MOVE.B (A1)+,$A060
00001066  13D9 0000A070             49      MOVE.B (A1)+,$A070
0000106C                            50      
0000106C  6000 0058                 51      BRA VAL1
00001070                            52  
00001070                            53  LOADDATATWO    
00001070  43F9 0000326D             54      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001076  103C 000E                 55      MOVE.B   #14,D0     ; moves #14 into data register D0
0000107A  4E4F                      56      TRAP     #15       ; Displays message via trap 14    
0000107C                            57      
0000107C  43F9 000033A3             58      LEA     INPUT,A1
00001082  103C 0002                 59      MOVE.B  #2,D0 *takes the string of what the user enters
00001086  4E4F                      60      TRAP    #15
00001088                            61      
00001088  1A3C 0000                 62      MOVE.B  #0,D5
0000108C                            63      
0000108C  13D9 0000A000             64      MOVE.B (A1)+,$A000
00001092  13D9 0000A010             65      MOVE.B (A1)+,$A010
00001098  13D9 0000A020             66      MOVE.B (A1)+,$A020
0000109E  13D9 0000A030             67      MOVE.B (A1)+,$A030
000010A4  13D9 0000A040             68      MOVE.B (A1)+,$A040
000010AA  13D9 0000A050             69      MOVE.B (A1)+,$A050
000010B0  13D9 0000A060             70      MOVE.B (A1)+,$A060
000010B6  13D9 0000A070             71      MOVE.B (A1)+,$A070
000010BC                            72      
000010BC  43F9 0000326D             73      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010C2                            74      
000010C2  6000 0002                 75      BRA VAL1
000010C6                            76  
000010C6                            77      
000010C6                            78  VAL1    
000010C6  1839 0000A000             79      MOVE.B $A000,D4
000010CC  6000 0072                 80      BRA STARTCHECK
000010D0  13C4 0000A000             81  VAL2    MOVE.B D4,$A000
000010D6  1839 0000A010             82      MOVE.B $A010,D4
000010DC  6000 0062                 83      BRA STARTCHECK
000010E0  13C4 0000A010             84  VAL3    MOVE.B D4,$A010
000010E6  1839 0000A020             85      MOVE.B $A020,D4
000010EC  6000 0052                 86      BRA STARTCHECK
000010F0  13C4 0000A020             87  VAL4    MOVE.B D4,$A020
000010F6  1839 0000A030             88      MOVE.B $A030,D4
000010FC  6000 0042                 89      BRA STARTCHECK
00001100  13C4 0000A030             90  VAL5    MOVE.B D4,$A030
00001106  1839 0000A040             91      MOVE.B $A040,D4
0000110C  6000 0032                 92      BRA STARTCHECK
00001110  13C4 0000A040             93  VAL6    MOVE.B D4,$A040
00001116  1839 0000A050             94      MOVE.B $A050,D4
0000111C  6000 0022                 95      BRA STARTCHECK
00001120  13C4 0000A050             96  VAL7    MOVE.B D4,$A050
00001126  1839 0000A060             97      MOVE.B $A060,D4
0000112C  6000 0012                 98      BRA STARTCHECK
00001130  13C4 0000A060             99  VAL8    MOVE.B D4,$A060
00001136  1839 0000A070            100      MOVE.B $A070,D4
0000113C  6000 0002                101      BRA STARTCHECK
00001140                           102    
00001140                           103  STARTCHECK  
00001140  B83C 0030                104      CMP.B   #48,D4
00001144  6D00 006A                105      BLT INVALID
00001148  B83C 0030                106      CMP.B   #48,D4
0000114C  6700 0022                107      BEQ INTSUB
00001150  B83C 0030                108      CMP.B   #48,D4
00001154  6E00 0002                109      BGT INT2
00001158                           110      
00001158                           111  
00001158                           112  INT2 
00001158                           113      
00001158  B83C 0039                114      CMP.B   #57,D4
0000115C  6D00 0012                115      BLT INTSUB
00001160  B83C 0039                116      CMP.B   #57,D4
00001164  6700 000A                117      BEQ INTSUB
00001168  B83C 0039                118      CMP.B   #57,D4
0000116C  6E00 000A                119      BGT CHAR1
00001170                           120      
00001170                           121  INTSUB 
00001170  0404 0030                122      SUB.B #$30,D4
00001174  6000 005C                123      BRA     DONE
00001178                           124  
00001178                           125  CHAR1 
00001178                           126      
00001178  B83C 0041                127      CMP.B   #65,D4
0000117C  6D00 0032                128      BLT INVALID
00001180  B83C 0041                129      CMP.B   #65,D4
00001184  6700 0022                130      BEQ CHARSUB
00001188  B83C 0041                131      CMP.B   #65,D4
0000118C  6E00 0002                132      BGT CHAR2
00001190                           133      
00001190                           134  CHAR2 
00001190                           135      
00001190  B83C 0046                136      CMP.B   #70,D4
00001194  6D00 0012                137      BLT CHARSUB
00001198  B83C 0046                138      CMP.B   #70,D4
0000119C  6700 000A                139      BEQ CHARSUB
000011A0  B83C 0046                140      CMP.B   #70,D4
000011A4  6E00 000A                141      BGT INVALID
000011A8                           142      
000011A8                           143  CHARSUB 
000011A8  0404 0037                144      SUB.B #$37,D4
000011AC  6000 0024                145      BRA DONE
000011B0                           146      
000011B0                           147  INVALID 
000011B0  43F9 000031BD            148      LEA BADVAL,A1
000011B6  103C 000E                149      MOVE.B   #14,D0     ; moves #14 into data register D0
000011BA  4E4F                     150      TRAP     #15       ; Displays message via trap 14
000011BC  6000 0002                151      BRA     ENTRYLOOP
000011C0                           152      
000011C0                           153  ENTRYLOOP
000011C0  B43C 0000                154      CMP.B #0,D2
000011C4  6700 FE58                155      BEQ LOADDATAONE
000011C8  B43C 0001                156      CMP.B #1,D2
000011CC  6700 FEA2                157      BEQ LOADDATATWO
000011D0  4E75                     158      RTS
000011D2                           159      
000011D2                           160  DONE     
000011D2                           161  
000011D2  5205                     162          ADD.B #1,D5
000011D4  BA3C 0000                163          CMP.B #0,D5
000011D8  6700 FEEC                164          BEQ VAL1
000011DC  BA3C 0001                165          CMP.B #1,D5
000011E0  6700 FEEE                166          BEQ VAL2
000011E4  BA3C 0002                167          CMP.B #2,D5
000011E8  6700 FEF6                168          BEQ VAL3
000011EC  BA3C 0003                169          CMP.B #3,D5
000011F0  6700 FEFE                170          BEQ VAL4
000011F4  BA3C 0004                171          CMP.B #4,D5
000011F8  6700 FF06                172          BEQ VAL5
000011FC  BA3C 0005                173          CMP.B #5,D5
00001200  6700 FF0E                174          BEQ VAL6
00001204  BA3C 0006                175          CMP.B #6,D5
00001208  6700 FF16                176          BEQ VAL7
0000120C  BA3C 0007                177          CMP.B #7,D5
00001210  6700 FF1E                178          BEQ VAL8
00001214  BA3C 0008                179          CMP.B #8,D5
00001218  6700 0006                180          BEQ EXIT
0000121C                           181          
0000121C  6000 FF22                182          BRA     STARTCHECK
00001220                           183  
00001220                           184  
00001220                           185  
00001220  13C4 0000A070            186  EXIT    MOVE.B D4,$A070
00001226                           187      
00001226  4284                     188      CLR.L D4
00001228  D839 0000A000            189      ADD.B $A000,D4
0000122E  E98C                     190      LSL.L #4,D4
00001230  D839 0000A010            191      ADD.B $A010,D4
00001236  E98C                     192      LSL.L #4,D4
00001238  D839 0000A020            193      ADD.B $A020,D4
0000123E  E98C                     194      LSL.L #4,D4
00001240  D839 0000A030            195      ADD.B $A030,D4
00001246  E98C                     196      LSL.L #4,D4
00001248  D839 0000A040            197      ADD.B $A040,D4
0000124E  E98C                     198      LSL.L #4,D4
00001250  D839 0000A050            199      ADD.B $A050,D4
00001256  E98C                     200      LSL.L #4,D4
00001258  D839 0000A060            201      ADD.B $A060,D4
0000125E  E98C                     202      LSL.L #4,D4
00001260  D839 0000A070            203      ADD.B $A070,D4
00001266                           204      
00001266  2E04                     205      MOVE.L D4,D7
00001268  4244                     206      CLR D4
0000126A  B43C 0001                207      CMP.B #1,D2
0000126E  6700 0020                208      BEQ STOREADRESSES
00001272  2C07                     209      MOVE.L D7,D6
00001274  143C 0001                210      MOVE.B #1,D2
00001278  7A00                     211      MOVE.L #0,D5
0000127A  6000 FDF4                212      BRA LOADDATATWO
0000127E                           213      
0000127E                           214  ;---------------------------------------------------------
0000127E                           215  
0000127E                           216  LARGERISSUE
0000127E  43F9 000031E9            217      LEA OUTOFORDER,A1
00001284  103C 000E                218      MOVE.B   #14,D0     ; moves #14 into data register D0
00001288  4E4F                     219      TRAP     #15       ; Displays message via trap 14
0000128A  7400                     220      MOVE.L #0,D2
0000128C  6000 FD90                221      BRA LOADDATAONE
00001290                           222  
00001290                           223  STOREADRESSES
00001290  23C7 000033AC            224      MOVE.L  D7,ENDINGADDRESS
00001296  23C6 000033A4            225      MOVE.L  D6,STARTINGADDRESS
0000129C                           226  LARGERTHAN    
0000129C  BE86                     227      CMP.L D6,D7
0000129E  6DDE                     228      BLT LARGERISSUE
000012A0  4247                     229      CLR     D7
000012A2  2C79 000033A4            230      MOVE.L   STARTINGADDRESS,A6
000012A8                           231      
000012A8                           232  MEMORYGRABBER
000012A8  2879 000033AC            233      MOVE.L  ENDINGADDRESS,A4
000012AE  BDCC                     234      CMPA.L  A4,A6
000012B0  6C00 0066                235      BGE     ENDING 
000012B4                           236      
000012B4  0C79 0019 000033B0       237       CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
000012BC  6C00 0038                238       BGE     PAGEBREAK
000012C0  5279 000033B0            239       ADD.W   #1,CYCLECOUNTER
000012C6                           240      
000012C6                           241      * TODO: CLEAR MODES AND REGISTERS
000012C6                           242      
000012C6  23CE 000033A8            243      MOVE.L      A6,CURRENTADDRESS   
000012CC  2239 000033A8            244      MOVE.L      CURRENTADDRESS,D1
000012D2  143C 0010                245      MOVE.B      #16,D2
000012D6  103C 000F                246      MOVE.B      #15,D0     ; moves #14 into data register D0
000012DA  4E4F                     247      TRAP        #15  
000012DC  43F9 000033D4            248      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
000012E2  103C 000E                249      MOVE.B   #14,D0     ; moves #14 into data register D0
000012E6  4E4F                     250      TRAP     #15  
000012E8                           251      
000012E8  361E                     252      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012EA  33C3 000033B2            253      MOVE.W      D3, COMMANDDATA
000012F0                           254   
000012F0  6000 00B4                255      BRA         COMPARE_GROUPS
000012F4                           256      
000012F4  60B2                     257      BRA MEMORYGRABBER
000012F6                           258      
000012F6                           259  PAGEBREAK
000012F6  43F9 00003195            260      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
000012FC  103C 000E                261      MOVE.B   #14,D0     ; moves #14 into data register D0
00001300  4E4F                     262      TRAP     #15       ; Displays message via trap 14
00001302  43F9 000033A3            263      LEA     INPUT,A1
00001308  103C 0002                264      MOVE.B  #2,D0 *takes the string of what the user enters
0000130C  4E4F                     265      TRAP    #15
0000130E  33FC 0000 000033B0       266      MOVE.W #0,CYCLECOUNTER
00001316  6090                     267      BRA MEMORYGRABBER
00001318                           268  
00001318                           269  ENDING 
00001318  33FC 0000 000033B0       270      MOVE.W #0,CYCLECOUNTER
00001320  43F9 000032AE            271      LEA     FINALMESSAGE1,A1     * Prints End of Program message
00001326  103C 000E                272      MOVE.B  #14,D0
0000132A  4E4F                     273      TRAP    #15
0000132C  43F9 000032D8            274      LEA     FINALMESSAGE2,A1     * Prints End of Program message
00001332  103C 000E                275      MOVE.B  #14,D0
00001336  4E4F                     276      TRAP    #15
00001338  43F9 000033A3            277      LEA     INPUT,A1
0000133E  103C 0005                278      MOVE.B  #5,D0 *takes the single charater the user enters
00001342  4E4F                     279      TRAP    #15
00001344  B23C 0031                280      CMP.B #49,D1
00001348  6700 FCB6                281      BEQ START
0000134C  B23C 0030                282      CMP.B #48,D1
00001350  6700 0010                283      BEQ GOODBYE
00001354  43F9 000031BD            284      LEA     BADVAL,A1     * Prints End of Program message
0000135A  103C 000E                285      MOVE.B  #14,D0
0000135E  4E4F                     286      TRAP    #15
00001360  60B6                     287      BRA ENDING
00001362                           288      
00001362                           289  GOODBYE
00001362  43F9 000033D4            290      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001368  103C 000E                291      MOVE.B   #14,D0     ; moves #14 into data register D0
0000136C  4E4F                     292      TRAP     #15  
0000136E  43F9 00003302            293      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
00001374  103C 000E                294      MOVE.B  #14,D0
00001378  4E4F                     295      TRAP    #15
0000137A  FFFF FFFF                296      SIMHALT             ; halt simulator
0000137E                           297      
0000137E                           298  
0000137E                           299  ;-------------------------- OP CODE SECTION -------------------------------
0000137E                           300  
0000137E                           301  READ_BITS
0000137E  4287                     302      CLR.L   D7
00001380  4284                     303      CLR.L   D4
00001382  1E39 000033B4            304      MOVE.B  Bits,D7
00001388                           305      
00001388                           306  LOOP_READ_BITS    
00001388  BE3C 0000                307      CMP.B   #0,D7           * counter
0000138C  6700 18A8                308      BEQ     RETURN
00001390                           309      
00001390  E34C                     310      LSL.W   #1,D4           * make space for new bit
00001392  E34B                     311      LSL.W   #1,D3          
00001394                           312  
00001394  6500 0008                313      BCS     SET             * if 1, then branch to SET
00001398  5307                     314      SUBI.B  #1,D7          
0000139A  4EF8 1388                315      JMP     LOOP_READ_BITS
0000139E                           316  SET
0000139E  5244                     317      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013A0  5307                     318      SUBI.B  #1, D7
000013A2  4EF8 1388                319      JMP     LOOP_READ_BITS  
000013A6                           320      
000013A6                           321  
000013A6                           322  
000013A6                           323  COMPARE_GROUPS              * comapres the 4 bits of the instruction
000013A6  13FC 0004 000033B4       324      MOVE.B  #4,Bits         
000013AE  4EB8 137E                325      JSR     READ_BITS       * get the first 4 bits and store it in D4
000013B2                           326  
000013B2  B87C 0001                327      CMP.W   #%0001,D4      
000013B6                           328      *BEQ     CHECK_MOVE_B    * if equal, goes to CHECK_MOVE.B
000013B6                           329      
000013B6  B87C 0002                330      CMP.W   #%0010,D4      
000013BA                           331      *BEQ     COMPARE_0010    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
000013BA                           332      
000013BA  B87C 0003                333      CMP.W   #%0011,D4      
000013BE                           334      *BEQ     COMPARE_0011    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
000013BE                           335      
000013BE  B87C 0004                336      CMP.W   #%0100,D4      
000013C2  6700 0046                337      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
000013C6                           338      
000013C6  B87C 0005                339      CMP.W   #%0101,D4      
000013CA  6700 02EE                340      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
000013CE                           341      
000013CE  B87C 0006                342      CMP.W   #%0110,D4      
000013D2  6700 0370                343      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
000013D6                           344      
000013D6  B87C 0007                345      CMP.W   #%0111,D4      
000013DA  6700 04D0                346      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
000013DE                           347      
000013DE  B87C 0008                348      CMP.W   #%1000,D4      
000013E2  6700 0526                349      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
000013E6                           350      
000013E6  B87C 0009                351      CMP.W   #%1001,D4      
000013EA  6700 05AC                352      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
000013EE                           353      
000013EE  B87C 000C                354      CMP.W   #%1100,D4      
000013F2  6700 0632                355      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
000013F6                           356      
000013F6  B87C 000D                357      CMP.W   #%1101,D4      
000013FA  6700 0378                358      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
000013FE                           359      
000013FE  B87C 000E                360      CMP.W   #%1110,D4      
00001402  6700 06B0                361      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
00001406                           362      
00001406  6600 185C                363      BNE     PRINT_DATA      * all other instructions are not supported 
0000140A                           364  
0000140A                           365  
0000140A                           366  
0000140A                           367  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
0000140A                           368  
0000140A                           369  COMPARE_0100
0000140A  0803 000C                370      BTST.L  #$0C,D3             * compare bit 8 for LEA
0000140E  6600 0032                371      BNE     CHECK_LEA
00001412                           372      
00001412  13FC 0004 000033B4       373      MOVE.B  #4,Bits
0000141A  4EB8 137E                374      JSR     READ_BITS
0000141E                           375      
0000141E  B87C 0006                376      CMP.W   #%0110,D4
00001422  6700 00AA                377      BEQ     CHECK_NOT           * goes to NOT
00001426                           378      
00001426  B87C 0008                379      CMP.W   #%1000,D4
0000142A  6700 012C                380      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
0000142E                           381      
0000142E  B87C 000C                382      CMP.W   #%1100,D4       
00001432  6700 01D8                383      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
00001436                           384      
00001436  B87C 000E                385      CMP.W   #%1110,D4
0000143A  6700 01D8                386      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
0000143E                           387      
0000143E  6600 1824                388      BNE     PRINT_DATA
00001442                           389  
00001442                           390  CHECK_LEA
00001442  13FC 0003 000033B4       391      MOVE.B  #3,Bits  
0000144A  4EB8 137E                392      JSR     READ_BITS 
0000144E  13C4 000033C6            393      MOVE.B  D4,DEST_REG  
00001454                           394  
00001454  13FC 0003 000033B4       395      MOVE.B  #3,Bits
0000145C  4EB8 137E                396      JSR     READ_BITS
00001460  B83C 0007                397      CMP.B   #7,D4               * if mode = 111 = continue
00001464  6600 17FE                398      BNE     PRINT_DATA
00001468                           399  
00001468  13FC 0003 000033B4       400      MOVE.B  #3,Bits
00001470  4EB8 137E                401      JSR     READ_BITS 
00001474  13C4 000033C8            402      MOVE.B  D4,SRC_MODE           
0000147A                           403  
0000147A  13FC 0003 000033B4       404      MOVE.B  #3,Bits 
00001482  4EB8 137E                405      JSR     READ_BITS 
00001486  13C4 000033C9            406      MOVE.B  D4,SRC_REG 
0000148C                           407      
0000148C                           408      *MOVE.B  #3,CmdIndex         
0000148C  4EB9 00002B70            409      JSR     CHECK_SOURCE                * Check Source Mode
00001492                           410      
00001492  0C39 000F 000033E1       411      CMP.B   #$F,SrcMode         * If SrcMode is invalid
0000149A  6700 17C8                412      BEQ     PRINT_DATA
0000149E                           413      
0000149E  0C39 0002 000033E1       414      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
000014A6  6700 120C                415      BEQ     PRINTLEA        
000014AA                           416      
000014AA  0C39 0007 000033E1       417      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
000014B2  6700 1200                418      BEQ     PRINTLEA    
000014B6                           419      
000014B6  0C39 0008 000033E1       420      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
000014BE  6700 11F4                421      BEQ     PRINTLEA
000014C2                           422              
000014C2  13FC 0001 000033DE       423      MOVE.B  #1,INVALID_EA   
000014CA  6000 11E8                424      BRA     PRINTLEA    
000014CE                           425      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000014CE                           426  
000014CE                           427      
000014CE                           428  CHECK_NOT 
000014CE                           429      * TODO : TEST
000014CE  13FC 0002 000033B4       430      MOVE.B  #2,Bits             
000014D6  4EB8 137E                431      JSR     READ_BITS             
000014DA  13C4 000033D1            432      MOVE.B  D4,SIZE_BITS               * Stores size 
000014E0                           433      
000014E0  4EB9 00002C90            434      JSR     SETSIZE2             * set correct size for printing
000014E6                           435      
000014E6  B83C 0003                436      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
000014EA  6700 1778                437      BEQ     PRINT_DATA          * Else, If 11 size invalid
000014EE                           438      
000014EE  13FC 0003 000033B4       439      MOVE.B  #3,Bits       
000014F6  4EB8 137E                440      JSR     READ_BITS       
000014FA  13C4 000033C7            441      MOVE.B  D4,DEST_MODE             
00001500                           442  
00001500  13FC 0003 000033B4       443      MOVE.B  #3,Bits       
00001508  4EB8 137E                444      JSR     READ_BITS
0000150C  13C4 000033C6            445      MOVE.B  D4,DEST_REG             
00001512                           446      
00001512                           447      *MOVE.B  #2,CmdIndex 
00001512  4EB9 00002A70            448      JSR     CHECK_DESTINATION               * Check Destination Mode
00001518                           449  
00001518  0C39 000F 000033DF       450      CMP.B   #$F,DstMode         * If DstMode is invalid
00001520  6700 1742                451      BEQ     PRINT_DATA      
00001524                           452  
00001524  0C39 000E 000033DF       453      CMP.B   #$E,DstMode         * If DstMode is invalid EA
0000152C  13FC 0001 000033DE       454      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001534                           455      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001534                           456  
00001534  0C39 0001 000033DF       457      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
0000153C  13FC 0001 000033DE       458      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001544                           459      
00001544  0C39 000B 000033DF       460      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
0000154C  13FC 0001 000033DE       461      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
00001554  6000 1174                462      BRA     PRINTNOT
00001558                           463  
00001558                           464  CHECK_MOVEM_1000 
00001558                           465      * TODO : TEST WITH EA 
00001558  13FC 0001 000033B4       466      MOVE.B  #1,Bits
00001560  4EB8 137E                467      JSR     READ_BITS
00001564  B83C 0001                468      CMP.B   #%1,D4
00001568  6600 16FA                469      BNE     PRINT_DATA
0000156C                           470      
0000156C  13FC 0001 000033B4       471      MOVE.B  #1,Bits
00001574  4EB8 137E                472      JSR     READ_BITS
00001578  13C4 000033D1            473      MOVE.B  D4,SIZE_BITS
0000157E                           474      
0000157E  4EB9 00002C76            475      JSR     SETSIZE1
00001584                           476  
00001584  13FC 0003 000033B4       477      MOVE.B  #3,Bits
0000158C  4EB8 137E                478      JSR     READ_BITS
00001590  13C4 000033CA            479      MOVE.B  D4,TEMP_MODE
00001596                           480      
00001596  13FC 0003 000033B4       481      MOVE.B  #3,Bits
0000159E  4EB8 137E                482      JSR     READ_BITS
000015A2  13C4 000033CB            483      MOVE.B  D4,TEMP_REG
000015A8                           484      
000015A8  4EB9 00002AF0            485      JSR     CHECK_TEMP
000015AE  4EB9 00002BF0            486      JSR     CHECK_XBIT
000015B4                           487      
000015B4  0C39 000F 000033E0       488      CMP.B   #$F,TempMode        * If TempMode is invalid
000015BC  6700 16A6                489      BEQ     PRINT_DATA              * Print DATA instead
000015C0                           490  
000015C0  0C39 000E 000033E0       491      CMP.B   #$E,TempMode        * If TempMode is invalid EA
000015C8                           492    *  BEQ     SETINVEA           * 
000015C8  13FC 0001 000033DE       493      MOVE.B  #1,INVALID_EA
000015D0                           494     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000015D0                           495  
000015D0  0C39 0002 000033E0       496      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
000015D8  6700 10C4                497      BEQ     PRINTMOVEM              
000015DC                           498  
000015DC  0C39 0007 000033E0       499      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
000015E4  6700 10B8                500      BEQ     PRINTMOVEM   
000015E8                           501  
000015E8  0C39 0008 000033E0       502      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
000015F0  6700 10AC                503      BEQ     PRINTMOVEM   
000015F4                           504                 
000015F4  0C39 0004 000033DF       505      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
000015FC  6700 10A0                506      BEQ     PRINTMOVEM   
00001600                           507  
00001600  0C39 0003 000033E1       508      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
00001608  6700 1094                509      BEQ     PRINTMOVEM   
0000160C                           510     * BRA     SETINVEA
0000160C                           511      
0000160C                           512  CHECK_MOVEM_1100     
0000160C  13FC 0001 000033DD       513      MOVE.B      #1,XBIT
00001614                           514      
00001614                           515  
00001614                           516  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
00001614  13FC 0002 000033B4       517      MOVE.B  #2,Bits
0000161C  4EB8 137E                518      JSR     READ_BITS
00001620                           519      
00001620  B83C 0002                520      CMP.B   #%10,D4
00001624  6700 000E                521      BEQ     CHECK_JSR           * goes to JSR
00001628                           522      
00001628  B83C 0001                523      CMP.B   #%01,D4 
0000162C  6700 006C                524      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
00001630                           525  
00001630  6600 1632                526      BNE     PRINT_DATA
00001634                           527  
00001634                           528  CHECK_JSR       * TODO: TEST
00001634                           529  
00001634  13FC 0003 000033B4       530      MOVE.B  #3,Bits
0000163C  4EB8 137E                531      JSR     READ_BITS
00001640  13C4 000033C7            532      MOVE.B  D4,DEST_MODE
00001646                           533      
00001646  13FC 0003 000033B4       534      MOVE.B  #3,Bits
0000164E  4EB8 137E                535      JSR     READ_BITS
00001652  13C4 000033C6            536      MOVE.B  D4,DEST_REG
00001658                           537      
00001658                           538      *MOVE.B  #4,INDEX
00001658  4EB9 00002A70            539      JSR     CHECK_DESTINATION
0000165E                           540      
0000165E  0C39 000F 000033DF       541      CMP.B   #$F,DstMode         * if invalid print DATA
00001666  6700 15FC                542      BEQ     PRINT_DATA
0000166A                           543      
0000166A  0C39 0002 000033DF       544      CMP.B   #$2,DstMode         * if DstMode 010        
00001672  6700 106C                545      BEQ     PRINTJSR
00001676                           546      
00001676  0C39 0007 000033DF       547      CMP.B   #$7,DstMode         * if DstMode 111 + 000
0000167E  6700 1060                548      BEQ     PRINTJSR
00001682                           549      
00001682  0C39 0008 000033DF       550      CMP.B   #$8,DstMode         * if DstMode 111 + 001
0000168A  6700 1054                551      BEQ     PRINTJSR
0000168E                           552      
0000168E  13FC 0001 000033DE       553      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
00001696                           554      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001696  6000 1048                555      BRA     PRINTJSR
0000169A                           556      
0000169A                           557  CHECK_NOP_RTS
0000169A  13FC 0006 000033B4       558      MOVE.B  #6,Bits
000016A2  4EB8 137E                559      JSR READ_BITS
000016A6                           560      
000016A6  B83C 0031                561      CMP.B   #%110001,D4
000016AA  6700 0FE2                562      BEQ     PRINTNOP            
000016AE                           563      
000016AE  B83C 0035                564      CMP.B   #%110101,D4
000016B2  6700 1042                565      BEQ     PRINTRTS       
000016B6                           566          
000016B6  6600 15AC                567      BNE     PRINT_DATA
000016BA                           568  
000016BA                           569  ************************** ADDQ ***************************
000016BA                           570  CHECK_ADDQ
000016BA  13FC 0003 000033B4       571      MOVE.B  #3,Bits 
000016C2  4EB8 137E                572      JSR     READ_BITS
000016C6  13C4 000033CC            573      MOVE.B  D4,DATA_FIELD
000016CC                           574      
000016CC  4EB9 00002C38            575      JSR     FORMAT_DATA     
000016D2                           576      
000016D2  13FC 0001 000033B4       577      MOVE.B  #1,Bits
000016DA  4EB8 137E                578      JSR     READ_BITS
000016DE  B83C 0000                579      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
000016E2  6600 1580                580      BNE     PRINT_DATA          * goes to PRINT_DATA
000016E6                           581  
000016E6  13FC 0002 000033B4       582      MOVE.B  #2,Bits
000016EE  4EB8 137E                583      JSR     READ_BITS
000016F2  13C4 000033D1            584      MOVE.B  D4,SIZE_BITS             * store size into SIZE
000016F8  0C39 0003 000033D1       585      CMP.B   #%11,SIZE_BITS           * cannot be #%11
00001700  6700 1562                586      BEQ     PRINT_DATA
00001704  4EB9 00002C90            587      JSR     SETSIZE2            * for printing 
0000170A                           588  
0000170A  13FC 0003 000033B4       589      MOVE.B  #3,Bits
00001712  4EB8 137E                590      JSR     READ_BITS
00001716  13C4 000033C7            591      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
0000171C                           592      
0000171C  13FC 0003 000033B4       593      MOVE.B  #3,Bits
00001724  4EB8 137E                594      JSR     READ_BITS
00001728  13C4 000033C6            595      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
0000172E                           596      
0000172E  4EB9 00002A70            597      JSR     CHECK_DESTINATION    
00001734                           598      
00001734  0C39 000F 000033C7       599      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
0000173C  6700 1526                600      BEQ     PRINT_DATA         
00001740                           601      
00001740                           602   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
00001740                           603   *   BEQ     INVALID_EA          * TODO 
00001740                           604      
00001740                           605   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
00001740                           606   *   BEQ     INVALID_EA         * TODO
00001740                           607      
00001740  6000 0FC4                608      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
00001744                           609  
00001744                           610  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
00001744                           611  COMPARE_0110  * TODO : store condition and 8-bit displacement 
00001744  13FC 0004 000033B4       612      MOVE.B  #4,Bits 
0000174C  4EB8 137E                613      JSR     READ_BITS
00001750                           614      
00001750  B83C 000E                615      CMP.B   #%1110,D4
00001754  6700 100E                616      BEQ     PRINTBGT 
00001758                           617      
00001758  B83C 000F                618      CMP.B   #%1111,D4
0000175C  6700 1032                619      BEQ     PRINTBLE 
00001760                           620      
00001760  B83C 0007                621      CMP.B   #%0111,D4
00001764  6700 1014                622      BEQ     PRINTBEQ  
00001768                           623      
00001768  B83C 0000                624      CMP.B   #%0000,D4
0000176C  6700 1038                625      BEQ     PRINTBRA
00001770                           626      
00001770  6000 14F2                627      BRA     PRINT_DATA 
00001774                           628  
00001774                           629  ************************** ADD, ADDA **********************
00001774                           630  COMPARE_1101    * ADD and ADDA 
00001774  13FC 0003 000033B4       631      MOVE.B  #3,Bits
0000177C  4EB8 137E                632      JSR     READ_BITS
00001780  13C4 000033CB            633      MOVE.B  D4,TEMP_REG ;push to EA storage (probably D2)
00001786                           634      
00001786  13FC 0001 000033B4       635      MOVE.B  #1,Bits
0000178E  4EB8 137E                636      JSR     READ_BITS
00001792  13C4 000033DD            637      MOVE.B  D4,XBit
00001798                           638      
00001798  13FC 0002 000033B4       639      MOVE.B  #2,Bits
000017A0  4EB8 137E                640      JSR     READ_BITS
000017A4  13C4 000033D1            641      MOVE.B  D4,SIZE_BITS
000017AA                           642      
000017AA  13FC 0001 000033CA       643      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
000017B2  0C39 0003 000033D1       644      CMP.B   #%11,SIZE_BITS 
000017BA  6700 0072                645      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
000017BE                           646      
000017BE  13FC 0000 000033CA       647      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
000017C6  4EB9 00002BF0            648      JSR     CHECK_XBIT
000017CC                           649      
000017CC                           650      ;These two need to be pushed to EA for second variable, order determined
000017CC                           651      ;by size
000017CC  13FC 0003 000033B4       652      MOVE.B  #3,Bits
000017D4  4EB8 137E                653      JSR     READ_BITS
000017D8  13C4 000033CA            654      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
000017DE                           655      
000017DE  13FC 0003 000033B4       656      MOVE.B  #3,Bits
000017E6  4EB8 137E                657      JSR     READ_BITS
000017EA  13C4 000033CB            658      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
000017F0                           659      
000017F0  13FC 0007 000033DC       660      MOVE.B  #7,INDEX
000017F8  4EB9 00002AF0            661      JSR     CHECK_TEMP   
000017FE  0C39 000F 000033E0       662      CMP.B   #$F, TempMode
00001806  6700 145C                663      BEQ     PRINT_DATA
0000180A                           664    *  CMP.B   #$E,TempMode    
0000180A                           665    *  BEQ     INVALID_EA              * TODO
0000180A                           666      
0000180A  4EF9 00001810            667      JMP     CHECK_ADD
00001810                           668      
00001810                           669  CHECK_ADD
00001810  4EB9 00002C90            670      JSR     SETSIZE2
00001816  0C39 0000 000033D1       671      CMP.B   #%00,SIZE_BITS
0000181E  6600 000A                672      BNE     CCHECK_ADD  
00001822                           673      
00001822  0C39 0001 000033E0       674      CMP.B   #$1,TempMode       * if TempMode is invalid
0000182A                           675    *  BEQ     INVALID_EA              * TODO 
0000182A                           676  CCHECK_ADD
0000182A  6000 10B0                677      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
0000182E                           678  
0000182E                           679  
0000182E                           680  CHECK_ADDA
0000182E  13FC 0001 000033D1       681      MOVE.B  #%01,SIZE_BITS
00001836                           682  
00001836  0C39 0000 000033DD       683      CMP.B   #%0,XBIT
0000183E  6700 0010                684      BEQ     CCHECK_ADDA
00001842  13FC 0002 000033D1       685      MOVE.B  #%10,SIZE_BITS
0000184A                           686      
0000184A  4EB9 00002C90            687      JSR     SETSIZE2
00001850                           688  
00001850                           689  CCHECK_ADDA
00001850  4EB9 00002C90            690      JSR     SETSIZE2
00001856                           691      
00001856  13F9 000033CB 000033C6   692      MOVE.B  TEMP_REG,DEST_REG
00001860  13F9 000033CA 000033C7   693      MOVE.B  TEMP_MODE,DEST_MODE     * set MOVE_DEST to 'An'
0000186A  13FC 0001 000033DF       694      MOVE.B  #$1,DstMode
00001872                           695      
00001872  13FC 0003 000033B4       696      MOVE.B  #3,Bits        
0000187A  4EB8 137E                697      JSR     READ_BITS
0000187E  13C4 000033C8            698      MOVE.B  D4,SRC_MODE    
00001884                           699      
00001884  13FC 0003 000033B4       700      MOVE.B  #3,Bits        
0000188C  4EB8 137E                701      JSR     READ_BITS
00001890  13C4 000033C9            702      MOVE.B  D4,SRC_REG
00001896                           703      
00001896                           704     * MOVE.B  #8,INDEX
00001896  4EB9 00002B70            705      JSR     CHECK_SOURCE
0000189C  0C39 000F 000033E1       706      CMP.B   #$F,SrcMode
000018A4  6700 13BE                707      BEQ     PRINT_DATA
000018A8                           708     * CMP.B   #$E,SrcMode
000018A8                           709     * BEQ     INVALID_EA                  * TODO 
000018A8                           710      
000018A8  6000 1048                711      BRA     PRINTADDA                  * TODO: check the name I/O; check what need EA
000018AC                           712  
000018AC                           713  ************************** MOVEQ ********************************
000018AC                           714  CHECK_MOVEQ
000018AC  13FC 0003 000033B4       715      MOVE.B  #3,Bits         * read next 3 bits
000018B4  4EB8 137E                716      JSR     READ_BITS       * store them in D4
000018B8  13C4 000033C6            717      MOVE.B  D4,DEST_REG     * move register value (used in EA)
000018BE  1439 000033C6            718      MOVE.B  DEST_REG,D2
000018C4  163C 0000                719      MOVE.B  #%000,D3
000018C8                           720      
000018C8  13FC 0001 000033B4       721      MOVE.B  #1,Bits         * read the next bit into D4
000018D0  4EB8 137E                722      JSR     READ_BITS
000018D4  B83C 0000                723      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
000018D8  6600 138A                724      BNE     PRINT_DATA      * goes to PRINT_DATA ?
000018DC                           725      
000018DC  13FC 0008 000033B4       726      MOVE.B  #8,Bits        
000018E4  4EB8 137E                727      JSR     READ_BITS
000018E8  23C4 000033CC            728      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
000018EE                           729      
000018EE  13FC 0007 000033C8       730      MOVE.B  #%111,SRC_MODE  * 
000018F6  13FC 0004 000033C9       731      MOVE.B  #%100,SRC_REG   * 
000018FE  13FC 0004 0000296C       732      MOVE.B  #4,SizeSplit
00001906  6000 0EB4                733      BRA     PRINTMOVEQ 
0000190A                           734      
0000190A                           735  ************************* OR *********************************
0000190A                           736  CHECK_OR
0000190A  13FC 0003 000033B4       737      MOVE.B  #3,Bits
00001912  4EB8 137E                738      JSR     READ_BITS
00001916  13C4 000033CB            739      MOVE.B  D4,TEMP_REG
0000191C                           740      
0000191C  13FC 0001 000033B4       741      MOVE.B  #1,Bits
00001924  4EB8 137E                742      JSR     READ_BITS
00001928  13C4 000033DD            743      MOVE.B  D4,XBit
0000192E                           744      
0000192E  13FC 0002 000033B4       745      MOVE.B  #2,Bits
00001936  4EB8 137E                746      JSR     READ_BITS
0000193A  13C4 000033D1            747      MOVE.B  D4,SIZE_BITS
00001940                           748      
00001940  4EB9 00002C90            749      JSR     SETSIZE2
00001946                           750  
00001946  13FC 0001 000033CA       751      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
0000194E                           752          
0000194E  13FC 0000 000033CA       753      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001956  4EB9 00002BF0            754      JSR     CHECK_XBIT
0000195C                           755      
0000195C  13FC 0003 000033B4       756      MOVE.B  #3,Bits
00001964  4EB8 137E                757      JSR     READ_BITS
00001968  13C4 000033CA            758      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
0000196E                           759      
0000196E  13FC 0003 000033B4       760      MOVE.B  #3,Bits
00001976  4EB8 137E                761      JSR     READ_BITS
0000197A  13C4 000033CB            762      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001980                           763      
00001980                           764      *MOVE.B  #7,INDEX
00001980  4EB9 00002AF0            765      JSR     CHECK_TEMP   
00001986  0C39 000F 000033E0       766      CMP.B   #$F, TempMode
0000198E  6700 12D4                767      BEQ     PRINT_DATA
00001992                           768    *  CMP.B   #$E,TempMode    
00001992                           769    *  BEQ     INVALID_EA              * TODO
00001992                           770      
00001992  4EF9 00002800            771      JMP     PRINTOR
00001998                           772  
00001998                           773  ********************* SUB **********************
00001998                           774  CHECK_SUB
00001998  13FC 0003 000033B4       775      MOVE.B  #3,Bits
000019A0  4EB8 137E                776      JSR     READ_BITS
000019A4  13C4 000033CB            777      MOVE.B  D4,TEMP_REG
000019AA                           778      
000019AA  13FC 0001 000033B4       779      MOVE.B  #1,Bits
000019B2  4EB8 137E                780      JSR     READ_BITS
000019B6  13C4 000033DD            781      MOVE.B  D4,XBit
000019BC                           782      
000019BC  13FC 0002 000033B4       783      MOVE.B  #2,Bits
000019C4  4EB8 137E                784      JSR     READ_BITS
000019C8  13C4 000033D1            785      MOVE.B  D4,SIZE_BITS
000019CE                           786      
000019CE  4EB9 00002C90            787      JSR     SETSIZE2
000019D4                           788  
000019D4  13FC 0001 000033CA       789      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
000019DC                           790          
000019DC  13FC 0000 000033CA       791      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
000019E4  4EB9 00002BF0            792      JSR     CHECK_XBIT
000019EA                           793      
000019EA  13FC 0003 000033B4       794      MOVE.B  #3,Bits
000019F2  4EB8 137E                795      JSR     READ_BITS
000019F6  13C4 000033CA            796      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
000019FC                           797      
000019FC  13FC 0003 000033B4       798      MOVE.B  #3,Bits
00001A04  4EB8 137E                799      JSR     READ_BITS
00001A08  13C4 000033CB            800      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001A0E                           801      
00001A0E                           802      *MOVE.B  #7,INDEX
00001A0E  4EB9 00002AF0            803      JSR     CHECK_TEMP   
00001A14  0C39 000F 000033E0       804      CMP.B   #$F, TempMode
00001A1C  6700 1246                805      BEQ     PRINT_DATA
00001A20                           806    *  CMP.B   #$E,TempMode    
00001A20                           807    *  BEQ     INVALID_EA              * TODO
00001A20                           808      
00001A20  4EF9 000028B0            809      JMP     PRINTSUB
00001A26                           810  
00001A26                           811  
00001A26                           812  ******************* AND ***********************
00001A26                           813  CHECK_AND
00001A26  13FC 0003 000033B4       814      MOVE.B  #3,Bits
00001A2E  4EB8 137E                815      JSR     READ_BITS
00001A32  13C4 000033CB            816      MOVE.B  D4,TEMP_REG
00001A38                           817      
00001A38  13FC 0001 000033B4       818      MOVE.B  #1,Bits
00001A40  4EB8 137E                819      JSR     READ_BITS
00001A44  13C4 000033DD            820      MOVE.B  D4,XBit
00001A4A                           821      
00001A4A  13FC 0002 000033B4       822      MOVE.B  #2,Bits
00001A52  4EB8 137E                823      JSR     READ_BITS
00001A56  13C4 000033D1            824      MOVE.B  D4,SIZE_BITS
00001A5C                           825      
00001A5C  4EB9 00002C90            826      JSR     SETSIZE2
00001A62                           827  
00001A62  13FC 0001 000033CA       828      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
00001A6A                           829          
00001A6A  13FC 0000 000033CA       830      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001A72  4EB9 00002BF0            831      JSR     CHECK_XBIT
00001A78                           832      
00001A78  13FC 0003 000033B4       833      MOVE.B  #3,Bits
00001A80  4EB8 137E                834      JSR     READ_BITS
00001A84  13C4 000033CA            835      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001A8A                           836      
00001A8A  13FC 0003 000033B4       837      MOVE.B  #3,Bits
00001A92  4EB8 137E                838      JSR     READ_BITS
00001A96  13C4 000033CB            839      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001A9C                           840      
00001A9C                           841      *MOVE.B  #7,INDEX
00001A9C  4EB9 00002AF0            842      JSR     CHECK_TEMP   
00001AA2  0C39 000F 000033E0       843      CMP.B   #$F, TempMode
00001AAA  6700 11B8                844      BEQ     PRINT_DATA
00001AAE                           845    *  CMP.B   #$E,TempMode    
00001AAE                           846    *  BEQ     INVALID_EA              * TODO
00001AAE                           847      
00001AAE  4EF9 000028C6            848      JMP     PRINTAND
00001AB4                           849  
00001AB4                           850  ******************************************
00001AB4                           851  *        THE GROUP 14
00001AB4                           852  *        LS,AS AND ROTATION
00001AB4                           853  *        
00001AB4                           854  ******************************************
00001AB4                           855  COMPARE_1110 
00001AB4  4245                     856              CLR D5     ;STORING ISOLATED BITS
00001AB6  4244                     857              CLR D4
00001AB8  3839 000033B2            858              MOVE.W COMMANDDATA,D4
00001ABE  2A04                     859              MOVE.L   D4,D5
00001AC0  0285 000000C0            860              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001AC6  EC8D                     861              LSR.L    #6,D5            ;NORMALIZE
00001AC8  13C5 000033D0            862              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001ACE  BA3C 0003                863              CMP.B    #%11,D5    
00001AD2  6700 0298                864              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001AD6  4245                     865              CLR D5
00001AD8  2A04                     866              MOVE.L   D4,D5      
00001ADA  0285 00000018            867              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001AE0  E68D                     868              LSR.L   #3,D5
00001AE2  BA3C 0001                869              CMP.B   #%001,D5
00001AE6  6700 0020                870              BEQ     G_LS    ;LOGICAL SHIFTS
00001AEA  BA3C 0003                871              CMP.B   #%011,D5
00001AEE  6700 00E4                872              BEQ     G_RO    ;ROTAIONS
00001AF2  BA3C 0000                873              CMP.B   #%000,D5
00001AF6  6700 01A8                874              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001AFA                           875              
00001AFA  13FC 0001 00000001       876              MOVE.B #1,BAD_FLAG
00001B02  4EF9 00002C64            877              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001B08                           878  
00001B08                           879  G_LS               ;GROUP LOGICAL SHIFT
00001B08  4245                     880       CLR   D5
00001B0A  23C4 000033F4            881       MOVE.L D4,IR_IL
00001B10  02B9 00000020 000033F4   882       ANDI.L  #$0020,IR_IL
00001B1A  2A39 000033F4            883       MOVE.L  IR_IL,D5
00001B20  EA8D                     884       LSR.L   #5,D5
00001B22  BA3C 0001                885       CMP.B   #$1,D5
00001B26  6700 0056                886       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001B2A  4245                     887       CLR D5
00001B2C  2A04                     888       MOVE.L  D4,D5
00001B2E  0285 00000100            889       ANDI.L  #$0100,D5
00001B34  E08D                     890       LSR.L  #8,D5
00001B36  23C5 000033EC            891       MOVE.L  D5,DR
00001B3C  4245                     892       CLR D5
00001B3E  2A04                     893       MOVE.L  D4,D5
00001B40  0285 00000E00            894       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001B46  E08D                     895       LSR.L   #8,D5
00001B48  E28D                     896       LSR.L   #1,D5
00001B4A  BABC 00000007            897       CMP.L   #7,D5
00001B50  6E00 1112                898       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001B54  BABC 00000000            899       CMP.L   #0,D5
00001B5A  6D00 1108                900       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001B5E  13C5 000033F8            901       MOVE.B  D5,S_COUNT
00001B64  4EB9 0000264A            902       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001B6A  4245                     903       CLR     D5
00001B6C  2A04                     904       MOVE.L  D4,D5
00001B6E  0285 00000007            905       ANDI.L   #$0007,D5
00001B74  13C5 000033FD            906       MOVE.B   D5,dRN
00001B7A  6000 08CE                907       BRA      PR_LS             
00001B7E                           908       
00001B7E                           909  GLS_EA 
00001B7E  4245                     910       CLR D5
00001B80  4244                     911       CLR D4
00001B82  3839 000033B2            912       MOVE.W COMMANDDATA,D4
00001B88                           913  
00001B88  2A04                     914       MOVE.L  D4,D5
00001B8A  0285 00000100            915       ANDI.L  #$0100,D5
00001B90  E08D                     916       LSR.L  #8,D5
00001B92  23C5 000033EC            917       MOVE.L  D5,DR     ;DIRECTION
00001B98  4245                     918       CLR D5
00001B9A  2A04                     919       MOVE.L  D4,D5
00001B9C  0285 00000E00            920       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001BA2  E08D                     921       LSR.L   #8,D5
00001BA4  E28D                     922       LSR.L   #1,D5
00001BA6  BABC 00000007            923       CMP.L   #7,D5
00001BAC  6E00 10B6                924       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001BB0  BABC 00000000            925       CMP.L   #0,D5
00001BB6  6D00 10AC                926       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001BBA  13C5 000033FC            927       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001BC0  4245                     928       CLR     D5
00001BC2  2A04                     929       MOVE.L   D4,D5
00001BC4  0285 00000007            930       ANDI.L   #$0007,D5
00001BCA  13C5 000033FD            931       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001BD0  6000 05BC                932       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001BD4                           933  G_RO            ;GROUP ROTATION
00001BD4  4245                     934       CLR   D5
00001BD6  23C4 000033F4            935       MOVE.L D4,IR_IL
00001BDC  02B9 00000020 000033F4   936       ANDI.L  #$0020,IR_IL
00001BE6  2A39 000033F4            937       MOVE.L  IR_IL,D5
00001BEC  EA8D                     938       LSR.L   #5,D5
00001BEE  BA3C 0001                939       CMP.B   #$1,D5
00001BF2  6700 0056                940       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001BF6  4245                     941       CLR D5
00001BF8  2A04                     942       MOVE.L  D4,D5
00001BFA  0285 00000100            943       ANDI.L  #$0100,D5
00001C00  E08D                     944       LSR.L  #8,D5
00001C02  23C5 000033EC            945       MOVE.L  D5,DR
00001C08  4245                     946       CLR D5
00001C0A  2A04                     947       MOVE.L  D4,D5
00001C0C  0285 00000E00            948       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C12  E08D                     949       LSR.L   #8,D5
00001C14  E28D                     950       LSR.L   #1,D5
00001C16  BABC 00000007            951       CMP.L   #7,D5
00001C1C  6E00 1046                952       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C20  BABC 00000000            953       CMP.L   #0,D5
00001C26  6D00 103C                954       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C2A  13C5 000033F8            955       MOVE.B  D5,S_COUNT
00001C30  4EB9 0000264A            956       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001C36  4245                     957       CLR     D5
00001C38  2A04                     958       MOVE.L  D4,D5
00001C3A  0285 00000007            959       ANDI.L   #$0007,D5
00001C40  13C5 000033FD            960       MOVE.B   D5,dRN
00001C46  6000 0702                961       BRA      PR_RO    ;PRINT ROTATION   
00001C4A                           962  
00001C4A                           963  GRO_EA 
00001C4A  4245                     964       CLR D5
00001C4C  4244                     965       CLR D4
00001C4E  3839 000033B2            966       MOVE.W COMMANDDATA,D4
00001C54                           967  
00001C54  2A04                     968       MOVE.L  D4,D5
00001C56  0285 00000100            969       ANDI.L  #$0100,D5
00001C5C  E08D                     970       LSR.L  #8,D5
00001C5E  23C5 000033EC            971       MOVE.L  D5,DR     ;DIRECTION
00001C64  4245                     972       CLR D5
00001C66  2A04                     973       MOVE.L  D4,D5
00001C68  0285 00000E00            974       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C6E  E08D                     975       LSR.L   #8,D5
00001C70  E28D                     976       LSR.L   #1,D5
00001C72  BABC 00000007            977       CMP.L   #7,D5
00001C78  6E00 0FEA                978       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C7C  BABC 00000000            979       CMP.L   #0,D5
00001C82  6D00 0FE0                980       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C86  13C5 000033FC            981       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001C8C  4245                     982       CLR     D5
00001C8E  2A04                     983       MOVE.L   D4,D5
00001C90  0285 00000007            984       ANDI.L   #$0007,D5
00001C96  13C5 000033FD            985       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001C9C  6000 05CE                986       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001CA0                           987  
00001CA0                           988  
00001CA0                           989  
00001CA0                           990  G_AS         ;GROUP ARITHMATIC SHIFT
00001CA0  4245                     991       CLR   D5
00001CA2  23C4 000033F4            992       MOVE.L D4,IR_IL
00001CA8  02B9 00000020 000033F4   993       ANDI.L  #$0020,IR_IL
00001CB2  2A39 000033F4            994       MOVE.L  IR_IL,D5
00001CB8  EA8D                     995       LSR.L   #5,D5
00001CBA  BA3C 0001                996       CMP.B   #$1,D5
00001CBE  6700 0056                997       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001CC2  4245                     998       CLR D5
00001CC4  2A04                     999       MOVE.L  D4,D5
00001CC6  0285 00000100           1000       ANDI.L  #$0100,D5
00001CCC  E08D                    1001       LSR.L  #8,D5
00001CCE  23C5 000033EC           1002       MOVE.L  D5,DR
00001CD4  4245                    1003       CLR D5
00001CD6  2A04                    1004       MOVE.L  D4,D5
00001CD8  0285 00000E00           1005       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001CDE  E08D                    1006       LSR.L   #8,D5
00001CE0  E28D                    1007       LSR.L   #1,D5
00001CE2  BABC 00000007           1008       CMP.L   #7,D5
00001CE8  6E00 0F7A               1009       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001CEC  BABC 00000000           1010       CMP.L   #0,D5
00001CF2  6D00 0F70               1011       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001CF6  13C5 000033F8           1012       MOVE.B  D5,S_COUNT
00001CFC  4EB9 0000264A           1013       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001D02  4245                    1014       CLR     D5
00001D04  2A04                    1015       MOVE.L  D4,D5
00001D06  0285 00000007           1016       ANDI.L   #$0007,D5
00001D0C  13C5 000033FD           1017       MOVE.B   D5,dRN
00001D12  6000 06B6               1018       BRA      PR_AS    ;PRINT ROTATION 
00001D16                          1019  
00001D16                          1020  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001D16  4245                    1021       CLR D5
00001D18  4244                    1022       CLR D4
00001D1A  3839 000033B2           1023       MOVE.W COMMANDDATA,D4
00001D20                          1024  
00001D20  2A04                    1025       MOVE.L  D4,D5
00001D22  0285 00000100           1026       ANDI.L  #$0100,D5
00001D28  E08D                    1027       LSR.L  #8,D5
00001D2A  23C5 000033EC           1028       MOVE.L  D5,DR     ;DIRECTION
00001D30  4245                    1029       CLR D5
00001D32  2A04                    1030       MOVE.L  D4,D5
00001D34  0285 00000E00           1031       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001D3A  E08D                    1032       LSR.L   #8,D5
00001D3C  E28D                    1033       LSR.L   #1,D5
00001D3E  BABC 00000007           1034       CMP.L   #7,D5
00001D44  6E00 0F1E               1035       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D48  BABC 00000000           1036       CMP.L   #0,D5
00001D4E  6D00 0F14               1037       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D52  13C5 000033FC           1038       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001D58  4245                    1039       CLR     D5
00001D5A  2A04                    1040       MOVE.L   D4,D5
00001D5C  0285 00000007           1041       ANDI.L   #$0007,D5
00001D62  13C5 000033FD           1042       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001D68  6000 0346               1043       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001D6C                          1044  
00001D6C                          1045  G14_MEMS 
00001D6C  4245                    1046         CLR D5
00001D6E  2A04                    1047         MOVE.L  D4,D5
00001D70  CABC 00000E00           1048         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001D76  E08D                    1049         LSR.L   #8,D5
00001D78  E28D                    1050         LSR.L   #1,D5
00001D7A  BA3C 0001               1051         CMP.B   #%001,D5
00001D7E  6700 0012               1052         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001D82  BA3C 0003               1053         CMP.B   #%011,D5
00001D86  6700 0070               1054         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001D8A  BA3C 0000               1055         CMP.B   #%000,D5
00001D8E  6700 00CE               1056         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001D92                          1057  
00001D92                          1058  G14_MEMS_LS 
00001D92  4245                    1059             CLR D5
00001D94  2A04                    1060             MOVE.L  D4,D5
00001D96  0285 00000100           1061             ANDI.L  #$0100,D5
00001D9C  E08D                    1062             LSR.L  #8,D5
00001D9E  13C5 000033EC           1063             MOVE.B  D5,DR     ;DIRECTION
00001DA4  4245                    1064             CLR D5
00001DA6  2A04                    1065             MOVE.L D4,D5
00001DA8  0285 00000038           1066             ANDI.L  #$0038,D5
00001DAE  E68D                    1067             LSR.L  #3,D5
00001DB0  13C5 00003400           1068             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001DB6  4245                    1069             CLR D5
00001DB8  2A04                    1070             MOVE.L D4,D5
00001DBA  0285 00000007           1071             ANDI.L  #$0007,D5
00001DC0  13C5 000033FD           1072             MOVE.B  D5,dRN
00001DC6  0CB9 00000000 00003400  1073             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001DD0  6700 0E92               1074             BEQ    PRINT_DATA
00001DD4  0CB9 00000001 00003400  1075             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001DDE  6700 0E84               1076             BEQ     PRINT_DATA
00001DE2  13C5 000033FF           1077             MOVE.B  D5,dRG     ;DESTINATION REG
00001DE8  0C39 0007 00003400      1078             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001DF0  6700 00F2               1079             BEQ     CHECK_ID_LS 
00001DF4  6000 0192               1080             BRA     PR_G14_MEMS_LS             
00001DF8                          1081             
00001DF8                          1082  
00001DF8                          1083                
00001DF8                          1084   
00001DF8                          1085  
00001DF8                          1086  G14_MEMS_RO
00001DF8  4245                    1087             CLR D5
00001DFA  2A04                    1088             MOVE.L  D4,D5
00001DFC  0285 00000100           1089             ANDI.L  #$0100,D5
00001E02  E08D                    1090             LSR.L  #8,D5
00001E04  13C5 000033EC           1091             MOVE.B  D5,DR     ;DIRECTION
00001E0A  4245                    1092             CLR D5
00001E0C  2A04                    1093             MOVE.L D4,D5
00001E0E  0285 00000038           1094             ANDI.L  #$0038,D5
00001E14  E68D                    1095             LSR.L  #3,D5
00001E16  13C5 00003400           1096             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001E1C  4245                    1097             CLR D5
00001E1E  2A04                    1098             MOVE.L D4,D5
00001E20  0285 00000007           1099             ANDI.L  #$0007,D5
00001E26  13C5 000033FD           1100             MOVE.B  D5,dRN
00001E2C  0CB9 00000000 00003400  1101             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001E36  6700 0E2C               1102             BEQ    PRINT_DATA
00001E3A  0CB9 00000001 00003400  1103             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001E44  6700 0E1E               1104             BEQ     PRINT_DATA
00001E48  13C5 000033FF           1105             MOVE.B  D5,dRG     ;DESTINATION REG
00001E4E  0C39 0007 00003400      1106             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001E56  6700 007C               1107             BEQ     CHECK_ID_RO 
00001E5A  6000 01C0               1108             BRA     PR_G14_MEMS_RO         
00001E5E                          1109  
00001E5E                          1110  G14_MEMS_AS
00001E5E  4245                    1111             CLR D5
00001E60  2A04                    1112             MOVE.L  D4,D5
00001E62  0285 00000100           1113             ANDI.L  #$0100,D5
00001E68  E08D                    1114             LSR.L  #8,D5
00001E6A  13C5 000033EC           1115             MOVE.B  D5,DR     ;DIRECTION
00001E70  4245                    1116             CLR D5
00001E72  2A04                    1117             MOVE.L D4,D5
00001E74  0285 00000038           1118             ANDI.L  #$0038,D5
00001E7A  E68D                    1119             LSR.L  #3,D5
00001E7C  13C5 00003400           1120             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001E82  4245                    1121             CLR D5
00001E84  2A04                    1122             MOVE.L D4,D5
00001E86  0285 00000007           1123             ANDI.L  #$0007,D5
00001E8C  13C5 000033FD           1124             MOVE.B  D5,dRN
00001E92  0CB9 00000000 00003400  1125             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001E9C  6700 0DC6               1126             BEQ    PRINT_DATA
00001EA0  0CB9 00000001 00003400  1127             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001EAA  6700 0DB8               1128             BEQ     PRINT_DATA
00001EAE  13C5 000033FF           1129             MOVE.B  D5,dRG     ;DESTINATION REG
00001EB4  0C39 0007 00003400      1130             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001EBC  6700 0006               1131             BEQ     CHECK_ID_AS 
00001EC0  6000 0032               1132             BRA     PR_G14_MEMS_AS                          
00001EC4                          1133             
00001EC4                          1134  
00001EC4                          1135  
00001EC4  0C39 0004 000033FF      1136  CHECK_ID_AS  CMP.B #$4,dRG
00001ECC  6700 0D96               1137               BEQ   PRINT_DATA
00001ED0  6000 0022               1138               BRA     PR_G14_MEMS_AS
00001ED4                          1139               
00001ED4  0C39 0004 000033FF      1140  CHECK_ID_RO  CMP.B #$4,dRG
00001EDC  6700 0D86               1141               BEQ   PRINT_DATA
00001EE0  6000 013A               1142               BRA     PR_G14_MEMS_RO
00001EE4                          1143    
00001EE4  0C39 0004 000033FF      1144  CHECK_ID_LS  CMP.B #$4,dRG
00001EEC  6700 0D76               1145               BEQ   PRINT_DATA
00001EF0  6000 0096               1146               BRA    PR_G14_MEMS_LS
00001EF4                          1147                               
00001EF4                          1148  PR_G14_MEMS_AS
00001EF4  43F9 000033D4           1149       LEA CLRSPOT,A1      * print space
00001EFA  103C 000E               1150       MOVE.B   #14,D0   
00001EFE  4E4F                    1151       TRAP     #15
00001F00                          1152   
00001F00  0C39 0000 000033EC      1153       CMP.B #$0,DR 
00001F08  6700 0040               1154       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001F0C                          1155      
00001F0C                          1156      *******PRINT LSL*******
00001F0C  43F9 00003392           1157       LEA       PASL,A1   MEM LEFT SHIF
00001F12  103C 000E               1158       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F16  4E4F                    1159       TRAP     #15
00001F18                          1160  
00001F18  43F9 000033D4           1161       LEA CLRSPOT,A1      * print space
00001F1E  103C 000E               1162       MOVE.B   #14,D0   
00001F22  4E4F                    1163       TRAP     #15
00001F24                          1164   
00001F24  4243                    1165       CLR D3
00001F26  4242                    1166       CLR D2
00001F28  1439 00003400           1167       MOVE.B  dMODE,D2
00001F2E  1639 000033FD           1168       MOVE.B  dRN,D3
00001F34  4EB9 00002D32           1169       JSR     EA_START
00001F3A                          1170       
00001F3A  43F9 0000332A           1171       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F40  103C 000E               1172       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F44  4E4F                    1173       TRAP     #15       ; Displays message via trap 14
00001F46                          1174       
00001F46  6000 F360               1175       BRA MEMORYGRABBER
00001F4A                          1176  
00001F4A                          1177       
00001F4A                          1178  PR_ASR_MEM   ;MEM RIGHT SHIFT
00001F4A                          1179            
00001F4A  43F9 0000338E           1180       LEA       PASR,A1   MEM RIGHT SHIF
00001F50  103C 000E               1181       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F54  4E4F                    1182       TRAP     #15
00001F56                          1183  
00001F56  43F9 000033D4           1184       LEA CLRSPOT,A1      * print space
00001F5C  103C 000E               1185       MOVE.B   #14,D0   
00001F60  4E4F                    1186       TRAP     #15
00001F62                          1187   
00001F62  4243                    1188       CLR D3
00001F64  4242                    1189       CLR D2
00001F66  1439 00003400           1190       MOVE.B  dMODE,D2
00001F6C  1639 000033FD           1191       MOVE.B  dRN,D3
00001F72  4EB9 00002D32           1192       JSR     EA_START
00001F78                          1193       
00001F78  43F9 0000332A           1194       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F7E  103C 000E               1195       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F82  4E4F                    1196       TRAP     #15       ; Displays message via trap 14
00001F84                          1197       
00001F84  6000 F322               1198       BRA MEMORYGRABBER
00001F88                          1199  
00001F88                          1200  
00001F88                          1201               
00001F88                          1202  
00001F88                          1203  PR_G14_MEMS_LS
00001F88  43F9 000033D4           1204       LEA CLRSPOT,A1      * print space
00001F8E  103C 000E               1205       MOVE.B   #14,D0   
00001F92  4E4F                    1206       TRAP     #15
00001F94                          1207   
00001F94  0C39 0000 000033EC      1208       CMP.B #$0,DR 
00001F9C  6700 0040               1209       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001FA0                          1210      
00001FA0                          1211      *******PRINT LSL*******
00001FA0  43F9 00003386           1212       LEA       PLSL,A1   MEM LEFT SHIF
00001FA6  103C 000E               1213       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FAA  4E4F                    1214       TRAP     #15 
00001FAC                          1215       
00001FAC  43F9 000033D4           1216       LEA CLRSPOT,A1      * print space
00001FB2  103C 000E               1217       MOVE.B   #14,D0   
00001FB6  4E4F                    1218       TRAP     #15
00001FB8                          1219  
00001FB8                          1220       
00001FB8  4243                    1221       CLR D3
00001FBA  4242                    1222       CLR D2
00001FBC  1439 00003400           1223       MOVE.B  dMODE,D2
00001FC2  1639 000033FD           1224       MOVE.B  dRN,D3
00001FC8  4EB9 00002D32           1225       JSR     EA_START
00001FCE                          1226       
00001FCE  43F9 0000332A           1227       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001FD4  103C 000E               1228       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FD8  4E4F                    1229       TRAP     #15       ; Displays message via trap 14
00001FDA                          1230       
00001FDA  6000 F2CC               1231       BRA MEMORYGRABBER
00001FDE                          1232       
00001FDE                          1233  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001FDE  43F9 0000338A           1234       LEA       PLSR,A1   MEM RIGHT SHIF
00001FE4  103C 000E               1235       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FE8  4E4F                    1236       TRAP     #15
00001FEA                          1237       
00001FEA  43F9 000033D4           1238       LEA CLRSPOT,A1      * print space
00001FF0  103C 000E               1239       MOVE.B   #14,D0   
00001FF4  4E4F                    1240       TRAP     #15
00001FF6                          1241   
00001FF6  4243                    1242       CLR D3
00001FF8  4242                    1243       CLR D2
00001FFA  1439 00003400           1244       MOVE.B  dMODE,D2
00002000  1639 000033FD           1245       MOVE.B  dRN,D3
00002006  4EB9 00002D32           1246       JSR     EA_START
0000200C                          1247       
0000200C  43F9 0000332A           1248       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002012  103C 000E               1249       MOVE.B   #14,D0     ; moves #14 into data register D0
00002016  4E4F                    1250       TRAP     #15       ; Displays message via trap 14
00002018                          1251       
00002018  6000 F28E               1252       BRA    MEMORYGRABBER
0000201C                          1253  
0000201C                          1254  PR_G14_MEMS_RO
0000201C  43F9 000033D4           1255       LEA CLRSPOT,A1      * print space
00002022  103C 000E               1256       MOVE.B   #14,D0   
00002026  4E4F                    1257       TRAP     #15
00002028                          1258       
00002028  0C39 0000 000033EC      1259       CMP.B #$0,DR 
00002030  6700 0040               1260       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
00002034                          1261      
00002034                          1262      *******PRINT ASL*******
00002034  43F9 00003396           1263       LEA       PROL,A1   ROTATE MEM LEFT SHIF
0000203A  103C 000E               1264       MOVE.B   #14,D0     ; moves #14 into data register D0
0000203E  4E4F                    1265       TRAP     #15
00002040                          1266  
00002040  43F9 000033D4           1267       LEA CLRSPOT,A1      * print space
00002046  103C 000E               1268       MOVE.B   #14,D0   
0000204A  4E4F                    1269       TRAP     #15
0000204C                          1270  
0000204C                          1271        
0000204C  4243                    1272       CLR D3
0000204E  4242                    1273       CLR D2
00002050  1439 00003400           1274       MOVE.B  dMODE,D2
00002056  1639 000033FD           1275       MOVE.B  dRN,D3
0000205C  4EB9 00002D32           1276       JSR     EA_START
00002062                          1277       
00002062  43F9 0000332A           1278       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002068  103C 000E               1279       MOVE.B   #14,D0     ; moves #14 into data register D0
0000206C  4E4F                    1280       TRAP     #15       ; Displays message via trap 14
0000206E                          1281       
0000206E  6000 F238               1282       BRA MEMORYGRABBER
00002072                          1283  
00002072                          1284  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00002072  43F9 0000339A           1285       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
00002078  103C 000E               1286       MOVE.B   #14,D0     ; moves #14 into data register D0
0000207C  4E4F                    1287       TRAP     #15
0000207E                          1288  
0000207E  43F9 000033D4           1289       LEA CLRSPOT,A1      * print space
00002084  103C 000E               1290       MOVE.B   #14,D0   
00002088  4E4F                    1291       TRAP     #15
0000208A                          1292   
0000208A  4243                    1293       CLR D3
0000208C  4242                    1294       CLR D2
0000208E  1439 00003400           1295       MOVE.B  dMODE,D2
00002094  1639 000033FD           1296       MOVE.B  dRN,D3
0000209A  4EB9 00002D32           1297       JSR     EA_START
000020A0                          1298       
000020A0  43F9 0000332A           1299       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000020A6  103C 000E               1300       MOVE.B   #14,D0     ; moves #14 into data register D0
000020AA  4E4F                    1301       TRAP     #15       ; Displays message via trap 14
000020AC                          1302       
000020AC  6000 F1FA               1303       BRA MEMORYGRABBER
000020B0                          1304  
000020B0                          1305  
000020B0                          1306  
000020B0                          1307  
000020B0                          1308  PR_G_AS_EA
000020B0  43F9 000033D4           1309         LEA CLRSPOT,A1      * print space
000020B6  103C 000E               1310         MOVE.B   #14,D0   
000020BA  4E4F                    1311         TRAP     #15
000020BC                          1312  
000020BC  0CB9 00000000 000033EC  1313          CMP.L #$0,DR 
000020C6  6700 0064               1314          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000020CA                          1315       
000020CA                          1316          *******PRINT ASL*******
000020CA  43F9 00003392           1317          LEA       PASL,A1
000020D0  103C 000E               1318          MOVE.B   #14,D0     ; moves #14 into data register D0
000020D4  4E4F                    1319          TRAP     #15 
000020D6  4EB9 000025FC           1320          JSR      SIZEPRINT
000020DC                          1321          
000020DC  43F9 000033D4           1322          LEA CLRSPOT,A1      * print space
000020E2  103C 000E               1323          MOVE.B   #14,D0   
000020E6  4E4F                    1324          TRAP     #15
000020E8                          1325  
000020E8                          1326          
000020E8  4242                    1327          CLR D2
000020EA  4243                    1328          CLR D3
000020EC  143C 0000               1329          MOVE.B  #%000,D2     ; mode data register
000020F0  1639 000033FC           1330          MOVE.B  sRN,D3       ; source register number
000020F6  4EB9 00002D32           1331          JSR     EA_START
000020FC  43F9 000033DA           1332          LEA      COMA,A1
00002102  103C 000E               1333          MOVE.B   #14,D0
00002106  4E4F                    1334          TRAP     #15
00002108  4243                    1335          CLR D3
0000210A  4242                    1336          CLR D2
0000210C  143C 0000               1337          MOVE.B  #%000,D2      ; mode data register
00002110  1639 000033FD           1338          MOVE.B  dRN,D3        ; destination register
00002116  4EB9 00002D32           1339          JSR     EA_START
0000211C                          1340          
0000211C  43F9 0000332A           1341          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002122  103C 000E               1342          MOVE.B   #14,D0     ; moves #14 into data register D0
00002126  4E4F                    1343          TRAP     #15       ; Displays message via trap 14
00002128                          1344          
00002128  6000 F17E               1345          BRA   MEMORYGRABBER
0000212C                          1346  
0000212C                          1347          
0000212C                          1348  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
0000212C  43F9 0000338E           1349           LEA       PASR,A1
00002132  103C 000E               1350          MOVE.B   #14,D0     ; moves #14 into data register D0
00002136  4E4F                    1351          TRAP     #15 
00002138  4EB9 000025FC           1352          JSR      SIZEPRINT
0000213E                          1353          
0000213E  43F9 000033D4           1354          LEA CLRSPOT,A1      * print space
00002144  103C 000E               1355          MOVE.B   #14,D0   
00002148  4E4F                    1356          TRAP     #15
0000214A                          1357  
0000214A                          1358          
0000214A  4242                    1359          CLR D2
0000214C  4243                    1360          CLR D3
0000214E  143C 0000               1361          MOVE.B  #%000,D2     ; mode data register
00002152  1639 000033FC           1362          MOVE.B  sRN,D3       ; source register number
00002158  4EB9 00002D32           1363          JSR     EA_START
0000215E  43F9 000033DA           1364          LEA      COMA,A1
00002164  103C 000E               1365          MOVE.B   #14,D0
00002168  4E4F                    1366          TRAP     #15
0000216A  4243                    1367          CLR D3
0000216C  4242                    1368          CLR D2
0000216E  143C 0000               1369          MOVE.B  #%000,D2      ; mode data register
00002172  1639 000033FD           1370          MOVE.B  dRN,D3        ; destination register
00002178  4EB9 00002D32           1371          JSR     EA_START
0000217E                          1372          
0000217E  43F9 0000332A           1373          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002184  103C 000E               1374          MOVE.B   #14,D0     ; moves #14 into data register D0
00002188  4E4F                    1375          TRAP     #15       ; Displays message via trap 14
0000218A                          1376          
0000218A  6000 F11C               1377          BRA   MEMORYGRABBER
0000218E                          1378  
0000218E                          1379  
0000218E                          1380  PR_G_LS_EA
0000218E  43F9 000033D4           1381          LEA CLRSPOT,A1      * print space
00002194  103C 000E               1382          MOVE.B   #14,D0   
00002198  4E4F                    1383          TRAP     #15
0000219A                          1384  
0000219A  0CB9 00000000 000033EC  1385          CMP.L #$0,DR 
000021A4  6700 0064               1386          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000021A8                          1387       
000021A8                          1388          *******PRINT LSL*******
000021A8  43F9 00003386           1389          LEA       PLSL,A1
000021AE  103C 000E               1390          MOVE.B   #14,D0     ; moves #14 into data register D0
000021B2  4E4F                    1391          TRAP     #15 
000021B4  4EB9 000025FC           1392          JSR      SIZEPRINT
000021BA                          1393          
000021BA  43F9 000033D4           1394          LEA CLRSPOT,A1      * print space
000021C0  103C 000E               1395          MOVE.B   #14,D0   
000021C4  4E4F                    1396          TRAP     #15
000021C6                          1397  
000021C6                          1398          
000021C6  4242                    1399          CLR D2
000021C8  4243                    1400          CLR D3
000021CA  143C 0000               1401          MOVE.B  #%000,D2     ; mode data register
000021CE  1639 000033FC           1402          MOVE.B  sRN,D3       ; source register number
000021D4  4EB9 00002D32           1403          JSR     EA_START
000021DA  43F9 000033DA           1404          LEA      COMA,A1
000021E0  103C 000E               1405          MOVE.B   #14,D0
000021E4  4E4F                    1406          TRAP     #15
000021E6  4243                    1407          CLR D3
000021E8  4242                    1408          CLR D2
000021EA  143C 0000               1409          MOVE.B  #%000,D2      ; mode data register
000021EE  1639 000033FD           1410          MOVE.B  dRN,D3        ; destination register
000021F4  4EB9 00002D32           1411          JSR     EA_START
000021FA                          1412          
000021FA  43F9 0000332A           1413          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002200  103C 000E               1414          MOVE.B   #14,D0     ; moves #14 into data register D0
00002204  4E4F                    1415          TRAP     #15       ; Displays message via trap 14
00002206                          1416          
00002206  6000 F0A0               1417          BRA   MEMORYGRABBER
0000220A                          1418          
0000220A                          1419  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
0000220A  43F9 0000338A           1420           LEA       PLSR,A1
00002210  103C 000E               1421           MOVE.B   #14,D0     ; moves #14 into data register D0
00002214  4E4F                    1422          TRAP     #15 
00002216  4EB9 000025FC           1423          JSR      SIZEPRINT
0000221C                          1424          
0000221C  43F9 000033D4           1425          LEA CLRSPOT,A1      * print space
00002222  103C 000E               1426          MOVE.B   #14,D0   
00002226  4E4F                    1427          TRAP     #15
00002228                          1428  
00002228                          1429          
00002228  4242                    1430          CLR D2
0000222A  4243                    1431          CLR D3
0000222C  143C 0000               1432          MOVE.B  #%000,D2     ; mode data register
00002230  1639 000033FC           1433          MOVE.B  sRN,D3       ; source register number
00002236  4EB9 00002D32           1434          JSR     EA_START
0000223C  43F9 000033DA           1435          LEA      COMA,A1
00002242  103C 000E               1436          MOVE.B   #14,D0
00002246  4E4F                    1437          TRAP     #15
00002248  4243                    1438          CLR D3
0000224A  4242                    1439          CLR D2
0000224C  143C 0000               1440          MOVE.B  #%000,D2      ; mode data register
00002250  1639 000033FD           1441          MOVE.B  dRN,D3        ; destination register
00002256  4EB9 00002D32           1442          JSR     EA_START
0000225C                          1443          
0000225C  43F9 0000332A           1444          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002262  103C 000E               1445          MOVE.B   #14,D0     ; moves #14 into data register D0
00002266  4E4F                    1446          TRAP     #15       ; Displays message via trap 14
00002268                          1447          
00002268  6000 F03E               1448          BRA   MEMORYGRABBER
0000226C                          1449  
0000226C                          1450  
0000226C                          1451  PR_G_RO_EA
0000226C  43F9 000033D4           1452          LEA CLRSPOT,A1      * print space
00002272  103C 000E               1453          MOVE.B   #14,D0   
00002276  4E4F                    1454          TRAP     #15
00002278                          1455   
00002278                          1456          
00002278  0CB9 00000000 000033EC  1457           CMP.L #$0,DR 
00002282  6700 0064               1458          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002286                          1459       
00002286                          1460          *******PRINT LSL*******
00002286  43F9 00003396           1461          LEA       PROL,A1
0000228C  103C 000E               1462          MOVE.B   #14,D0     ; moves #14 into data register D0
00002290  4E4F                    1463          TRAP     #15 
00002292  4EB9 000025FC           1464          JSR      SIZEPRINT
00002298                          1465          
00002298  43F9 000033D4           1466          LEA CLRSPOT,A1      * print space
0000229E  103C 000E               1467          MOVE.B   #14,D0   
000022A2  4E4F                    1468          TRAP     #15
000022A4                          1469  
000022A4                          1470          
000022A4  4242                    1471          CLR D2
000022A6  4243                    1472          CLR D3
000022A8  143C 0000               1473          MOVE.B  #%000,D2     ; mode data register
000022AC  1639 000033FC           1474          MOVE.B  sRN,D3       ; source register number
000022B2  4EB9 00002D32           1475          JSR     EA_START
000022B8  43F9 000033DA           1476          LEA      COMA,A1
000022BE  103C 000E               1477          MOVE.B   #14,D0
000022C2  4E4F                    1478          TRAP     #15
000022C4  4243                    1479          CLR D3
000022C6  4242                    1480          CLR D2
000022C8  143C 0000               1481          MOVE.B  #%000,D2      ; mode data register
000022CC  1639 000033FD           1482          MOVE.B  dRN,D3        ; destination register
000022D2  4EB9 00002D32           1483          JSR     EA_START
000022D8                          1484          
000022D8  43F9 0000332A           1485          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000022DE  103C 000E               1486          MOVE.B   #14,D0     ; moves #14 into data register D0
000022E2  4E4F                    1487          TRAP     #15       ; Displays message via trap 14
000022E4                          1488          
000022E4  6000 EFC2               1489          BRA   MEMORYGRABBER
000022E8                          1490  
000022E8                          1491          
000022E8                          1492  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
000022E8  43F9 0000339A           1493          LEA       PROR,A1
000022EE  103C 000E               1494          MOVE.B   #14,D0     ; moves #14 into data register D0
000022F2  4E4F                    1495          TRAP     #15 
000022F4  4EB9 000025FC           1496          JSR      SIZEPRINT
000022FA                          1497          
000022FA  43F9 000033D4           1498          LEA CLRSPOT,A1      * print space
00002300  103C 000E               1499          MOVE.B   #14,D0   
00002304  4E4F                    1500          TRAP     #15
00002306                          1501  
00002306                          1502          
00002306  4242                    1503          CLR D2
00002308  4243                    1504          CLR D3
0000230A  143C 0000               1505          MOVE.B  #%000,D2     ; mode data register
0000230E  1639 000033FC           1506          MOVE.B  sRN,D3       ; source register number
00002314  4EB9 00002D32           1507          JSR     EA_START
0000231A  43F9 000033DA           1508          LEA      COMA,A1
00002320  103C 000E               1509          MOVE.B   #14,D0
00002324  4E4F                    1510          TRAP     #15
00002326  4243                    1511          CLR D3
00002328  4242                    1512          CLR D2
0000232A  143C 0000               1513          MOVE.B  #%000,D2      ; mode data register
0000232E  1639 000033FD           1514          MOVE.B  dRN,D3        ; destination register
00002334  4EB9 00002D32           1515          JSR     EA_START
0000233A                          1516          
0000233A  43F9 0000332A           1517          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002340  103C 000E               1518          MOVE.B   #14,D0     ; moves #14 into data register D0
00002344  4E4F                    1519          TRAP     #15       ; Displays message via trap 14
00002346                          1520          
00002346  6000 EF60               1521          BRA   MEMORYGRABBER
0000234A                          1522  
0000234A                          1523  PR_RO 
0000234A  43F9 000033D4           1524       LEA CLRSPOT,A1      * print space
00002350  103C 000E               1525       MOVE.B   #14,D0   
00002354  4E4F                    1526       TRAP     #15
00002356                          1527   
00002356  0CB9 00000000 000033EC  1528       CMP.L #$0,DR 
00002360  6700 0234               1529       BEQ   PR_ROR   ;RIGHT SHIFT
00002364                          1530      
00002364                          1531      *******PRINT ASL*******
00002364  43F9 00003396           1532       LEA       PROL,A1
0000236A  103C 000E               1533       MOVE.B   #14,D0     ; moves #14 into data register D0
0000236E  4E4F                    1534       TRAP     #15 
00002370                          1535  
00002370  4EB9 000025FC           1536      JSR      SIZEPRINT
00002376                          1537      
00002376  43F9 000033D4           1538       LEA CLRSPOT,A1      * print space
0000237C  103C 000E               1539       MOVE.B   #14,D0   
00002380  4E4F                    1540       TRAP     #15
00002382                          1541  
00002382                          1542      
00002382  43F9 000033D2           1543      LEA     HASH,A1    * print hash
00002388  700E                    1544      MOVEQ   #14,D0
0000238A  4E4F                    1545      TRAP    #15
0000238C                          1546  
0000238C                          1547      
0000238C  4241                    1548      CLR D1
0000238E  1239 000033F8           1549      MOVE.B   S_COUNT,D1
00002394  103C 0003               1550      MOVE.B   #3,D0
00002398  4E4F                    1551      TRAP     #15
0000239A  43F9 000033DA           1552      LEA      COMA,A1
000023A0  103C 000E               1553      MOVE.B   #14,D0
000023A4  4E4F                    1554      TRAP     #15
000023A6  4243                    1555      CLR D3
000023A8  4242                    1556      CLR D2
000023AA  143C 0000               1557      MOVE.B  #%000,D2
000023AE  1639 000033FD           1558      MOVE.B  dRN,D3
000023B4  4EB9 00002D32           1559      JSR     EA_START
000023BA                          1560      
000023BA  43F9 0000332A           1561      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000023C0  103C 000E               1562      MOVE.B   #14,D0     ; moves #14 into data register D0
000023C4  4E4F                    1563      TRAP     #15       ; Displays message via trap 14
000023C6                          1564  
000023C6                          1565      
000023C6  6000 EEE0               1566      BRA    MEMORYGRABBER
000023CA                          1567  
000023CA                          1568  
000023CA                          1569  
000023CA                          1570  PR_AS 
000023CA  43F9 000033D4           1571       LEA CLRSPOT,A1      * print space
000023D0  103C 000E               1572       MOVE.B   #14,D0   
000023D4  4E4F                    1573       TRAP     #15
000023D6                          1574  
000023D6  0CB9 00000000 000033EC  1575       CMP.L #$0,DR 
000023E0  6700 014E               1576      BEQ   PR_ASR   ;RIGHT SHIFT
000023E4                          1577      
000023E4                          1578      *******PRINT ASL*******
000023E4  43F9 00003392           1579       LEA       PASL,A1
000023EA  103C 000E               1580       MOVE.B   #14,D0     ; moves #14 into data register D0
000023EE  4E4F                    1581       TRAP     #15 
000023F0                          1582  
000023F0  4EB9 000025FC           1583      JSR      SIZEPRINT
000023F6                          1584      
000023F6  43F9 000033D4           1585       LEA CLRSPOT,A1      * print space
000023FC  103C 000E               1586       MOVE.B   #14,D0   
00002400  4E4F                    1587       TRAP     #15
00002402                          1588  
00002402                          1589      
00002402  43F9 000033D2           1590      LEA     HASH,A1    * print hash
00002408  700E                    1591      MOVEQ   #14,D0
0000240A  4E4F                    1592      TRAP    #15
0000240C                          1593  
0000240C                          1594      
0000240C  4241                    1595      CLR D1
0000240E  1239 000033F8           1596      MOVE.B   S_COUNT,D1
00002414  103C 0003               1597      MOVE.B   #3,D0
00002418  4E4F                    1598      TRAP     #15
0000241A  43F9 000033DA           1599      LEA      COMA,A1
00002420  103C 000E               1600      MOVE.B   #14,D0
00002424  4E4F                    1601      TRAP     #15
00002426  4243                    1602      CLR D3
00002428  4242                    1603      CLR D2
0000242A  143C 0000               1604      MOVE.B  #%000,D2
0000242E  1639 000033FD           1605      MOVE.B  dRN,D3
00002434  4EB9 00002D32           1606      JSR     EA_START
0000243A                          1607      
0000243A  43F9 0000332A           1608      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002440  103C 000E               1609      MOVE.B   #14,D0     ; moves #14 into data register D0
00002444  4E4F                    1610      TRAP     #15       ; Displays message via trap 14
00002446                          1611  
00002446  6000 EE60               1612      BRA    MEMORYGRABBER
0000244A                          1613  
0000244A                          1614                        
0000244A                          1615                          
0000244A                          1616  PR_LS 
0000244A  43F9 000033D4           1617       LEA CLRSPOT,A1      * print space
00002450  103C 000E               1618       MOVE.B   #14,D0   
00002454  4E4F                    1619       TRAP     #15
00002456                          1620  
00002456  0CB9 00000000 000033EC  1621      CMP.L #$0,DR 
00002460  6700 0068               1622      BEQ   PR_LSR   ;RIGHT SHIFT
00002464                          1623      
00002464                          1624      *******PRINT LSL*******
00002464  43F9 00003386           1625       LEA       PLSL,A1
0000246A  103C 000E               1626       MOVE.B   #14,D0     ; moves #14 into data register D0
0000246E  4E4F                    1627       TRAP     #15 
00002470                          1628  
00002470  4EB9 000025FC           1629      JSR      SIZEPRINT
00002476                          1630      
00002476  43F9 000033D4           1631      LEA CLRSPOT,A1      * print space
0000247C  103C 000E               1632       MOVE.B   #14,D0   
00002480  4E4F                    1633       TRAP     #15
00002482                          1634  
00002482                          1635      
00002482  43F9 000033D2           1636      LEA     HASH,A1    * print hash
00002488  700E                    1637      MOVEQ   #14,D0
0000248A  4E4F                    1638      TRAP    #15
0000248C                          1639  
0000248C                          1640      
0000248C  4241                    1641      CLR D1
0000248E  1239 000033F8           1642      MOVE.B   S_COUNT,D1
00002494  103C 0003               1643      MOVE.B   #3,D0
00002498  4E4F                    1644      TRAP     #15
0000249A  43F9 000033DA           1645      LEA      COMA,A1
000024A0  103C 000E               1646      MOVE.B   #14,D0
000024A4  4E4F                    1647      TRAP     #15
000024A6  4243                    1648      CLR D3
000024A8  4242                    1649      CLR D2
000024AA  143C 0000               1650      MOVE.B  #%000,D2
000024AE  1639 000033FD           1651      MOVE.B  dRN,D3
000024B4  4EB9 00002D32           1652      JSR     EA_START
000024BA                          1653      
000024BA  43F9 0000332A           1654      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000024C0  103C 000E               1655      MOVE.B   #14,D0     ; moves #14 into data register D0
000024C4  4E4F                    1656      TRAP     #15       ; Displays message via trap 14
000024C6                          1657  
000024C6                          1658      
000024C6  6000 EDE0               1659      BRA    MEMORYGRABBER
000024CA                          1660            
000024CA  43F9 0000338A           1661  PR_LSR LEA   PLSR,A1
000024D0  103C 000E               1662        MOVE.B   #14,D0     ; moves #14 into data register D0
000024D4  4E4F                    1663        TRAP     #15       ; Displays message via trap 14 
000024D6  4EB9 000025FC           1664        JSR      SIZEPRINT
000024DC                          1665        
000024DC  43F9 000033D4           1666        LEA CLRSPOT,A1      * print space
000024E2  103C 000E               1667       MOVE.B   #14,D0   
000024E6  4E4F                    1668       TRAP     #15
000024E8                          1669  
000024E8                          1670        
000024E8  43F9 000033D2           1671        LEA     HASH,A1    * print hash
000024EE  700E                    1672        MOVEQ   #14,D0
000024F0  4E4F                    1673        TRAP    #15
000024F2                          1674  
000024F2                          1675        
000024F2  4241                    1676        CLR D1
000024F4  1239 000033F8           1677        MOVE.B   S_COUNT,D1
000024FA  103C 0003               1678        MOVE.B   #3,D0
000024FE  4E4F                    1679        TRAP     #15
00002500  43F9 000033DA           1680        LEA      COMA,A1
00002506  103C 000E               1681        MOVE.B   #14,D0
0000250A  4E4F                    1682        TRAP     #15
0000250C  4243                    1683        CLR D3
0000250E  4242                    1684        CLR D2
00002510  143C 0000               1685        MOVE.B #%000,D2
00002514  1639 000033FD           1686        MOVE.B  dRN,D3
0000251A  4EB9 00002D32           1687        JSR   EA_START
00002520                          1688        
00002520  43F9 0000332A           1689        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002526  103C 000E               1690        MOVE.B   #14,D0     ; moves #14 into data register D0
0000252A  4E4F                    1691        TRAP     #15       ; Displays message via trap 14
0000252C                          1692  
0000252C                          1693        
0000252C  6000 ED7A               1694        BRA MEMORYGRABBER
00002530                          1695        
00002530  43F9 0000338E           1696  PR_ASR LEA   PASR,A1
00002536  103C 000E               1697         MOVE.B   #14,D0     ; moves #14 into data register D0
0000253A  4E4F                    1698        TRAP     #15       ; Displays message via trap 14 
0000253C  4EB9 000025FC           1699        JSR      SIZEPRINT
00002542                          1700        
00002542  43F9 000033D4           1701        LEA CLRSPOT,A1      * print space
00002548  103C 000E               1702       MOVE.B   #14,D0   
0000254C  4E4F                    1703       TRAP     #15
0000254E                          1704  
0000254E                          1705        
0000254E  43F9 000033D2           1706        LEA     HASH,A1    * print hash
00002554  700E                    1707        MOVEQ   #14,D0
00002556  4E4F                    1708        TRAP    #15
00002558                          1709  
00002558                          1710        
00002558  4241                    1711        CLR D1
0000255A  1239 000033F8           1712        MOVE.B   S_COUNT,D1
00002560  103C 0003               1713        MOVE.B   #3,D0
00002564  4E4F                    1714        TRAP     #15
00002566  43F9 000033DA           1715        LEA      COMA,A1
0000256C  103C 000E               1716        MOVE.B   #14,D0
00002570  4E4F                    1717        TRAP     #15
00002572  4243                    1718        CLR D3
00002574  4242                    1719        CLR D2
00002576  143C 0000               1720        MOVE.B #%000,D2
0000257A  1639 000033FD           1721        MOVE.B  dRN,D3
00002580  4EB9 00002D32           1722        JSR   EA_START
00002586                          1723        
00002586  43F9 0000332A           1724        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000258C  103C 000E               1725        MOVE.B   #14,D0     ; moves #14 into data register D0
00002590  4E4F                    1726        TRAP     #15       ; Displays message via trap 14
00002592                          1727  
00002592                          1728        
00002592  6000 ED14               1729        BRA MEMORYGRABBER
00002596                          1730  
00002596                          1731        
00002596  43F9 0000339A           1732  PR_ROR LEA   PROR,A1
0000259C  103C 000E               1733        MOVE.B   #14,D0     ; moves #14 into data register D0
000025A0  4E4F                    1734        TRAP     #15       ; Displays message via trap 14 
000025A2  4EB9 000025FC           1735        JSR      SIZEPRINT
000025A8                          1736        
000025A8  43F9 000033D4           1737        LEA CLRSPOT,A1      * print space
000025AE  103C 000E               1738       MOVE.B   #14,D0   
000025B2  4E4F                    1739       TRAP     #15
000025B4                          1740  
000025B4                          1741        
000025B4  43F9 000033D2           1742        LEA     HASH,A1    * print hash
000025BA  700E                    1743        MOVEQ   #14,D0
000025BC  4E4F                    1744        TRAP    #15
000025BE                          1745  
000025BE                          1746        
000025BE  4241                    1747        CLR D1
000025C0  1239 000033F8           1748        MOVE.B   S_COUNT,D1
000025C6  103C 0003               1749        MOVE.B   #3,D0
000025CA  4E4F                    1750        TRAP     #15
000025CC  43F9 000033DA           1751        LEA      COMA,A1
000025D2  103C 000E               1752        MOVE.B   #14,D0
000025D6  4E4F                    1753        TRAP     #15
000025D8  4243                    1754        CLR D3
000025DA  4242                    1755        CLR D2
000025DC  143C 0000               1756        MOVE.B #%000,D2
000025E0  1639 000033FD           1757        MOVE.B  dRN,D3
000025E6  4EB9 00002D32           1758        JSR   EA_START
000025EC                          1759        
000025EC  43F9 0000332A           1760        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000025F2  103C 000E               1761        MOVE.B   #14,D0     ; moves #14 into data register D0
000025F6  4E4F                    1762        TRAP     #15       ; Displays message via trap 14
000025F8                          1763  
000025F8                          1764        
000025F8  6000 ECAE               1765        BRA MEMORYGRABBER
000025FC                          1766      
000025FC                          1767        
000025FC                          1768  ;-----------------------extra parts for above code to function
000025FC                          1769  
000025FC                          1770  SIZEPRINT 
000025FC  0C39 0000 000033D0      1771       CMP.B  #$0,SIZE
00002604  6700 001A               1772       BEQ   PRB
00002608  0C39 0001 000033D0      1773       CMP.B  #$1,SIZE
00002610  6700 001C               1774       BEQ   PRW
00002614  0C39 0002 000033D0      1775       CMP.B  #$2,SIZE
0000261C  6700 001E               1776       BEQ   PRL
00002620                          1777  
00002620  43F9 000033BA           1778  PRB   LEA PB,A1
00002626  103C 000E               1779        MOVE.B #14,D0
0000262A  4E4F                    1780        TRAP #15
0000262C  4E75                    1781        RTS
0000262E                          1782  
0000262E  43F9 000033BE           1783  PRW   LEA PW,A1
00002634  103C 000E               1784        MOVE.B #14,D0
00002638  4E4F                    1785        TRAP #15
0000263A  4E75                    1786        RTS 
0000263C                          1787  
0000263C  43F9 000033C2           1788  PRL   LEA PL,A1
00002642  103C 000E               1789        MOVE.B #14,D0
00002646  4E4F                    1790        TRAP #15
00002648  4E75                    1791        RTS 
0000264A                          1792  
0000264A                          1793  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
0000264A  0C39 0000 000033F8      1794           CMP.B #$0,S_COUNT
00002652  6700 0004               1795           BEQ   IS_EIGHT
00002656  4E75                    1796           RTS
00002658                          1797           
00002658  13FC 0008 000033F8      1798  IS_EIGHT  MOVE.B #8,S_COUNT
00002660  4E75                    1799            RTS
00002662                          1800  
00002662                          1801  ;---------------------------------------------------------
00002662                          1802                  ;MOVE SECTION
00002662  43F9 00003330           1803  PRINTMOVE LEA PMOVE,A1
00002668  103C 000E               1804      MOVE.B   #14,D0     ; moves #14 into data register D0
0000266C  4E4F                    1805      TRAP     #15       ; Displays message via trap 14
0000266E  4EB9 0000296C           1806      JSR     SIZESPLIT
00002674  6000 0384               1807      BRA EADN
00002678                          1808      
00002678  43F9 0000333C           1809  PRINTMOVEA LEA PMOVEA,A1
0000267E  103C 000E               1810      MOVE.B   #14,D0     ; moves #14 into data register D0
00002682  4E4F                    1811      TRAP     #15       ; Displays message via trap 14
00002684  4EB9 0000296C           1812      JSR     SIZESPLIT
0000268A  6000 036E               1813      BRA EADN
0000268E                          1814      
0000268E                          1815                      ;First set of commands
0000268E  43F9 00003349           1816  PRINTNOP    LEA PNOP,A1
00002694  103C 000E               1817      MOVE.B   #14,D0     ; moves #14 into data register D0
00002698  4E4F                    1818      TRAP     #15       ; Displays message via trap 14
0000269A                          1819      
0000269A  6000 EC0C               1820      BRA     MEMORYGRABBER
0000269E                          1821  
0000269E  43F9 00003335           1822  PRINTMOVEM  LEA PMOVEM,A1
000026A4  103C 000E               1823      MOVE.B   #14,D0     ; moves #14 into data register D0
000026A8  4E4F                    1824      TRAP     #15       ; Displays message via trap 14
000026AA  4EB9 0000296C           1825      JSR     SIZESPLIT
000026B0  6000 0348               1826      BRA EADN
000026B4                          1827  
000026B4  43F9 0000334D           1828  PRINTLEA    LEA PLEA,A1
000026BA  103C 000E               1829      MOVE.B   #14,D0     ; moves #14 into data register D0
000026BE  4E4F                    1830      TRAP     #15       ; Displays message via trap 14
000026C0  4EB9 0000296C           1831      JSR     SIZESPLIT
000026C6  6000 0332               1832      BRA EADN
000026CA                          1833  
000026CA  43F9 00003351           1834  PRINTNOT    LEA PNOT,A1
000026D0  103C 000E               1835      MOVE.B   #14,D0     ; moves #14 into data register D0
000026D4  4E4F                    1836      TRAP     #15       ; Displays message via trap 14
000026D6  4EB9 0000296C           1837      JSR     SIZESPLIT
000026DC  6000 031C               1838      BRA EADN
000026E0                          1839  
000026E0  43F9 00003355           1840  PRINTJSR    LEA PJSR,A1
000026E6  103C 000E               1841      MOVE.B   #14,D0     ; moves #14 into data register D0
000026EA  4E4F                    1842      TRAP     #15       ; Displays message via trap 14
000026EC  4EB9 0000296C           1843      JSR     SIZESPLIT
000026F2  6000 0306               1844      BRA EADN
000026F6                          1845  
000026F6  43F9 00003359           1846  PRINTRTS    LEA PRTS,A1
000026FC  103C 000E               1847      MOVE.B   #14,D0     ; moves #14 into data register D0
00002700  4E4F                    1848      TRAP     #15       ; Displays message via trap 14
00002702                          1849      
00002702  6000 EBA4               1850      BRA     MEMORYGRABBER
00002706                          1851      
00002706                          1852                  ;ADDQ SECTION
00002706                          1853  PRINTADDQ 
00002706  43F9 00003381           1854      LEA     PADDQ,A1
0000270C  103C 000E               1855      MOVE.B  #14,D0     ; moves #14 into data register D0
00002710  4E4F                    1856      TRAP    #15       ; Displays message via trap 14
00002712  4EB9 0000296C           1857      JSR     SIZESPLIT
00002718                          1858      
00002718  4EB9 000029C4           1859      JSR     PRINTCLRSPOT 
0000271E  4EB9 000029E0           1860      JSR     PRINTHASH   ; print hash
00002724  4EB9 000029EC           1861      JSR     PRINTDOLLARSIGN     ; print dollar sign
0000272A                          1862      
0000272A  4241                    1863      CLR     D1
0000272C  1239 000033CC           1864      MOVE.B  DATA_FIELD,D1
00002732  103C 0003               1865      MOVE.B  #3,D0     
00002736  4E4F                    1866      TRAP    #15 
00002738                          1867      
00002738  4EB9 000029D2           1868      JSR     PRINTCOMA   ; print coma
0000273E                          1869      
0000273E  4243                    1870      CLR     D3
00002740  4242                    1871      CLR     D2
00002742  1439 000033C7           1872      MOVE.B  DEST_MODE,D2
00002748  1639 000033C6           1873      MOVE.B  DEST_REG,D3
0000274E                          1874      
0000274E  4EB9 00002D32           1875      JSR     EA_START
00002754                          1876      
00002754  43F9 0000332A           1877      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
0000275A  103C 000E               1878      MOVE.B  #14,D0     ; moves #14 into data register D0
0000275E  4E4F                    1879      TRAP    #15       ; Displays message via trap 14
00002760                          1880      
00002760  6000 EB46               1881     BRA      MEMORYGRABBER
00002764                          1882  
00002764                          1883                  ;SECOND SET OF COMMANDS
00002764  43F9 0000335D           1884  PRINTBGT LEA PBGT,A1
0000276A  103C 000E               1885      MOVE.B   #14,D0     ; moves #14 into data register D0
0000276E  4E4F                    1886      TRAP     #15       ; Displays message via trap 14
00002770  4EB9 0000296C           1887      JSR SIZESPLIT
00002776  6000 0282               1888      BRA EADN
0000277A                          1889  
0000277A  43F9 00003361           1890  PRINTBEQ LEA PBEQ,A1
00002780  103C 000E               1891      MOVE.B   #14,D0     ; moves #14 into data register D0
00002784  4E4F                    1892      TRAP     #15       ; Displays message via trap 14
00002786  4EB9 0000296C           1893      JSR SIZESPLIT
0000278C  6000 026C               1894      BRA EADN
00002790                          1895  
00002790  43F9 00003365           1896  PRINTBLE LEA PBLE,A1
00002796  103C 000E               1897      MOVE.B   #14,D0     ; moves #14 into data register D0
0000279A  4E4F                    1898      TRAP     #15       ; Displays message via trap 14
0000279C  4EB9 0000296C           1899      JSR SIZESPLIT
000027A2  6000 0256               1900      BRA EADN
000027A6                          1901  
000027A6  43F9 00003369           1902  PRINTBRA LEA PBRA,A1
000027AC  103C 000E               1903      MOVE.B   #14,D0     ; moves #14 into data register D0
000027B0  4E4F                    1904      TRAP     #15       ; Displays message via trap 14
000027B2  4EB9 0000296C           1905      JSR SIZESPLIT
000027B8  6000 0240               1906      BRA EADN
000027BC                          1907      
000027BC                          1908                  ;MOVEQ SECTION
000027BC                          1909  PRINTMOVEQ 
000027BC  43F9 00003342           1910      LEA PMOVEQ,A1
000027C2  103C 000E               1911      MOVE.B   #14,D0     ; moves #14 into data register D0
000027C6  4E4F                    1912      TRAP     #15       ; Displays message via trap 14
000027C8                          1913      
000027C8  4EB9 000029C4           1914      JSR     PRINTCLRSPOT
000027CE  4EB9 000029E0           1915      JSR     PRINTHASH   ; print hash
000027D4  4EB9 000029EC           1916      JSR     PRINTDOLLARSIGN     ; print dollar sign  
000027DA                          1917   
000027DA  2239 000033CC           1918      MOVE.L      DATA_FIELD,D1
000027E0  143C 0010               1919      MOVE.B      #16,D2
000027E4  103C 000F               1920      MOVE.B      #15,D0     ; moves #14 into data register D0
000027E8  4E4F                    1921      TRAP        #15 
000027EA                          1922      
000027EA  4EB9 000029D2           1923      JSR     PRINTCOMA   ; print coma
000027F0  1E3C 0000               1924      MOVE.B #0,D7
000027F4  7400                    1925      MOVE.L #%000,D2
000027F6  1639 000033C6           1926      MOVE.B DEST_REG,D3
000027FC  6000 01FC               1927      BRA EADN
00002800                          1928  
00002800                          1929                  ;OR SECTION
00002800                          1930  PRINTOR 
00002800  43F9 0000336D           1931      LEA     POR,A1
00002806  103C 000E               1932      MOVE.B  #14,D0     ; moves #14 into data register D0
0000280A  4E4F                    1933      TRAP    #15       ; Displays message via trap 14
0000280C  4EB9 0000296C           1934      JSR     SIZESPLIT
00002812                          1935      
00002812  4EB9 000029C4           1936      JSR     PRINTCLRSPOT
00002818  4EB9 000029E0           1937      JSR     PRINTHASH   ; print hash
0000281E  4EB9 000029EC           1938      JSR     PRINTDOLLARSIGN     ; print dollar sign   
00002824                          1939      
00002824                          1940      * TODO : CHECK THE INVELID_EA FLAG
00002824                          1941      
00002824  0C39 0000 000033DD      1942      CMP.B   #%0,XBit
0000282C  6700 0006               1943      BEQ     PRINT_EA_TO_REG
00002830  6000 0060               1944      BRA     PRINT_REG_TO_EA
00002834                          1945      
00002834                          1946     * BRA EADN
00002834                          1947  
00002834                          1948  PRINT_EA_TO_REG
00002834  13F9 000033CA 000033C8  1949      MOVE.B  TEMP_MODE,SRC_MODE
0000283E  13F9 000033CB 000033C9  1950      MOVE.B  TEMP_REG,SRC_REG
00002848  4286                    1951      CLR.L   D6
0000284A  1C39 000033C9           1952      MOVE.B  SRC_REG,D6             * Set 'n' = RRRD
00002850  13F9 000033E0 000033E1  1953      MOVE.B  TempMode,SrcMode
0000285A                          1954    *TODO:  JSR     PRTSRC              * Print Source EA
0000285A                          1955      
0000285A  4243                    1956      CLR     D3
0000285C  4242                    1957      CLR     D2
0000285E  1439 000033C8           1958      MOVE.B  SRC_MODE,D2
00002864  1639 000033C9           1959      MOVE.B  SRC_REG,D3
0000286A                          1960  
0000286A  4EB9 000029D2           1961      JSR     PRINTCOMA   ; print coma
00002870  4286                    1962      CLR.L   D6
00002872  1C39 000033C6           1963      MOVE.B  DEST_REG,D6             * Set 'n' = RRRD
00002878                          1964   *TODO:   JSR     PRTDST              * Print Destination EA
00002878                          1965   
00002878  4243                    1966      CLR     D3
0000287A  4242                    1967      CLR     D2
0000287C  1439 000033C7           1968      MOVE.B  DEST_MODE,D2
00002882  1639 000033C6           1969      MOVE.B  DEST_REG,D3
00002888                          1970  
00002888                          1971   
00002888                          1972     * MOVE.B  #0,ListActive
00002888  13FC 0000 000033DD      1973      MOVE.B  #0,XBit
00002890  4E75                    1974      RTS
00002892                          1975      
00002892                          1976  PRINT_REG_TO_EA
00002892  4286                    1977      CLR.L   D6
00002894                          1978     * MOVE.B  RRRS,D6             * Set 'n' = RRRS
00002894                          1979     * JSR     PRTSRC              * Print Source EA
00002894                          1980  
00002894  4EB9 000029D2           1981      JSR     PRINTCOMA   ; print coma
0000289A                          1982  
0000289A                          1983    *  MOVE.B  MMMT,MMMD
0000289A                          1984    *  MOVE.B  RRRT,RRRD
0000289A  4286                    1985      CLR.L   D6
0000289C                          1986    *  MOVE.B  RRRD,D6             * Set 'n' = RRRD
0000289C  13F9 000033E0 000033DF  1987      MOVE.B  TempMode,DstMode
000028A6                          1988    *  JSR     PRTDST              * Print Destination EA
000028A6                          1989    *  MOVE.B  #0,ListActive
000028A6  13FC 0000 000033DD      1990      MOVE.B  #0,XBit
000028AE  4E75                    1991      RTS
000028B0                          1992  
000028B0                          1993                  ;SUB SECTION
000028B0  43F9 00003370           1994  PRINTSUB LEA PSUB,A1
000028B6  103C 000E               1995      MOVE.B   #14,D0     ; moves #14 into data register D0
000028BA  4E4F                    1996      TRAP     #15       ; Displays message via trap 14
000028BC  4EB9 0000296C           1997      JSR SIZESPLIT
000028C2  6000 0136               1998      BRA EADN
000028C6                          1999  
000028C6                          2000                  ;AND SECTION
000028C6  43F9 00003374           2001  PRINTAND LEA PAND,A1
000028CC  103C 000E               2002      MOVE.B   #14,D0     ; moves #14 into data register D0
000028D0  4E4F                    2003      TRAP     #15       ; Displays message via trap 14
000028D2  4EB9 0000296C           2004      JSR SIZESPLIT
000028D8  6000 0120               2005      BRA EADN
000028DC                          2006  
000028DC                          2007                  ;ADD SPLIT              
000028DC  43F9 00003378           2008  PRINTADD LEA PADD,A1
000028E2  103C 000E               2009      MOVE.B   #14,D0     ; moves #14 into data register D0
000028E6  4E4F                    2010      TRAP     #15       ; Displays message via trap 14
000028E8  4EB9 0000296C           2011      JSR     SIZESPLIT
000028EE  6000 010A               2012      BRA EADN
000028F2                          2013      
000028F2  43F9 0000337C           2014  PRINTADDA LEA PADDA,A1
000028F8  103C 000E               2015      MOVE.B   #14,D0     ; moves #14 into data register D0
000028FC  4E4F                    2016      TRAP     #15       ; Displays message via trap 14
000028FE  4EB9 0000296C           2017      JSR     SIZESPLIT
00002904  6000 00F4               2018      BRA EADN
00002908                          2019      
00002908                          2020                  ;THIRD ROTATE SPLIT   
00002908                          2021  PRINTROTATESPLIT 
00002908  0C79 0000 0000332F      2022      CMP #0,CommandDetail   
00002910                          2023      *BEQ PRINTLSL
00002910  0C79 0001 0000332F      2024      CMP #1,CommandDetail   
00002918                          2025      *BEQ PRINTLSLDOUBLE
00002918  0C79 0002 0000332F      2026      CMP #2,CommandDetail   
00002920                          2027      *BEQ PRINTLSR
00002920  0C79 0003 0000332F      2028      CMP #3,CommandDetail   
00002928                          2029      *BEQ PRINTLSRDOUBLE
00002928  0C79 0004 0000332F      2030      CMP #4,CommandDetail   
00002930                          2031      *BEQ PRINTASR
00002930  0C79 0005 0000332F      2032      CMP #5,CommandDetail   
00002938                          2033      *BEQ PRINTASRDOUBLE
00002938  0C79 0006 0000332F      2034      CMP #6,CommandDetail   
00002940                          2035      *BEQ PRINTASL
00002940  0C79 0007 0000332F      2036      CMP #7,CommandDetail   
00002948                          2037      *BEQ PRINTASLDOUBLE
00002948  0C79 0008 0000332F      2038      CMP #8,CommandDetail   
00002950                          2039      *BEQ PRINTROL
00002950  0C79 0009 0000332F      2040      CMP #9,CommandDetail   
00002958                          2041      *BEQ PRINTROLDOUBLE
00002958  0C79 000A 0000332F      2042      CMP #10,CommandDetail
00002960                          2043      *BEQ PRINTROR     
00002960  0C79 000B 0000332F      2044      CMP #11,CommandDetail
00002968                          2045      *BEQ PRINTRORDOUBLE            
00002968  6000 E93E               2046      BRA MEMORYGRABBER    
0000296C                          2047  
0000296C                          2048  
0000296C                          2049                  ;SIZE PRINTER
0000296C                          2050  SIZESPLIT   
0000296C  0CB9 00000001 000033B6  2051      CMP.L #1,SizeValue
00002976  6700 003E               2052      BEQ PRINTB
0000297A  0CB9 00000002 000033B6  2053      CMP.L #2,SizeValue
00002984  6700 0022               2054      BEQ PRINTW
00002988  0CB9 00000003 000033B6  2055      CMP.L #3,SizeValue
00002992  6700 0006               2056      BEQ PRINTL
00002996  6000 002C               2057      BRA PRINTCLRSPOT ; go to EA/DN section
0000299A                          2058      
0000299A  43F9 000033C2           2059  PRINTL LEA PL,A1
000029A0  103C 000E               2060      MOVE.B   #14,D0     ; moves #14 into data register D0
000029A4  4E4F                    2061      TRAP     #15       ; Displays message via trap 14
000029A6  4E75                    2062      RTS
000029A8                          2063  
000029A8  43F9 000033BE           2064  PRINTW      LEA PW,A1
000029AE  103C 000E               2065      MOVE.B   #14,D0     ; moves #14 into data register D0
000029B2  4E4F                    2066      TRAP     #15       ; Displays message via trap 14
000029B4  4E75                    2067      RTS
000029B6                          2068  
000029B6  43F9 000033BA           2069  PRINTB  LEA PB,A1
000029BC  103C 000E               2070      MOVE.B   #14,D0     ; moves #14 into data register D0
000029C0  4E4F                    2071      TRAP     #15       ; Displays message via trap 14
000029C2  4E75                    2072      RTS
000029C4                          2073      
000029C4                          2074  PRINTCLRSPOT 
000029C4  43F9 000033D4           2075      LEA CLRSPOT,A1
000029CA  103C 000E               2076      MOVE.B   #14,D0     ; moves #14 into data register D0
000029CE  4E4F                    2077      TRAP     #15       ; Displays message via trap 14
000029D0  4E75                    2078      RTS
000029D2                          2079  
000029D2                          2080  PRINTCOMA   
000029D2  43F9 000033DA           2081      LEA     COMA,A1
000029D8  103C 000E               2082      MOVE.B  #14,D0     
000029DC  4E4F                    2083      TRAP    #15
000029DE  4E75                    2084      RTS
000029E0                          2085  
000029E0                          2086  PRINTHASH 
000029E0  43F9 000033D2           2087      LEA     HASH,A1    * print hash
000029E6  700E                    2088      MOVEQ   #14,D0
000029E8  4E4F                    2089      TRAP    #15
000029EA  4E75                    2090      RTS
000029EC                          2091  
000029EC                          2092  PRINTDOLLARSIGN   
000029EC  43F9 000033D8           2093      LEA     DOLLARSIGN,A1   * print dollar sign
000029F2  103C 000E               2094      MOVE.B   #14,D0
000029F6  4E4F                    2095      TRAP     #15 
000029F8  4E75                    2096      RTS
000029FA                          2097  
000029FA                          2098                  ;PRINT EA/DN
000029FA                          2099  EADN 
000029FA  BE3C 0000               2100      CMP.B   #0,D7
000029FE  6700 0048               2101      BEQ     PRINTNOTRAIL
00002A02  BE3C 0001               2102      CMP.B   #1,D7
00002A06  6700 000E               2103      BEQ     PRINTONETRAIL 
00002A0A  BE3C 0002               2104      CMP.B   #2,D7
00002A0E  6700 001C               2105      BEQ     PRINTTWOTRAIL
00002A12                          2106      
00002A12  6000 E894               2107      BRA     MEMORYGRABBER
00002A16                          2108      
00002A16                          2109  PRINTONETRAIL 
00002A16  4EB9 00002D32           2110      JSR EA_Start
00002A1C  43F9 0000332A           2111      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002A22  103C 000E               2112      MOVE.B   #14,D0     ; moves #14 into data register D0
00002A26  4E4F                    2113      TRAP     #15       ; Displays message via trap 14
00002A28  6000 E87E               2114      BRA MEMORYGRABBER
00002A2C                          2115  
00002A2C                          2116  PRINTTWOTRAIL 
00002A2C  4EB9 00002D32           2117      JSR EA_Start
00002A32  4EB9 00002D32           2118      JSR EA_Start
00002A38  43F9 0000332A           2119      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002A3E  103C 000E               2120      MOVE.B   #14,D0     ; moves #14 into data register D0
00002A42  4E4F                    2121      TRAP     #15       ; Displays message via trap 14
00002A44  6000 E862               2122      BRA MEMORYGRABBER
00002A48                          2123      
00002A48                          2124  PRINTNOTRAIL 
00002A48  4EB9 00002D32           2125      JSR EA_Start
00002A4E  43F9 0000332A           2126      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002A54  103C 000E               2127      MOVE.B   #14,D0     ; moves #14 into data register D0
00002A58  4E4F                    2128      TRAP     #15       ; Displays message via trap 14
00002A5A  6000 E84C               2129      BRA MEMORYGRABBER
00002A5E                          2130  
00002A5E                          2131  CLOSINGSTATEMENTS     
00002A5E  43F9 0000332A           2132      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002A64  103C 000E               2133      MOVE.B   #14,D0     ; moves #14 into data register D0
00002A68  4E4F                    2134      TRAP     #15       ; Displays message via trap 14
00002A6A                          2135     
00002A6A                          2136  STOP    
00002A6A  103C 0009               2137      MOVE.B #9,D0        ; moves #9 into data register D0
00002A6E  4E4F                    2138      TRAP     #15       ; halt simulator via trap 9   
00002A70                          2139      
00002A70                          2140  ;----------------------------- ADDED THIS FOR OP CODE PART 
00002A70                          2141  ********* CHECK DESTINATION ***********
00002A70                          2142  CHECK_DESTINATION
00002A70  13FC 000F 000033DF      2143      MOVE.B  #$F,DstMode
00002A78                          2144      
00002A78  0C39 0007 000033C7      2145      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
00002A80  6700 0026               2146      BEQ     CHECK_DEST_REG             * Checks registers
00002A84                          2147      
00002A84  0C39 0005 000033C7      2148      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
00002A8C  6700 0058               2149      BEQ     R_CHECK_DEST    * Print DATA instead 
00002A90                          2150      
00002A90  0C39 0006 000033C7      2151      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002A98  6700 004C               2152      BEQ     R_CHECK_DEST    * Print DATA instead
00002A9C                          2153      
00002A9C  13F9 000033C7 000033DF  2154      MOVE.B  DEST_MODE,DstMode
00002AA6  4E75                    2155      RTS
00002AA8                          2156  CHECK_DEST_REG
00002AA8  0C39 0002 000033C6      2157      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002AB0  6700 0034               2158      BEQ     R_CHECK_DEST
00002AB4                          2159  
00002AB4  0C39 0003 000033C6      2160      CMP.B   #3,DEST_REG         * if DEST_REG = 011
00002ABC  6700 0028               2161      BEQ     R_CHECK_DEST
00002AC0                          2162      
00002AC0  0C39 0005 000033C6      2163      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002AC8  6C00 016C               2164      BGE     RETURN
00002ACC                          2165      
00002ACC  13F9 000033C7 000033DF  2166      MOVE.B  DEST_MODE,DstMode
00002AD6  4286                    2167      CLR.L   D6
00002AD8  1C39 000033C6           2168      MOVE.B  DEST_REG,D6
00002ADE  DD39 000033DF           2169      ADD.B   D6,DstMode
00002AE4  4E75                    2170      RTS
00002AE6                          2171  R_CHECK_DEST
00002AE6  13FC 000E 000033DF      2172      MOVE.B  #$E,DstMode
00002AEE  4E75                    2173      RTS
00002AF0                          2174  ********* CHECK TEMP ***********
00002AF0                          2175  CHECK_TEMP
00002AF0                          2176  
00002AF0  13FC 000F 000033E0      2177      MOVE.B  #$F,TempMode
00002AF8                          2178      
00002AF8  0C39 0007 000033CA      2179      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
00002B00  6700 0026               2180      BEQ     CHECK_TEMP_REG      * Checks registers
00002B04                          2181  
00002B04  0C39 0005 000033CA      2182      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
00002B0C  6700 0058               2183      BEQ     R_CHECK_TEMP    * 
00002B10                          2184      
00002B10  0C39 0006 000033CA      2185      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
00002B18  6700 004C               2186      BEQ     R_CHECK_TEMP    * 
00002B1C                          2187      
00002B1C  13F9 000033CA 000033E0  2188      MOVE.B  TEMP_MODE,TempMode
00002B26  4E75                    2189      RTS
00002B28                          2190  CHECK_TEMP_REG
00002B28  0C39 0002 000033CB      2191      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
00002B30  6700 0034               2192      BEQ     R_CHECK_TEMP
00002B34                          2193  
00002B34  0C39 0003 000033CB      2194      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
00002B3C  6700 0028               2195      BEQ     R_CHECK_TEMP
00002B40                          2196      
00002B40  0C39 0005 000033CB      2197      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002B48  6700 00EC               2198      BEQ     RETURN
00002B4C                          2199      
00002B4C  13F9 000033CA 000033E0  2200      MOVE.B  TEMP_MODE,TempMode
00002B56  4286                    2201      CLR.L   D6
00002B58  1C39 000033CB           2202      MOVE.B  TEMP_REG,D6
00002B5E  DD39 000033E0           2203      ADD.B   D6,TempMode
00002B64  4E75                    2204      RTS
00002B66                          2205  R_CHECK_TEMP
00002B66  13FC 000E 000033E0      2206      MOVE.B  #$E,TempMode
00002B6E  4E75                    2207      RTS
00002B70                          2208  ******************** CHECK_SOURCE ******************** 
00002B70                          2209  CHECK_SOURCE    * TODO
00002B70  13FC 000F 000033E1      2210      MOVE.B  #$F,SrcMode
00002B78                          2211      
00002B78  0C39 0007 000033C8      2212      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002B80  6700 0026               2213      BEQ     CHECK_SOURCE_REG    * Checks registers
00002B84                          2214  
00002B84  0C39 0005 000033C8      2215      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
00002B8C  6700 0058               2216      BEQ     R_CHECK_SOURCE 
00002B90                          2217      
00002B90  0C39 0006 000033C8      2218      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002B98  6700 004C               2219      BEQ     R_CHECK_SOURCE 
00002B9C                          2220      
00002B9C  13F9 000033C8 000033E1  2221      MOVE.B  SRC_MODE,SrcMode
00002BA6  4E75                    2222      RTS
00002BA8                          2223  CHECK_SOURCE_REG
00002BA8  0C39 0002 000033C9      2224      CMP.B   #2,SRC_REG             * if RRRS = 010
00002BB0  6700 0034               2225      BEQ     R_CHECK_SOURCE
00002BB4                          2226  
00002BB4  0C39 0003 000033C9      2227      CMP.B   #3,SRC_REG          * if RRRS = 011
00002BBC  6700 0028               2228      BEQ     R_CHECK_SOURCE
00002BC0                          2229      
00002BC0  0C39 0005 000033C9      2230      CMP.B   #5,SRC_REG      * if RRRS = 101
00002BC8  6C00 006C               2231      BGE     RETURN
00002BCC                          2232      
00002BCC  13F9 000033C8 000033E1  2233      MOVE.B  SRC_MODE,SrcMode
00002BD6  4286                    2234      CLR.L   D6
00002BD8  1C39 000033C9           2235      MOVE.B  SRC_REG,D6
00002BDE  DD39 000033E1           2236      ADD.B   D6,SrcMode
00002BE4  4E75                    2237      RTS
00002BE6                          2238  R_CHECK_SOURCE
00002BE6  13FC 000E 000033E1      2239      MOVE.B  #$E,SrcMode
00002BEE  4E75                    2240      RTS
00002BF0                          2241  ******************** XBIT ********************
00002BF0                          2242  CHECK_XBIT      
00002BF0  0C39 0000 000033DD      2243      CMP.B   #%0,XBit
00002BF8  6700 0008               2244      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002BFC  6600 001E               2245      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002C00  4E75                    2246      RTS
00002C02                          2247  TEMP_TO_DEST
00002C02  13F9 000033CB 000033C6  2248      MOVE.B  TEMP_REG,DEST_REG
00002C0C  13F9 000033CA 000033C7  2249      MOVE.B  TEMP_MODE,DEST_MODE
00002C16  4EB8 2A70               2250      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002C1A  4E75                    2251      RTS
00002C1C                          2252  TEMP_TO_SRC
00002C1C  13F9 000033CB 000033C9  2253      MOVE.B  TEMP_REG,SRC_REG
00002C26  13F9 000033CA 000033C8  2254      MOVE.B  TEMP_MODE,SRC_MODE
00002C30  4EB8 2B70               2255      JSR     CHECK_SOURCE                 
00002C34  4E75                    2256      RTS
00002C36                          2257    
00002C36                          2258  ******************** OTHER COMMANDS ********************
00002C36                          2259  RETURN
00002C36  4E75                    2260      RTS
00002C38                          2261  
00002C38                          2262  FORMAT_DATA
00002C38  0C39 0000 000033CC      2263      CMP.B   #0,DATA_FIELD
00002C40  66F4                    2264      BNE     RETURN
00002C42  13FC 0008 000033CC      2265      MOVE.B  #8,DATA_FIELD
00002C4A  4E75                    2266      RTS
00002C4C                          2267  
00002C4C                          2268  CHECK_DATA_NEG
00002C4C  BC3C 0080               2269      CMP.B   #128,D6
00002C50  6700 0004               2270      BEQ     PRINT_NEG
00002C54  4E75                    2271      RTS
00002C56                          2272      
00002C56                          2273  PRINT_NEG
00002C56  43F9 000033D6           2274      LEA     NEG,A1      * print "-"
00002C5C  103C 000E               2275      MOVE.B  #14,D0
00002C60  4E4F                    2276      TRAP    #15
00002C62  4E75                    2277      RTS
00002C64                          2278  
00002C64                          2279  PRINT_DATA
00002C64  43F9 0000339E           2280      LEA     PDATA,A1
00002C6A  103C 000E               2281      MOVE.B  #14,D0
00002C6E  4E4F                    2282      TRAP    #15
00002C70                          2283      
00002C70  4EB8 29C4               2284      JSR     PRINTCLRSPOT      * print space
00002C74                          2285      
00002C74                          2286      * TODO: PRINT #$
00002C74                          2287      * TODO: PRINT COMMANDDATA 
00002C74  4E75                    2288      RTS
00002C76                          2289      
00002C76                          2290  * SET SIZE FOR SIZESPLIT    
00002C76                          2291  SETSIZE1
00002C76  0C39 0000 000033D1      2292      CMP.B   #%0,SIZE_BITS
00002C7E  6700 0040               2293      BEQ     SETSIZEW
00002C82  0C39 0001 000033D1      2294      CMP.B   #%1,SIZE_BITS
00002C8A  6700 0040               2295      BEQ     SETSIZEL
00002C8E  4E75                    2296      RTS
00002C90                          2297  SETSIZE2
00002C90  0C39 0000 000033D1      2298      CMP.B   #%00,SIZE_BITS
00002C98  6700 001A               2299      BEQ     SETSIZEB
00002C9C  0C39 0001 000033D1      2300      CMP.B   #%01,SIZE_BITS
00002CA4  6700 001A               2301      BEQ     SETSIZEW
00002CA8  0C39 0002 000033D1      2302      CMP.B   #%10,SIZE_BITS
00002CB0  6700 001A               2303      BEQ     SETSIZEL
00002CB4                          2304  SETSIZEB
00002CB4  23FC 00000001 000033B6  2305      MOVE.L  #1,SizeValue
00002CBE  4E75                    2306      RTS
00002CC0                          2307  SETSIZEW
00002CC0  23FC 00000002 000033B6  2308      MOVE.L  #2,SizeValue 
00002CCA  4E75                    2309      RTS
00002CCC                          2310  SETSIZEL
00002CCC  23FC 00000003 000033B6  2311      MOVE.L  #3,SizeValue
00002CD6  4E75                    2312      RTS
00002CD8                          2313      
00002CD8                          2314  *SETINVEA
00002CD8                          2315      *MOVE.B  #1,INVALID_EA
00002CD8                          2316      *RTS     
00002CD8                          2317      
00002CD8                          2318  CLEARMR
00002CD8  13FC 0000 000033C6      2319      MOVE.B  #0,DEST_REG 
00002CE0  13FC 0000 000033C7      2320      MOVE.B  #0,DEST_MODE
00002CE8  13FC 0000 000033C8      2321      MOVE.B  #0,SRC_MODE
00002CF0  13FC 0000 000033C9      2322      MOVE.B  #0,SRC_REG
00002CF8  13FC 0000 000033CA      2323      MOVE.B  #0,TEMP_MODE
00002D00  13FC 0000 000033CB      2324      MOVE.B  #0,TEMP_REG 
00002D08  13FC 0000 000033D1      2325      MOVE.B  #0,SIZE_BITS
00002D10  13FC 0000 000033B6      2326      MOVE.B  #0,SizeValue
00002D18  23FC 00000000 000033CC  2327      MOVE.L  #0,DATA_FIELD
00002D22  7200                    2328      MOVE.L #0,D1
00002D24  7400                    2329      MOVE.L #0,D2
00002D26  7600                    2330      MOVE.L #0,D3
00002D28  7800                    2331      MOVE.L #0,D4
00002D2A  7A00                    2332      MOVE.L #0,D5
00002D2C  7C00                    2333      MOVE.L #0,D6
00002D2E  7E00                    2334      MOVE.L #0,D7
00002D30  4E75                    2335      RTS  
00002D32                          2336  
00002D32                          2337  *************    
00002D32                          2338  
00002D32                          2339  *******************************************************
00002D32                          2340  * EA subroutine
00002D32                          2341  * Purpose: Generate EA
00002D32                          2342  *         Addresses used: 
00002D32                          2343  *            D2 FOR MODE
00002D32                          2344  *            D3 FOR REGISTER
00002D32                          2345  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002D32                          2346  *            D1 FOR PRINTING
00002D32                          2347  *            A6 MIMICKS INSTRUCTION BUFFER
00002D32                          2348  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002D32                          2349  ***************************************************
00002D32                          2350  
00002D32  0C39 000F 000033E2      2351  EA_start        CMP.B      #$F,STATE
00002D3A  6700 039A               2352                  BEQ        EA_FINISH
00002D3E  4EF9 000030D8           2353                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002D44                          2354  
00002D44  B47C 0000               2355  Continue_EA     CMP.W       #MODE000,D2             
00002D48  6700 0036               2356                  BEQ         DATA_REGISTER                 
00002D4C  B47C 0001               2357                  CMP.W       #MODE001,D2               
00002D50  6700 004A               2358                  BEQ         ADDRESS_REGISTER                 
00002D54  B47C 0002               2359                  CMP.W       #MODE010,D2              
00002D58  6700 005E               2360                  BEQ         ADDRESS_REGISTER_DIRECT               
00002D5C  B47C 0003               2361                  CMP.W       #MODE011,D2              
00002D60  6700 0086               2362                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002D64  B47C 0004               2363                  CMP.W       #MODE100,D2          
00002D68  6700 00B8               2364                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002D6C  B47C 0007               2365                  CMP.W       #MODE111,D2          
00002D70  6700 00EA               2366                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002D74  13FC 0001 000033E2      2367                  MOVE.B      #BAD_FLAG,STATE               
00002D7C  6000 0358               2368                  BRA         EA_FINISH              
00002D80                          2369                  
00002D80                          2370  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002D80  123C 0044               2371                  MOVE.B   #D,D1
00002D84  103C 0006               2372                  MOVE.B  #6,D0
00002D88  4E4F                    2373                  TRAP    #15
00002D8A  0685 00000030           2374                  ADDI.L   #$30,D5
00002D90  1205                    2375                  MOVE.B   D5,D1
00002D92  103C 0006               2376                  MOVE.B  #6,D0
00002D96  4E4F                    2377                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002D98  6000 033C               2378                  BRA      EA_FINISH
00002D9C                          2379                      
00002D9C                          2380  
00002D9C  123C 0041               2381  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002DA0  103C 0006               2382                   MOVE.B  #6,D0
00002DA4  4E4F                    2383                   TRAP    #15
00002DA6  0685 00000030           2384                   ADDI.L   #$30,D5
00002DAC  1205                    2385                   MOVE.B   D5,D1
00002DAE  103C 0006               2386                   MOVE.B  #6,D0
00002DB2  4E4F                    2387                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002DB4  6000 0320               2388                   BRA      EA_FINISH
00002DB8                          2389  
00002DB8                          2390                   
00002DB8                          2391  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002DB8  123C 0028               2392                          MOVE.B   #OPEN_PARENTHESIS,D1
00002DBC  103C 0006               2393                          MOVE.B   #6,D0
00002DC0  4E4F                    2394                          TRAP     #15
00002DC2  123C 0041               2395                          MOVE.B   #A,D1
00002DC6  103C 0006               2396                          MOVE.B  #6,D0
00002DCA  4E4F                    2397                          TRAP    #15
00002DCC  0685 00000030           2398                          ADDI.L   #$30,D5
00002DD2  1205                    2399                          MOVE.B   D5,D1
00002DD4  103C 0006               2400                          MOVE.B  #6,D0
00002DD8  4E4F                    2401                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002DDA  123C 0029               2402                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002DDE  103C 0006               2403                          MOVE.B  #6,D0
00002DE2  4E4F                    2404                          TRAP    #15
00002DE4  6000 02F0               2405                          BRA      EA_FINISH
00002DE8                          2406  
00002DE8                          2407  
00002DE8                          2408  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002DE8  123C 0028               2409                             MOVE.B   #OPEN_PARENTHESIS,D1
00002DEC  103C 0006               2410                             MOVE.B   #6,D0
00002DF0  4E4F                    2411                             TRAP     #15
00002DF2  123C 0041               2412                             MOVE.B   #A,D1
00002DF6  103C 0006               2413                             MOVE.B  #6,D0
00002DFA  4E4F                    2414                             TRAP    #15
00002DFC  0685 00000030           2415                             ADDI.L   #$30,D5
00002E02  1205                    2416                             MOVE.B   D5,D1
00002E04  103C 0006               2417                             MOVE.B  #6,D0
00002E08  4E4F                    2418                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E0A  123C 0029               2419                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002E0E  103C 0006               2420                             MOVE.B  #6,D0
00002E12  4E4F                    2421                             TRAP    #15
00002E14  18FC 002B               2422                             MOVE.B   #PLUS_SIGN,(A4)+
00002E18  103C 0006               2423                             MOVE.B  #6,D0
00002E1C  4E4F                    2424                             TRAP    #15
00002E1E  6000 02B6               2425                             BRA      EA_FINISH
00002E22                          2426  
00002E22                          2427  
00002E22                          2428  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002E22  123C 002D               2429                             MOVE.B   #MINUS_SIGN,D1
00002E26  103C 0006               2430                             MOVE.B   #6,D0
00002E2A  4E4F                    2431                             TRAP        #15
00002E2C  123C 0028               2432                             MOVE.B   #OPEN_PARENTHESIS,D1
00002E30  103C 0006               2433                             MOVE.B   #6,D0
00002E34  4E4F                    2434                             TRAP     #15
00002E36  123C 0041               2435                             MOVE.B   #A,D1
00002E3A  103C 0006               2436                             MOVE.B  #6,D0
00002E3E  4E4F                    2437                             TRAP    #15
00002E40  0685 00000030           2438                             ADDI.L   #$30,D5
00002E46  1205                    2439                             MOVE.B   D5,D1
00002E48  103C 0006               2440                             MOVE.B  #6,D0
00002E4C  4E4F                    2441                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E4E  123C 0029               2442                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002E52  103C 0006               2443                             MOVE.B  #6,D0
00002E56  4E4F                    2444                             TRAP    #15
00002E58  6000 027C               2445                             BRA      EA_FINISH
00002E5C                          2446  
00002E5C                          2447  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002E5C  6000 0002               2448                                BRA  CONTINUE_A_I_A
00002E60                          2449                                
00002E60                          2450                                
00002E60                          2451  CONTINUE_A_I_A                
00002E60  BA3C 0004               2452                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002E64  6700 001E               2453                                BEQ         IMMIDIATE_REGISTER                
00002E68  BA3C 0000               2454                                CMP.B       #0,D5                ; WORD ADDRESSING
00002E6C  6700 0048               2455                                BEQ         WORD_ADDRESSING                
00002E70  BA3C 0001               2456                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002E74  6700 0054               2457                                BEQ         LONG_ADDRESSING              
00002E78  13FC 0001 000033E2      2458                                MOVE.B      #BAD_FLAG,STATE              
00002E80  6000 0254               2459                                BRA         EA_FINISH                * jump to end   
00002E84                          2460                                
00002E84                          2461                                
00002E84  123C 0023               2462  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002E88  103C 0006               2463                                MOVE.B #6,D0
00002E8C  4E4F                    2464                                TRAP   #15
00002E8E  0C39 0001 000033D0      2465                                CMP.B #1,SIZE   ;BYTE
00002E96  6700 0046               2466                                BEQ   GETBYTE
00002E9A  0C39 0002 000033D0      2467                                CMP.B #2,SIZE   ;BYTE
00002EA2  6700 0044               2468                                BEQ   GETWORD
00002EA6  0C39 0003 000033D0      2469                                CMP.B #3,SIZE   ;BYTE
00002EAE  6700 0042               2470                                BEQ   GETLONG
00002EB2  6000 003E               2471                                BRA   GETLONG
00002EB6                          2472                                
00002EB6                          2473  
00002EB6  123C 0024               2474  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002EBA  103C 0006               2475                               MOVE.B #6,D0
00002EBE  4E4F                    2476                               TRAP  #15
00002EC0  3E1E                    2477                               MOVE.W  (A6)+,D7
00002EC2  6000 00BE               2478                               BRA   PRINT_WORD
00002EC6  6000 020E               2479                               BRA   EA_FINISH
00002ECA                          2480  
00002ECA  123C 0024               2481  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002ECE  103C 0006               2482                               MOVE.B #6,D0
00002ED2  4E4F                    2483                               TRAP  #15
00002ED4  2E1E                    2484                               MOVE.L  (A6)+,D7
00002ED6  6000 0128               2485                               BRA   PRINT_LONG
00002EDA  6000 01FA               2486                               BRA   EA_FINISH                            
00002EDE                          2487  
00002EDE                          2488  GETBYTE      
00002EDE  1E1E                    2489                  MOVE.B   (A6)+,D7    
00002EE0  6B00 001A               2490                  BMI     ADD_NEGATIVE
00002EE4  6000 0024               2491                  BRA     PRINT_BRANCHING
00002EE8                          2492  GETWORD                
00002EE8  3E1E                    2493                  MOVE.W   (A6)+,D7
00002EEA  6B00 0010               2494                  BMI     ADD_NEGATIVE
00002EEE  6000 001A               2495                  BRA     PRINT_BRANCHING
00002EF2                          2496  GETLONG                
00002EF2                          2497                  
00002EF2  2E1E                    2498                  MOVE.L   (A6)+,D7
00002EF4  6B00 0006               2499                  BMI     ADD_NEGATIVE
00002EF8  6000 0010               2500                  BRA     PRINT_BRANCHING
00002EFC                          2501                  
00002EFC  123C 002D               2502  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00002F00  123C 0006               2503                  MOVE.B #6,D1
00002F04  4E4F                    2504                  TRAP   #15
00002F06  6000 0002               2505                  BRA    PRINT_BRANCHING
00002F0A                          2506  
00002F0A                          2507  
00002F0A  0C39 0001 000033D0      2508  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002F12  6700 001C               2509                  BEQ    PRINT_BYTE    
00002F16  0C39 0002 000033D0      2510                  CMP.B #2,SIZE   ;WORD
00002F1E  6700 0062               2511                  BEQ    PRINT_WORD
00002F22  0C39 0003 000033D0      2512                  CMP.B  #3,SIZE  ;LONG
00002F2A  6700 00D4               2513                  BEQ    PRINT_LONG
00002F2E  60DA                    2514                  BRA    PRINT_BRANCHING
00002F30                          2515  
00002F30                          2516  
00002F30                          2517  
00002F30                          2518  
00002F30                          2519                  
00002F30                          2520  **** BYTE DATA PRINTING***********************
00002F30  4241                    2521  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002F32                          2522                 
00002F32                          2523  
00002F32  BEBC 0000000F           2524                 CMP.L   #$F,D7              
00002F38  6F00 0006               2525                 BLE     BYTE_ONE_LOOP                  
00002F3C  6000 000E               2526                 BRA     READ_BYTE
00002F40                          2527  
00002F40                          2528  BYTE_ONE_LOOP
00002F40  13FC 0001 000033FE      2529                  MOVE.B  #1,NUMBER_OF_HEX  
00002F48  6000 0002               2530                  BRA     READ_BYTE
00002F4C                          2531      
00002F4C                          2532  READ_BYTE                           
00002F4C  0C39 0000 000033FE      2533      CMP.B   #0,NUMBER_OF_HEX               
00002F54  6700 0014               2534      BEQ     COPYBYTE
00002F58                          2535      
00002F58  123C 0030               2536      MOVE.B  #$30,D1             
00002F5C  103C 0006               2537      MOVE.B  #6,D0               
00002F60  4E4F                    2538      TRAP    #15
00002F62                          2539  
00002F62  5339 000033FE           2540      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002F68  60E2                    2541      BRA     READ_BYTE           ; LOOP
00002F6A                          2542      
00002F6A                          2543  COPYBYTE
00002F6A  2207                    2544      MOVE.L  D7,D1               ; COPY DATA 
00002F6C  143C 0010               2545      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002F70  103C 000F               2546      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002F74  4E4F                    2547      TRAP    #15
00002F76  13FC 0000 000033FE      2548      MOVE.B  #0,NUMBER_OF_HEX
00002F7E  6000 0156               2549      BRA  EA_FINISH
00002F82                          2550  
00002F82                          2551  
00002F82                          2552  
00002F82                          2553  
00002F82                          2554  
00002F82                          2555  ******PRINT WORD DATA******************
00002F82  4241                    2556  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002F84                          2557                 
00002F84                          2558  
00002F84  BEBC 0000000F           2559                 CMP.L   #$F,D7              
00002F8A  6F00 001A               2560                 BLE     WORD_ONE_LOOP
00002F8E  BEBC 000000FF           2561                 CMP.L   #$FF,D7              
00002F94  6F00 001C               2562                 BLE     WORD_TWO_LOOP
00002F98  BEBC 00000FFF           2563                 CMP.L   #$FFF,D7              
00002F9E  6F00 001E               2564                 BLE     WORD_THREE_LOOP                  
00002FA2  6000 0026               2565                 BRA     READ_WORD
00002FA6                          2566  
00002FA6                          2567  WORD_ONE_LOOP
00002FA6  13FC 0001 000033FE      2568                  MOVE.B  #1,NUMBER_OF_HEX  
00002FAE  6000 001A               2569                  BRA     READ_WORD
00002FB2                          2570                  
00002FB2                          2571  WORD_TWO_LOOP
00002FB2  13FC 0002 000033FE      2572                  MOVE.B  #2,NUMBER_OF_HEX  
00002FBA  6000 000E               2573                  BRA     READ_WORD
00002FBE                          2574                  
00002FBE                          2575  WORD_THREE_LOOP
00002FBE  13FC 0003 000033FE      2576                  MOVE.B  #3,NUMBER_OF_HEX  
00002FC6  6000 0002               2577                  BRA     READ_WORD                
00002FCA                          2578      
00002FCA                          2579  READ_WORD                           
00002FCA  0C39 0000 000033FE      2580      CMP.B   #0,NUMBER_OF_HEX               
00002FD2  6700 0014               2581      BEQ     COPYWORD
00002FD6                          2582      
00002FD6  123C 0030               2583      MOVE.B  #$30,D1             
00002FDA  103C 0006               2584      MOVE.B  #6,D0               
00002FDE  4E4F                    2585      TRAP    #15
00002FE0                          2586  
00002FE0  5339 000033FE           2587      SUBI.B  #1,NUMBER_OF_HEX              
00002FE6  60E2                    2588      BRA     READ_WORD                   ; LOOP
00002FE8                          2589  
00002FE8                          2590  COPYWORD
00002FE8  2207                    2591      MOVE.L  D7,D1               ; COPY DATA 
00002FEA  143C 0010               2592      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002FEE  103C 000F               2593      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002FF2  4E4F                    2594      TRAP    #15
00002FF4  13FC 0000 000033FE      2595      MOVE.B  #0,NUMBER_OF_HEX
00002FFC  6000 00D8               2596      BRA  EA_FINISH
00003000                          2597  
00003000                          2598  ****************PRINT LONG DATA*****************
00003000  4241                    2599  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00003002                          2600                 
00003002                          2601  
00003002  BEBC 0000000F           2602                 CMP.L   #$F,D7              
00003008  6F00 0042               2603                 BLE     LONG_ONE_LOOP
0000300C  BEBC 000000FF           2604                 CMP.L   #$FF,D7              
00003012  6F00 0044               2605                 BLE     LONG_TWO_LOOP
00003016  BEBC 00000FFF           2606                 CMP.L   #$FFF,D7              
0000301C  6F00 0046               2607                 BLE     LONG_THREE_LOOP
00003020  BEBC 0000FFFF           2608                 CMP.L   #$FFFF,D7              
00003026  6F00 0048               2609                 BLE     LONG_FOUR_LOOP
0000302A  BEBC 000FFFFF           2610                 CMP.L   #$FFFFF,D7              
00003030  6F00 004A               2611                 BLE     LONG_FIVE_LOOP
00003034  BEBC 00FFFFFF           2612                 CMP.L   #$FFFFFF,D7              
0000303A  6F00 004C               2613                 BLE     LONG_SIX_LOOP
0000303E  BEBC 0FFFFFFF           2614                 CMP.L   #$FFFFFFF,D7              
00003044  6F00 004E               2615                 BLE     LONG_SEVEN_LOOP                  
00003048  6000 0056               2616                 BRA     READ_LONG
0000304C                          2617  
0000304C                          2618  LONG_ONE_LOOP
0000304C  13FC 0001 000033FE      2619                  MOVE.B  #1,NUMBER_OF_HEX  
00003054  6000 004A               2620                  BRA     READ_LONG
00003058                          2621                  
00003058                          2622  LONG_TWO_LOOP
00003058  13FC 0002 000033FE      2623                  MOVE.B  #2,NUMBER_OF_HEX  
00003060  6000 003E               2624                  BRA     READ_LONG
00003064                          2625                  
00003064                          2626  LONG_THREE_LOOP
00003064  13FC 0003 000033FE      2627                  MOVE.B  #3,NUMBER_OF_HEX  
0000306C  6000 0032               2628                  BRA     READ_LONG                
00003070                          2629  LONG_FOUR_LOOP
00003070  13FC 0004 000033FE      2630                  MOVE.B  #4,NUMBER_OF_HEX  
00003078  6000 0026               2631                  BRA     READ_LONG
0000307C                          2632                  
0000307C                          2633  LONG_FIVE_LOOP
0000307C  13FC 0005 000033FE      2634                  MOVE.B  #5,NUMBER_OF_HEX  
00003084  6000 001A               2635                  BRA     READ_LONG
00003088                          2636                  
00003088                          2637  LONG_SIX_LOOP
00003088  13FC 0006 000033FE      2638                  MOVE.B  #6,NUMBER_OF_HEX  
00003090  6000 000E               2639                  BRA     READ_LONG
00003094                          2640  LONG_SEVEN_LOOP
00003094  13FC 0007 000033FE      2641                  MOVE.B  #7,NUMBER_OF_HEX  
0000309C  6000 0002               2642                  BRA     READ_LONG
000030A0                          2643  
000030A0                          2644       
000030A0                          2645  READ_LONG                           
000030A0  0C39 0000 000033FE      2646      CMP.B   #0,NUMBER_OF_HEX               
000030A8  6700 0014               2647      BEQ     COPYLONG
000030AC  123C 0030               2648      MOVE.B  #$30,D1             
000030B0  103C 0006               2649      MOVE.B  #6,D0               
000030B4  4E4F                    2650      TRAP    #15
000030B6                          2651  
000030B6  5339 000033FE           2652      SUBI.B  #1,NUMBER_OF_HEX               
000030BC  60E2                    2653      BRA     READ_LONG                   ; LOOP
000030BE                          2654  
000030BE                          2655  COPYLONG
000030BE  2207                    2656      MOVE.L  D7,D1               ; COPY DATA 
000030C0  143C 0010               2657      MOVE.B  #16,D2              ; USIGN BASE TO 16
000030C4  103C 000F               2658      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
000030C8  4E4F                    2659      TRAP    #15
000030CA  13FC 0000 000033FE      2660      MOVE.B  #0,NUMBER_OF_HEX
000030D2  6000 0002               2661      BRA  EA_FINISH
000030D6                          2662  
000030D6                          2663    
000030D6                          2664  
000030D6                          2665  
000030D6                          2666  
000030D6                          2667  
000030D6                          2668  
000030D6                          2669  
000030D6                          2670  
000030D6  4E75                    2671  EA_FINISH      RTS
000030D8                          2672  
000030D8                          2673  
000030D8                          2674  
000030D8                          2675  
000030D8                          2676  ************************************************
000030D8                          2677  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
000030D8                          2678  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
000030D8                          2679  ************************************************
000030D8                          2680  REGISTER_NUMBER_TO_DECIMAL 
000030D8  B67C 0000               2681                             CMP.W       #REG_0,D3
000030DC  6700 0046               2682                             BEQ         RG0
000030E0  B67C 0001               2683                             CMP.W       #REG_1,D3
000030E4  6700 0046               2684                             BEQ         RG1
000030E8  B67C 0002               2685                             CMP.W       #REG_2,D3
000030EC  6700 0046               2686                             BEQ         RG2
000030F0  B67C 0003               2687                             CMP.W       #REG_3,D3
000030F4  6700 0046               2688                             BEQ         RG3
000030F8  B67C 0004               2689                             CMP.W       #REG_4,D3
000030FC  6700 0046               2690                             BEQ         RG4
00003100  B67C 0005               2691                             CMP.W       #REG_5,D3
00003104  6700 0046               2692                             BEQ         RG5
00003108  B67C 0006               2693                             CMP.W       #REG_6,D3
0000310C  6700 0046               2694                             BEQ         RG6
00003110  B67C 0007               2695                             CMP.W       #REG_7,D3
00003114  6700 0046               2696                             BEQ         RG7
00003118  13FC 0001 000033E2      2697                             MOVE.B      #BAD_FLAG,STATE
00003120  4EF8 2D44               2698                             JMP         CONTINUE_EA
00003124                          2699   
00003124  1A3C 0000               2700  RG0    MOVE.B   #0,D5
00003128  4EF8 2D44               2701         JMP      Continue_EA
0000312C  1A3C 0001               2702  RG1    MOVE.B   #1,D5
00003130  4EF8 2D44               2703         JMP      Continue_EA
00003134  1A3C 0002               2704  RG2    MOVE.B   #2,D5
00003138  4EF8 2D44               2705         JMP      Continue_EA
0000313C  1A3C 0003               2706  RG3    MOVE.B   #3,D5
00003140  4EF8 2D44               2707         JMP      Continue_EA
00003144  1A3C 0004               2708  RG4    MOVE.B   #4,D5
00003148  4EF8 2D44               2709         JMP      Continue_EA
0000314C  1A3C 0005               2710  RG5    MOVE.B   #5,D5
00003150  4EF8 2D44               2711         JMP      Continue_EA
00003154  1A3C 0006               2712  RG6    MOVE.B   #6,D5
00003158  4EF8 2D44               2713         JMP      Continue_EA
0000315C  1A3C 0007               2714  RG7    MOVE.B   #7,D5
00003160  4EF8 2D44               2715         JMP      Continue_EA 
00003164                          2716      
00003164                          2717  ;------------------------------------------------
00003164                          2718      
00003164                          2719  Float   DS.L 1 #0
00003168                          2720  
00003168                          2721  ValOne    DS.B 1 #0
00003169                          2722  ValTwo    DS.B 1 #0
0000316A                          2723  ValThree    DS.B 1 #0
0000316B                          2724  ValFour    DS.B 1 #0
0000316C                          2725  ValFive    DS.B 1 #0
0000316D                          2726  ValSix    DS.B 1 #0
0000316E                          2727  ValSeven    DS.B 1 #0
0000316F                          2728  ValEight    DS.B 1 #0
00003170                          2729  
00003170                          2730  Addsum DS.W 1 #0
00003172                          2731  CarryBit DS.B 1 #0   
00003173                          2732  
00003173                          2733  Trailers DS.B 1 #0
00003174                          2734  Source DS.L 1 #0
00003178                          2735  Destination DS.L 1 #0
0000317C                          2736  
0000317C                          2737          ;generic command lines
0000317C= 57 65 6C 63 6F 6D ...   2738  WELCOME DC.B 'Welcome to our decoder',CR,LF,0
00003195= 50 6C 65 61 73 65 ...   2739  USERPAGEBREAK DC.B 'Please Press enter to see next 25 codes',0
000031BD= 4E 75 6D 62 65 72 ...   2740  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
000031E9= 53 65 63 6F 6E 64 ...   2741  OUTOFORDER DC.B    'Second Num lower than the first Num, please reenter second Num',CR,LF,0
0000322A= 50 6C 65 61 73 65 ...   2742  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory address, perferablly in 8 byte form: ',0 
0000326D= 50 6C 65 61 73 65 ...   2743  MESSAGESECONDADRESS DC.B    'Please enter ending memory address, perferablly in 8 byte form: ',0 
000032AE= 59 6F 75 20 68 61 ...   2744  FINALMESSAGE1    DC.B    'You have reached the end of the program',CR,LF,0
000032D8= 50 6C 65 61 73 65 ...   2745  FINALMESSAGE2    DC.B    'Please enter 0 to exit, or 1 to restart: ',0
00003302= 45 78 69 74 69 6E ...   2746  GOODBYEMESSAGE    DC.B    'Exiting, have a good rest of your day',CR,LF,0
0000332A= 20 0D 0A 00             2747  CLEAR DC.B      ' ',CR,LF,0
0000332E                          2748  
0000332E                          2749          ;the collection of actual command lines to print
0000332E                          2750  CommandPrinter    DS.B 1 #0
0000332F                          2751  CommandDetail    DS.B 1 #0
00003330= 4D 4F 56 45 00          2752  PMOVE DC.B      'MOVE',0
00003335= 4D 4F 56 45 4D 20 00    2753  PMOVEM DC.B      'MOVEM ',0
0000333C= 4D 4F 56 45 41 00       2754  PMOVEA DC.B      'MOVEA',0
00003342= 4D 4F 56 45 51 20 00    2755  PMOVEQ DC.B      'MOVEQ ',0
00003349= 4E 4F 50 00             2756  PNOP DC.B      'NOP',0
0000334D= 4C 45 41 00             2757  PLEA DC.B      'LEA',0
00003351= 4E 4F 54 00             2758  PNOT DC.B      'NOT',0
00003355= 4A 53 52 00             2759  PJSR DC.B      'JSR',0
00003359= 52 54 53 00             2760  PRTS DC.B      'RTS',0
0000335D= 42 47 54 00             2761  PBGT DC.B      'BGT',0
00003361= 42 45 51 00             2762  PBEQ DC.B      'BEQ',0
00003365= 42 4C 45 00             2763  PBLE DC.B      'BLE',0
00003369= 42 52 41 00             2764  PBRA DC.B      'BRA',0
0000336D= 4F 52 00                2765  POR DC.B      'OR',0
00003370= 53 55 42 00             2766  PSUB DC.B      'SUB',0
00003374= 41 4E 44 00             2767  PAND DC.B      'AND',0
00003378= 41 44 44 00             2768  PADD DC.B      'ADD',0
0000337C= 41 44 44 41 00          2769  PADDA DC.B      'ADDA',0
00003381= 41 44 44 51 00          2770  PADDQ DC.B      'ADDQ',0
00003386= 4C 53 4C 00             2771  PLSL DC.B      'LSL',0
0000338A= 4C 53 52 00             2772  PLSR DC.B      'LSR',0
0000338E= 41 53 52 00             2773  PASR DC.B      'ASR',0
00003392= 41 53 4C 00             2774  PASL DC.B      'ASL',0
00003396= 52 4F 4C 00             2775  PROL DC.B      'ROL',0
0000339A= 52 4F 52 00             2776  PROR DC.B      'ROR',0
0000339E                          2777  
0000339E= 44 41 54 41 00          2778  PDATA   DC.B    'DATA',0
000033A3                          2779  
000033A3= 00                      2780  INPUT   DC.B    0
000033A4                          2781  
000033A4= 00000000                2782  STARTINGADDRESS     DC.L 0
000033A8= 00000000                2783  CURRENTADDRESS      DC.L 0
000033AC= 00000000                2784  ENDINGADDRESS       DC.L 0
000033B0= 0000                    2785  CYCLECOUNTER        DC.W 0
000033B2= 0000                    2786  COMMANDDATA         DC.W 0
000033B4= 00                      2787  Bits                DC.B 0
000033B5                          2788  
000033B5                          2789          ;the sizes to print
000033B6                          2790  SizeValue           DS.L 1 #0
000033BA= 2E 42 20 00             2791  PB DC.B      '.B ',0
000033BE= 2E 57 20 00             2792  PW DC.B      '.W ',0
000033C2= 2E 4C 20 00             2793  PL DC.B      '.L ',0
000033C6                          2794  
000033C6                          2795  ;----- ADDED FOR THE OP CODE PART
000033C6                          2796  
000033C6= 00                      2797  DEST_REG        DC.B    0
000033C7= 00                      2798  DEST_MODE       DC.B    0
000033C8                          2799  
000033C8= 00                      2800  SRC_MODE        DC.B    0
000033C9= 00                      2801  SRC_REG         DC.B    0
000033CA                          2802  
000033CA= 00                      2803  TEMP_MODE       DC.B    0
000033CB= 00                      2804  TEMP_REG        DC.B    0
000033CC                          2805  
000033CC                          2806  DATA_FIELD      DS.L    1 #0
000033D0= 00                      2807  SIZE            DC.B    0
000033D1= 00                      2808  SIZE_BITS        DC.B    0
000033D2                          2809  
000033D2= 23 00                   2810  HASH            DC.B    '#',0
000033D4= 20 00                   2811  CLRSPOT         DC.B    ' ',0
000033D6= 2D 00                   2812  NEG             DC.B    '-',0
000033D8= 24 00                   2813  DOLLARSIGN      DC.B    '$',0
000033DA= 2C 00                   2814  COMA            DC.B    ',',0
000033DC                          2815  
000033DC= 00                      2816  INDEX           DC.B    0
000033DD                          2817  
000033DD= 00                      2818  XBIT            DC.B    0
000033DE= 00                      2819  INVALID_EA      DC.B    0
000033DF                          2820  
000033DF= 00                      2821  DstMode         DC.B    0
000033E0= 00                      2822  TempMode        DC.B    0
000033E1= 00                      2823  SrcMode         DC.B    0
000033E2                          2824  
000033E2                          2825  ;------ ADDED FOR EA CODE PART
000033E2                          2826  
000033E2  =00000000               2827  REG_0  EQU         %000
000033E2  =00000001               2828  REG_1  EQU         %001
000033E2  =00000002               2829  REG_2  EQU         %010
000033E2  =00000003               2830  REG_3  EQU         %011
000033E2  =00000004               2831  REG_4  EQU         %100
000033E2  =00000005               2832  REG_5  EQU         %101
000033E2  =00000006               2833  REG_6  EQU         %110
000033E2  =00000007               2834  REG_7  EQU         %111
000033E2                          2835  
000033E2  =00000000               2836  MODE000       EQU         %000                   * MODE Dn
000033E2  =00000001               2837  MODE001       EQU         %001                   * MODE An
000033E2  =00000002               2838  MODE010       EQU         %010                   * MODE (An)
000033E2  =00000003               2839  MODE011       EQU         %011                   * MODE (An)+
000033E2  =00000004               2840  MODE100       EQU         %100                   * MODE -(An)
000033E2  =00000007               2841  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
000033E2                          2842  
000033E2= 00                      2843  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
000033E3  =00000001               2844  BAD_FLAG      EQU         1
000033E4= 00008000                2845  word          DC.L        $8000
000033E8                          2846  SIZE_IL       DS.L        1             ;SIZE ISOLATION
000033EC                          2847  DR            DS.L        1             ;DIRECTION ISOLATION
000033F0                          2848  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
000033F4                          2849  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
000033F8                          2850  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
000033FC                          2851  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
000033FD                          2852  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
000033FE= 00                      2853  NUMBER_OF_HEX DC.B        0
000033FF                          2854  dRG           DS.B        1
00003400                          2855  dMODE         DS.B        1
00003401                          2856  sRG           DS.B        1
00003402                          2857  
00003402= 00000100                2858  print_buffer  DC.l       $100
00003406                          2859  
00003406                          2860  ***** ASCII VALUES FOR EA CHARACTERS**************
00003406  =00000044               2861  D                       EQU      $44
00003406  =00000041               2862  A                       EQU      $41
00003406  =00000028               2863  OPEN_PARENTHESIS        EQU      $28
00003406  =00000024               2864  DOLLAR_SIGN             EQU      $24
00003406  =00000029               2865  CLOSED_PARENTHESIS      EQU      $29
00003406  =0000002B               2866  PLUS_SIGN               EQU      $2B
00003406  =0000002D               2867  MINUS_SIGN              EQU      $2D
00003406  =00000023               2868  HASH_TAG                EQU      $23
00003406  =00000025               2869  PERCENT_SIGN            EQU      $25
00003406                          2870  
00003406                          2871  
00003406                          2872      
00003406                          2873      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2E5C
ADDRESS_REGISTER    2D9C
ADDRESS_REGISTER_DECREMENT  2E22
ADDRESS_REGISTER_DIRECT  2DB8
ADDRESS_REGISTER_INCREMENT  2DE8
ADDSUM              3170
ADD_NEGATIVE        2EFC
BADVAL              31BD
BAD_FLAG            1
BITS                33B4
BYTE_ONE_LOOP       2F40
CARRYBIT            3172
CCHECK_ADD          182A
CCHECK_ADDA         1850
CHAR1               1178
CHAR2               1190
CHARSUB             11A8
CHECK_ADD           1810
CHECK_ADDA          182E
CHECK_ADDQ          16BA
CHECK_AND           1A26
CHECK_DATA_NEG      2C4C
CHECK_DESTINATION   2A70
CHECK_DEST_REG      2AA8
CHECK_ID_AS         1EC4
CHECK_ID_LS         1EE4
CHECK_ID_RO         1ED4
CHECK_JSR           1634
CHECK_LEA           1442
CHECK_MOVEM_1000    1558
CHECK_MOVEM_1100    160C
CHECK_MOVEQ         18AC
CHECK_NOP_JSR_RTS   1614
CHECK_NOP_RTS       169A
CHECK_NOT           14CE
CHECK_OR            190A
CHECK_SOURCE        2B70
CHECK_SOURCE_REG    2BA8
CHECK_SUB           1998
CHECK_TEMP          2AF0
CHECK_TEMP_REG      2B28
CHECK_XBIT          2BF0
CLEAR               332A
CLEARMR             2CD8
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   2A5E
CLRSPOT             33D4
COMA                33DA
COMMANDDATA         33B2
COMMANDDETAIL       332F
COMMANDPRINTER      332E
COMPARE_0100        140A
COMPARE_0110        1744
COMPARE_1101        1774
COMPARE_1110        1AB4
COMPARE_GROUPS      13A6
CONTINUE_A_I_A      2E60
CONTINUE_EA         2D44
COPYBYTE            2F6A
COPYLONG            30BE
COPYWORD            2FE8
CR                  D
CURRENTADDRESS      33A8
CYCLECOUNTER        33B0
D                   44
DATA_FIELD          33CC
DATA_REGISTER       2D80
DESTINATION         3178
DEST_MODE           33C7
DEST_REG            33C6
DMODE               3400
DOLLARSIGN          33D8
DOLLAR_SIGN         24
DONE                11D2
DR                  33EC
DRG                 33FF
DRN                 33FD
DSTMODE             33DF
EADN                29FA
EA_FINISH           30D6
EA_START            2D32
EIGHT_SHIFT         264A
ENDING              1318
ENDINGADDRESS       33AC
ENTRYLOOP           11C0
EXIT                1220
FINALMESSAGE1       32AE
FINALMESSAGE2       32D8
FLOAT               3164
FORMAT_DATA         2C38
G14_MEMS            1D6C
G14_MEMS_AS         1E5E
G14_MEMS_LS         1D92
G14_MEMS_RO         1DF8
G14_TYPE            33F0
GAS_EA              1D16
GETBYTE             2EDE
GETLONG             2EF2
GETWORD             2EE8
GLS_EA              1B7E
GOODBYE             1362
GOODBYEMESSAGE      3302
GRO_EA              1C4A
G_AS                1CA0
G_LS                1B08
G_RO                1BD4
HASH                33D2
HASH_TAG            23
IMMIDIATE_REGISTER  2E84
INDEX               33DC
INPUT               33A3
INT2                1158
INTSUB              1170
INVALID             11B0
INVALID_EA          33DE
IR_IL               33F4
IS_EIGHT            2658
LARGERISSUE         127E
LARGERTHAN          129C
LF                  A
LOADDATAONE         101E
LOADDATATWO         1070
LONG_ADDRESSING     2ECA
LONG_FIVE_LOOP      307C
LONG_FOUR_LOOP      3070
LONG_ONE_LOOP       304C
LONG_SEVEN_LOOP     3094
LONG_SIX_LOOP       3088
LONG_THREE_LOOP     3064
LONG_TWO_LOOP       3058
LOOP_READ_BITS      1388
MEMORYGRABBER       12A8
MESSAGEFIRSTADRESS  322A
MESSAGESECONDADRESS  326D
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
NEG                 33D6
NUMBER_OF_HEX       33FE
OPEN_PARENTHESIS    28
OUTOFORDER          31E9
PADD                3378
PADDA               337C
PADDQ               3381
PAGEBREAK           12F6
PAND                3374
PASL                3392
PASR                338E
PB                  33BA
PBEQ                3361
PBGT                335D
PBLE                3365
PBRA                3369
PDATA               339E
PERCENT_SIGN        25
PJSR                3355
PL                  33C2
PLEA                334D
PLSL                3386
PLSR                338A
PLUS_SIGN           2B
PMOVE               3330
PMOVEA              333C
PMOVEM              3335
PMOVEQ              3342
PNOP                3349
PNOT                3351
POR                 336D
PRB                 2620
PRINTADD            28DC
PRINTADDA           28F2
PRINTADDQ           2706
PRINTAND            28C6
PRINTB              29B6
PRINTBEQ            277A
PRINTBGT            2764
PRINTBLE            2790
PRINTBRA            27A6
PRINTCLRSPOT        29C4
PRINTCOMA           29D2
PRINTDOLLARSIGN     29EC
PRINTHASH           29E0
PRINTJSR            26E0
PRINTL              299A
PRINTLEA            26B4
PRINTMOVE           2662
PRINTMOVEA          2678
PRINTMOVEM          269E
PRINTMOVEQ          27BC
PRINTNOP            268E
PRINTNOT            26CA
PRINTNOTRAIL        2A48
PRINTONETRAIL       2A16
PRINTOR             2800
PRINTROTATESPLIT    2908
PRINTRTS            26F6
PRINTSUB            28B0
PRINTTWOTRAIL       2A2C
PRINTW              29A8
PRINT_BRANCHING     2F0A
PRINT_BUFFER        3402
PRINT_BYTE          2F30
PRINT_DATA          2C64
PRINT_EA_TO_REG     2834
PRINT_LONG          3000
PRINT_NEG           2C56
PRINT_REG_TO_EA     2892
PRINT_WORD          2F82
PRL                 263C
PROL                3396
PROR                339A
PRTS                3359
PRW                 262E
PR_AS               23CA
PR_ASR              2530
PR_ASR_EA           212C
PR_ASR_MEM          1F4A
PR_G14_MEMS_AS      1EF4
PR_G14_MEMS_LS      1F88
PR_G14_MEMS_RO      201C
PR_G_AS_EA          20B0
PR_G_LS_EA          218E
PR_G_RO_EA          226C
PR_LS               244A
PR_LSR              24CA
PR_LSR_EA           220A
PR_LSR_MEM          1FDE
PR_RO               234A
PR_ROR              2596
PR_ROR_EA           22E8
PR_ROR_MEM          2072
PSUB                3370
PW                  33BE
READ_BITS           137E
READ_BYTE           2F4C
READ_LONG           30A0
READ_WORD           2FCA
REGISTER_NUMBER_TO_DECIMAL  30D8
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2C36
RG0                 3124
RG1                 312C
RG2                 3134
RG3                 313C
RG4                 3144
RG5                 314C
RG6                 3154
RG7                 315C
R_CHECK_DEST        2AE6
R_CHECK_SOURCE      2BE6
R_CHECK_TEMP        2B66
SET                 139E
SETSIZE1            2C76
SETSIZE2            2C90
SETSIZEB            2CB4
SETSIZEL            2CCC
SETSIZEW            2CC0
SIZE                33D0
SIZEPRINT           25FC
SIZESPLIT           296C
SIZEVALUE           33B6
SIZE_BITS           33D1
SIZE_IL             33E8
SOURCE              3174
SRCMODE             33E1
SRC_MODE            33C8
SRC_REG             33C9
SRG                 3401
SRN                 33FC
START               1000
STARTCHECK          1140
STARTINGADDRESS     33A4
STATE               33E2
STOP                2A6A
STOREADRESSES       1290
S_COUNT             33F8
TEMPMODE            33E0
TEMP_MODE           33CA
TEMP_REG            33CB
TEMP_TO_DEST        2C02
TEMP_TO_SRC         2C1C
TRAILERS            3173
USERPAGEBREAK       3195
VAL1                10C6
VAL2                10D0
VAL3                10E0
VAL4                10F0
VAL5                1100
VAL6                1110
VAL7                1120
VAL8                1130
VALEIGHT            316F
VALFIVE             316C
VALFOUR             316B
VALONE              3168
VALSEVEN            316E
VALSIX              316D
VALTHREE            316A
VALTWO              3169
WELCOME             317C
WORD                33E4
WORD_ADDRESSING     2EB6
WORD_ONE_LOOP       2FA6
WORD_THREE_LOOP     2FBE
WORD_TWO_LOOP       2FB2
XBIT                33DD
