00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/7/2021 2:26:22 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000  7400                      12      MOVE.L #0,D2
00001002  6000 0002                 13      BRA LOADDATAONE
00001006                            14      
00001006                            15  * TODO: a welcome message with format message 
00001006                            16      
00001006                            17  LOADDATAONE
00001006  43F9 00002E1D             18      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
0000100C  103C 000E                 19      MOVE.B   #14,D0     ; moves #14 into data register D0
00001010  4E4F                      20      TRAP     #15       ; Displays message via trap 14    
00001012                            21      
00001012  43F9 00002EF3             22      LEA     INPUT,A1
00001018  103C 0002                 23      MOVE.B  #2,D0 *takes the string of what the user enters
0000101C  4E4F                      24      TRAP    #15
0000101E                            25      
0000101E  4280                      26      CLR.L   D0
00001020                            27      
00001020                            28      * TODO: check if the input if odd - invalid imput
00001020                            29      
00001020                            30  
00001020                            31      
00001020  1A3C 0000                 32      MOVE.B  #0,D5
00001024                            33      
00001024  13D9 0000A000             34      MOVE.B (A1)+,$A000
0000102A  13D9 0000A010             35      MOVE.B (A1)+,$A010
00001030  13D9 0000A020             36      MOVE.B (A1)+,$A020
00001036  13D9 0000A030             37      MOVE.B (A1)+,$A030
0000103C  13D9 0000A040             38      MOVE.B (A1)+,$A040
00001042  13D9 0000A050             39      MOVE.B (A1)+,$A050
00001048  13D9 0000A060             40      MOVE.B (A1)+,$A060
0000104E  13D9 0000A070             41      MOVE.B (A1)+,$A070
00001054                            42      
00001054  6000 004C                 43      BRA VAL1
00001058                            44  
00001058                            45  LOADDATATWO    
00001058  43F9 00002E43             46      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
0000105E  103C 000E                 47      MOVE.B   #14,D0     ; moves #14 into data register D0
00001062  4E4F                      48      TRAP     #15       ; Displays message via trap 14    
00001064                            49      
00001064  103C 0002                 50      MOVE.B  #2,D0 *takes the string of what the user enters
00001068  4E4F                      51      TRAP    #15
0000106A                            52      
0000106A  1A3C 0000                 53      MOVE.B  #0,D5
0000106E                            54      
0000106E  13D9 0000A000             55      MOVE.B (A1)+,$A000
00001074  13D9 0000A010             56      MOVE.B (A1)+,$A010
0000107A  13D9 0000A020             57      MOVE.B (A1)+,$A020
00001080  13D9 0000A030             58      MOVE.B (A1)+,$A030
00001086  13D9 0000A040             59      MOVE.B (A1)+,$A040
0000108C  13D9 0000A050             60      MOVE.B (A1)+,$A050
00001092  13D9 0000A060             61      MOVE.B (A1)+,$A060
00001098  13D9 0000A070             62      MOVE.B (A1)+,$A070
0000109E                            63      
0000109E  6000 0002                 64      BRA VAL1
000010A2                            65  
000010A2                            66      
000010A2                            67  VAL1    
000010A2  1839 0000A000             68      MOVE.B $A000,D4
000010A8  6000 0072                 69      BRA STARTCHECK
000010AC  13C4 0000A000             70  VAL2    MOVE.B D4,$A000
000010B2  1839 0000A010             71      MOVE.B $A010,D4
000010B8  6000 0062                 72      BRA STARTCHECK
000010BC  13C4 0000A010             73  VAL3    MOVE.B D4,$A010
000010C2  1839 0000A020             74      MOVE.B $A020,D4
000010C8  6000 0052                 75      BRA STARTCHECK
000010CC  13C4 0000A020             76  VAL4    MOVE.B D4,$A020
000010D2  1839 0000A030             77      MOVE.B $A030,D4
000010D8  6000 0042                 78      BRA STARTCHECK
000010DC  13C4 0000A030             79  VAL5    MOVE.B D4,$A030
000010E2  1839 0000A040             80      MOVE.B $A040,D4
000010E8  6000 0032                 81      BRA STARTCHECK
000010EC  13C4 0000A040             82  VAL6    MOVE.B D4,$A040
000010F2  1839 0000A050             83      MOVE.B $A050,D4
000010F8  6000 0022                 84      BRA STARTCHECK
000010FC  13C4 0000A050             85  VAL7    MOVE.B D4,$A050
00001102  1839 0000A060             86      MOVE.B $A060,D4
00001108  6000 0012                 87      BRA STARTCHECK
0000110C  13C4 0000A060             88  VAL8    MOVE.B D4,$A060
00001112  1839 0000A070             89      MOVE.B $A070,D4
00001118  6000 0002                 90      BRA STARTCHECK
0000111C                            91    
0000111C                            92  STARTCHECK  
0000111C  B83C 0030                 93      CMP.B   #48,D4
00001120  6D00 006A                 94      BLT INVALID
00001124  B83C 0030                 95      CMP.B   #48,D4
00001128  6700 0022                 96      BEQ INTSUB
0000112C  B83C 0030                 97      CMP.B   #48,D4
00001130  6E00 0002                 98      BGT INT2
00001134                            99      
00001134                           100  
00001134                           101  INT2 
00001134                           102      
00001134  B83C 0039                103      CMP.B   #57,D4
00001138  6D00 0012                104      BLT INTSUB
0000113C  B83C 0039                105      CMP.B   #57,D4
00001140  6700 000A                106      BEQ INTSUB
00001144  B83C 0039                107      CMP.B   #57,D4
00001148  6E00 000A                108      BGT CHAR1
0000114C                           109      
0000114C                           110  INTSUB 
0000114C  0404 0030                111      SUB.B #$30,D4
00001150  6000 005C                112      BRA     DONE
00001154                           113  
00001154                           114  CHAR1 
00001154                           115      
00001154  B83C 0041                116      CMP.B   #65,D4
00001158  6D00 0032                117      BLT INVALID
0000115C  B83C 0041                118      CMP.B   #65,D4
00001160  6700 0022                119      BEQ CHARSUB
00001164  B83C 0041                120      CMP.B   #65,D4
00001168  6E00 0002                121      BGT CHAR2
0000116C                           122      
0000116C                           123  CHAR2 
0000116C                           124      
0000116C  B83C 0046                125      CMP.B   #70,D4
00001170  6D00 0012                126      BLT CHARSUB
00001174  B83C 0046                127      CMP.B   #70,D4
00001178  6700 000A                128      BEQ CHARSUB
0000117C  B83C 0046                129      CMP.B   #70,D4
00001180  6E00 000A                130      BGT INVALID
00001184                           131      
00001184                           132  CHARSUB 
00001184  0404 0037                133      SUB.B #$37,D4
00001188  6000 0024                134      BRA DONE
0000118C                           135      
0000118C                           136  INVALID 
0000118C  43F9 00002DF1            137      LEA BADVAL,A1
00001192  103C 000E                138      MOVE.B   #14,D0     ; moves #14 into data register D0
00001196  4E4F                     139      TRAP     #15       ; Displays message via trap 14
00001198  6000 0002                140      BRA     ENTRYLOOP
0000119C                           141      
0000119C                           142  ENTRYLOOP
0000119C  B43C 0000                143      CMP.B #0,D2
000011A0  6700 FE64                144      BEQ LOADDATAONE
000011A4  B43C 0001                145      CMP.B #1,D2
000011A8  6700 FEAE                146      BEQ LOADDATATWO
000011AC  4E75                     147      RTS
000011AE                           148      
000011AE  5205                     149  DONE    ADD.B #1,D5
000011B0  BA3C 0000                150          CMP.B #0,D5
000011B4  6700 FEEC                151          BEQ VAL1
000011B8  BA3C 0001                152          CMP.B #1,D5
000011BC  6700 FEEE                153          BEQ VAL2
000011C0  BA3C 0002                154          CMP.B #2,D5
000011C4  6700 FEF6                155          BEQ VAL3
000011C8  BA3C 0003                156          CMP.B #3,D5
000011CC  6700 FEFE                157          BEQ VAL4
000011D0  BA3C 0004                158          CMP.B #4,D5
000011D4  6700 FF06                159          BEQ VAL5
000011D8  BA3C 0005                160          CMP.B #5,D5
000011DC  6700 FF0E                161          BEQ VAL6
000011E0  BA3C 0006                162          CMP.B #6,D5
000011E4  6700 FF16                163          BEQ VAL7
000011E8  BA3C 0007                164          CMP.B #7,D5
000011EC  6700 FF1E                165          BEQ VAL8
000011F0  BA3C 0008                166          CMP.B #8,D5
000011F4  6700 0006                167          BEQ EXIT
000011F8                           168          
000011F8  6000 FF22                169          BRA     STARTCHECK
000011FC                           170  
000011FC                           171  
000011FC                           172  
000011FC  13C4 0000A070            173  EXIT    MOVE.B D4,$A070
00001202                           174      
00001202  4284                     175      CLR.L D4
00001204  D839 0000A000            176      ADD.B $A000,D4
0000120A  E98C                     177      LSL.L #4,D4
0000120C  D839 0000A010            178      ADD.B $A010,D4
00001212  E98C                     179      LSL.L #4,D4
00001214  D839 0000A020            180      ADD.B $A020,D4
0000121A  E98C                     181      LSL.L #4,D4
0000121C  D839 0000A030            182      ADD.B $A030,D4
00001222  E98C                     183      LSL.L #4,D4
00001224  D839 0000A040            184      ADD.B $A040,D4
0000122A  E98C                     185      LSL.L #4,D4
0000122C  D839 0000A050            186      ADD.B $A050,D4
00001232  E98C                     187      LSL.L #4,D4
00001234  D839 0000A060            188      ADD.B $A060,D4
0000123A  E98C                     189      LSL.L #4,D4
0000123C  D839 0000A070            190      ADD.B $A070,D4
00001242                           191      
00001242  2E04                     192      MOVE.L D4,D7
00001244  4244                     193      CLR D4
00001246  B43C 0001                194      CMP.B #1,D2
0000124A  6700 000E                195      BEQ STOREADRESSES
0000124E  2C07                     196      MOVE.L D7,D6
00001250  143C 0001                197      MOVE.B #1,D2
00001254  7A00                     198      MOVE.L #0,D5
00001256  6000 FE00                199      BRA LOADDATATWO
0000125A                           200      
0000125A                           201  ;---------------------------------------------------------
0000125A                           202  
0000125A                           203  STOREADRESSES
0000125A  33FC 0000 00002F00       204      MOVE.W #0,CYCLECOUNTER
00001262  23C7 00002EFC            205      MOVE.L  D7,ENDINGADDRESS
00001268  23C6 00002EF4            206      MOVE.L  D6,STARTINGADDRESS
0000126E  4247                     207      CLR     D7
00001270  2E79 00002EFC            208      MOVE.L   ENDINGADDRESS,A7
00001276  2C79 00002EF4            209      MOVE.L   STARTINGADDRESS,A6
0000127C  4EF9 00001282            210      JMP     MEMORYGRABBER
00001282                           211      
00001282                           212  MEMORYGRABBER
00001282  BDF9 00002EFC            213      CMPA.L  ENDINGADDRESS,A6
00001288  6E00 1438                214      BGT     ENDING 
0000128C                           215      
0000128C  0C79 0019 00002F00       216       CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
00001294  6700 003E                217       BEQ     PAGEBREAK
00001298  5279 00002F00            218       ADD.W   #1,CYCLECOUNTER
0000129E                           219      
0000129E                           220      * TODO: CLEAR MODES AND REGISTERS
0000129E  4EB9 00002942            221      JSR CLEARMR
000012A4                           222      
000012A4  23CE 00002EF8            223      MOVE.L      A6,CURRENTADDRESS   
000012AA  2239 00002EF8            224      MOVE.L      CURRENTADDRESS,D1
000012B0  143C 0010                225      MOVE.B      #16,D2
000012B4  103C 000F                226      MOVE.B      #15,D0     ; moves #14 into data register D0
000012B8  4E4F                     227      TRAP        #15  
000012BA  43F9 00002F22            228      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
000012C0  103C 000E                229      MOVE.B   #14,D0     ; moves #14 into data register D0
000012C4  4E4F                     230      TRAP     #15  
000012C6                           231      
000012C6  361E                     232      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012C8  33C3 00002F00            233      MOVE.W      D3, COMMANDDATA
000012CE                           234   
000012CE  6000 004E                235      BRA         COMPARE_GROUPS
000012D2                           236      
000012D2  60AE                     237      BRA MEMORYGRABBER
000012D4                           238      
000012D4                           239  PAGEBREAK
000012D4  43F9 00002DDC            240      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
000012DA  103C 000E                241      MOVE.B   #14,D0     ; moves #14 into data register D0
000012DE  4E4F                     242      TRAP     #15       ; Displays message via trap 14
000012E0  43F9 00002EF3            243      LEA     INPUT,A1
000012E6  103C 0002                244      MOVE.B  #2,D0 *takes the string of what the user enters
000012EA  4E4F                     245      TRAP    #15
000012EC  33FC 0000 00002F00       246      MOVE.W #0,CYCLECOUNTER
000012F4  608C                     247      BRA MEMORYGRABBER
000012F6                           248      
000012F6                           249      
000012F6                           250  ;-------------------------- OP CODE SECTION -------------------------------
000012F6                           251  
000012F6                           252  READ_BITS
000012F6  4287                     253      CLR.L   D7
000012F8  4284                     254      CLR.L   D4
000012FA  1E39 00002F02            255      MOVE.B  Bits,D7
00001300                           256      
00001300                           257  LOOP_READ_BITS    
00001300  BE3C 0000                258      CMP.B   #0,D7           * counter
00001304  6700 1592                259      BEQ     RETURN
00001308                           260      
00001308  E34C                     261      LSL.W   #1,D4           * make space for new bit
0000130A  E34B                     262      LSL.W   #1,D3          
0000130C                           263  
0000130C  6500 0008                264      BCS     SET             * if 1, then branch to SET
00001310  5307                     265      SUBI.B  #1,D7          
00001312  4EF8 1300                266      JMP     LOOP_READ_BITS
00001316                           267  SET
00001316  5244                     268      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
00001318  5307                     269      SUBI.B  #1, D7
0000131A  4EF8 1300                270      JMP     LOOP_READ_BITS  
0000131E                           271      
0000131E                           272  
0000131E                           273  
0000131E                           274  
0000131E                           275  COMPARE_GROUPS              * comapres the 4 bits of the instruction
0000131E  13FC 0004 00002F02       276      MOVE.B  #4,Bits         
00001326  4EB8 12F6                277      JSR     READ_BITS       * get the first 4 bits and store it in D4
0000132A                           278  
0000132A  B87C 0001                279      CMP.W   #%0001,D4      
0000132E                           280      *BEQ     CHECK_MOVE_B    * if equal, goes to CHECK_MOVE.B
0000132E                           281      
0000132E  B87C 0002                282      CMP.W   #%0010,D4      
00001332                           283      *BEQ     COMPARE_0010    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
00001332                           284      
00001332  B87C 0003                285      CMP.W   #%0011,D4      
00001336                           286      *BEQ     COMPARE_0011    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
00001336                           287      
00001336  B87C 0004                288      CMP.W   #%0100,D4      
0000133A  6700 0036                289      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
0000133E                           290      
0000133E  B87C 0005                291      CMP.W   #%0101,D4      
00001342  6700 02DE                292      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
00001346                           293      
00001346  B87C 0006                294      CMP.W   #%0110,D4      
0000134A                           295      *BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
0000134A                           296      
0000134A  B87C 0007                297      CMP.W   #%0111,D4      
0000134E  6700 0494                298      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
00001352                           299      
00001352  B87C 0008                300      CMP.W   #%1000,D4      
00001356                           301      *BEQ     CHECK_OR        * if equal, goes to CHECK_OR
00001356                           302      
00001356  B87C 0009                303      CMP.W   #%1001,D4      
0000135A                           304      *BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
0000135A                           305      
0000135A  B87C 000C                306      CMP.W   #%1100,D4      
0000135E                           307      *BEQ     CHECK_AND       * if equal, goes to CHECK_AND
0000135E                           308      
0000135E  B87C 000D                309      CMP.W   #%1101,D4      
00001362  6700 0348                310      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
00001366                           311      
00001366  B87C 000E                312      CMP.W   #%1110,D4      
0000136A  6700 04D6                313      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
0000136E                           314      
0000136E  6600 1556                315      BNE     PRINT_DATA      * all other instructions are not supported 
00001372                           316  
00001372                           317  
00001372                           318  
00001372                           319  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
00001372                           320  
00001372                           321  COMPARE_0100
00001372  0803 000C                322      BTST.L  #$0C,D3             * compare bit 8 for LEA
00001376  6600 0032                323      BNE     CHECK_LEA
0000137A                           324      
0000137A  13FC 0004 00002F02       325      MOVE.B  #4,Bits
00001382  4EB8 12F6                326      JSR     READ_BITS
00001386                           327      
00001386  B87C 0006                328      CMP.W   #%0110,D4
0000138A  6700 00AA                329      BEQ     CHECK_NOT           * goes to NOT
0000138E                           330      
0000138E  B87C 0008                331      CMP.W   #%1000,D4
00001392  6700 012C                332      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
00001396                           333      
00001396  B87C 000C                334      CMP.W   #%1100,D4       
0000139A  6700 01D8                335      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
0000139E                           336      
0000139E  B87C 000E                337      CMP.W   #%1110,D4
000013A2  6700 01D8                338      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
000013A6                           339      
000013A6  6600 151E                340      BNE     PRINT_DATA
000013AA                           341  
000013AA                           342  CHECK_LEA
000013AA  13FC 0003 00002F02       343      MOVE.B  #3,Bits  
000013B2  4EB8 12F6                344      JSR     READ_BITS 
000013B6  13C4 00002F14            345      MOVE.B  D4,DEST_REG  
000013BC                           346  
000013BC  13FC 0003 00002F02       347      MOVE.B  #3,Bits
000013C4  4EB8 12F6                348      JSR     READ_BITS
000013C8  B83C 0007                349      CMP.B   #7,D4               * if mode = 111 = continue
000013CC  6600 14F8                350      BNE     PRINT_DATA
000013D0                           351  
000013D0  13FC 0003 00002F02       352      MOVE.B  #3,Bits
000013D8  4EB8 12F6                353      JSR     READ_BITS 
000013DC  13C4 00002F16            354      MOVE.B  D4,SRC_MODE           
000013E2                           355  
000013E2  13FC 0003 00002F02       356      MOVE.B  #3,Bits 
000013EA  4EB8 12F6                357      JSR     READ_BITS 
000013EE  13C4 00002F17            358      MOVE.B  D4,SRC_REG 
000013F4                           359      
000013F4                           360      *MOVE.B  #3,CmdIndex         
000013F4  4EB9 000027D2            361      JSR     CHECK_SOURCE                * Check Source Mode
000013FA                           362      
000013FA  0C39 000F 00002F2F       363      CMP.B   #$F,SrcMode         * If SrcMode is invalid
00001402  6700 14C2                364      BEQ     PRINT_DATA
00001406                           365      
00001406  0C39 0002 00002F2F       366      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
0000140E  6700 0FF4                367      BEQ     PRINTLEA        
00001412                           368      
00001412  0C39 0007 00002F2F       369      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
0000141A  6700 0FE8                370      BEQ     PRINTLEA    
0000141E                           371      
0000141E  0C39 0008 00002F2F       372      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
00001426  6700 0FDC                373      BEQ     PRINTLEA
0000142A                           374              
0000142A  13FC 0001 00002F2C       375      MOVE.B  #1,INVALID_EA   
00001432  6000 0FD0                376      BRA     PRINTLEA    
00001436                           377      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001436                           378  
00001436                           379      
00001436                           380  CHECK_NOT 
00001436                           381      * TODO : TEST
00001436  13FC 0002 00002F02       382      MOVE.B  #2,Bits             
0000143E  4EB8 12F6                383      JSR     READ_BITS             
00001442  13C4 00002F1F            384      MOVE.B  D4,SIZE_BITS               * Stores size 
00001448                           385      
00001448  4EB9 000028FA            386      JSR     SETSIZE2             * set correct size for printing
0000144E                           387      
0000144E  B83C 0003                388      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
00001452  6700 1472                389      BEQ     PRINT_DATA          * Else, If 11 size invalid
00001456                           390      
00001456  13FC 0003 00002F02       391      MOVE.B  #3,Bits       
0000145E  4EB8 12F6                392      JSR     READ_BITS       
00001462  13C4 00002F15            393      MOVE.B  D4,DEST_MODE             
00001468                           394  
00001468  13FC 0003 00002F02       395      MOVE.B  #3,Bits       
00001470  4EB8 12F6                396      JSR     READ_BITS
00001474  13C4 00002F14            397      MOVE.B  D4,DEST_REG             
0000147A                           398      
0000147A                           399      *MOVE.B  #2,CmdIndex 
0000147A  4EB9 000026D2            400      JSR     CHECK_DESTINATION               * Check Destination Mode
00001480                           401  
00001480  0C39 000F 00002F2D       402      CMP.B   #$F,DstMode         * If DstMode is invalid
00001488  6700 143C                403      BEQ     PRINT_DATA      
0000148C                           404  
0000148C  0C39 000E 00002F2D       405      CMP.B   #$E,DstMode         * If DstMode is invalid EA
00001494  13FC 0001 00002F2C       406      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
0000149C                           407      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
0000149C                           408  
0000149C  0C39 0001 00002F2D       409      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
000014A4  13FC 0001 00002F2C       410      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000014AC                           411      
000014AC  0C39 000B 00002F2D       412      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
000014B4  13FC 0001 00002F2C       413      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000014BC  6000 0F5C                414      BRA     PRINTNOT
000014C0                           415  
000014C0                           416  CHECK_MOVEM_1000 
000014C0                           417      * TODO : TEST WITH EA 
000014C0  13FC 0001 00002F02       418      MOVE.B  #1,Bits
000014C8  4EB8 12F6                419      JSR     READ_BITS
000014CC  B83C 0001                420      CMP.B   #%1,D4
000014D0  6600 13F4                421      BNE     PRINT_DATA
000014D4                           422      
000014D4  13FC 0001 00002F02       423      MOVE.B  #1,Bits
000014DC  4EB8 12F6                424      JSR     READ_BITS
000014E0  13C4 00002F1F            425      MOVE.B  D4,SIZE_BITS
000014E6                           426      
000014E6  4EB9 000028E0            427      JSR     SETSIZE1
000014EC                           428  
000014EC  13FC 0003 00002F02       429      MOVE.B  #3,Bits
000014F4  4EB8 12F6                430      JSR     READ_BITS
000014F8  13C4 00002F18            431      MOVE.B  D4,TEMP_MODE
000014FE                           432      
000014FE  13FC 0003 00002F02       433      MOVE.B  #3,Bits
00001506  4EB8 12F6                434      JSR     READ_BITS
0000150A  13C4 00002F19            435      MOVE.B  D4,TEMP_REG
00001510                           436      
00001510  4EB9 00002752            437      JSR     CHECK_TEMP
00001516  4EB9 00002852            438      JSR     CHECK_XBIT
0000151C                           439      
0000151C  0C39 000F 00002F2E       440      CMP.B   #$F,TempMode        * If TempMode is invalid
00001524  6700 13A0                441      BEQ     PRINT_DATA              * Print DATA instead
00001528                           442  
00001528  0C39 000E 00002F2E       443      CMP.B   #$E,TempMode        * If TempMode is invalid EA
00001530                           444    *  BEQ     SETINVEA           * 
00001530  13FC 0001 00002F2C       445      MOVE.B  #1,INVALID_EA
00001538                           446     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001538                           447  
00001538  0C39 0002 00002F2E       448      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
00001540  6700 0EAC                449      BEQ     PRINTMOVEM              
00001544                           450  
00001544  0C39 0007 00002F2E       451      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
0000154C  6700 0EA0                452      BEQ     PRINTMOVEM   
00001550                           453  
00001550  0C39 0008 00002F2E       454      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
00001558  6700 0E94                455      BEQ     PRINTMOVEM   
0000155C                           456                 
0000155C  0C39 0004 00002F2D       457      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
00001564  6700 0E88                458      BEQ     PRINTMOVEM   
00001568                           459  
00001568  0C39 0003 00002F2F       460      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
00001570  6700 0E7C                461      BEQ     PRINTMOVEM   
00001574                           462     * BRA     SETINVEA
00001574                           463      
00001574                           464  CHECK_MOVEM_1100     
00001574  13FC 0001 00002F2B       465      MOVE.B      #1,XBIT
0000157C                           466      
0000157C                           467  
0000157C                           468  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
0000157C  13FC 0002 00002F02       469      MOVE.B  #2,Bits
00001584  4EB8 12F6                470      JSR     READ_BITS
00001588                           471      
00001588  B83C 0002                472      CMP.B   #%10,D4
0000158C  6700 000E                473      BEQ     CHECK_JSR           * goes to JSR
00001590                           474      
00001590  B83C 0001                475      CMP.B   #%01,D4 
00001594  6700 006C                476      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
00001598                           477  
00001598  6600 132C                478      BNE     PRINT_DATA
0000159C                           479  
0000159C                           480  CHECK_JSR       * TODO: TEST
0000159C                           481  
0000159C  13FC 0003 00002F02       482      MOVE.B  #3,Bits
000015A4  4EB8 12F6                483      JSR     READ_BITS
000015A8  13C4 00002F15            484      MOVE.B  D4,DEST_MODE
000015AE                           485      
000015AE  13FC 0003 00002F02       486      MOVE.B  #3,Bits
000015B6  4EB8 12F6                487      JSR     READ_BITS
000015BA  13C4 00002F14            488      MOVE.B  D4,DEST_REG
000015C0                           489      
000015C0                           490      *MOVE.B  #4,INDEX
000015C0  4EB9 000026D2            491      JSR     CHECK_DESTINATION
000015C6                           492      
000015C6  0C39 000F 00002F2D       493      CMP.B   #$F,DstMode         * if invalid print DATA
000015CE  6700 12F6                494      BEQ     PRINT_DATA
000015D2                           495      
000015D2  0C39 0002 00002F2D       496      CMP.B   #$2,DstMode         * if DstMode 010        
000015DA  6700 0E54                497      BEQ     PRINTJSR
000015DE                           498      
000015DE  0C39 0007 00002F2D       499      CMP.B   #$7,DstMode         * if DstMode 111 + 000
000015E6  6700 0E48                500      BEQ     PRINTJSR
000015EA                           501      
000015EA  0C39 0008 00002F2D       502      CMP.B   #$8,DstMode         * if DstMode 111 + 001
000015F2  6700 0E3C                503      BEQ     PRINTJSR
000015F6                           504      
000015F6  13FC 0001 00002F2C       505      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
000015FE                           506      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000015FE  6000 0E30                507      BRA     PRINTJSR
00001602                           508      
00001602                           509  CHECK_NOP_RTS
00001602  13FC 0006 00002F02       510      MOVE.B  #6,Bits
0000160A  4EB8 12F6                511      JSR READ_BITS
0000160E                           512      
0000160E  B83C 0031                513      CMP.B   #%110001,D4
00001612  6700 0DCA                514      BEQ     PRINTNOP            
00001616                           515      
00001616  B83C 0035                516      CMP.B   #%110101,D4
0000161A  6700 0E2A                517      BEQ     PRINTRTS       
0000161E                           518          
0000161E  6600 12A6                519      BNE     PRINT_DATA
00001622                           520  
00001622                           521  ************************** ADDQ ***************************
00001622                           522  CHECK_ADDQ
00001622  13FC 0003 00002F02       523      MOVE.B  #3,Bits 
0000162A  4EB8 12F6                524      JSR     READ_BITS
0000162E  13C4 00002F1A            525      MOVE.B  D4,DATA_FIELD
00001634                           526      
00001634  4EB9 0000289A            527      JSR     FORMAT_DATA     
0000163A                           528      
0000163A  13FC 0001 00002F02       529      MOVE.B  #1,Bits
00001642  4EB8 12F6                530      JSR     READ_BITS
00001646  B83C 0000                531      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
0000164A  6600 127A                532      BNE     PRINT_DATA          * goes to PRINT_DATA
0000164E                           533  
0000164E  13FC 0002 00002F02       534      MOVE.B  #2,Bits
00001656  4EB8 12F6                535      JSR     READ_BITS
0000165A  13C4 00002F1F            536      MOVE.B  D4,SIZE_BITS             * store size into SIZE
00001660  0C39 0003 00002F1F       537      CMP.B   #%11,SIZE_BITS           * cannot be #%11
00001668  6700 125C                538      BEQ     PRINT_DATA
0000166C  4EB9 000028FA            539      JSR     SETSIZE2            * for printing 
00001672                           540  
00001672  13FC 0003 00002F02       541      MOVE.B  #3,Bits
0000167A  4EB8 12F6                542      JSR     READ_BITS
0000167E  13C4 00002F15            543      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
00001684                           544      
00001684  13FC 0003 00002F02       545      MOVE.B  #3,Bits
0000168C  4EB8 12F6                546      JSR     READ_BITS
00001690  13C4 00002F14            547      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
00001696                           548      
00001696                           549     * MOVE.B  #6,INDEX
00001696  4EB9 000026D2            550      JSR     CHECK_DESTINATION    
0000169C                           551      
0000169C  0C39 000F 00002F15       552      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
000016A4  6700 1220                553      BEQ     PRINT_DATA         
000016A8                           554      
000016A8                           555   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
000016A8                           556   *   BEQ     INVALID_EA          * TODO 
000016A8                           557      
000016A8                           558   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
000016A8                           559   *   BEQ     INVALID_EA         * TODO
000016A8                           560      
000016A8  6000 0DAC                561      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
000016AC                           562  
000016AC                           563  ************************** ADD, ADDA **********************
000016AC                           564  COMPARE_1101    * ADD and ADDA 
000016AC  13FC 0003 00002F02       565      MOVE.B  #3,Bits
000016B4  4EB8 12F6                566      JSR     READ_BITS
000016B8  13C4 00002F19            567      MOVE.B  D4,TEMP_REG ;push to EA storage (probably D2)
000016BE                           568      
000016BE  13FC 0001 00002F02       569      MOVE.B  #1,Bits
000016C6  4EB8 12F6                570      JSR     READ_BITS
000016CA  13C4 00002F2B            571      MOVE.B  D4,XBit
000016D0                           572      
000016D0  13FC 0002 00002F02       573      MOVE.B  #2,Bits
000016D8  4EB8 12F6                574      JSR     READ_BITS
000016DC  13C4 00002F1F            575      MOVE.B  D4,SIZE_BITS
000016E2                           576      
000016E2  13FC 0001 00002F18       577      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
000016EA  0C39 0003 00002F1F       578      CMP.B   #%11,SIZE_BITS 
000016F2  6700 0072                579      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
000016F6                           580      
000016F6  13FC 0000 00002F18       581      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
000016FE  4EB9 00002852            582      JSR     CHECK_XBIT
00001704                           583      
00001704                           584      ;These two need to be pushed to EA for second variable, order determined
00001704                           585      ;by size
00001704  13FC 0003 00002F02       586      MOVE.B  #3,Bits
0000170C  4EB8 12F6                587      JSR     READ_BITS
00001710  13C4 00002F18            588      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001716                           589      
00001716  13FC 0003 00002F02       590      MOVE.B  #3,Bits
0000171E  4EB8 12F6                591      JSR     READ_BITS
00001722  13C4 00002F19            592      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001728                           593      
00001728  13FC 0007 00002F2A       594      MOVE.B  #7,INDEX
00001730  4EB9 00002752            595      JSR     CHECK_TEMP   
00001736  0C39 000F 00002F18       596      CMP.B   #$F, Temp_Mode
0000173E  6700 1186                597      BEQ     PRINT_DATA
00001742                           598    *  CMP.B   #$E,Temp_Mode    
00001742                           599    *  BEQ     INVALID_EA              * TODO
00001742                           600      
00001742  4EF9 00001748            601      JMP     CHECK_ADD
00001748                           602      
00001748                           603  CHECK_ADD
00001748  4EB9 000028FA            604      JSR     SETSIZE2
0000174E  0C39 0000 00002F1F       605      CMP.B   #%00,SIZE_BITS
00001756  6600 000A                606      BNE     CCHECK_ADD  
0000175A                           607      
0000175A  0C39 0001 00002F18       608      CMP.B   #$1,Temp_Mode       * if Temp_Mode is invalid
00001762                           609    *  BEQ     INVALID_EA              * TODO 
00001762                           610  CCHECK_ADD
00001762  6000 0DF2                611      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
00001766                           612  
00001766                           613  
00001766                           614  CHECK_ADDA
00001766  13FC 0001 00002F1F       615      MOVE.B  #%01,SIZE_BITS
0000176E                           616  
0000176E  0C39 0000 00002F2B       617      CMP.B   #%0,XBIT
00001776  6700 0010                618      BEQ     CCHECK_ADDA
0000177A  13FC 0002 00002F1F       619      MOVE.B  #%10,SIZE_BITS
00001782                           620      
00001782  4EB9 000028FA            621      JSR     SETSIZE2
00001788                           622  
00001788                           623  CCHECK_ADDA
00001788  4EB9 000028FA            624      JSR     SETSIZE2
0000178E                           625      
0000178E  13F9 00002F19 00002F14   626      MOVE.B  TEMP_REG,DEST_REG
00001798  13F9 00002F18 00002F15   627      MOVE.B  TEMP_MODE,DEST_MODE     * set MOVE_DEST to 'An'
000017A2  13FC 0001 00002F2D       628      MOVE.B  #$1,DstMode
000017AA                           629      
000017AA  13FC 0003 00002F02       630      MOVE.B  #3,Bits        
000017B2  4EB8 12F6                631      JSR     READ_BITS
000017B6  13C4 00002F16            632      MOVE.B  D4,SRC_MODE    
000017BC                           633      
000017BC  13FC 0003 00002F02       634      MOVE.B  #3,Bits        
000017C4  4EB8 12F6                635      JSR     READ_BITS
000017C8  13C4 00002F17            636      MOVE.B  D4,SRC_REG
000017CE                           637      
000017CE                           638     * MOVE.B  #8,INDEX
000017CE  4EB9 000027D2            639      JSR     CHECK_SOURCE
000017D4  0C39 000F 00002F2F       640      CMP.B   #$F,SrcMode
000017DC  6700 10E8                641      BEQ     PRINT_DATA
000017E0                           642     * CMP.B   #$E,SrcMode
000017E0                           643     * BEQ     INVALID_EA                  * TODO 
000017E0                           644      
000017E0  6000 0D8A                645      BRA     PRINTADDA                  * TODO: check the name I/O; check what need EA
000017E4                           646  
000017E4                           647  ************************** MOVEQ ********************************
000017E4                           648  CHECK_MOVEQ
000017E4  13FC 0003 00002F02       649      MOVE.B  #3,Bits         * read next 3 bits
000017EC  4EB8 12F6                650      JSR     READ_BITS       * store them in D4
000017F0  13C4 00002F14            651      MOVE.B  D4,DEST_REG     * move register value (used in EA)
000017F6  1439 00002F14            652      MOVE.B DEST_REG,D2
000017FC  163C 0000                653      MOVE.B #%000,D3
00001800                           654      
00001800  13FC 0001 00002F02       655      MOVE.B  #1,Bits         * read the next bit into D4
00001808  4EB8 12F6                656      JSR     READ_BITS
0000180C  B83C 0000                657      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
00001810  6600 10B4                658      BNE     PRINT_DATA      * goes to PRINT_DATA ?
00001814                           659      
00001814  13FC 0008 00002F02       660      MOVE.B  #8,Bits        
0000181C  4EB8 12F6                661      JSR     READ_BITS
00001820  23C4 00002F1A            662      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
00001826                           663      
00001826  13FC 0007 00002F16       664      MOVE.B  #%111,SRC_MODE  * 
0000182E  13FC 0004 00002F17       665      MOVE.B  #%100,SRC_REG   * 
00001836  13FC 0004 000025E6       666      MOVE.B  #4,SizeSplit
0000183E  6000 0C84                667      BRA     PRINTMOVEQ         * TODO: check the name I/O; call EA from PRINT_MOVEQ FOR DEST_REG
00001842                           668      
00001842                           669  **************************************LS,AS and ROTATE section********************************* 
00001842                           670  COMPARE_1110 
00001842  4245                     671              CLR D5     ;STORING ISOLATED BITS
00001844  4244                     672              CLR D4
00001846  3839 00002F00            673              MOVE.W COMMANDDATA,D4
0000184C  2A04                     674              MOVE.L   D4,D5
0000184E  0285 000000C0            675              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001854  EC8D                     676              LSR.L    #6,D5            ;NORMALIZE
00001856  13C5 00002F1E            677              MOVE.B   D5,SIZE          ;SAVE THE SIZE
0000185C  13F9 00002F1E 00002F04   678              MOVE.B   SIZE,SizeValue
00001866  5239 00002F04            679              ADD.B    #1,SizeValue
0000186C  BA3C 0003                680              CMP.B    #%11,D5    
00001870  6700 0298                681              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001874  4245                     682              CLR D5
00001876  2A04                     683              MOVE.L   D4,D5      
00001878  0285 00000018            684              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
0000187E  E68D                     685              LSR.L   #3,D5
00001880  BA3C 0001                686              CMP.B   #%001,D5
00001884  6700 0020                687              BEQ     G_LS    ;LOGICAL SHIFTS
00001888  BA3C 0003                688              CMP.B   #%011,D5
0000188C  6700 00E4                689              BEQ     G_RO    ;ROTAIONS
00001890  BA3C 0000                690              CMP.B   #%000,D5
00001894  6700 01A8                691              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001898                           692              
00001898  13FC 0001 00000001       693              MOVE.B #1,BAD_FLAG
000018A0  4EF9 000028C6            694              JMP   PRINT_DATA   ; PRINT BAD DATA  
000018A6                           695  
000018A6                           696  G_LS               ;GROUP LOGICAL SHIFT
000018A6  4245                     697       CLR   D5
000018A8  23C4 00002F42            698       MOVE.L D4,IR_IL
000018AE  02B9 00000020 00002F42   699       ANDI.L  #$0020,IR_IL
000018B8  2A39 00002F42            700       MOVE.L  IR_IL,D5
000018BE  EA8D                     701       LSR.L   #5,D5
000018C0  BA3C 0001                702       CMP.B   #$1,D5
000018C4  6700 0056                703       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
000018C8  4245                     704       CLR D5
000018CA  2A04                     705       MOVE.L  D4,D5
000018CC  0285 00000100            706       ANDI.L  #$0100,D5
000018D2  E08D                     707       LSR.L  #8,D5
000018D4  23C5 00002F3A            708       MOVE.L  D5,DR
000018DA  4245                     709       CLR D5
000018DC  2A04                     710       MOVE.L  D4,D5
000018DE  0285 00000E00            711       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
000018E4  E08D                     712       LSR.L   #8,D5
000018E6  E28D                     713       LSR.L   #1,D5
000018E8  BABC 00000007            714       CMP.L   #7,D5
000018EE  6E00 0FD6                715       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
000018F2  BABC 00000000            716       CMP.L   #0,D5
000018F8  6D00 0FCC                717       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
000018FC  13C5 00002F46            718       MOVE.B  D5,S_COUNT
00001902  4EB9 0000239A            719       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001908  4245                     720       CLR     D5
0000190A  2A04                     721       MOVE.L  D4,D5
0000190C  0285 00000007            722       ANDI.L   #$0007,D5
00001912  13C5 00002F4B            723       MOVE.B   D5,dRN
00001918  6000 08CE                724       BRA      PR_LS             
0000191C                           725       
0000191C                           726  GLS_EA 
0000191C  4245                     727       CLR D5
0000191E  4244                     728       CLR D4
00001920  3839 00002F00            729       MOVE.W COMMANDDATA,D4
00001926                           730  
00001926  2A04                     731       MOVE.L  D4,D5
00001928  0285 00000100            732       ANDI.L  #$0100,D5
0000192E  E08D                     733       LSR.L  #8,D5
00001930  23C5 00002F3A            734       MOVE.L  D5,DR     ;DIRECTION
00001936  4245                     735       CLR D5
00001938  2A04                     736       MOVE.L  D4,D5
0000193A  0285 00000E00            737       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001940  E08D                     738       LSR.L   #8,D5
00001942  E28D                     739       LSR.L   #1,D5
00001944  BABC 00000007            740       CMP.L   #7,D5
0000194A  6E00 0F7A                741       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
0000194E  BABC 00000000            742       CMP.L   #0,D5
00001954  6D00 0F70                743       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001958  13C5 00002F4A            744       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
0000195E  4245                     745       CLR     D5
00001960  2A04                     746       MOVE.L   D4,D5
00001962  0285 00000007            747       ANDI.L   #$0007,D5
00001968  13C5 00002F4B            748       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
0000196E  6000 05BC                749       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001972                           750  G_RO            ;GROUP ROTATION
00001972  4245                     751       CLR   D5
00001974  23C4 00002F42            752       MOVE.L D4,IR_IL
0000197A  02B9 00000020 00002F42   753       ANDI.L  #$0020,IR_IL
00001984  2A39 00002F42            754       MOVE.L  IR_IL,D5
0000198A  EA8D                     755       LSR.L   #5,D5
0000198C  BA3C 0001                756       CMP.B   #$1,D5
00001990  6700 0056                757       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001994  4245                     758       CLR D5
00001996  2A04                     759       MOVE.L  D4,D5
00001998  0285 00000100            760       ANDI.L  #$0100,D5
0000199E  E08D                     761       LSR.L  #8,D5
000019A0  23C5 00002F3A            762       MOVE.L  D5,DR
000019A6  4245                     763       CLR D5
000019A8  2A04                     764       MOVE.L  D4,D5
000019AA  0285 00000E00            765       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
000019B0  E08D                     766       LSR.L   #8,D5
000019B2  E28D                     767       LSR.L   #1,D5
000019B4  BABC 00000007            768       CMP.L   #7,D5
000019BA  6E00 0F0A                769       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
000019BE  BABC 00000000            770       CMP.L   #0,D5
000019C4  6D00 0F00                771       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
000019C8  13C5 00002F46            772       MOVE.B  D5,S_COUNT
000019CE  4EB9 0000239A            773       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
000019D4  4245                     774       CLR     D5
000019D6  2A04                     775       MOVE.L  D4,D5
000019D8  0285 00000007            776       ANDI.L   #$0007,D5
000019DE  13C5 00002F4B            777       MOVE.B   D5,dRN
000019E4  6000 0702                778       BRA      PR_RO    ;PRINT ROTATION   
000019E8                           779  
000019E8                           780  GRO_EA 
000019E8  4245                     781       CLR D5
000019EA  4244                     782       CLR D4
000019EC  3839 00002F00            783       MOVE.W COMMANDDATA,D4
000019F2                           784  
000019F2  2A04                     785       MOVE.L  D4,D5
000019F4  0285 00000100            786       ANDI.L  #$0100,D5
000019FA  E08D                     787       LSR.L  #8,D5
000019FC  23C5 00002F3A            788       MOVE.L  D5,DR     ;DIRECTION
00001A02  4245                     789       CLR D5
00001A04  2A04                     790       MOVE.L  D4,D5
00001A06  0285 00000E00            791       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001A0C  E08D                     792       LSR.L   #8,D5
00001A0E  E28D                     793       LSR.L   #1,D5
00001A10  BABC 00000007            794       CMP.L   #7,D5
00001A16  6E00 0EAE                795       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001A1A  BABC 00000000            796       CMP.L   #0,D5
00001A20  6D00 0EA4                797       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001A24  13C5 00002F4A            798       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001A2A  4245                     799       CLR     D5
00001A2C  2A04                     800       MOVE.L   D4,D5
00001A2E  0285 00000007            801       ANDI.L   #$0007,D5
00001A34  13C5 00002F4B            802       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001A3A  6000 05CE                803       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001A3E                           804  
00001A3E                           805  
00001A3E                           806  
00001A3E                           807  G_AS         ;GROUP ARITHMATIC SHIFT
00001A3E  4245                     808       CLR   D5
00001A40  23C4 00002F42            809       MOVE.L D4,IR_IL
00001A46  02B9 00000020 00002F42   810       ANDI.L  #$0020,IR_IL
00001A50  2A39 00002F42            811       MOVE.L  IR_IL,D5
00001A56  EA8D                     812       LSR.L   #5,D5
00001A58  BA3C 0001                813       CMP.B   #$1,D5
00001A5C  6700 0056                814       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001A60  4245                     815       CLR D5
00001A62  2A04                     816       MOVE.L  D4,D5
00001A64  0285 00000100            817       ANDI.L  #$0100,D5
00001A6A  E08D                     818       LSR.L  #8,D5
00001A6C  23C5 00002F3A            819       MOVE.L  D5,DR
00001A72  4245                     820       CLR D5
00001A74  2A04                     821       MOVE.L  D4,D5
00001A76  0285 00000E00            822       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001A7C  E08D                     823       LSR.L   #8,D5
00001A7E  E28D                     824       LSR.L   #1,D5
00001A80  BABC 00000007            825       CMP.L   #7,D5
00001A86  6E00 0E3E                826       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001A8A  BABC 00000000            827       CMP.L   #0,D5
00001A90  6D00 0E34                828       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001A94  13C5 00002F46            829       MOVE.B  D5,S_COUNT
00001A9A  4EB9 0000239A            830       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001AA0  4245                     831       CLR     D5
00001AA2  2A04                     832       MOVE.L  D4,D5
00001AA4  0285 00000007            833       ANDI.L   #$0007,D5
00001AAA  13C5 00002F4B            834       MOVE.B   D5,dRN
00001AB0  6000 06B6                835       BRA      PR_AS    ;PRINT ROTATION 
00001AB4                           836  
00001AB4                           837  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001AB4  4245                     838       CLR D5
00001AB6  4244                     839       CLR D4
00001AB8  3839 00002F00            840       MOVE.W COMMANDDATA,D4
00001ABE                           841  
00001ABE  2A04                     842       MOVE.L  D4,D5
00001AC0  0285 00000100            843       ANDI.L  #$0100,D5
00001AC6  E08D                     844       LSR.L  #8,D5
00001AC8  23C5 00002F3A            845       MOVE.L  D5,DR     ;DIRECTION
00001ACE  4245                     846       CLR D5
00001AD0  2A04                     847       MOVE.L  D4,D5
00001AD2  0285 00000E00            848       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001AD8  E08D                     849       LSR.L   #8,D5
00001ADA  E28D                     850       LSR.L   #1,D5
00001ADC  BABC 00000007            851       CMP.L   #7,D5
00001AE2  6E00 0DE2                852       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001AE6  BABC 00000000            853       CMP.L   #0,D5
00001AEC  6D00 0DD8                854       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001AF0  13C5 00002F4A            855       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001AF6  4245                     856       CLR     D5
00001AF8  2A04                     857       MOVE.L   D4,D5
00001AFA  0285 00000007            858       ANDI.L   #$0007,D5
00001B00  13C5 00002F4B            859       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001B06  6000 0346                860       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001B0A                           861  
00001B0A                           862  G14_MEMS 
00001B0A  4245                     863         CLR D5
00001B0C  2A04                     864         MOVE.L  D4,D5
00001B0E  CABC 00000E00            865         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001B14  E08D                     866         LSR.L   #8,D5
00001B16  E28D                     867         LSR.L   #1,D5
00001B18  BA3C 0001                868         CMP.B   #%001,D5
00001B1C  6700 0012                869         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001B20  BA3C 0003                870         CMP.B   #%011,D5
00001B24  6700 0070                871         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001B28  BA3C 0000                872         CMP.B   #%000,D5
00001B2C  6700 00CE                873         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001B30                           874  
00001B30                           875  G14_MEMS_LS 
00001B30  4245                     876             CLR D5
00001B32  2A04                     877             MOVE.L  D4,D5
00001B34  0285 00000100            878             ANDI.L  #$0100,D5
00001B3A  E08D                     879             LSR.L  #8,D5
00001B3C  13C5 00002F3A            880             MOVE.B  D5,DR     ;DIRECTION
00001B42  4245                     881             CLR D5
00001B44  2A04                     882             MOVE.L D4,D5
00001B46  0285 00000038            883             ANDI.L  #$0038,D5
00001B4C  E68D                     884             LSR.L  #3,D5
00001B4E  13C5 00002F4E            885             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001B54  4245                     886             CLR D5
00001B56  2A04                     887             MOVE.L D4,D5
00001B58  0285 00000007            888             ANDI.L  #$0007,D5
00001B5E  13C5 00002F4B            889             MOVE.B  D5,dRN
00001B64  0CB9 00000000 00002F4E   890             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001B6E  6700 0D56                891             BEQ    PRINT_DATA
00001B72  0CB9 00000001 00002F4E   892             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001B7C  6700 0D48                893             BEQ     PRINT_DATA
00001B80  13C5 00002F4D            894             MOVE.B  D5,dRG     ;DESTINATION REG
00001B86  0C39 0007 00002F4E       895             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001B8E  6700 00F2                896             BEQ     CHECK_ID_LS 
00001B92  6000 0192                897             BRA     PR_G14_MEMS_LS             
00001B96                           898             
00001B96                           899  
00001B96                           900                
00001B96                           901   
00001B96                           902  
00001B96                           903  G14_MEMS_RO
00001B96  4245                     904             CLR D5
00001B98  2A04                     905             MOVE.L  D4,D5
00001B9A  0285 00000100            906             ANDI.L  #$0100,D5
00001BA0  E08D                     907             LSR.L  #8,D5
00001BA2  13C5 00002F3A            908             MOVE.B  D5,DR     ;DIRECTION
00001BA8  4245                     909             CLR D5
00001BAA  2A04                     910             MOVE.L D4,D5
00001BAC  0285 00000038            911             ANDI.L  #$0038,D5
00001BB2  E68D                     912             LSR.L  #3,D5
00001BB4  13C5 00002F4E            913             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001BBA  4245                     914             CLR D5
00001BBC  2A04                     915             MOVE.L D4,D5
00001BBE  0285 00000007            916             ANDI.L  #$0007,D5
00001BC4  13C5 00002F4B            917             MOVE.B  D5,dRN
00001BCA  0CB9 00000000 00002F4E   918             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001BD4  6700 0CF0                919             BEQ    PRINT_DATA
00001BD8  0CB9 00000001 00002F4E   920             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001BE2  6700 0CE2                921             BEQ     PRINT_DATA
00001BE6  13C5 00002F4D            922             MOVE.B  D5,dRG     ;DESTINATION REG
00001BEC  0C39 0007 00002F4E       923             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001BF4  6700 007C                924             BEQ     CHECK_ID_RO 
00001BF8  6000 01C0                925             BRA     PR_G14_MEMS_RO         
00001BFC                           926  
00001BFC                           927  G14_MEMS_AS
00001BFC  4245                     928             CLR D5
00001BFE  2A04                     929             MOVE.L  D4,D5
00001C00  0285 00000100            930             ANDI.L  #$0100,D5
00001C06  E08D                     931             LSR.L  #8,D5
00001C08  13C5 00002F3A            932             MOVE.B  D5,DR     ;DIRECTION
00001C0E  4245                     933             CLR D5
00001C10  2A04                     934             MOVE.L D4,D5
00001C12  0285 00000038            935             ANDI.L  #$0038,D5
00001C18  E68D                     936             LSR.L  #3,D5
00001C1A  13C5 00002F4E            937             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001C20  4245                     938             CLR D5
00001C22  2A04                     939             MOVE.L D4,D5
00001C24  0285 00000007            940             ANDI.L  #$0007,D5
00001C2A  13C5 00002F4B            941             MOVE.B  D5,dRN
00001C30  0CB9 00000000 00002F4E   942             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001C3A  6700 0C8A                943             BEQ    PRINT_DATA
00001C3E  0CB9 00000001 00002F4E   944             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001C48  6700 0C7C                945             BEQ     PRINT_DATA
00001C4C  13C5 00002F4D            946             MOVE.B  D5,dRG     ;DESTINATION REG
00001C52  0C39 0007 00002F4E       947             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001C5A  6700 0006                948             BEQ     CHECK_ID_AS 
00001C5E  6000 0032                949             BRA     PR_G14_MEMS_AS                          
00001C62                           950             
00001C62                           951  
00001C62                           952  
00001C62  0C39 0004 00002F4D       953  CHECK_ID_AS  CMP.B #$4,dRG
00001C6A  6700 0C5A                954               BEQ   PRINT_DATA
00001C6E  6000 0022                955               BRA     PR_G14_MEMS_AS
00001C72                           956               
00001C72  0C39 0004 00002F4D       957  CHECK_ID_RO  CMP.B #$4,dRG
00001C7A  6700 0C4A                958               BEQ   PRINT_DATA
00001C7E  6000 013A                959               BRA     PR_G14_MEMS_RO
00001C82                           960    
00001C82  0C39 0004 00002F4D       961  CHECK_ID_LS  CMP.B #$4,dRG
00001C8A  6700 0C3A                962               BEQ   PRINT_DATA
00001C8E  6000 0096                963               BRA    PR_G14_MEMS_LS
00001C92                           964                               
00001C92                           965  PR_G14_MEMS_AS
00001C92  43F9 00002F22            966       LEA CLRSPOT,A1      * print space
00001C98  103C 000E                967       MOVE.B   #14,D0   
00001C9C  4E4F                     968       TRAP     #15
00001C9E                           969   
00001C9E  0C39 0000 00002F3A       970       CMP.B #$0,DR 
00001CA6  6700 0040                971       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001CAA                           972      
00001CAA                           973      *******PRINT LSL*******
00001CAA  43F9 00002EE2            974       LEA       PASL,A1   MEM LEFT SHIF
00001CB0  103C 000E                975       MOVE.B   #14,D0     ; moves #14 into data register D0
00001CB4  4E4F                     976       TRAP     #15
00001CB6                           977  
00001CB6  43F9 00002F22            978       LEA CLRSPOT,A1      * print space
00001CBC  103C 000E                979       MOVE.B   #14,D0   
00001CC0  4E4F                     980       TRAP     #15
00001CC2                           981   
00001CC2  4243                     982       CLR D3
00001CC4  4242                     983       CLR D2
00001CC6  1439 00002F4E            984       MOVE.B  dMODE,D2
00001CCC  1639 00002F4B            985       MOVE.B  dRN,D3
00001CD2  4EB9 00002992            986       JSR     EA_START
00001CD8                           987       
00001CD8  43F9 00002E7A            988       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001CDE  103C 000E                989       MOVE.B   #14,D0     ; moves #14 into data register D0
00001CE2  4E4F                     990       TRAP     #15       ; Displays message via trap 14
00001CE4                           991       
00001CE4  6000 F59C                992       BRA MEMORYGRABBER
00001CE8                           993  
00001CE8                           994       
00001CE8                           995  PR_ASR_MEM   ;MEM RIGHT SHIFT
00001CE8                           996            
00001CE8  43F9 00002EDE            997       LEA       PASR,A1   MEM RIGHT SHIF
00001CEE  103C 000E                998       MOVE.B   #14,D0     ; moves #14 into data register D0
00001CF2  4E4F                     999       TRAP     #15
00001CF4                          1000  
00001CF4  43F9 00002F22           1001       LEA CLRSPOT,A1      * print space
00001CFA  103C 000E               1002       MOVE.B   #14,D0   
00001CFE  4E4F                    1003       TRAP     #15
00001D00                          1004   
00001D00  4243                    1005       CLR D3
00001D02  4242                    1006       CLR D2
00001D04  1439 00002F4E           1007       MOVE.B  dMODE,D2
00001D0A  1639 00002F4B           1008       MOVE.B  dRN,D3
00001D10  4EB9 00002992           1009       JSR     EA_START
00001D16                          1010       
00001D16  43F9 00002E7A           1011       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001D1C  103C 000E               1012       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D20  4E4F                    1013       TRAP     #15       ; Displays message via trap 14
00001D22                          1014       
00001D22  6000 F55E               1015       BRA MEMORYGRABBER
00001D26                          1016  
00001D26                          1017  
00001D26                          1018               
00001D26                          1019  
00001D26                          1020  PR_G14_MEMS_LS
00001D26  43F9 00002F22           1021       LEA CLRSPOT,A1      * print space
00001D2C  103C 000E               1022       MOVE.B   #14,D0   
00001D30  4E4F                    1023       TRAP     #15
00001D32                          1024   
00001D32  0C39 0000 00002F3A      1025       CMP.B #$0,DR 
00001D3A  6700 0040               1026       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001D3E                          1027      
00001D3E                          1028      *******PRINT LSL*******
00001D3E  43F9 00002ED6           1029       LEA       PLSL,A1   MEM LEFT SHIF
00001D44  103C 000E               1030       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D48  4E4F                    1031       TRAP     #15 
00001D4A                          1032       
00001D4A  43F9 00002F22           1033       LEA CLRSPOT,A1      * print space
00001D50  103C 000E               1034       MOVE.B   #14,D0   
00001D54  4E4F                    1035       TRAP     #15
00001D56                          1036  
00001D56                          1037       
00001D56  4243                    1038       CLR D3
00001D58  4242                    1039       CLR D2
00001D5A  1439 00002F4E           1040       MOVE.B  dMODE,D2
00001D60  1639 00002F4B           1041       MOVE.B  dRN,D3
00001D66  4EB9 00002992           1042       JSR     EA_START
00001D6C                          1043       
00001D6C  43F9 00002E7A           1044       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001D72  103C 000E               1045       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D76  4E4F                    1046       TRAP     #15       ; Displays message via trap 14
00001D78                          1047       
00001D78  6000 F508               1048       BRA MEMORYGRABBER
00001D7C                          1049       
00001D7C                          1050  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001D7C  43F9 00002EDA           1051       LEA       PLSR,A1   MEM RIGHT SHIF
00001D82  103C 000E               1052       MOVE.B   #14,D0     ; moves #14 into data register D0
00001D86  4E4F                    1053       TRAP     #15
00001D88                          1054       
00001D88  43F9 00002F22           1055       LEA CLRSPOT,A1      * print space
00001D8E  103C 000E               1056       MOVE.B   #14,D0   
00001D92  4E4F                    1057       TRAP     #15
00001D94                          1058   
00001D94  4243                    1059       CLR D3
00001D96  4242                    1060       CLR D2
00001D98  1439 00002F4E           1061       MOVE.B  dMODE,D2
00001D9E  1639 00002F4B           1062       MOVE.B  dRN,D3
00001DA4  4EB9 00002992           1063       JSR     EA_START
00001DAA                          1064       
00001DAA  43F9 00002E7A           1065       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001DB0  103C 000E               1066       MOVE.B   #14,D0     ; moves #14 into data register D0
00001DB4  4E4F                    1067       TRAP     #15       ; Displays message via trap 14
00001DB6                          1068       
00001DB6  6000 F4CA               1069       BRA    MEMORYGRABBER
00001DBA                          1070  
00001DBA                          1071  PR_G14_MEMS_RO
00001DBA  43F9 00002F22           1072       LEA CLRSPOT,A1      * print space
00001DC0  103C 000E               1073       MOVE.B   #14,D0   
00001DC4  4E4F                    1074       TRAP     #15
00001DC6                          1075       
00001DC6  0C39 0000 00002F3A      1076       CMP.B #$0,DR 
00001DCE  6700 0040               1077       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001DD2                          1078      
00001DD2                          1079      *******PRINT ASL*******
00001DD2  43F9 00002EE6           1080       LEA       PROL,A1   ROTATE MEM LEFT SHIF
00001DD8  103C 000E               1081       MOVE.B   #14,D0     ; moves #14 into data register D0
00001DDC  4E4F                    1082       TRAP     #15
00001DDE                          1083  
00001DDE  43F9 00002F22           1084       LEA CLRSPOT,A1      * print space
00001DE4  103C 000E               1085       MOVE.B   #14,D0   
00001DE8  4E4F                    1086       TRAP     #15
00001DEA                          1087  
00001DEA                          1088        
00001DEA  4243                    1089       CLR D3
00001DEC  4242                    1090       CLR D2
00001DEE  1439 00002F4E           1091       MOVE.B  dMODE,D2
00001DF4  1639 00002F4B           1092       MOVE.B  dRN,D3
00001DFA  4EB9 00002992           1093       JSR     EA_START
00001E00                          1094       
00001E00  43F9 00002E7A           1095       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001E06  103C 000E               1096       MOVE.B   #14,D0     ; moves #14 into data register D0
00001E0A  4E4F                    1097       TRAP     #15       ; Displays message via trap 14
00001E0C                          1098       
00001E0C  6000 F474               1099       BRA MEMORYGRABBER
00001E10                          1100  
00001E10                          1101  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001E10  43F9 00002EEA           1102       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
00001E16  103C 000E               1103       MOVE.B   #14,D0     ; moves #14 into data register D0
00001E1A  4E4F                    1104       TRAP     #15
00001E1C                          1105  
00001E1C  43F9 00002F22           1106       LEA CLRSPOT,A1      * print space
00001E22  103C 000E               1107       MOVE.B   #14,D0   
00001E26  4E4F                    1108       TRAP     #15
00001E28                          1109   
00001E28  4243                    1110       CLR D3
00001E2A  4242                    1111       CLR D2
00001E2C  1439 00002F4E           1112       MOVE.B  dMODE,D2
00001E32  1639 00002F4B           1113       MOVE.B  dRN,D3
00001E38  4EB9 00002992           1114       JSR     EA_START
00001E3E                          1115       
00001E3E  43F9 00002E7A           1116       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001E44  103C 000E               1117       MOVE.B   #14,D0     ; moves #14 into data register D0
00001E48  4E4F                    1118       TRAP     #15       ; Displays message via trap 14
00001E4A                          1119       
00001E4A  6000 F436               1120       BRA MEMORYGRABBER
00001E4E                          1121  
00001E4E                          1122  
00001E4E                          1123  
00001E4E                          1124  
00001E4E                          1125  PR_G_AS_EA
00001E4E  43F9 00002F22           1126         LEA CLRSPOT,A1      * print space
00001E54  103C 000E               1127         MOVE.B   #14,D0   
00001E58  4E4F                    1128         TRAP     #15
00001E5A                          1129  
00001E5A  0CB9 00000000 00002F3A  1130          CMP.L #$0,DR 
00001E64  6700 0064               1131          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00001E68                          1132       
00001E68                          1133          *******PRINT ASL*******
00001E68  43F9 00002EE2           1134          LEA       PASL,A1
00001E6E  103C 000E               1135          MOVE.B   #14,D0     ; moves #14 into data register D0
00001E72  4E4F                    1136          TRAP     #15 
00001E74  4EB9 000025E6           1137          JSR      SIZESPLIT
00001E7A                          1138          
00001E7A  43F9 00002F22           1139          LEA CLRSPOT,A1      * print space
00001E80  103C 000E               1140          MOVE.B   #14,D0   
00001E84  4E4F                    1141          TRAP     #15
00001E86                          1142  
00001E86                          1143          
00001E86  4242                    1144          CLR D2
00001E88  4243                    1145          CLR D3
00001E8A  143C 0000               1146          MOVE.B  #%000,D2     ; mode data register
00001E8E  1639 00002F4A           1147          MOVE.B  sRN,D3       ; source register number
00001E94  4EB9 00002992           1148          JSR     EA_START
00001E9A  43F9 00002F28           1149          LEA      COMA,A1
00001EA0  103C 000E               1150          MOVE.B   #14,D0
00001EA4  4E4F                    1151          TRAP     #15
00001EA6  4243                    1152          CLR D3
00001EA8  4242                    1153          CLR D2
00001EAA  143C 0000               1154          MOVE.B  #%000,D2      ; mode data register
00001EAE  1639 00002F4B           1155          MOVE.B  dRN,D3        ; destination register
00001EB4  4EB9 00002992           1156          JSR     EA_START
00001EBA                          1157          
00001EBA  43F9 00002E7A           1158          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001EC0  103C 000E               1159          MOVE.B   #14,D0     ; moves #14 into data register D0
00001EC4  4E4F                    1160          TRAP     #15       ; Displays message via trap 14
00001EC6                          1161          
00001EC6  6000 F3BA               1162          BRA   MEMORYGRABBER
00001ECA                          1163  
00001ECA                          1164          
00001ECA                          1165  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
00001ECA  43F9 00002EDE           1166           LEA       PASR,A1
00001ED0  103C 000E               1167          MOVE.B   #14,D0     ; moves #14 into data register D0
00001ED4  4E4F                    1168          TRAP     #15 
00001ED6  4EB9 000025E6           1169          JSR      SIZESPLIT
00001EDC                          1170          
00001EDC  43F9 00002F22           1171          LEA CLRSPOT,A1      * print space
00001EE2  103C 000E               1172          MOVE.B   #14,D0   
00001EE6  4E4F                    1173          TRAP     #15
00001EE8                          1174  
00001EE8                          1175          
00001EE8  4242                    1176          CLR D2
00001EEA  4243                    1177          CLR D3
00001EEC  143C 0000               1178          MOVE.B  #%000,D2     ; mode data register
00001EF0  1639 00002F4A           1179          MOVE.B  sRN,D3       ; source register number
00001EF6  4EB9 00002992           1180          JSR     EA_START
00001EFC  43F9 00002F28           1181          LEA      COMA,A1
00001F02  103C 000E               1182          MOVE.B   #14,D0
00001F06  4E4F                    1183          TRAP     #15
00001F08  4243                    1184          CLR D3
00001F0A  4242                    1185          CLR D2
00001F0C  143C 0000               1186          MOVE.B  #%000,D2      ; mode data register
00001F10  1639 00002F4B           1187          MOVE.B  dRN,D3        ; destination register
00001F16  4EB9 00002992           1188          JSR     EA_START
00001F1C                          1189          
00001F1C  43F9 00002E7A           1190          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F22  103C 000E               1191          MOVE.B   #14,D0     ; moves #14 into data register D0
00001F26  4E4F                    1192          TRAP     #15       ; Displays message via trap 14
00001F28                          1193          
00001F28  6000 F358               1194          BRA   MEMORYGRABBER
00001F2C                          1195  
00001F2C                          1196  
00001F2C                          1197  PR_G_LS_EA
00001F2C  43F9 00002F22           1198          LEA CLRSPOT,A1      * print space
00001F32  103C 000E               1199          MOVE.B   #14,D0   
00001F36  4E4F                    1200          TRAP     #15
00001F38                          1201  
00001F38  0CB9 00000000 00002F3A  1202          CMP.L #$0,DR 
00001F42  6700 0064               1203          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00001F46                          1204       
00001F46                          1205          *******PRINT LSL*******
00001F46  43F9 00002ED6           1206          LEA       PLSL,A1
00001F4C  103C 000E               1207          MOVE.B   #14,D0     ; moves #14 into data register D0
00001F50  4E4F                    1208          TRAP     #15 
00001F52  4EB9 000025E6           1209          JSR      SIZESPLIT
00001F58                          1210          
00001F58  43F9 00002F22           1211          LEA CLRSPOT,A1      * print space
00001F5E  103C 000E               1212          MOVE.B   #14,D0   
00001F62  4E4F                    1213          TRAP     #15
00001F64                          1214  
00001F64                          1215          
00001F64  4242                    1216          CLR D2
00001F66  4243                    1217          CLR D3
00001F68  143C 0000               1218          MOVE.B  #%000,D2     ; mode data register
00001F6C  1639 00002F4A           1219          MOVE.B  sRN,D3       ; source register number
00001F72  4EB9 00002992           1220          JSR     EA_START
00001F78  43F9 00002F28           1221          LEA      COMA,A1
00001F7E  103C 000E               1222          MOVE.B   #14,D0
00001F82  4E4F                    1223          TRAP     #15
00001F84  4243                    1224          CLR D3
00001F86  4242                    1225          CLR D2
00001F88  143C 0000               1226          MOVE.B  #%000,D2      ; mode data register
00001F8C  1639 00002F4B           1227          MOVE.B  dRN,D3        ; destination register
00001F92  4EB9 00002992           1228          JSR     EA_START
00001F98                          1229          
00001F98  43F9 00002E7A           1230          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F9E  103C 000E               1231          MOVE.B   #14,D0     ; moves #14 into data register D0
00001FA2  4E4F                    1232          TRAP     #15       ; Displays message via trap 14
00001FA4                          1233          
00001FA4  6000 F2DC               1234          BRA   MEMORYGRABBER
00001FA8                          1235          
00001FA8                          1236  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
00001FA8  43F9 00002EDA           1237           LEA       PLSR,A1
00001FAE  103C 000E               1238           MOVE.B   #14,D0     ; moves #14 into data register D0
00001FB2  4E4F                    1239          TRAP     #15 
00001FB4  4EB9 000025E6           1240          JSR      SIZESPLIT
00001FBA                          1241          
00001FBA  43F9 00002F22           1242          LEA CLRSPOT,A1      * print space
00001FC0  103C 000E               1243          MOVE.B   #14,D0   
00001FC4  4E4F                    1244          TRAP     #15
00001FC6                          1245  
00001FC6                          1246          
00001FC6  4242                    1247          CLR D2
00001FC8  4243                    1248          CLR D3
00001FCA  143C 0000               1249          MOVE.B  #%000,D2     ; mode data register
00001FCE  1639 00002F4A           1250          MOVE.B  sRN,D3       ; source register number
00001FD4  4EB9 00002992           1251          JSR     EA_START
00001FDA  43F9 00002F28           1252          LEA      COMA,A1
00001FE0  103C 000E               1253          MOVE.B   #14,D0
00001FE4  4E4F                    1254          TRAP     #15
00001FE6  4243                    1255          CLR D3
00001FE8  4242                    1256          CLR D2
00001FEA  143C 0000               1257          MOVE.B  #%000,D2      ; mode data register
00001FEE  1639 00002F4B           1258          MOVE.B  dRN,D3        ; destination register
00001FF4  4EB9 00002992           1259          JSR     EA_START
00001FFA                          1260          
00001FFA  43F9 00002E7A           1261          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002000  103C 000E               1262          MOVE.B   #14,D0     ; moves #14 into data register D0
00002004  4E4F                    1263          TRAP     #15       ; Displays message via trap 14
00002006                          1264          
00002006  6000 F27A               1265          BRA   MEMORYGRABBER
0000200A                          1266  
0000200A                          1267  
0000200A                          1268  PR_G_RO_EA
0000200A  43F9 00002F22           1269          LEA CLRSPOT,A1      * print space
00002010  103C 000E               1270          MOVE.B   #14,D0   
00002014  4E4F                    1271          TRAP     #15
00002016                          1272   
00002016                          1273          
00002016  0CB9 00000000 00002F3A  1274           CMP.L #$0,DR 
00002020  6700 0064               1275          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002024                          1276       
00002024                          1277          *******PRINT LSL*******
00002024  43F9 00002EE6           1278          LEA       PROL,A1
0000202A  103C 000E               1279          MOVE.B   #14,D0     ; moves #14 into data register D0
0000202E  4E4F                    1280          TRAP     #15 
00002030  4EB9 000025E6           1281          JSR      SIZESPLIT
00002036                          1282          
00002036  43F9 00002F22           1283          LEA CLRSPOT,A1      * print space
0000203C  103C 000E               1284          MOVE.B   #14,D0   
00002040  4E4F                    1285          TRAP     #15
00002042                          1286  
00002042                          1287          
00002042  4242                    1288          CLR D2
00002044  4243                    1289          CLR D3
00002046  143C 0000               1290          MOVE.B  #%000,D2     ; mode data register
0000204A  1639 00002F4A           1291          MOVE.B  sRN,D3       ; source register number
00002050  4EB9 00002992           1292          JSR     EA_START
00002056  43F9 00002F28           1293          LEA      COMA,A1
0000205C  103C 000E               1294          MOVE.B   #14,D0
00002060  4E4F                    1295          TRAP     #15
00002062  4243                    1296          CLR D3
00002064  4242                    1297          CLR D2
00002066  143C 0000               1298          MOVE.B  #%000,D2      ; mode data register
0000206A  1639 00002F4B           1299          MOVE.B  dRN,D3        ; destination register
00002070  4EB9 00002992           1300          JSR     EA_START
00002076                          1301          
00002076  43F9 00002E7A           1302          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000207C  103C 000E               1303          MOVE.B   #14,D0     ; moves #14 into data register D0
00002080  4E4F                    1304          TRAP     #15       ; Displays message via trap 14
00002082                          1305          
00002082  6000 F1FE               1306          BRA   MEMORYGRABBER
00002086                          1307  
00002086                          1308          
00002086                          1309  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
00002086  43F9 00002EEA           1310          LEA       PROR,A1
0000208C  103C 000E               1311          MOVE.B   #14,D0     ; moves #14 into data register D0
00002090  4E4F                    1312          TRAP     #15 
00002092  4EB9 000025E6           1313          JSR      SIZESPLIT
00002098                          1314          
00002098  43F9 00002F22           1315          LEA CLRSPOT,A1      * print space
0000209E  103C 000E               1316          MOVE.B   #14,D0   
000020A2  4E4F                    1317          TRAP     #15
000020A4                          1318  
000020A4                          1319          
000020A4  4242                    1320          CLR D2
000020A6  4243                    1321          CLR D3
000020A8  143C 0000               1322          MOVE.B  #%000,D2     ; mode data register
000020AC  1639 00002F4A           1323          MOVE.B  sRN,D3       ; source register number
000020B2  4EB9 00002992           1324          JSR     EA_START
000020B8  43F9 00002F28           1325          LEA      COMA,A1
000020BE  103C 000E               1326          MOVE.B   #14,D0
000020C2  4E4F                    1327          TRAP     #15
000020C4  4243                    1328          CLR D3
000020C6  4242                    1329          CLR D2
000020C8  143C 0000               1330          MOVE.B  #%000,D2      ; mode data register
000020CC  1639 00002F4B           1331          MOVE.B  dRN,D3        ; destination register
000020D2  4EB9 00002992           1332          JSR     EA_START
000020D8                          1333          
000020D8  43F9 00002E7A           1334          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000020DE  103C 000E               1335          MOVE.B   #14,D0     ; moves #14 into data register D0
000020E2  4E4F                    1336          TRAP     #15       ; Displays message via trap 14
000020E4                          1337          
000020E4  6000 F19C               1338          BRA   MEMORYGRABBER
000020E8                          1339  
000020E8                          1340  PR_RO 
000020E8  43F9 00002F22           1341       LEA CLRSPOT,A1      * print space
000020EE  103C 000E               1342       MOVE.B   #14,D0   
000020F2  4E4F                    1343       TRAP     #15
000020F4                          1344   
000020F4  0CB9 00000000 00002F3A  1345       CMP.L #$0,DR 
000020FE  6700 0234               1346       BEQ   PR_ROR   ;RIGHT SHIFT
00002102                          1347      
00002102                          1348      *******PRINT ASL*******
00002102  43F9 00002EE6           1349       LEA       PROL,A1
00002108  103C 000E               1350       MOVE.B   #14,D0     ; moves #14 into data register D0
0000210C  4E4F                    1351       TRAP     #15 
0000210E                          1352  
0000210E  4EB9 000025E6           1353      JSR      SIZESPLIT
00002114                          1354      
00002114  43F9 00002F22           1355       LEA CLRSPOT,A1      * print space
0000211A  103C 000E               1356       MOVE.B   #14,D0   
0000211E  4E4F                    1357       TRAP     #15
00002120                          1358  
00002120                          1359      
00002120  43F9 00002F20           1360      LEA     HASH,A1    * print hash
00002126  700E                    1361      MOVEQ   #14,D0
00002128  4E4F                    1362      TRAP    #15
0000212A                          1363  
0000212A                          1364      
0000212A  4241                    1365      CLR D1
0000212C  1239 00002F46           1366      MOVE.B   S_COUNT,D1
00002132  103C 0003               1367      MOVE.B   #3,D0
00002136  4E4F                    1368      TRAP     #15
00002138  43F9 00002F28           1369      LEA      COMA,A1
0000213E  103C 000E               1370      MOVE.B   #14,D0
00002142  4E4F                    1371      TRAP     #15
00002144  4243                    1372      CLR D3
00002146  4242                    1373      CLR D2
00002148  143C 0000               1374      MOVE.B  #%000,D2
0000214C  1639 00002F4B           1375      MOVE.B  dRN,D3
00002152  4EB9 00002992           1376      JSR     EA_START
00002158                          1377      
00002158  43F9 00002E7A           1378      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000215E  103C 000E               1379      MOVE.B   #14,D0     ; moves #14 into data register D0
00002162  4E4F                    1380      TRAP     #15       ; Displays message via trap 14
00002164                          1381  
00002164                          1382      
00002164  6000 F11C               1383      BRA    MEMORYGRABBER
00002168                          1384  
00002168                          1385  
00002168                          1386  
00002168                          1387  PR_AS 
00002168  43F9 00002F22           1388       LEA CLRSPOT,A1      * print space
0000216E  103C 000E               1389       MOVE.B   #14,D0   
00002172  4E4F                    1390       TRAP     #15
00002174                          1391  
00002174  0CB9 00000000 00002F3A  1392       CMP.L #$0,DR 
0000217E  6700 014E               1393      BEQ   PR_ASR   ;RIGHT SHIFT
00002182                          1394      
00002182                          1395      *******PRINT ASL*******
00002182  43F9 00002EE2           1396       LEA       PASL,A1
00002188  103C 000E               1397       MOVE.B   #14,D0     ; moves #14 into data register D0
0000218C  4E4F                    1398       TRAP     #15 
0000218E                          1399  
0000218E  4EB9 000025E6           1400      JSR      SIZESPLIT
00002194                          1401      
00002194  43F9 00002F22           1402       LEA CLRSPOT,A1      * print space
0000219A  103C 000E               1403       MOVE.B   #14,D0   
0000219E  4E4F                    1404       TRAP     #15
000021A0                          1405  
000021A0                          1406      
000021A0  43F9 00002F20           1407      LEA     HASH,A1    * print hash
000021A6  700E                    1408      MOVEQ   #14,D0
000021A8  4E4F                    1409      TRAP    #15
000021AA                          1410  
000021AA                          1411      
000021AA  4241                    1412      CLR D1
000021AC  1239 00002F46           1413      MOVE.B   S_COUNT,D1
000021B2  103C 0003               1414      MOVE.B   #3,D0
000021B6  4E4F                    1415      TRAP     #15
000021B8  43F9 00002F28           1416      LEA      COMA,A1
000021BE  103C 000E               1417      MOVE.B   #14,D0
000021C2  4E4F                    1418      TRAP     #15
000021C4  4243                    1419      CLR D3
000021C6  4242                    1420      CLR D2
000021C8  143C 0000               1421      MOVE.B  #%000,D2
000021CC  1639 00002F4B           1422      MOVE.B  dRN,D3
000021D2  4EB9 00002992           1423      JSR     EA_START
000021D8                          1424      
000021D8  43F9 00002E7A           1425      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000021DE  103C 000E               1426      MOVE.B   #14,D0     ; moves #14 into data register D0
000021E2  4E4F                    1427      TRAP     #15       ; Displays message via trap 14
000021E4                          1428  
000021E4  6000 F09C               1429      BRA    MEMORYGRABBER
000021E8                          1430  
000021E8                          1431                        
000021E8                          1432                          
000021E8                          1433  PR_LS 
000021E8  43F9 00002F22           1434       LEA CLRSPOT,A1      * print space
000021EE  103C 000E               1435       MOVE.B   #14,D0   
000021F2  4E4F                    1436       TRAP     #15
000021F4                          1437  
000021F4  0CB9 00000000 00002F3A  1438      CMP.L #$0,DR 
000021FE  6700 0068               1439      BEQ   PR_LSR   ;RIGHT SHIFT
00002202                          1440      
00002202                          1441      *******PRINT LSL*******
00002202  43F9 00002ED6           1442       LEA       PLSL,A1
00002208  103C 000E               1443       MOVE.B   #14,D0     ; moves #14 into data register D0
0000220C  4E4F                    1444       TRAP     #15 
0000220E                          1445  
0000220E  4EB9 000025E6           1446      JSR      SIZESPLIT
00002214                          1447      
00002214  43F9 00002F22           1448      LEA CLRSPOT,A1      * print space
0000221A  103C 000E               1449       MOVE.B   #14,D0   
0000221E  4E4F                    1450       TRAP     #15
00002220                          1451  
00002220                          1452      
00002220  43F9 00002F20           1453      LEA     HASH,A1    * print hash
00002226  700E                    1454      MOVEQ   #14,D0
00002228  4E4F                    1455      TRAP    #15
0000222A                          1456  
0000222A                          1457      
0000222A  4241                    1458      CLR D1
0000222C  1239 00002F46           1459      MOVE.B   S_COUNT,D1
00002232  103C 0003               1460      MOVE.B   #3,D0
00002236  4E4F                    1461      TRAP     #15
00002238  43F9 00002F28           1462      LEA      COMA,A1
0000223E  103C 000E               1463      MOVE.B   #14,D0
00002242  4E4F                    1464      TRAP     #15
00002244  4243                    1465      CLR D3
00002246  4242                    1466      CLR D2
00002248  143C 0000               1467      MOVE.B  #%000,D2
0000224C  1639 00002F4B           1468      MOVE.B  dRN,D3
00002252  4EB9 00002992           1469      JSR     EA_START
00002258                          1470      
00002258  43F9 00002E7A           1471      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000225E  103C 000E               1472      MOVE.B   #14,D0     ; moves #14 into data register D0
00002262  4E4F                    1473      TRAP     #15       ; Displays message via trap 14
00002264                          1474  
00002264                          1475      
00002264  6000 F01C               1476      BRA    MEMORYGRABBER
00002268                          1477            
00002268  43F9 00002EDA           1478  PR_LSR LEA   PLSR,A1
0000226E  103C 000E               1479        MOVE.B   #14,D0     ; moves #14 into data register D0
00002272  4E4F                    1480        TRAP     #15       ; Displays message via trap 14 
00002274  4EB9 000025E6           1481        JSR      SIZESPLIT
0000227A                          1482        
0000227A  43F9 00002F22           1483        LEA CLRSPOT,A1      * print space
00002280  103C 000E               1484       MOVE.B   #14,D0   
00002284  4E4F                    1485       TRAP     #15
00002286                          1486  
00002286                          1487        
00002286  43F9 00002F20           1488        LEA     HASH,A1    * print hash
0000228C  700E                    1489        MOVEQ   #14,D0
0000228E  4E4F                    1490        TRAP    #15
00002290                          1491  
00002290                          1492        
00002290  4241                    1493        CLR D1
00002292  1239 00002F46           1494        MOVE.B   S_COUNT,D1
00002298  103C 0003               1495        MOVE.B   #3,D0
0000229C  4E4F                    1496        TRAP     #15
0000229E  43F9 00002F28           1497        LEA      COMA,A1
000022A4  103C 000E               1498        MOVE.B   #14,D0
000022A8  4E4F                    1499        TRAP     #15
000022AA  4243                    1500        CLR D3
000022AC  4242                    1501        CLR D2
000022AE  143C 0000               1502        MOVE.B #%000,D2
000022B2  1639 00002F4B           1503        MOVE.B  dRN,D3
000022B8  4EB9 00002992           1504        JSR   EA_START
000022BE                          1505        
000022BE  43F9 00002E7A           1506        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000022C4  103C 000E               1507        MOVE.B   #14,D0     ; moves #14 into data register D0
000022C8  4E4F                    1508        TRAP     #15       ; Displays message via trap 14
000022CA                          1509  
000022CA                          1510        
000022CA  6000 EFB6               1511        BRA MEMORYGRABBER
000022CE                          1512        
000022CE  43F9 00002EDE           1513  PR_ASR LEA   PASR,A1
000022D4  103C 000E               1514         MOVE.B   #14,D0     ; moves #14 into data register D0
000022D8  4E4F                    1515        TRAP     #15       ; Displays message via trap 14 
000022DA  4EB9 000025E6           1516        JSR      SIZESPLIT
000022E0                          1517        
000022E0  43F9 00002F22           1518        LEA CLRSPOT,A1      * print space
000022E6  103C 000E               1519       MOVE.B   #14,D0   
000022EA  4E4F                    1520       TRAP     #15
000022EC                          1521  
000022EC                          1522        
000022EC  43F9 00002F20           1523        LEA     HASH,A1    * print hash
000022F2  700E                    1524        MOVEQ   #14,D0
000022F4  4E4F                    1525        TRAP    #15
000022F6                          1526  
000022F6                          1527        
000022F6  4241                    1528        CLR D1
000022F8  1239 00002F46           1529        MOVE.B   S_COUNT,D1
000022FE  103C 0003               1530        MOVE.B   #3,D0
00002302  4E4F                    1531        TRAP     #15
00002304  43F9 00002F28           1532        LEA      COMA,A1
0000230A  103C 000E               1533        MOVE.B   #14,D0
0000230E  4E4F                    1534        TRAP     #15
00002310  4243                    1535        CLR D3
00002312  4242                    1536        CLR D2
00002314  143C 0000               1537        MOVE.B #%000,D2
00002318  1639 00002F4B           1538        MOVE.B  dRN,D3
0000231E  4EB9 00002992           1539        JSR   EA_START
00002324                          1540        
00002324  43F9 00002E7A           1541        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000232A  103C 000E               1542        MOVE.B   #14,D0     ; moves #14 into data register D0
0000232E  4E4F                    1543        TRAP     #15       ; Displays message via trap 14
00002330                          1544  
00002330                          1545        
00002330  6000 EF50               1546        BRA MEMORYGRABBER
00002334                          1547  
00002334                          1548        
00002334  43F9 00002EEA           1549  PR_ROR LEA   PROR,A1
0000233A  103C 000E               1550        MOVE.B   #14,D0     ; moves #14 into data register D0
0000233E  4E4F                    1551        TRAP     #15       ; Displays message via trap 14 
00002340  4EB9 000025E6           1552        JSR      SIZESPLIT
00002346                          1553        
00002346  43F9 00002F22           1554        LEA CLRSPOT,A1      * print space
0000234C  103C 000E               1555       MOVE.B   #14,D0   
00002350  4E4F                    1556       TRAP     #15
00002352                          1557  
00002352                          1558        
00002352  43F9 00002F20           1559        LEA     HASH,A1    * print hash
00002358  700E                    1560        MOVEQ   #14,D0
0000235A  4E4F                    1561        TRAP    #15
0000235C                          1562  
0000235C                          1563        
0000235C  4241                    1564        CLR D1
0000235E  1239 00002F46           1565        MOVE.B   S_COUNT,D1
00002364  103C 0003               1566        MOVE.B   #3,D0
00002368  4E4F                    1567        TRAP     #15
0000236A  43F9 00002F28           1568        LEA      COMA,A1
00002370  103C 000E               1569        MOVE.B   #14,D0
00002374  4E4F                    1570        TRAP     #15
00002376  4243                    1571        CLR D3
00002378  4242                    1572        CLR D2
0000237A  143C 0000               1573        MOVE.B #%000,D2
0000237E  1639 00002F4B           1574        MOVE.B  dRN,D3
00002384  4EB9 00002992           1575        JSR   EA_START
0000238A                          1576        
0000238A  43F9 00002E7A           1577        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002390  103C 000E               1578        MOVE.B   #14,D0     ; moves #14 into data register D0
00002394  4E4F                    1579        TRAP     #15       ; Displays message via trap 14
00002396                          1580  
00002396                          1581        
00002396  6000 EEEA               1582        BRA MEMORYGRABBER
0000239A                          1583        
0000239A                          1584  ;-----------------------extra parts for above code to function
0000239A                          1585  
0000239A                          1586  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
0000239A  0C39 0000 00002F46      1587           CMP.B #$0,S_COUNT
000023A2  6700 0004               1588           BEQ   IS_EIGHT
000023A6  4E75                    1589           RTS
000023A8                          1590           
000023A8  13FC 0008 00002F46      1591  IS_EIGHT  MOVE.B #8,S_COUNT
000023B0  4E75                    1592            RTS
000023B2                          1593  
000023B2                          1594  ;---------------------------------------------------------
000023B2                          1595                  ;MOVE SECTION
000023B2  43F9 00002E80           1596  PRINTMOVE LEA PMOVE,A1
000023B8  103C 000E               1597      MOVE.B   #14,D0     ; moves #14 into data register D0
000023BC  4E4F                    1598      TRAP     #15       ; Displays message via trap 14
000023BE  4EB9 000025E6           1599      JSR     SIZESPLIT
000023C4  6000 0286               1600      BRA EADN
000023C8                          1601      
000023C8  43F9 00002E8C           1602  PRINTMOVEA LEA PMOVEA,A1
000023CE  103C 000E               1603      MOVE.B   #14,D0     ; moves #14 into data register D0
000023D2  4E4F                    1604      TRAP     #15       ; Displays message via trap 14
000023D4  4EB9 000025E6           1605      JSR     SIZESPLIT
000023DA  6000 0270               1606      BRA EADN
000023DE                          1607      
000023DE                          1608                      ;First set of commands
000023DE  43F9 00002E99           1609  PRINTNOP    LEA PNOP,A1
000023E4  103C 000E               1610      MOVE.B   #14,D0     ; moves #14 into data register D0
000023E8  4E4F                    1611      TRAP     #15       ; Displays message via trap 14
000023EA                          1612      
000023EA  6000 EE96               1613      BRA     MEMORYGRABBER
000023EE                          1614  
000023EE  43F9 00002E85           1615  PRINTMOVEM  LEA PMOVEM,A1
000023F4  103C 000E               1616      MOVE.B   #14,D0     ; moves #14 into data register D0
000023F8  4E4F                    1617      TRAP     #15       ; Displays message via trap 14
000023FA  4EB9 000025E6           1618      JSR     SIZESPLIT
00002400  6000 024A               1619      BRA EADN
00002404                          1620  
00002404  43F9 00002E9D           1621  PRINTLEA    LEA PLEA,A1
0000240A  103C 000E               1622      MOVE.B   #14,D0     ; moves #14 into data register D0
0000240E  4E4F                    1623      TRAP     #15       ; Displays message via trap 14
00002410  4EB9 000025E6           1624      JSR     SIZESPLIT
00002416  6000 0234               1625      BRA EADN
0000241A                          1626  
0000241A  43F9 00002EA1           1627  PRINTNOT    LEA PNOT,A1
00002420  103C 000E               1628      MOVE.B   #14,D0     ; moves #14 into data register D0
00002424  4E4F                    1629      TRAP     #15       ; Displays message via trap 14
00002426  4EB9 000025E6           1630      JSR     SIZESPLIT
0000242C  6000 021E               1631      BRA EADN
00002430                          1632  
00002430  43F9 00002EA5           1633  PRINTJSR    LEA PJSR,A1
00002436  103C 000E               1634      MOVE.B   #14,D0     ; moves #14 into data register D0
0000243A  4E4F                    1635      TRAP     #15       ; Displays message via trap 14
0000243C  4EB9 000025E6           1636      JSR     SIZESPLIT
00002442  6000 0208               1637      BRA EADN
00002446                          1638  
00002446  43F9 00002EA9           1639  PRINTRTS    LEA PRTS,A1
0000244C  103C 000E               1640      MOVE.B   #14,D0     ; moves #14 into data register D0
00002450  4E4F                    1641      TRAP     #15       ; Displays message via trap 14
00002452                          1642      
00002452  6000 EE2E               1643      BRA     MEMORYGRABBER
00002456                          1644      
00002456                          1645                  ;ADDQ SECTION
00002456  43F9 00002ED1           1646  PRINTADDQ LEA PADDQ,A1
0000245C  103C 000E               1647      MOVE.B   #14,D0     ; moves #14 into data register D0
00002460  4E4F                    1648      TRAP     #15       ; Displays message via trap 14
00002462  4EB9 000025E6           1649      JSR     SIZESPLIT
00002468  6000 01E2               1650      BRA EADN
0000246C                          1651  
0000246C                          1652                  ;SECOND SET OF COMMANDS
0000246C  43F9 00002EAD           1653  PRINTBGT LEA PBGT,A1
00002472  103C 000E               1654      MOVE.B   #14,D0     ; moves #14 into data register D0
00002476  4E4F                    1655      TRAP     #15       ; Displays message via trap 14
00002478  4EB9 000025E6           1656      JSR SIZESPLIT
0000247E  6000 01CC               1657      BRA EADN
00002482                          1658  
00002482  43F9 00002EB1           1659  PRINTBEQ LEA PBEQ,A1
00002488  103C 000E               1660      MOVE.B   #14,D0     ; moves #14 into data register D0
0000248C  4E4F                    1661      TRAP     #15       ; Displays message via trap 14
0000248E  4EB9 000025E6           1662      JSR SIZESPLIT
00002494  6000 01B6               1663      BRA EADN
00002498                          1664  
00002498  43F9 00002EB5           1665  PRINTBLE LEA PBLE,A1
0000249E  103C 000E               1666      MOVE.B   #14,D0     ; moves #14 into data register D0
000024A2  4E4F                    1667      TRAP     #15       ; Displays message via trap 14
000024A4  4EB9 000025E6           1668      JSR SIZESPLIT
000024AA  6000 01A0               1669      BRA EADN
000024AE                          1670  
000024AE  43F9 00002EB9           1671  PRINTBRA LEA PBRA,A1
000024B4  103C 000E               1672      MOVE.B   #14,D0     ; moves #14 into data register D0
000024B8  4E4F                    1673      TRAP     #15       ; Displays message via trap 14
000024BA  4EB9 000025E6           1674      JSR SIZESPLIT
000024C0  6000 018A               1675      BRA EADN
000024C4                          1676      
000024C4                          1677                  ;MOVEQ SECTION
000024C4                          1678  PRINTMOVEQ 
000024C4  43F9 00002E92           1679      LEA PMOVEQ,A1
000024CA  103C 000E               1680      MOVE.B   #14,D0     ; moves #14 into data register D0
000024CE  4E4F                    1681      TRAP     #15       ; Displays message via trap 14
000024D0  43F9 00002F22           1682      LEA CLRSPOT,A1
000024D6  103C 000E               1683      MOVE.B   #14,D0     ; moves #14 into data register D0
000024DA  4E4F                    1684      TRAP     #15
000024DC  43F9 00002F26           1685      LEA DOLLARSIGN,A1
000024E2  103C 000E               1686      MOVE.B   #14,D0     ; moves #14 into data register D0
000024E6  4E4F                    1687      TRAP     #15    
000024E8  2239 00002F1A           1688      MOVE.L      DATA_FIELD,D1
000024EE  143C 0010               1689      MOVE.B      #16,D2
000024F2  103C 000F               1690      MOVE.B      #15,D0     ; moves #14 into data register D0
000024F6  4E4F                    1691      TRAP        #15 
000024F8  43F9 00002F28           1692      LEA COMA,A1
000024FE  103C 000E               1693      MOVE.B   #14,D0     ; moves #14 into data register D0
00002502  4E4F                    1694      TRAP     #15
00002504  1E3C 0000               1695      MOVE.B #0,D7
00002508  7400                    1696      MOVE.L #%000,D2
0000250A  1639 00002F14           1697      MOVE.B DEST_REG,D3
00002510  6000 013A               1698      BRA EADN
00002514                          1699  
00002514                          1700                  ;OR SECTION
00002514  43F9 00002EBD           1701  PRINTOR LEA POR,A1
0000251A  103C 000E               1702      MOVE.B   #14,D0     ; moves #14 into data register D0
0000251E  4E4F                    1703      TRAP     #15       ; Displays message via trap 14
00002520  4EB9 000025E6           1704      JSR SIZESPLIT
00002526  6000 0124               1705      BRA EADN
0000252A                          1706  
0000252A                          1707                  ;SUB SECTION
0000252A  43F9 00002EC0           1708  PRINTSUB LEA PSUB,A1
00002530  103C 000E               1709      MOVE.B   #14,D0     ; moves #14 into data register D0
00002534  4E4F                    1710      TRAP     #15       ; Displays message via trap 14
00002536  4EB9 000025E6           1711      JSR SIZESPLIT
0000253C  6000 010E               1712      BRA EADN
00002540                          1713  
00002540                          1714                  ;AND SECTION
00002540  43F9 00002EC4           1715  PRINTAND LEA PAND,A1
00002546  103C 000E               1716      MOVE.B   #14,D0     ; moves #14 into data register D0
0000254A  4E4F                    1717      TRAP     #15       ; Displays message via trap 14
0000254C  4EB9 000025E6           1718      JSR SIZESPLIT
00002552  6000 00F8               1719      BRA EADN
00002556                          1720  
00002556                          1721                  ;ADD SPLIT              
00002556  43F9 00002EC8           1722  PRINTADD LEA PADD,A1
0000255C  103C 000E               1723      MOVE.B   #14,D0     ; moves #14 into data register D0
00002560  4E4F                    1724      TRAP     #15       ; Displays message via trap 14
00002562  4EB9 000025E6           1725      JSR     SIZESPLIT
00002568  6000 00E2               1726      BRA EADN
0000256C                          1727      
0000256C  43F9 00002ECC           1728  PRINTADDA LEA PADDA,A1
00002572  103C 000E               1729      MOVE.B   #14,D0     ; moves #14 into data register D0
00002576  4E4F                    1730      TRAP     #15       ; Displays message via trap 14
00002578  4EB9 000025E6           1731      JSR     SIZESPLIT
0000257E  6000 00CC               1732      BRA EADN
00002582                          1733      
00002582                          1734                  ;THIRD ROTATE SPLIT   
00002582                          1735  PRINTROTATESPLIT 
00002582  0C79 0000 00002E7F      1736      CMP #0,CommandDetail   
0000258A                          1737      *BEQ PRINTLSL
0000258A  0C79 0001 00002E7F      1738      CMP #1,CommandDetail   
00002592                          1739      *BEQ PRINTLSLDOUBLE
00002592  0C79 0002 00002E7F      1740      CMP #2,CommandDetail   
0000259A                          1741      *BEQ PRINTLSR
0000259A  0C79 0003 00002E7F      1742      CMP #3,CommandDetail   
000025A2                          1743      *BEQ PRINTLSRDOUBLE
000025A2  0C79 0004 00002E7F      1744      CMP #4,CommandDetail   
000025AA                          1745      *BEQ PRINTASR
000025AA  0C79 0005 00002E7F      1746      CMP #5,CommandDetail   
000025B2                          1747      *BEQ PRINTASRDOUBLE
000025B2  0C79 0006 00002E7F      1748      CMP #6,CommandDetail   
000025BA                          1749      *BEQ PRINTASL
000025BA  0C79 0007 00002E7F      1750      CMP #7,CommandDetail   
000025C2                          1751      *BEQ PRINTASLDOUBLE
000025C2  0C79 0008 00002E7F      1752      CMP #8,CommandDetail   
000025CA                          1753      *BEQ PRINTROL
000025CA  0C79 0009 00002E7F      1754      CMP #9,CommandDetail   
000025D2                          1755      *BEQ PRINTROLDOUBLE
000025D2  0C79 000A 00002E7F      1756      CMP #10,CommandDetail
000025DA                          1757      *BEQ PRINTROR     
000025DA  0C79 000B 00002E7F      1758      CMP #11,CommandDetail
000025E2                          1759      *BEQ PRINTRORDOUBLE            
000025E2  6000 EC9E               1760      BRA MEMORYGRABBER    
000025E6                          1761  
000025E6                          1762  
000025E6                          1763                  ;SIZE PRINTER
000025E6                          1764  SIZESPLIT   
000025E6  0CB9 00000001 00002F04  1765      CMP.L #1,SizeValue
000025F0  6700 003E               1766      BEQ PRINTB
000025F4  0CB9 00000002 00002F04  1767      CMP.L #2,SizeValue
000025FE  6700 0022               1768      BEQ PRINTW
00002602  0CB9 00000003 00002F04  1769      CMP.L #3,SizeValue
0000260C  6700 0006               1770      BEQ PRINTL
00002610  6000 002C               1771      BRA PRINTNONE ; go to EA/DN section
00002614                          1772      
00002614  43F9 00002F10           1773  PRINTL LEA PL,A1
0000261A  103C 000E               1774      MOVE.B   #14,D0     ; moves #14 into data register D0
0000261E  4E4F                    1775      TRAP     #15       ; Displays message via trap 14
00002620  4E75                    1776      RTS
00002622                          1777  
00002622  43F9 00002F0C           1778  PRINTW      LEA PW,A1
00002628  103C 000E               1779      MOVE.B   #14,D0     ; moves #14 into data register D0
0000262C  4E4F                    1780      TRAP     #15       ; Displays message via trap 14
0000262E  4E75                    1781      RTS
00002630                          1782  
00002630  43F9 00002F08           1783  PRINTB  LEA PB,A1
00002636  103C 000E               1784      MOVE.B   #14,D0     ; moves #14 into data register D0
0000263A  4E4F                    1785      TRAP     #15       ; Displays message via trap 14
0000263C  4E75                    1786      RTS
0000263E                          1787      
0000263E  43F9 00002F22           1788  PRINTNONE  LEA CLRSPOT,A1
00002644  103C 000E               1789      MOVE.B   #14,D0     ; moves #14 into data register D0
00002648  4E4F                    1790      TRAP     #15       ; Displays message via trap 14
0000264A  4E75                    1791      RTS
0000264C                          1792  
0000264C                          1793                  ;PRINT EA/DN
0000264C                          1794  EADN 
0000264C  BE3C 0000               1795      CMP.B   #0,D7
00002650  6700 0048               1796      BEQ     PRINTNOTRAIL
00002654  BE3C 0001               1797      CMP.B   #1,D7
00002658  6700 000E               1798      BEQ     PRINTONETRAIL 
0000265C  BE3C 0002               1799      CMP.B   #2,D7
00002660  6700 001C               1800      BEQ     PRINTTWOTRAIL
00002664                          1801      
00002664  6000 EC1C               1802      BRA     MEMORYGRABBER
00002668                          1803      
00002668                          1804  PRINTONETRAIL 
00002668  4EB9 00002992           1805      JSR EA_Start
0000266E  43F9 00002E7A           1806      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002674  103C 000E               1807      MOVE.B   #14,D0     ; moves #14 into data register D0
00002678  4E4F                    1808      TRAP     #15       ; Displays message via trap 14
0000267A  6000 EC06               1809      BRA MEMORYGRABBER
0000267E                          1810  
0000267E                          1811  PRINTTWOTRAIL 
0000267E  4EB9 00002992           1812      JSR EA_Start
00002684  4EB9 00002992           1813      JSR EA_Start
0000268A  43F9 00002E7A           1814      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002690  103C 000E               1815      MOVE.B   #14,D0     ; moves #14 into data register D0
00002694  4E4F                    1816      TRAP     #15       ; Displays message via trap 14
00002696  6000 EBEA               1817      BRA MEMORYGRABBER
0000269A                          1818      
0000269A                          1819  PRINTNOTRAIL 
0000269A  4EB9 00002992           1820      JSR EA_Start
000026A0  43F9 00002E7A           1821      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000026A6  103C 000E               1822      MOVE.B   #14,D0     ; moves #14 into data register D0
000026AA  4E4F                    1823      TRAP     #15       ; Displays message via trap 14
000026AC  6000 EBD4               1824      BRA MEMORYGRABBER
000026B0                          1825  
000026B0                          1826  CLOSINGSTATEMENTS     
000026B0  43F9 00002E7A           1827      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000026B6  103C 000E               1828      MOVE.B   #14,D0     ; moves #14 into data register D0
000026BA  4E4F                    1829      TRAP     #15       ; Displays message via trap 14
000026BC                          1830     
000026BC                          1831  STOP    
000026BC  103C 0009               1832      MOVE.B #9,D0        ; moves #9 into data register D0
000026C0  4E4F                    1833      TRAP     #15       ; halt simulator via trap 9
000026C2                          1834  
000026C2                          1835  
000026C2                          1836  ;----------------------------- ADDED THIS FOR THE MEMORYGRABBER (MAIN LOOP) 
000026C2                          1837  ENDING 
000026C2  43F9 00002E67           1838      LEA     FINALMESSAGE,A1     * Prints End of Program message
000026C8  103C 000E               1839      MOVE.B  #14,D0
000026CC  4E4F                    1840      TRAP    #15
000026CE                          1841  
000026CE  FFFF FFFF               1842      SIMHALT             ; halt simulator
000026D2                          1843      
000026D2                          1844      
000026D2                          1845      
000026D2                          1846  ;----------------------------- ADDED THIS FOR OP CODE PART 
000026D2                          1847  ********* CHECK DESTINATION ***********
000026D2                          1848  CHECK_DESTINATION
000026D2  13FC 000F 00002F2D      1849      MOVE.B  #$F,DstMode
000026DA                          1850      
000026DA  0C39 0007 00002F15      1851      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
000026E2  6700 0026               1852      BEQ     CHECK_DEST_REG             * Checks registers
000026E6                          1853      
000026E6  0C39 0005 00002F15      1854      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
000026EE  6700 0058               1855      BEQ     R_CHECK_DEST    * Print DATA instead 
000026F2                          1856      
000026F2  0C39 0006 00002F15      1857      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
000026FA  6700 004C               1858      BEQ     R_CHECK_DEST    * Print DATA instead
000026FE                          1859      
000026FE  13F9 00002F15 00002F2D  1860      MOVE.B  DEST_MODE,DstMode
00002708  4E75                    1861      RTS
0000270A                          1862  CHECK_DEST_REG
0000270A  0C39 0002 00002F14      1863      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002712  6700 0034               1864      BEQ     R_CHECK_DEST
00002716                          1865  
00002716  0C39 0003 00002F14      1866      CMP.B   #3,DEST_REG         * if DEST_REG = 011
0000271E  6700 0028               1867      BEQ     R_CHECK_DEST
00002722                          1868      
00002722  0C39 0005 00002F14      1869      CMP.B   #5,DEST_REG             * if DEST_REG = 101
0000272A  6C00 016C               1870      BGE     RETURN
0000272E                          1871      
0000272E  13F9 00002F15 00002F2D  1872      MOVE.B  DEST_MODE,DstMode
00002738  4286                    1873      CLR.L   D6
0000273A  1C39 00002F14           1874      MOVE.B  DEST_REG,D6
00002740  DD39 00002F2D           1875      ADD.B   D6,DstMode
00002746  4E75                    1876      RTS
00002748                          1877  R_CHECK_DEST
00002748  13FC 000E 00002F2D      1878      MOVE.B  #$E,DstMode
00002750  4E75                    1879      RTS
00002752                          1880  ********* CHECK TEMP ***********
00002752                          1881  CHECK_TEMP
00002752                          1882  
00002752  13FC 000F 00002F2E      1883      MOVE.B  #$F,TempMode
0000275A                          1884      
0000275A  0C39 0007 00002F18      1885      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
00002762  6700 0026               1886      BEQ     CHECK_TEMP_REG      * Checks registers
00002766                          1887  
00002766  0C39 0005 00002F18      1888      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
0000276E  6700 0058               1889      BEQ     R_CHECK_TEMP    * 
00002772                          1890      
00002772  0C39 0006 00002F18      1891      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
0000277A  6700 004C               1892      BEQ     R_CHECK_TEMP    * 
0000277E                          1893      
0000277E  13F9 00002F18 00002F2E  1894      MOVE.B  TEMP_MODE,TempMode
00002788  4E75                    1895      RTS
0000278A                          1896  CHECK_TEMP_REG
0000278A  0C39 0002 00002F19      1897      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
00002792  6700 0034               1898      BEQ     R_CHECK_TEMP
00002796                          1899  
00002796  0C39 0003 00002F19      1900      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
0000279E  6700 0028               1901      BEQ     R_CHECK_TEMP
000027A2                          1902      
000027A2  0C39 0005 00002F19      1903      CMP.B   #5,TEMP_REG             * if RRRT = 101
000027AA  6700 00EC               1904      BEQ     RETURN
000027AE                          1905      
000027AE  13F9 00002F18 00002F2E  1906      MOVE.B  TEMP_MODE,TempMode
000027B8  4286                    1907      CLR.L   D6
000027BA  1C39 00002F19           1908      MOVE.B  TEMP_REG,D6
000027C0  DD39 00002F2E           1909      ADD.B   D6,TempMode
000027C6  4E75                    1910      RTS
000027C8                          1911  R_CHECK_TEMP
000027C8  13FC 000E 00002F2E      1912      MOVE.B  #$E,TempMode
000027D0  4E75                    1913      RTS
000027D2                          1914  ******************** CHECK_SOURCE ******************** 
000027D2                          1915  CHECK_SOURCE    * TODO
000027D2  13FC 000F 00002F2F      1916      MOVE.B  #$F,SrcMode
000027DA                          1917      
000027DA  0C39 0007 00002F16      1918      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
000027E2  6700 0026               1919      BEQ     CHECK_SOURCE_REG    * Checks registers
000027E6                          1920  
000027E6  0C39 0005 00002F16      1921      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
000027EE  6700 0058               1922      BEQ     R_CHECK_SOURCE 
000027F2                          1923      
000027F2  0C39 0006 00002F16      1924      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
000027FA  6700 004C               1925      BEQ     R_CHECK_SOURCE 
000027FE                          1926      
000027FE  13F9 00002F16 00002F2F  1927      MOVE.B  SRC_MODE,SrcMode
00002808  4E75                    1928      RTS
0000280A                          1929  CHECK_SOURCE_REG
0000280A  0C39 0002 00002F17      1930      CMP.B   #2,SRC_REG             * if RRRS = 010
00002812  6700 0034               1931      BEQ     R_CHECK_SOURCE
00002816                          1932  
00002816  0C39 0003 00002F17      1933      CMP.B   #3,SRC_REG          * if RRRS = 011
0000281E  6700 0028               1934      BEQ     R_CHECK_SOURCE
00002822                          1935      
00002822  0C39 0005 00002F17      1936      CMP.B   #5,SRC_REG      * if RRRS = 101
0000282A  6C00 006C               1937      BGE     RETURN
0000282E                          1938      
0000282E  13F9 00002F16 00002F2F  1939      MOVE.B  SRC_MODE,SrcMode
00002838  4286                    1940      CLR.L   D6
0000283A  1C39 00002F17           1941      MOVE.B  SRC_REG,D6
00002840  DD39 00002F2F           1942      ADD.B   D6,SrcMode
00002846  4E75                    1943      RTS
00002848                          1944  R_CHECK_SOURCE
00002848  13FC 000E 00002F2F      1945      MOVE.B  #$E,SrcMode
00002850  4E75                    1946      RTS
00002852                          1947  ******************** XBIT ********************
00002852                          1948  CHECK_XBIT      
00002852  0C39 0000 00002F2B      1949      CMP.B   #%0,XBit
0000285A  6700 0008               1950      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
0000285E  6600 001E               1951      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002862  4E75                    1952      RTS
00002864                          1953  TEMP_TO_DEST
00002864  13F9 00002F19 00002F14  1954      MOVE.B  TEMP_REG,DEST_REG
0000286E  13F9 00002F18 00002F15  1955      MOVE.B  TEMP_MODE,DEST_MODE
00002878  4EB8 26D2               1956      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
0000287C  4E75                    1957      RTS
0000287E                          1958  TEMP_TO_SRC
0000287E  13F9 00002F19 00002F17  1959      MOVE.B  TEMP_REG,SRC_REG
00002888  13F9 00002F18 00002F16  1960      MOVE.B  TEMP_MODE,SRC_MODE
00002892  4EB8 27D2               1961      JSR     CHECK_SOURCE                 
00002896  4E75                    1962      RTS
00002898                          1963    
00002898                          1964  ******************** OTHER COMMANDS ********************
00002898                          1965  RETURN
00002898  4E75                    1966      RTS
0000289A                          1967  
0000289A                          1968  FORMAT_DATA
0000289A  0C39 0000 00002F1A      1969      CMP.B   #0,DATA_FIELD
000028A2  66F4                    1970      BNE     RETURN
000028A4  13FC 0008 00002F1A      1971      MOVE.B  #8,DATA_FIELD
000028AC  4E75                    1972      RTS
000028AE                          1973  
000028AE                          1974  CHECK_DATA_NEG
000028AE  BC3C 0080               1975      CMP.B   #128,D6
000028B2  6700 0004               1976      BEQ     PRINT_NEG
000028B6  4E75                    1977      RTS
000028B8                          1978      
000028B8                          1979  PRINT_NEG
000028B8  43F9 00002F24           1980      LEA     NEG,A1      * print "-"
000028BE  103C 000E               1981      MOVE.B  #14,D0
000028C2  4E4F                    1982      TRAP    #15
000028C4  4E75                    1983      RTS
000028C6                          1984  
000028C6                          1985  PRINT_DATA
000028C6  43F9 00002EEE           1986      LEA     PDATA,A1
000028CC  103C 000E               1987      MOVE.B  #14,D0
000028D0  4E4F                    1988      TRAP    #15
000028D2                          1989      
000028D2  43F9 00002F22           1990      LEA     CLRSPOT,A1      * print space
000028D8  103C 000E               1991      MOVE.B  #14,D0     
000028DC  4E4F                    1992      TRAP    #15 
000028DE                          1993      
000028DE                          1994      * TODO: PRINT #$
000028DE                          1995      * TODO: PRINT COMMANDDATA 
000028DE  4E75                    1996      RTS
000028E0                          1997      
000028E0                          1998  * SET SIZE FOR SIZESPLIT    
000028E0                          1999  SETSIZE1
000028E0  0C39 0000 00002F1F      2000      CMP.B   #%0,SIZE_BITS
000028E8  6700 0040               2001      BEQ     SETSIZEW
000028EC  0C39 0001 00002F1F      2002      CMP.B   #%1,SIZE_BITS
000028F4  6700 0040               2003      BEQ     SETSIZEL
000028F8  4E75                    2004      RTS
000028FA                          2005  SETSIZE2
000028FA  0C39 0000 00002F1F      2006      CMP.B   #%00,SIZE_BITS
00002902  6700 001A               2007      BEQ     SETSIZEB
00002906  0C39 0001 00002F1F      2008      CMP.B   #%01,SIZE_BITS
0000290E  6700 001A               2009      BEQ     SETSIZEW
00002912  0C39 0002 00002F1F      2010      CMP.B   #%10,SIZE_BITS
0000291A  6700 001A               2011      BEQ     SETSIZEL
0000291E                          2012  SETSIZEB
0000291E  23FC 00000001 00002F04  2013      MOVE.L  #1,SizeValue
00002928  4E75                    2014      RTS
0000292A                          2015  SETSIZEW
0000292A  23FC 00000002 00002F04  2016      MOVE.L  #2,SizeValue 
00002934  4E75                    2017      RTS
00002936                          2018  SETSIZEL
00002936  23FC 00000003 00002F04  2019      MOVE.L  #3,SizeValue
00002940  4E75                    2020      RTS
00002942                          2021      
00002942                          2022  *SETINVEA
00002942                          2023      *MOVE.B  #1,INVALID_EA
00002942                          2024      *RTS     
00002942                          2025      
00002942                          2026  CLEARMR
00002942  13FC 0000 00002F14      2027      MOVE.B  #0,DEST_REG 
0000294A  13FC 0000 00002F15      2028      MOVE.B  #0,DEST_MODE
00002952  13FC 0000 00002F16      2029      MOVE.B  #0,SRC_MODE
0000295A  13FC 0000 00002F17      2030      MOVE.B  #0,SRC_REG
00002962  13FC 0000 00002F18      2031      MOVE.B  #0,TEMP_MODE
0000296A  13FC 0000 00002F19      2032      MOVE.B  #0,TEMP_REG 
00002972  13FC 0000 00002F1F      2033      MOVE.B  #0,SIZE_BITS
0000297A  13FC 0000 00002F04      2034      MOVE.B  #0,SizeValue
00002982  7200                    2035      MOVE.L #0,D1
00002984  7400                    2036      MOVE.L #0,D2
00002986  7600                    2037      MOVE.L #0,D3
00002988  7800                    2038      MOVE.L #0,D4
0000298A  7A00                    2039      MOVE.L #0,D5
0000298C  7C00                    2040      MOVE.L #0,D6
0000298E  7E00                    2041      MOVE.L #0,D7
00002990  4E75                    2042      RTS  
00002992                          2043  
00002992                          2044  *************    
00002992                          2045  
00002992                          2046  *******************************************************
00002992                          2047  * EA subroutine
00002992                          2048  * Purpose: Generate EA
00002992                          2049  *         Addresses used: 
00002992                          2050  *            D2 FOR MODE
00002992                          2051  *            D3 FOR REGISTER
00002992                          2052  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002992                          2053  *            D1 FOR PRINTING
00002992                          2054  *            A6 MIMICKS INSTRUCTION BUFFER
00002992                          2055  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002992                          2056  ***************************************************
00002992                          2057  
00002992  0C39 000F 00002F30      2058  EA_start        CMP.B      #$F,STATE
0000299A  6700 039A               2059                  BEQ        EA_FINISH
0000299E  4EF9 00002D38           2060                  jmp        REGISTER_NUMBER_TO_DECIMAL
000029A4                          2061  
000029A4  B47C 0000               2062  Continue_EA     CMP.W       #MODE000,D2             
000029A8  6700 0036               2063                  BEQ         DATA_REGISTER                 
000029AC  B47C 0001               2064                  CMP.W       #MODE001,D2               
000029B0  6700 004A               2065                  BEQ         ADDRESS_REGISTER                 
000029B4  B47C 0002               2066                  CMP.W       #MODE010,D2              
000029B8  6700 005E               2067                  BEQ         ADDRESS_REGISTER_DIRECT               
000029BC  B47C 0003               2068                  CMP.W       #MODE011,D2              
000029C0  6700 0086               2069                  BEQ         ADDRESS_REGISTER_INCREMENT             
000029C4  B47C 0004               2070                  CMP.W       #MODE100,D2          
000029C8  6700 00B8               2071                  BEQ         ADDRESS_REGISTER_DECREMENT              
000029CC  B47C 0007               2072                  CMP.W       #MODE111,D2          
000029D0  6700 00EA               2073                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
000029D4  13FC 0001 00002F30      2074                  MOVE.B      #BAD_FLAG,STATE               
000029DC  6000 0358               2075                  BRA         EA_FINISH              
000029E0                          2076                  
000029E0                          2077  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
000029E0  123C 0044               2078                  MOVE.B   #D,D1
000029E4  103C 0006               2079                  MOVE.B  #6,D0
000029E8  4E4F                    2080                  TRAP    #15
000029EA  0685 00000030           2081                  ADDI.L   #$30,D5
000029F0  1205                    2082                  MOVE.B   D5,D1
000029F2  103C 0006               2083                  MOVE.B  #6,D0
000029F6  4E4F                    2084                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
000029F8  6000 033C               2085                  BRA      EA_FINISH
000029FC                          2086                      
000029FC                          2087  
000029FC  123C 0041               2088  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002A00  103C 0006               2089                   MOVE.B  #6,D0
00002A04  4E4F                    2090                   TRAP    #15
00002A06  0685 00000030           2091                   ADDI.L   #$30,D5
00002A0C  1205                    2092                   MOVE.B   D5,D1
00002A0E  103C 0006               2093                   MOVE.B  #6,D0
00002A12  4E4F                    2094                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002A14  6000 0320               2095                   BRA      EA_FINISH
00002A18                          2096  
00002A18                          2097                   
00002A18                          2098  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002A18  123C 0028               2099                          MOVE.B   #OPEN_PARENTHESIS,D1
00002A1C  103C 0006               2100                          MOVE.B   #6,D0
00002A20  4E4F                    2101                          TRAP     #15
00002A22  123C 0041               2102                          MOVE.B   #A,D1
00002A26  103C 0006               2103                          MOVE.B  #6,D0
00002A2A  4E4F                    2104                          TRAP    #15
00002A2C  0685 00000030           2105                          ADDI.L   #$30,D5
00002A32  1205                    2106                          MOVE.B   D5,D1
00002A34  103C 0006               2107                          MOVE.B  #6,D0
00002A38  4E4F                    2108                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002A3A  123C 0029               2109                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002A3E  103C 0006               2110                          MOVE.B  #6,D0
00002A42  4E4F                    2111                          TRAP    #15
00002A44  6000 02F0               2112                          BRA      EA_FINISH
00002A48                          2113  
00002A48                          2114  
00002A48                          2115  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002A48  123C 0028               2116                             MOVE.B   #OPEN_PARENTHESIS,D1
00002A4C  103C 0006               2117                             MOVE.B   #6,D0
00002A50  4E4F                    2118                             TRAP     #15
00002A52  123C 0041               2119                             MOVE.B   #A,D1
00002A56  103C 0006               2120                             MOVE.B  #6,D0
00002A5A  4E4F                    2121                             TRAP    #15
00002A5C  0685 00000030           2122                             ADDI.L   #$30,D5
00002A62  1205                    2123                             MOVE.B   D5,D1
00002A64  103C 0006               2124                             MOVE.B  #6,D0
00002A68  4E4F                    2125                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002A6A  123C 0029               2126                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002A6E  103C 0006               2127                             MOVE.B  #6,D0
00002A72  4E4F                    2128                             TRAP    #15
00002A74  18FC 002B               2129                             MOVE.B   #PLUS_SIGN,(A4)+
00002A78  103C 0006               2130                             MOVE.B  #6,D0
00002A7C  4E4F                    2131                             TRAP    #15
00002A7E  6000 02B6               2132                             BRA      EA_FINISH
00002A82                          2133  
00002A82                          2134  
00002A82                          2135  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002A82  123C 002D               2136                             MOVE.B   #MINUS_SIGN,D1
00002A86  103C 0006               2137                             MOVE.B   #6,D0
00002A8A  4E4F                    2138                             TRAP        #15
00002A8C  123C 0028               2139                             MOVE.B   #OPEN_PARENTHESIS,D1
00002A90  103C 0006               2140                             MOVE.B   #6,D0
00002A94  4E4F                    2141                             TRAP     #15
00002A96  123C 0041               2142                             MOVE.B   #A,D1
00002A9A  103C 0006               2143                             MOVE.B  #6,D0
00002A9E  4E4F                    2144                             TRAP    #15
00002AA0  0685 00000030           2145                             ADDI.L   #$30,D5
00002AA6  1205                    2146                             MOVE.B   D5,D1
00002AA8  103C 0006               2147                             MOVE.B  #6,D0
00002AAC  4E4F                    2148                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002AAE  123C 0029               2149                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002AB2  103C 0006               2150                             MOVE.B  #6,D0
00002AB6  4E4F                    2151                             TRAP    #15
00002AB8  6000 027C               2152                             BRA      EA_FINISH
00002ABC                          2153  
00002ABC                          2154  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002ABC  6000 0002               2155                                BRA  CONTINUE_A_I_A
00002AC0                          2156                                
00002AC0                          2157                                
00002AC0                          2158  CONTINUE_A_I_A                
00002AC0  BA3C 0004               2159                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002AC4  6700 001E               2160                                BEQ         IMMIDIATE_REGISTER                
00002AC8  BA3C 0000               2161                                CMP.B       #0,D5                ; WORD ADDRESSING
00002ACC  6700 0048               2162                                BEQ         WORD_ADDRESSING                
00002AD0  BA3C 0001               2163                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002AD4  6700 0054               2164                                BEQ         LONG_ADDRESSING              
00002AD8  13FC 0001 00002F30      2165                                MOVE.B      #BAD_FLAG,STATE              
00002AE0  6000 0254               2166                                BRA         EA_FINISH                * jump to end   
00002AE4                          2167                                
00002AE4                          2168                                
00002AE4  123C 0023               2169  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002AE8  103C 0006               2170                                MOVE.B #6,D0
00002AEC  4E4F                    2171                                TRAP   #15
00002AEE  0C39 0001 00002F1E      2172                                CMP.B #1,SIZE   ;BYTE
00002AF6  6700 0046               2173                                BEQ   GETBYTE
00002AFA  0C39 0002 00002F1E      2174                                CMP.B #2,SIZE   ;BYTE
00002B02  6700 0044               2175                                BEQ   GETWORD
00002B06  0C39 0003 00002F1E      2176                                CMP.B #3,SIZE   ;BYTE
00002B0E  6700 0042               2177                                BEQ   GETLONG
00002B12  6000 003E               2178                                BRA   GETLONG
00002B16                          2179                                
00002B16                          2180  
00002B16  123C 0024               2181  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002B1A  103C 0006               2182                               MOVE.B #6,D0
00002B1E  4E4F                    2183                               TRAP  #15
00002B20  3E1E                    2184                               MOVE.W  (A6)+,D7
00002B22  6000 00BE               2185                               BRA   PRINT_WORD
00002B26  6000 020E               2186                               BRA   EA_FINISH
00002B2A                          2187  
00002B2A  123C 0024               2188  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002B2E  103C 0006               2189                               MOVE.B #6,D0
00002B32  4E4F                    2190                               TRAP  #15
00002B34  2E1E                    2191                               MOVE.L  (A6)+,D7
00002B36  6000 0128               2192                               BRA   PRINT_LONG
00002B3A  6000 01FA               2193                               BRA   EA_FINISH                            
00002B3E                          2194  
00002B3E                          2195  GETBYTE      
00002B3E  1E1E                    2196                  MOVE.B   (A6)+,D7    
00002B40  6B00 001A               2197                  BMI     ADD_NEGATIVE
00002B44  6000 0024               2198                  BRA     PRINT_BRANCHING
00002B48                          2199  GETWORD                
00002B48  3E1E                    2200                  MOVE.W   (A6)+,D7
00002B4A  6B00 0010               2201                  BMI     ADD_NEGATIVE
00002B4E  6000 001A               2202                  BRA     PRINT_BRANCHING
00002B52                          2203  GETLONG                
00002B52                          2204                  
00002B52  2E1E                    2205                  MOVE.L   (A6)+,D7
00002B54  6B00 0006               2206                  BMI     ADD_NEGATIVE
00002B58  6000 0010               2207                  BRA     PRINT_BRANCHING
00002B5C                          2208                  
00002B5C  123C 002D               2209  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00002B60  123C 0006               2210                  MOVE.B #6,D1
00002B64  4E4F                    2211                  TRAP   #15
00002B66  6000 0002               2212                  BRA    PRINT_BRANCHING
00002B6A                          2213  
00002B6A                          2214  
00002B6A  0C39 0001 00002F1E      2215  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002B72  6700 001C               2216                  BEQ    PRINT_BYTE    
00002B76  0C39 0002 00002F1E      2217                  CMP.B #2,SIZE   ;WORD
00002B7E  6700 0062               2218                  BEQ    PRINT_WORD
00002B82  0C39 0003 00002F1E      2219                  CMP.B  #3,SIZE  ;LONG
00002B8A  6700 00D4               2220                  BEQ    PRINT_LONG
00002B8E  60DA                    2221                  BRA    PRINT_BRANCHING
00002B90                          2222  
00002B90                          2223  
00002B90                          2224  
00002B90                          2225  
00002B90                          2226                  
00002B90                          2227  **** BYTE DATA PRINTING***********************
00002B90  4241                    2228  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002B92                          2229                 
00002B92                          2230  
00002B92  BEBC 0000000F           2231                 CMP.L   #$F,D7              
00002B98  6F00 0006               2232                 BLE     BYTE_ONE_LOOP                  
00002B9C  6000 000E               2233                 BRA     READ_BYTE
00002BA0                          2234  
00002BA0                          2235  BYTE_ONE_LOOP
00002BA0  13FC 0001 00002F4C      2236                  MOVE.B  #1,NUMBER_OF_HEX  
00002BA8  6000 0002               2237                  BRA     READ_BYTE
00002BAC                          2238      
00002BAC                          2239  READ_BYTE                           
00002BAC  0C39 0000 00002F4C      2240      CMP.B   #0,NUMBER_OF_HEX               
00002BB4  6700 0014               2241      BEQ     COPYBYTE
00002BB8                          2242      
00002BB8  123C 0030               2243      MOVE.B  #$30,D1             
00002BBC  103C 0006               2244      MOVE.B  #6,D0               
00002BC0  4E4F                    2245      TRAP    #15
00002BC2                          2246  
00002BC2  5339 00002F4C           2247      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002BC8  60E2                    2248      BRA     READ_BYTE           ; LOOP
00002BCA                          2249      
00002BCA                          2250  COPYBYTE
00002BCA  2207                    2251      MOVE.L  D7,D1               ; COPY DATA 
00002BCC  143C 0010               2252      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002BD0  103C 000F               2253      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002BD4  4E4F                    2254      TRAP    #15
00002BD6  13FC 0000 00002F4C      2255      MOVE.B  #0,NUMBER_OF_HEX
00002BDE  6000 0156               2256      BRA  EA_FINISH
00002BE2                          2257  
00002BE2                          2258  
00002BE2                          2259  
00002BE2                          2260  
00002BE2                          2261  
00002BE2                          2262  ******PRINT WORD DATA******************
00002BE2  4241                    2263  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002BE4                          2264                 
00002BE4                          2265  
00002BE4  BEBC 0000000F           2266                 CMP.L   #$F,D7              
00002BEA  6F00 001A               2267                 BLE     WORD_ONE_LOOP
00002BEE  BEBC 000000FF           2268                 CMP.L   #$FF,D7              
00002BF4  6F00 001C               2269                 BLE     WORD_TWO_LOOP
00002BF8  BEBC 00000FFF           2270                 CMP.L   #$FFF,D7              
00002BFE  6F00 001E               2271                 BLE     WORD_THREE_LOOP                  
00002C02  6000 0026               2272                 BRA     READ_WORD
00002C06                          2273  
00002C06                          2274  WORD_ONE_LOOP
00002C06  13FC 0001 00002F4C      2275                  MOVE.B  #1,NUMBER_OF_HEX  
00002C0E  6000 001A               2276                  BRA     READ_WORD
00002C12                          2277                  
00002C12                          2278  WORD_TWO_LOOP
00002C12  13FC 0002 00002F4C      2279                  MOVE.B  #2,NUMBER_OF_HEX  
00002C1A  6000 000E               2280                  BRA     READ_WORD
00002C1E                          2281                  
00002C1E                          2282  WORD_THREE_LOOP
00002C1E  13FC 0003 00002F4C      2283                  MOVE.B  #3,NUMBER_OF_HEX  
00002C26  6000 0002               2284                  BRA     READ_WORD                
00002C2A                          2285      
00002C2A                          2286  READ_WORD                           
00002C2A  0C39 0000 00002F4C      2287      CMP.B   #0,NUMBER_OF_HEX               
00002C32  6700 0014               2288      BEQ     COPYWORD
00002C36                          2289      
00002C36  123C 0030               2290      MOVE.B  #$30,D1             
00002C3A  103C 0006               2291      MOVE.B  #6,D0               
00002C3E  4E4F                    2292      TRAP    #15
00002C40                          2293  
00002C40  5339 00002F4C           2294      SUBI.B  #1,NUMBER_OF_HEX              
00002C46  60E2                    2295      BRA     READ_WORD                   ; LOOP
00002C48                          2296  
00002C48                          2297  COPYWORD
00002C48  2207                    2298      MOVE.L  D7,D1               ; COPY DATA 
00002C4A  143C 0010               2299      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002C4E  103C 000F               2300      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002C52  4E4F                    2301      TRAP    #15
00002C54  13FC 0000 00002F4C      2302      MOVE.B  #0,NUMBER_OF_HEX
00002C5C  6000 00D8               2303      BRA  EA_FINISH
00002C60                          2304  
00002C60                          2305  ****************PRINT LONG DATA*****************
00002C60  4241                    2306  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00002C62                          2307                 
00002C62                          2308  
00002C62  BEBC 0000000F           2309                 CMP.L   #$F,D7              
00002C68  6F00 0042               2310                 BLE     LONG_ONE_LOOP
00002C6C  BEBC 000000FF           2311                 CMP.L   #$FF,D7              
00002C72  6F00 0044               2312                 BLE     LONG_TWO_LOOP
00002C76  BEBC 00000FFF           2313                 CMP.L   #$FFF,D7              
00002C7C  6F00 0046               2314                 BLE     LONG_THREE_LOOP
00002C80  BEBC 0000FFFF           2315                 CMP.L   #$FFFF,D7              
00002C86  6F00 0048               2316                 BLE     LONG_FOUR_LOOP
00002C8A  BEBC 000FFFFF           2317                 CMP.L   #$FFFFF,D7              
00002C90  6F00 004A               2318                 BLE     LONG_FIVE_LOOP
00002C94  BEBC 00FFFFFF           2319                 CMP.L   #$FFFFFF,D7              
00002C9A  6F00 004C               2320                 BLE     LONG_SIX_LOOP
00002C9E  BEBC 0FFFFFFF           2321                 CMP.L   #$FFFFFFF,D7              
00002CA4  6F00 004E               2322                 BLE     LONG_SEVEN_LOOP                  
00002CA8  6000 0056               2323                 BRA     READ_LONG
00002CAC                          2324  
00002CAC                          2325  LONG_ONE_LOOP
00002CAC  13FC 0001 00002F4C      2326                  MOVE.B  #1,NUMBER_OF_HEX  
00002CB4  6000 004A               2327                  BRA     READ_LONG
00002CB8                          2328                  
00002CB8                          2329  LONG_TWO_LOOP
00002CB8  13FC 0002 00002F4C      2330                  MOVE.B  #2,NUMBER_OF_HEX  
00002CC0  6000 003E               2331                  BRA     READ_LONG
00002CC4                          2332                  
00002CC4                          2333  LONG_THREE_LOOP
00002CC4  13FC 0003 00002F4C      2334                  MOVE.B  #3,NUMBER_OF_HEX  
00002CCC  6000 0032               2335                  BRA     READ_LONG                
00002CD0                          2336  LONG_FOUR_LOOP
00002CD0  13FC 0004 00002F4C      2337                  MOVE.B  #4,NUMBER_OF_HEX  
00002CD8  6000 0026               2338                  BRA     READ_LONG
00002CDC                          2339                  
00002CDC                          2340  LONG_FIVE_LOOP
00002CDC  13FC 0005 00002F4C      2341                  MOVE.B  #5,NUMBER_OF_HEX  
00002CE4  6000 001A               2342                  BRA     READ_LONG
00002CE8                          2343                  
00002CE8                          2344  LONG_SIX_LOOP
00002CE8  13FC 0006 00002F4C      2345                  MOVE.B  #6,NUMBER_OF_HEX  
00002CF0  6000 000E               2346                  BRA     READ_LONG
00002CF4                          2347  LONG_SEVEN_LOOP
00002CF4  13FC 0007 00002F4C      2348                  MOVE.B  #7,NUMBER_OF_HEX  
00002CFC  6000 0002               2349                  BRA     READ_LONG
00002D00                          2350  
00002D00                          2351       
00002D00                          2352  READ_LONG                           
00002D00  0C39 0000 00002F4C      2353      CMP.B   #0,NUMBER_OF_HEX               
00002D08  6700 0014               2354      BEQ     COPYLONG
00002D0C  123C 0030               2355      MOVE.B  #$30,D1             
00002D10  103C 0006               2356      MOVE.B  #6,D0               
00002D14  4E4F                    2357      TRAP    #15
00002D16                          2358  
00002D16  5339 00002F4C           2359      SUBI.B  #1,NUMBER_OF_HEX               
00002D1C  60E2                    2360      BRA     READ_LONG                   ; LOOP
00002D1E                          2361  
00002D1E                          2362  COPYLONG
00002D1E  2207                    2363      MOVE.L  D7,D1               ; COPY DATA 
00002D20  143C 0010               2364      MOVE.B  #16,D2              ; USIGN BASE TO 16
00002D24  103C 000F               2365      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002D28  4E4F                    2366      TRAP    #15
00002D2A  13FC 0000 00002F4C      2367      MOVE.B  #0,NUMBER_OF_HEX
00002D32  6000 0002               2368      BRA  EA_FINISH
00002D36                          2369  
00002D36                          2370    
00002D36                          2371  
00002D36                          2372  
00002D36                          2373  
00002D36                          2374  
00002D36                          2375  
00002D36                          2376  
00002D36                          2377  
00002D36  4E75                    2378  EA_FINISH      RTS
00002D38                          2379  
00002D38                          2380  
00002D38                          2381  
00002D38                          2382  
00002D38                          2383  ************************************************
00002D38                          2384  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
00002D38                          2385  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
00002D38                          2386  ************************************************
00002D38                          2387  REGISTER_NUMBER_TO_DECIMAL 
00002D38  B67C 0000               2388                             CMP.W       #REG_0,D3
00002D3C  6700 0046               2389                             BEQ         RG0
00002D40  B67C 0001               2390                             CMP.W       #REG_1,D3
00002D44  6700 0046               2391                             BEQ         RG1
00002D48  B67C 0002               2392                             CMP.W       #REG_2,D3
00002D4C  6700 0046               2393                             BEQ         RG2
00002D50  B67C 0003               2394                             CMP.W       #REG_3,D3
00002D54  6700 0046               2395                             BEQ         RG3
00002D58  B67C 0004               2396                             CMP.W       #REG_4,D3
00002D5C  6700 0046               2397                             BEQ         RG4
00002D60  B67C 0005               2398                             CMP.W       #REG_5,D3
00002D64  6700 0046               2399                             BEQ         RG5
00002D68  B67C 0006               2400                             CMP.W       #REG_6,D3
00002D6C  6700 0046               2401                             BEQ         RG6
00002D70  B67C 0007               2402                             CMP.W       #REG_7,D3
00002D74  6700 0046               2403                             BEQ         RG7
00002D78  13FC 0001 00002F30      2404                             MOVE.B      #BAD_FLAG,STATE
00002D80  4EF8 29A4               2405                             JMP         CONTINUE_EA
00002D84                          2406   
00002D84  1A3C 0000               2407  RG0    MOVE.B   #0,D5
00002D88  4EF8 29A4               2408         JMP      Continue_EA
00002D8C  1A3C 0001               2409  RG1    MOVE.B   #1,D5
00002D90  4EF8 29A4               2410         JMP      Continue_EA
00002D94  1A3C 0002               2411  RG2    MOVE.B   #2,D5
00002D98  4EF8 29A4               2412         JMP      Continue_EA
00002D9C  1A3C 0003               2413  RG3    MOVE.B   #3,D5
00002DA0  4EF8 29A4               2414         JMP      Continue_EA
00002DA4  1A3C 0004               2415  RG4    MOVE.B   #4,D5
00002DA8  4EF8 29A4               2416         JMP      Continue_EA
00002DAC  1A3C 0005               2417  RG5    MOVE.B   #5,D5
00002DB0  4EF8 29A4               2418         JMP      Continue_EA
00002DB4  1A3C 0006               2419  RG6    MOVE.B   #6,D5
00002DB8  4EF8 29A4               2420         JMP      Continue_EA
00002DBC  1A3C 0007               2421  RG7    MOVE.B   #7,D5
00002DC0  4EF8 29A4               2422         JMP      Continue_EA 
00002DC4                          2423      
00002DC4                          2424  ;------------------------------------------------
00002DC4                          2425      
00002DC4                          2426  Float   DS.L 1 #0
00002DC8                          2427  
00002DC8                          2428  ValOne    DS.B 1 #0
00002DC9                          2429  ValTwo    DS.B 1 #0
00002DCA                          2430  ValThree    DS.B 1 #0
00002DCB                          2431  ValFour    DS.B 1 #0
00002DCC                          2432  ValFive    DS.B 1 #0
00002DCD                          2433  ValSix    DS.B 1 #0
00002DCE                          2434  ValSeven    DS.B 1 #0
00002DCF                          2435  ValEight    DS.B 1 #0
00002DD0                          2436  
00002DD0                          2437  Addsum DS.W 1 #0
00002DD2                          2438  CarryBit DS.B 1 #0   
00002DD3                          2439  
00002DD3                          2440  Trailers DS.B 1 #0
00002DD4                          2441  Source DS.L 1 #0
00002DD8                          2442  Destination DS.L 1 #0
00002DDC                          2443  
00002DDC                          2444          ;generic command lines
00002DDC= 50 6C 65 61 73 65 ...   2445  USERPAGEBREAK DC.B 'Please Press enter',CR,LF,0
00002DF1= 4E 75 6D 62 65 72 ...   2446  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
00002E1D= 50 6C 65 61 73 65 ...   2447  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory adress: ',0 
00002E43= 50 6C 65 61 73 65 ...   2448  MESSAGESECONDADRESS DC.B    'Please enter ending memory adress: ',0 
00002E67= 45 4E 44 20 4F 46 ...   2449  FINALMESSAGE    DC.B    'END OF THE PROGRAM',0
00002E7A= 20 0D 0A 00             2450  CLEAR DC.B      ' ',CR,LF,0
00002E7E                          2451  
00002E7E                          2452          ;the collection of actual command lines to print
00002E7E                          2453  CommandPrinter    DS.B 1 #0
00002E7F                          2454  CommandDetail    DS.B 1 #0
00002E80= 4D 4F 56 45 00          2455  PMOVE DC.B      'MOVE',0
00002E85= 4D 4F 56 45 4D 20 00    2456  PMOVEM DC.B      'MOVEM ',0
00002E8C= 4D 4F 56 45 41 00       2457  PMOVEA DC.B      'MOVEA',0
00002E92= 4D 4F 56 45 51 20 00    2458  PMOVEQ DC.B      'MOVEQ ',0
00002E99= 4E 4F 50 00             2459  PNOP DC.B      'NOP',0
00002E9D= 4C 45 41 00             2460  PLEA DC.B      'LEA',0
00002EA1= 4E 4F 54 00             2461  PNOT DC.B      'NOT',0
00002EA5= 4A 53 52 00             2462  PJSR DC.B      'JSR',0
00002EA9= 52 54 53 00             2463  PRTS DC.B      'RTS',0
00002EAD= 42 47 54 00             2464  PBGT DC.B      'BGT',0
00002EB1= 42 45 51 00             2465  PBEQ DC.B      'BEQ',0
00002EB5= 42 4C 45 00             2466  PBLE DC.B      'BLE',0
00002EB9= 42 52 41 00             2467  PBRA DC.B      'BRA',0
00002EBD= 4F 52 00                2468  POR DC.B      'OR',0
00002EC0= 53 55 42 00             2469  PSUB DC.B      'SUB',0
00002EC4= 41 4E 44 00             2470  PAND DC.B      'AND',0
00002EC8= 41 44 44 00             2471  PADD DC.B      'ADD',0
00002ECC= 41 44 44 41 00          2472  PADDA DC.B      'ADDA',0
00002ED1= 41 44 44 51 00          2473  PADDQ DC.B      'ADDQ',0
00002ED6= 4C 53 4C 00             2474  PLSL DC.B      'LSL',0
00002EDA= 4C 53 52 00             2475  PLSR DC.B      'LSR',0
00002EDE= 41 53 52 00             2476  PASR DC.B      'ASR',0
00002EE2= 41 53 4C 00             2477  PASL DC.B      'ASL',0
00002EE6= 52 4F 4C 00             2478  PROL DC.B      'ROL',0
00002EEA= 52 4F 52 00             2479  PROR DC.B      'ROR',0
00002EEE                          2480  
00002EEE= 44 41 54 41 00          2481  PDATA   DC.B    'DATA',0
00002EF3                          2482  
00002EF3= 00                      2483  INPUT   DC.B    0
00002EF4                          2484  
00002EF4= 00000000                2485  STARTINGADDRESS     DC.L 0
00002EF8= 00000000                2486  CURRENTADDRESS      DC.L 0
00002EFC= 00000000                2487  ENDINGADDRESS       DC.L 0
00002F00                          2488  CYCLECOUNTER
00002F00= 0000                    2489  COMMANDDATA         DC.W 0
00002F02= 00                      2490  Bits                DC.B 0
00002F03                          2491  
00002F03                          2492          ;the sizes to print
00002F04                          2493  SizeValue           DS.L 1 #0
00002F08= 2E 42 20 00             2494  PB DC.B      '.B ',0
00002F0C= 2E 57 20 00             2495  PW DC.B      '.W ',0
00002F10= 2E 4C 20 00             2496  PL DC.B      '.L ',0
00002F14                          2497  
00002F14                          2498  ;----- ADDED FOR THE OP CODE PART
00002F14                          2499  
00002F14= 00                      2500  DEST_REG        DC.B    0
00002F15= 00                      2501  DEST_MODE       DC.B    0
00002F16                          2502  
00002F16= 00                      2503  SRC_MODE        DC.B    0
00002F17= 00                      2504  SRC_REG         DC.B    0
00002F18                          2505  
00002F18= 00                      2506  TEMP_MODE       DC.B    0
00002F19= 00                      2507  TEMP_REG        DC.B    0
00002F1A                          2508  
00002F1A= 00000000                2509  DATA_FIELD      DC.L    0
00002F1E= 00                      2510  SIZE            DC.B    0
00002F1F= 00                      2511  SIZE_BITS        DC.B    0
00002F20                          2512  
00002F20= 23 00                   2513  HASH            DC.B    '#',0
00002F22= 20 00                   2514  CLRSPOT         DC.B    ' ',0
00002F24= 2D 00                   2515  NEG             DC.B    '-',0
00002F26= 24 00                   2516  DOLLARSIGN      DC.B    '$',0
00002F28= 2C 00                   2517  COMA            DC.B    ',',0
00002F2A                          2518  
00002F2A= 00                      2519  INDEX           DC.B    0
00002F2B                          2520  
00002F2B= 00                      2521  XBIT            DC.B    0
00002F2C= 00                      2522  INVALID_EA      DC.B    0
00002F2D                          2523  
00002F2D= 00                      2524  DstMode         DC.B    0
00002F2E= 00                      2525  TempMode        DC.B    0
00002F2F= 00                      2526  SrcMode         DC.B    0
00002F30                          2527  
00002F30                          2528  ;------ ADDED FOR EA CODE PART
00002F30                          2529  
00002F30  =00000000               2530  REG_0  EQU         %000
00002F30  =00000001               2531  REG_1  EQU         %001
00002F30  =00000002               2532  REG_2  EQU         %010
00002F30  =00000003               2533  REG_3  EQU         %011
00002F30  =00000004               2534  REG_4  EQU         %100
00002F30  =00000005               2535  REG_5  EQU         %101
00002F30  =00000006               2536  REG_6  EQU         %110
00002F30  =00000007               2537  REG_7  EQU         %111
00002F30                          2538  
00002F30  =00000000               2539  MODE000       EQU         %000                   * MODE Dn
00002F30  =00000001               2540  MODE001       EQU         %001                   * MODE An
00002F30  =00000002               2541  MODE010       EQU         %010                   * MODE (An)
00002F30  =00000003               2542  MODE011       EQU         %011                   * MODE (An)+
00002F30  =00000004               2543  MODE100       EQU         %100                   * MODE -(An)
00002F30  =00000007               2544  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
00002F30                          2545  
00002F30= 00                      2546  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
00002F31  =00000001               2547  BAD_FLAG      EQU         1
00002F32= 00008000                2548  word          DC.L        $8000
00002F36                          2549  SIZE_IL       DS.L        1             ;SIZE ISOLATION
00002F3A                          2550  DR            DS.L        1             ;DIRECTION ISOLATION
00002F3E                          2551  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
00002F42                          2552  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
00002F46                          2553  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
00002F4A                          2554  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
00002F4B                          2555  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
00002F4C= 00                      2556  NUMBER_OF_HEX DC.B        0
00002F4D                          2557  dRG           DS.B        1
00002F4E                          2558  dMODE         DS.B        1
00002F4F                          2559  sRG           DS.B        1
00002F50                          2560  
00002F50= 00000100                2561  print_buffer  DC.l       $100
00002F54                          2562  
00002F54                          2563  ***** ASCII VALUES FOR EA CHARACTERS**************
00002F54  =00000044               2564  D                       EQU      $44
00002F54  =00000041               2565  A                       EQU      $41
00002F54  =00000028               2566  OPEN_PARENTHESIS        EQU      $28
00002F54  =00000024               2567  DOLLAR_SIGN             EQU      $24
00002F54  =00000029               2568  CLOSED_PARENTHESIS      EQU      $29
00002F54  =0000002B               2569  PLUS_SIGN               EQU      $2B
00002F54  =0000002D               2570  MINUS_SIGN              EQU      $2D
00002F54  =00000023               2571  HASH_TAG                EQU      $23
00002F54  =00000025               2572  PERCENT_SIGN            EQU      $25
00002F54                          2573  
00002F54                          2574  
00002F54                          2575      
00002F54                          2576      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2ABC
ADDRESS_REGISTER    29FC
ADDRESS_REGISTER_DECREMENT  2A82
ADDRESS_REGISTER_DIRECT  2A18
ADDRESS_REGISTER_INCREMENT  2A48
ADDSUM              2DD0
ADD_NEGATIVE        2B5C
BADVAL              2DF1
BAD_FLAG            1
BITS                2F02
BYTE_ONE_LOOP       2BA0
CARRYBIT            2DD2
CCHECK_ADD          1762
CCHECK_ADDA         1788
CHAR1               1154
CHAR2               116C
CHARSUB             1184
CHECK_ADD           1748
CHECK_ADDA          1766
CHECK_ADDQ          1622
CHECK_DATA_NEG      28AE
CHECK_DESTINATION   26D2
CHECK_DEST_REG      270A
CHECK_ID_AS         1C62
CHECK_ID_LS         1C82
CHECK_ID_RO         1C72
CHECK_JSR           159C
CHECK_LEA           13AA
CHECK_MOVEM_1000    14C0
CHECK_MOVEM_1100    1574
CHECK_MOVEQ         17E4
CHECK_NOP_JSR_RTS   157C
CHECK_NOP_RTS       1602
CHECK_NOT           1436
CHECK_SOURCE        27D2
CHECK_SOURCE_REG    280A
CHECK_TEMP          2752
CHECK_TEMP_REG      278A
CHECK_XBIT          2852
CLEAR               2E7A
CLEARMR             2942
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   26B0
CLRSPOT             2F22
COMA                2F28
COMMANDDATA         2F00
COMMANDDETAIL       2E7F
COMMANDPRINTER      2E7E
COMPARE_0100        1372
COMPARE_1101        16AC
COMPARE_1110        1842
COMPARE_GROUPS      131E
CONTINUE_A_I_A      2AC0
CONTINUE_EA         29A4
COPYBYTE            2BCA
COPYLONG            2D1E
COPYWORD            2C48
CR                  D
CURRENTADDRESS      2EF8
CYCLECOUNTER        2F00
D                   44
DATA_FIELD          2F1A
DATA_REGISTER       29E0
DESTINATION         2DD8
DEST_MODE           2F15
DEST_REG            2F14
DMODE               2F4E
DOLLARSIGN          2F26
DOLLAR_SIGN         24
DONE                11AE
DR                  2F3A
DRG                 2F4D
DRN                 2F4B
DSTMODE             2F2D
EADN                264C
EA_FINISH           2D36
EA_START            2992
EIGHT_SHIFT         239A
ENDING              26C2
ENDINGADDRESS       2EFC
ENTRYLOOP           119C
EXIT                11FC
FINALMESSAGE        2E67
FLOAT               2DC4
FORMAT_DATA         289A
G14_MEMS            1B0A
G14_MEMS_AS         1BFC
G14_MEMS_LS         1B30
G14_MEMS_RO         1B96
G14_TYPE            2F3E
GAS_EA              1AB4
GETBYTE             2B3E
GETLONG             2B52
GETWORD             2B48
GLS_EA              191C
GRO_EA              19E8
G_AS                1A3E
G_LS                18A6
G_RO                1972
HASH                2F20
HASH_TAG            23
IMMIDIATE_REGISTER  2AE4
INDEX               2F2A
INPUT               2EF3
INT2                1134
INTSUB              114C
INVALID             118C
INVALID_EA          2F2C
IR_IL               2F42
IS_EIGHT            23A8
LF                  A
LOADDATAONE         1006
LOADDATATWO         1058
LONG_ADDRESSING     2B2A
LONG_FIVE_LOOP      2CDC
LONG_FOUR_LOOP      2CD0
LONG_ONE_LOOP       2CAC
LONG_SEVEN_LOOP     2CF4
LONG_SIX_LOOP       2CE8
LONG_THREE_LOOP     2CC4
LONG_TWO_LOOP       2CB8
LOOP_READ_BITS      1300
MEMORYGRABBER       1282
MESSAGEFIRSTADRESS  2E1D
MESSAGESECONDADRESS  2E43
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
NEG                 2F24
NUMBER_OF_HEX       2F4C
OPEN_PARENTHESIS    28
PADD                2EC8
PADDA               2ECC
PADDQ               2ED1
PAGEBREAK           12D4
PAND                2EC4
PASL                2EE2
PASR                2EDE
PB                  2F08
PBEQ                2EB1
PBGT                2EAD
PBLE                2EB5
PBRA                2EB9
PDATA               2EEE
PERCENT_SIGN        25
PJSR                2EA5
PL                  2F10
PLEA                2E9D
PLSL                2ED6
PLSR                2EDA
PLUS_SIGN           2B
PMOVE               2E80
PMOVEA              2E8C
PMOVEM              2E85
PMOVEQ              2E92
PNOP                2E99
PNOT                2EA1
POR                 2EBD
PRINTADD            2556
PRINTADDA           256C
PRINTADDQ           2456
PRINTAND            2540
PRINTB              2630
PRINTBEQ            2482
PRINTBGT            246C
PRINTBLE            2498
PRINTBRA            24AE
PRINTJSR            2430
PRINTL              2614
PRINTLEA            2404
PRINTMOVE           23B2
PRINTMOVEA          23C8
PRINTMOVEM          23EE
PRINTMOVEQ          24C4
PRINTNONE           263E
PRINTNOP            23DE
PRINTNOT            241A
PRINTNOTRAIL        269A
PRINTONETRAIL       2668
PRINTOR             2514
PRINTROTATESPLIT    2582
PRINTRTS            2446
PRINTSUB            252A
PRINTTWOTRAIL       267E
PRINTW              2622
PRINT_BRANCHING     2B6A
PRINT_BUFFER        2F50
PRINT_BYTE          2B90
PRINT_DATA          28C6
PRINT_LONG          2C60
PRINT_NEG           28B8
PRINT_WORD          2BE2
PROL                2EE6
PROR                2EEA
PRTS                2EA9
PR_AS               2168
PR_ASR              22CE
PR_ASR_EA           1ECA
PR_ASR_MEM          1CE8
PR_G14_MEMS_AS      1C92
PR_G14_MEMS_LS      1D26
PR_G14_MEMS_RO      1DBA
PR_G_AS_EA          1E4E
PR_G_LS_EA          1F2C
PR_G_RO_EA          200A
PR_LS               21E8
PR_LSR              2268
PR_LSR_EA           1FA8
PR_LSR_MEM          1D7C
PR_RO               20E8
PR_ROR              2334
PR_ROR_EA           2086
PR_ROR_MEM          1E10
PSUB                2EC0
PW                  2F0C
READ_BITS           12F6
READ_BYTE           2BAC
READ_LONG           2D00
READ_WORD           2C2A
REGISTER_NUMBER_TO_DECIMAL  2D38
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2898
RG0                 2D84
RG1                 2D8C
RG2                 2D94
RG3                 2D9C
RG4                 2DA4
RG5                 2DAC
RG6                 2DB4
RG7                 2DBC
R_CHECK_DEST        2748
R_CHECK_SOURCE      2848
R_CHECK_TEMP        27C8
SET                 1316
SETSIZE1            28E0
SETSIZE2            28FA
SETSIZEB            291E
SETSIZEL            2936
SETSIZEW            292A
SIZE                2F1E
SIZESPLIT           25E6
SIZEVALUE           2F04
SIZE_BITS           2F1F
SIZE_IL             2F36
SOURCE              2DD4
SRCMODE             2F2F
SRC_MODE            2F16
SRC_REG             2F17
SRG                 2F4F
SRN                 2F4A
START               1000
STARTCHECK          111C
STARTINGADDRESS     2EF4
STATE               2F30
STOP                26BC
STOREADRESSES       125A
S_COUNT             2F46
TEMPMODE            2F2E
TEMP_MODE           2F18
TEMP_REG            2F19
TEMP_TO_DEST        2864
TEMP_TO_SRC         287E
TRAILERS            2DD3
USERPAGEBREAK       2DDC
VAL1                10A2
VAL2                10AC
VAL3                10BC
VAL4                10CC
VAL5                10DC
VAL6                10EC
VAL7                10FC
VAL8                110C
VALEIGHT            2DCF
VALFIVE             2DCC
VALFOUR             2DCB
VALONE              2DC8
VALSEVEN            2DCE
VALSIX              2DCD
VALTHREE            2DCA
VALTWO              2DC9
WORD                2F32
WORD_ADDRESSING     2B16
WORD_ONE_LOOP       2C06
WORD_THREE_LOOP     2C1E
WORD_TWO_LOOP       2C12
XBIT                2F2B
