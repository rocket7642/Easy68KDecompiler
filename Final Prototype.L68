00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/9/2021 10:24:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 000031E5             13      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001006  103C 000E                 14      MOVE.B   #14,D0     ; moves #14 into data register D0
0000100A  4E4F                      15      TRAP     #15
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 00002F86             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22  * TODO: a welcome message with format message 
0000101E                            23      
0000101E                            24  LOADDATAONE
0000101E  43F9 00003034             25      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001024  103C 000E                 26      MOVE.B   #14,D0     ; moves #14 into data register D0
00001028  4E4F                      27      TRAP     #15       ; Displays message via trap 14    
0000102A                            28      
0000102A  43F9 000031B6             29      LEA     INPUT,A1
00001030  103C 0002                 30      MOVE.B  #2,D0 *takes the string of what the user enters
00001034  4E4F                      31      TRAP    #15
00001036                            32      
00001036  4280                      33      CLR.L   D0
00001038                            34      
00001038                            35      * TODO: check if the input if odd - invalid imput
00001038                            36      
00001038                            37  
00001038                            38      
00001038  1A3C 0000                 39      MOVE.B  #0,D5
0000103C                            40      
0000103C  13D9 0000A000             41      MOVE.B (A1)+,$A000
00001042  13D9 0000A010             42      MOVE.B (A1)+,$A010
00001048  13D9 0000A020             43      MOVE.B (A1)+,$A020
0000104E  13D9 0000A030             44      MOVE.B (A1)+,$A030
00001054  13D9 0000A040             45      MOVE.B (A1)+,$A040
0000105A  13D9 0000A050             46      MOVE.B (A1)+,$A050
00001060  13D9 0000A060             47      MOVE.B (A1)+,$A060
00001066  13D9 0000A070             48      MOVE.B (A1)+,$A070
0000106C                            49      
0000106C  6000 0058                 50      BRA VAL1
00001070                            51  
00001070                            52  LOADDATATWO    
00001070  43F9 00003077             53      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001076  103C 000E                 54      MOVE.B   #14,D0     ; moves #14 into data register D0
0000107A  4E4F                      55      TRAP     #15       ; Displays message via trap 14    
0000107C                            56      
0000107C  43F9 000031B6             57      LEA     INPUT,A1
00001082  103C 0002                 58      MOVE.B  #2,D0 *takes the string of what the user enters
00001086  4E4F                      59      TRAP    #15
00001088                            60      
00001088  1A3C 0000                 61      MOVE.B  #0,D5
0000108C                            62      
0000108C  13D9 0000A000             63      MOVE.B (A1)+,$A000
00001092  13D9 0000A010             64      MOVE.B (A1)+,$A010
00001098  13D9 0000A020             65      MOVE.B (A1)+,$A020
0000109E  13D9 0000A030             66      MOVE.B (A1)+,$A030
000010A4  13D9 0000A040             67      MOVE.B (A1)+,$A040
000010AA  13D9 0000A050             68      MOVE.B (A1)+,$A050
000010B0  13D9 0000A060             69      MOVE.B (A1)+,$A060
000010B6  13D9 0000A070             70      MOVE.B (A1)+,$A070
000010BC                            71      
000010BC  43F9 00003077             72      LEA MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010C2                            73      
000010C2  6000 0002                 74      BRA VAL1
000010C6                            75  
000010C6                            76      
000010C6                            77  VAL1    
000010C6  1839 0000A000             78      MOVE.B $A000,D4
000010CC  6000 0072                 79      BRA STARTCHECK
000010D0  13C4 0000A000             80  VAL2    MOVE.B D4,$A000
000010D6  1839 0000A010             81      MOVE.B $A010,D4
000010DC  6000 0062                 82      BRA STARTCHECK
000010E0  13C4 0000A010             83  VAL3    MOVE.B D4,$A010
000010E6  1839 0000A020             84      MOVE.B $A020,D4
000010EC  6000 0052                 85      BRA STARTCHECK
000010F0  13C4 0000A020             86  VAL4    MOVE.B D4,$A020
000010F6  1839 0000A030             87      MOVE.B $A030,D4
000010FC  6000 0042                 88      BRA STARTCHECK
00001100  13C4 0000A030             89  VAL5    MOVE.B D4,$A030
00001106  1839 0000A040             90      MOVE.B $A040,D4
0000110C  6000 0032                 91      BRA STARTCHECK
00001110  13C4 0000A040             92  VAL6    MOVE.B D4,$A040
00001116  1839 0000A050             93      MOVE.B $A050,D4
0000111C  6000 0022                 94      BRA STARTCHECK
00001120  13C4 0000A050             95  VAL7    MOVE.B D4,$A050
00001126  1839 0000A060             96      MOVE.B $A060,D4
0000112C  6000 0012                 97      BRA STARTCHECK
00001130  13C4 0000A060             98  VAL8    MOVE.B D4,$A060
00001136  1839 0000A070             99      MOVE.B $A070,D4
0000113C  6000 0002                100      BRA STARTCHECK
00001140                           101    
00001140                           102  STARTCHECK  
00001140  B83C 0030                103      CMP.B   #48,D4
00001144  6D00 006A                104      BLT INVALID
00001148  B83C 0030                105      CMP.B   #48,D4
0000114C  6700 0022                106      BEQ INTSUB
00001150  B83C 0030                107      CMP.B   #48,D4
00001154  6E00 0002                108      BGT INT2
00001158                           109      
00001158                           110  
00001158                           111  INT2 
00001158                           112      
00001158  B83C 0039                113      CMP.B   #57,D4
0000115C  6D00 0012                114      BLT INTSUB
00001160  B83C 0039                115      CMP.B   #57,D4
00001164  6700 000A                116      BEQ INTSUB
00001168  B83C 0039                117      CMP.B   #57,D4
0000116C  6E00 000A                118      BGT CHAR1
00001170                           119      
00001170                           120  INTSUB 
00001170  0404 0030                121      SUB.B #$30,D4
00001174  6000 005C                122      BRA     DONE
00001178                           123  
00001178                           124  CHAR1 
00001178                           125      
00001178  B83C 0041                126      CMP.B   #65,D4
0000117C  6D00 0032                127      BLT INVALID
00001180  B83C 0041                128      CMP.B   #65,D4
00001184  6700 0022                129      BEQ CHARSUB
00001188  B83C 0041                130      CMP.B   #65,D4
0000118C  6E00 0002                131      BGT CHAR2
00001190                           132      
00001190                           133  CHAR2 
00001190                           134      
00001190  B83C 0046                135      CMP.B   #70,D4
00001194  6D00 0012                136      BLT CHARSUB
00001198  B83C 0046                137      CMP.B   #70,D4
0000119C  6700 000A                138      BEQ CHARSUB
000011A0  B83C 0046                139      CMP.B   #70,D4
000011A4  6E00 000A                140      BGT INVALID
000011A8                           141      
000011A8                           142  CHARSUB 
000011A8  0404 0037                143      SUB.B #$37,D4
000011AC  6000 0024                144      BRA DONE
000011B0                           145      
000011B0                           146  INVALID 
000011B0  43F9 00002FC7            147      LEA BADVAL,A1
000011B6  103C 000E                148      MOVE.B   #14,D0     ; moves #14 into data register D0
000011BA  4E4F                     149      TRAP     #15       ; Displays message via trap 14
000011BC  6000 0002                150      BRA     ENTRYLOOP
000011C0                           151      
000011C0                           152  ENTRYLOOP
000011C0  B43C 0000                153      CMP.B #0,D2
000011C4  6700 FE58                154      BEQ LOADDATAONE
000011C8  B43C 0001                155      CMP.B #1,D2
000011CC  6700 FEA2                156      BEQ LOADDATATWO
000011D0  4E75                     157      RTS
000011D2                           158      
000011D2                           159  DONE    
000011D2  5205                     160          ADD.B #1,D5
000011D4  BA3C 0000                161          CMP.B #0,D5
000011D8  6700 FEEC                162          BEQ VAL1
000011DC  BA3C 0001                163          CMP.B #1,D5
000011E0  6700 FEEE                164          BEQ VAL2
000011E4  BA3C 0002                165          CMP.B #2,D5
000011E8  6700 FEF6                166          BEQ VAL3
000011EC  BA3C 0003                167          CMP.B #3,D5
000011F0  6700 FEFE                168          BEQ VAL4
000011F4  BA3C 0004                169          CMP.B #4,D5
000011F8  6700 FF06                170          BEQ VAL5
000011FC  BA3C 0005                171          CMP.B #5,D5
00001200  6700 FF0E                172          BEQ VAL6
00001204  BA3C 0006                173          CMP.B #6,D5
00001208  6700 FF16                174          BEQ VAL7
0000120C  BA3C 0007                175          CMP.B #7,D5
00001210  6700 FF1E                176          BEQ VAL8
00001214  BA3C 0008                177          CMP.B #8,D5
00001218  6700 0006                178          BEQ EXIT
0000121C                           179          
0000121C  6000 FF22                180          BRA     STARTCHECK
00001220                           181  
00001220                           182  
00001220                           183  
00001220  13C4 0000A070            184  EXIT    MOVE.B D4,$A070
00001226                           185      
00001226  4284                     186      CLR.L D4
00001228  D839 0000A000            187      ADD.B $A000,D4
0000122E  E98C                     188      LSL.L #4,D4
00001230  D839 0000A010            189      ADD.B $A010,D4
00001236  E98C                     190      LSL.L #4,D4
00001238  D839 0000A020            191      ADD.B $A020,D4
0000123E  E98C                     192      LSL.L #4,D4
00001240  D839 0000A030            193      ADD.B $A030,D4
00001246  E98C                     194      LSL.L #4,D4
00001248  D839 0000A040            195      ADD.B $A040,D4
0000124E  E98C                     196      LSL.L #4,D4
00001250  D839 0000A050            197      ADD.B $A050,D4
00001256  E98C                     198      LSL.L #4,D4
00001258  D839 0000A060            199      ADD.B $A060,D4
0000125E  E98C                     200      LSL.L #4,D4
00001260  D839 0000A070            201      ADD.B $A070,D4
00001266                           202      
00001266  2E04                     203      MOVE.L D4,D7
00001268  4244                     204      CLR D4
0000126A  B43C 0001                205      CMP.B #1,D2
0000126E  6700 0020                206      BEQ STOREADRESSES
00001272  2C07                     207      MOVE.L D7,D6
00001274  143C 0001                208      MOVE.B #1,D2
00001278  7A00                     209      MOVE.L #0,D5
0000127A  6000 FDF4                210      BRA LOADDATATWO
0000127E                           211      
0000127E                           212  ;---------------------------------------------------------
0000127E                           213  
0000127E                           214  LARGERISSUE
0000127E  43F9 00002FF3            215      LEA     OUTOFORDER,A1
00001284  103C 000E                216      MOVE.B  #14,D0     ; moves #14 into data register D0
00001288  4E4F                     217      TRAP    #15       ; Displays message via trap 14
0000128A  7400                     218      MOVE.L  #0,D2
0000128C  6000 FD90                219      BRA     LOADDATAONE
00001290                           220  
00001290                           221  STOREADRESSES
00001290  23C7 000031C0            222      MOVE.L  D7,ENDINGADDRESS
00001296  23C6 000031B8            223      MOVE.L  D6,STARTINGADDRESS
0000129C                           224  LARGERTHAN    
0000129C  BE86                     225      CMP.L D6,D7
0000129E  6DDE                     226      BLT LARGERISSUE
000012A0  4247                     227      CLR     D7
000012A2  2C79 000031B8            228      MOVE.L   STARTINGADDRESS,A6
000012A8                           229      
000012A8                           230  MEMORYGRABBER
000012A8  43F9 00003134            231      LEA     CLEAR,A1 
000012AE  103C 000E                232      MOVE.B  #14,D0  
000012B2  4E4F                     233      TRAP    #15 
000012B4                           234  
000012B4  2879 000031C0            235      MOVE.L  ENDINGADDRESS,A4
000012BA  BDCC                     236      CMPA.L  A4,A6
000012BC  6C00 0066                237      BGE     ENDING 
000012C0                           238      
000012C0  0C79 0019 000031C4       239      CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
000012C8  6C00 0038                240      BGE     PAGEBREAK
000012CC  5279 000031C4            241      ADD.W   #1,CYCLECOUNTER
000012D2                           242  
000012D2  4EB9 00002B18            243      JSR CLEARMR     * CLEAR MODES AND REGISTERS
000012D8                           244      
000012D8  23CE 000031BC            245      MOVE.L      A6,CURRENTADDRESS   
000012DE  2239 000031BC            246      MOVE.L      CURRENTADDRESS,D1
000012E4  143C 0010                247      MOVE.B      #16,D2
000012E8  103C 000F                248      MOVE.B      #15,D0     ; moves #14 into data register D0
000012EC  4E4F                     249      TRAP        #15  
000012EE                           250      
000012EE  4EB9 000027B8            251      JSR     PRINTCLRSPOT      * print space
000012F4                           252      
000012F4  361E                     253      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012F6  33C3 000031C6            254      MOVE.W      D3, COMMANDDATA
000012FC                           255   
000012FC  6000 00B4                256      BRA         COMPARE_GROUPS
00001300                           257      
00001300  60A6                     258      BRA MEMORYGRABBER
00001302                           259      
00001302                           260  PAGEBREAK
00001302  43F9 00002F9F            261      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
00001308  103C 000E                262      MOVE.B   #14,D0     ; moves #14 into data register D0
0000130C  4E4F                     263      TRAP     #15       ; Displays message via trap 14
0000130E  43F9 000031B6            264      LEA     INPUT,A1
00001314  103C 0002                265      MOVE.B  #2,D0 *takes the string of what the user enters
00001318  4E4F                     266      TRAP    #15
0000131A  33FC 0000 000031C4       267      MOVE.W #0,CYCLECOUNTER
00001322  6084                     268      BRA MEMORYGRABBER
00001324                           269   
00001324                           270  ENDING 
00001324  33FC 0000 000031C4       271      MOVE.W #0,CYCLECOUNTER
0000132C  43F9 000030B8            272      LEA     FINALMESSAGE1,A1     * Prints End of Program message
00001332  103C 000E                273      MOVE.B  #14,D0
00001336  4E4F                     274      TRAP    #15
00001338  43F9 000030E2            275      LEA     FINALMESSAGE2,A1     * Prints End of Program message
0000133E  103C 000E                276      MOVE.B  #14,D0
00001342  4E4F                     277      TRAP    #15
00001344  43F9 000031B6            278      LEA     INPUT,A1
0000134A  103C 0005                279      MOVE.B  #5,D0 *takes the single charater the user enters
0000134E  4E4F                     280      TRAP    #15
00001350  B23C 0031                281      CMP.B #49,D1
00001354  6700 FCAA                282      BEQ START
00001358  B23C 0030                283      CMP.B #48,D1
0000135C  6700 0010                284      BEQ GOODBYE
00001360  43F9 00002FC7            285      LEA     BADVAL,A1     * Prints End of Program message
00001366  103C 000E                286      MOVE.B  #14,D0
0000136A  4E4F                     287      TRAP    #15
0000136C  60B6                     288      BRA ENDING
0000136E                           289  
0000136E                           290  GOODBYE
0000136E  43F9 000031E5            291      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001374  103C 000E                292      MOVE.B   #14,D0     ; moves #14 into data register D0
00001378  4E4F                     293      TRAP     #15  
0000137A  43F9 0000310C            294      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
00001380  103C 000E                295      MOVE.B  #14,D0
00001384  4E4F                     296      TRAP    #15
00001386  FFFF FFFF                297      SIMHALT             ; halt simulator   
0000138A                           298      
0000138A                           299  ;-------------------------- OP CODE SECTION -------------------------------
0000138A                           300  
0000138A                           301  READ_BITS
0000138A  4287                     302      CLR.L   D7
0000138C  4284                     303      CLR.L   D4
0000138E  1E39 000031C8            304      MOVE.B  Bits,D7
00001394                           305      
00001394                           306  LOOP_READ_BITS    
00001394  BE3C 0000                307      CMP.B   #0,D7           * counter
00001398  6700 1756                308      BEQ     RETURN
0000139C                           309      
0000139C  E34C                     310      LSL.W   #1,D4           * make space for new bit
0000139E  E34B                     311      LSL.W   #1,D3          
000013A0                           312  
000013A0  6500 0008                313      BCS     SET             * if 1, then branch to SET
000013A4  5307                     314      SUBI.B  #1,D7          
000013A6  4EF8 1394                315      JMP     LOOP_READ_BITS
000013AA                           316  SET
000013AA  5244                     317      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013AC  5307                     318      SUBI.B  #1, D7
000013AE  4EF8 1394                319      JMP     LOOP_READ_BITS  
000013B2                           320      
000013B2                           321  
000013B2                           322  
000013B2                           323  COMPARE_GROUPS              * comapres the 4 bits of the instruction
000013B2  13FC 0004 000031C8       324      MOVE.B  #4,Bits         
000013BA  4EB8 138A                325      JSR     READ_BITS       * get the first 4 bits and store it in D4
000013BE                           326  
000013BE  B87C 0001                327      CMP.W   #%0001,D4      
000013C2                           328      *BEQ     CHECK_MOVE_B    * if equal, goes to CHECK_MOVE.B
000013C2                           329      
000013C2  B87C 0002                330      CMP.W   #%0010,D4      
000013C6                           331      *BEQ     COMPARE_0010    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
000013C6                           332      
000013C6  B87C 0003                333      CMP.W   #%0011,D4      
000013CA                           334      *BEQ     COMPARE_0011    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
000013CA                           335      
000013CA  B87C 0004                336      CMP.W   #%0100,D4      
000013CE  6700 0046                337      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
000013D2                           338      
000013D2  B87C 0005                339      CMP.W   #%0101,D4      
000013D6  6700 02CE                340      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
000013DA                           341      
000013DA  B87C 0006                342      CMP.W   #%0110,D4      
000013DE  6700 0362                343      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
000013E2                           344      
000013E2  B87C 0007                345      CMP.W   #%0111,D4      
000013E6  6700 0472                346      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
000013EA                           347      
000013EA  B87C 0008                348      CMP.W   #%1000,D4      
000013EE  6700 04C8                349      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
000013F2                           350      
000013F2  B87C 0009                351      CMP.W   #%1001,D4      
000013F6  6700 0542                352      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
000013FA                           353      
000013FA  B87C 000C                354      CMP.W   #%1100,D4      
000013FE  6700 05BC                355      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
00001402                           356      
00001402  B87C 000D                357      CMP.W   #%1101,D4      
00001406  6700 036A                358      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
0000140A                           359      
0000140A  B87C 000E                360      CMP.W   #%1110,D4      
0000140E  6700 063A                361      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
00001412                           362      
00001412  6600 1412                363      BNE     PRINT_DATA      * all other instructions are not supported 
00001416                           364  
00001416                           365  
00001416                           366  
00001416                           367  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
00001416                           368  
00001416                           369  COMPARE_0100
00001416  0803 000C                370      BTST.L  #$0C,D3             ; compare bit 8 for LEA
0000141A  6600 0032                371      BNE     CHECK_LEA
0000141E                           372      
0000141E  13FC 0004 000031C8       373      MOVE.B  #4,Bits
00001426  4EB8 138A                374      JSR     READ_BITS
0000142A                           375      
0000142A  B87C 0006                376      CMP.W   #%0110,D4
0000142E  6700 00A2                377      BEQ     CHECK_NOT           ; goes to NOT
00001432                           378      
00001432  B87C 0008                379      CMP.W   #%1000,D4
00001436  6700 0112                380      BEQ     CHECK_MOVEM_1000    ; goes to MOVEM_1000
0000143A                           381      
0000143A  B87C 000C                382      CMP.W   #%1100,D4       
0000143E  6700 01BC                383      BEQ     CHECK_MOVEM_1100    ; goes to MOVEM_1100
00001442                           384      
00001442  B87C 000E                385      CMP.W   #%1110,D4
00001446  6700 01BC                386      BEQ     CHECK_NOP_JSR_RTS   ; goes to compare for 1110 (NOP,JSR,RTS)
0000144A                           387      
0000144A  6600 13DA                388      BNE     PRINT_DATA
0000144E                           389  
0000144E                           390  CHECK_LEA
0000144E  13FC 0003 000031C8       391      MOVE.B  #3,Bits  
00001456  4EB8 138A                392      JSR     READ_BITS 
0000145A  13C4 000031DA            393      MOVE.B  D4,DEST_REG  
00001460                           394  
00001460  13FC 0003 000031C8       395      MOVE.B  #3,Bits
00001468  4EB8 138A                396      JSR     READ_BITS
0000146C  B83C 0007                397      CMP.B   #7,D4               ; if mode = 111 
00001470  6600 13B4                398      BNE     PRINT_DATA
00001474                           399  
00001474  13FC 0003 000031C8       400      MOVE.B  #3,Bits
0000147C  4EB8 138A                401      JSR     READ_BITS 
00001480  13C4 000031DC            402      MOVE.B  D4,SRC_MODE           
00001486                           403  
00001486  13FC 0003 000031C8       404      MOVE.B  #3,Bits 
0000148E  4EB8 138A                405      JSR     READ_BITS 
00001492  13C4 000031DD            406      MOVE.B  D4,SRC_REG 
00001498                           407              
00001498  4EB9 00002A2A            408      JSR     CHECK_SOURCE
0000149E                           409      
0000149E  0C39 000F 000031FA       410      CMP.B   #$F,SrcMode         ; if SrcMode is invalid
000014A6  6700 137E                411      BEQ     PRINT_DATA
000014AA                           412      
000014AA  0C39 0002 000031FA       413      CMP.B   #$2,SrcMode         ; if SrcMode is 010 = '(An)'
000014B2  6700 0F04                414      BEQ     PRINTLEA        
000014B6                           415      
000014B6  0C39 0007 000031FA       416      CMP.B   #$7,SrcMode         ; if SrcMode is 111 + 000 = (XXX).W
000014BE  6700 0EF8                417      BEQ     PRINTLEA    
000014C2                           418      
000014C2  0C39 0008 000031FA       419      CMP.B   #$8,SrcMode         ; if SrcMode is 111 + 001 = (XXX).L
000014CA  6700 0EEC                420      BEQ     PRINTLEA
000014CE                           421              
000014CE  6000 1640                422      BRA     SET_INVALID_EA      ; else, invalid EA
000014D2                           423      
000014D2                           424  CHECK_NOT 
000014D2  13FC 0002 000031C8       425      MOVE.B  #2,Bits             
000014DA  4EB8 138A                426      JSR     READ_BITS             
000014DE  13C4 000031E4            427      MOVE.B  D4,SIZE
000014E4                           428      
000014E4  B83C 0003                429      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
000014E8  6700 133C                430      BEQ     PRINT_DATA          * Else, If 11 size invalid
000014EC                           431      
000014EC  13FC 0003 000031C8       432      MOVE.B  #3,Bits       
000014F4  4EB8 138A                433      JSR     READ_BITS       
000014F8  13C4 000031DB            434      MOVE.B  D4,DEST_MODE             
000014FE                           435  
000014FE  13FC 0003 000031C8       436      MOVE.B  #3,Bits       
00001506  4EB8 138A                437      JSR     READ_BITS
0000150A  13C4 000031DA            438      MOVE.B  D4,DEST_REG             
00001510                           439      
00001510  4EB9 0000292A            440      JSR     CHECK_DESTINATION       ; Check Destination Mode
00001516                           441  
00001516  0C39 000F 000031F8       442      CMP.B   #$F,DstMode         ; if DstMode is invalid
0000151E  6700 1306                443      BEQ     PRINT_DATA      
00001522                           444  
00001522  0C39 000E 000031F8       445      CMP.B   #$E,DstMode 
0000152A  6700 15E4                446      BEQ     SET_INVALID_EA      ; flag for invalid EA
0000152E                           447  
0000152E  0C39 0001 000031F8       448      CMP.B   #$1,DstMode         ; If DstMode is 001 = 'An'
00001536  6700 15D8                449      BEQ     SET_INVALID_EA      ; flag for invalid EA
0000153A                           450      
0000153A  0C39 000B 000031F8       451      CMP.B   #$B,DstMode         ; if DstMode is 111 + 100 = #<data>
00001542  6700 15CC                452      BEQ     SET_INVALID_EA      ; flag for invalid EA
00001546                           453      
00001546  6000 0EC2                454      BRA     PRINTNOT
0000154A                           455  
0000154A                           456  CHECK_MOVEM_1000 
0000154A  13FC 0001 000031C8       457      MOVE.B  #1,Bits
00001552  4EB8 138A                458      JSR     READ_BITS
00001556  B83C 0001                459      CMP.B   #%1,D4
0000155A  6600 12CA                460      BNE     PRINT_DATA
0000155E                           461      
0000155E  13FC 0001 000031C8       462      MOVE.B  #1,Bits
00001566  4EB8 138A                463      JSR     READ_BITS
0000156A  13C4 000031E4            464      MOVE.B  D4,SIZE
00001570                           465  
00001570  13FC 0003 000031C8       466      MOVE.B  #3,Bits
00001578  4EB8 138A                467      JSR     READ_BITS
0000157C  13C4 000031DE            468      MOVE.B  D4,TEMP_MODE
00001582                           469      
00001582  13FC 0003 000031C8       470      MOVE.B  #3,Bits
0000158A  4EB8 138A                471      JSR     READ_BITS
0000158E  13C4 000031DF            472      MOVE.B  D4,TEMP_REG
00001594                           473      
00001594  4EB9 000029AA            474      JSR     CHECK_TEMP
0000159A  4EB9 00002AAA            475      JSR     CHECK_XBIT
000015A0                           476      
000015A0  0C39 000F 000031F9       477      CMP.B   #$F,TempMode        ; If TempMode is invalid
000015A8  6700 127C                478      BEQ     PRINT_DATA
000015AC                           479  
000015AC  0C39 000E 000031F9       480      CMP.B   #$E,TempMode        ; If TempMode is invalid EA
000015B4  6700 155A                481      BEQ     SET_INVALID_EA      ; flag for invalid EA
000015B8                           482  
000015B8  0C39 0002 000031F9       483      CMP.B   #$2,TempMode        ; If TempMode is 010 = '(An)'
000015C0  6700 0DE4                484      BEQ     PRINTMOVEM              
000015C4                           485  
000015C4  0C39 0007 000031F9       486      CMP.B   #$7,TempMode        ; If TempMode is 111 + 000 = (XXX).W
000015CC  6700 0DD8                487      BEQ     PRINTMOVEM   
000015D0                           488  
000015D0  0C39 0008 000031F9       489      CMP.B   #$8,TempMode        ; If TempMode is 111 + 001 = (XXX).L
000015D8  6700 0DCC                490      BEQ     PRINTMOVEM   
000015DC                           491                 
000015DC  0C39 0004 000031F8       492      CMP.B   #$4,DstMode         ; If DstMode is 100 = '-(An)'
000015E4  6700 0DC0                493      BEQ     PRINTMOVEM   
000015E8                           494  
000015E8  0C39 0003 000031FA       495      CMP.B   #$3,SrcMode         ; If SrcMode is 011 = '(An)+'
000015F0  6700 0DB4                496      BEQ     PRINTMOVEM   
000015F4                           497      
000015F4  6000 151A                498      BRA     SET_INVALID_EA      ; flag for invalid EA
000015F8  6000 0DAC                499      BRA     PRINTMOVEM
000015FC                           500      
000015FC                           501  CHECK_MOVEM_1100     
000015FC  13FC 0001 000031F6       502      MOVE.B      #1,XBIT
00001604                           503  
00001604                           504  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
00001604  13FC 0002 000031C8       505      MOVE.B  #2,Bits
0000160C  4EB8 138A                506      JSR     READ_BITS
00001610                           507      
00001610  B83C 0002                508      CMP.B   #%10,D4
00001614  6700 000E                509      BEQ     CHECK_JSR           ; goes to JSR
00001618                           510      
00001618  B83C 0001                511      CMP.B   #%01,D4 
0000161C  6700 0068                512      BEQ     CHECK_NOP_RTS       ; goes to NOP and RTS
00001620                           513  
00001620  6600 1204                514      BNE     PRINT_DATA
00001624                           515  
00001624                           516  CHECK_JSR 
00001624  13FC 0003 000031C8       517      MOVE.B  #3,Bits
0000162C  4EB8 138A                518      JSR     READ_BITS
00001630  13C4 000031DB            519      MOVE.B  D4,DEST_MODE
00001636                           520      
00001636  13FC 0003 000031C8       521      MOVE.B  #3,Bits
0000163E  4EB8 138A                522      JSR     READ_BITS
00001642  13C4 000031DA            523      MOVE.B  D4,DEST_REG
00001648                           524  
00001648  4EB9 0000292A            525      JSR     CHECK_DESTINATION
0000164E                           526      
0000164E  0C39 000F 000031F8       527      CMP.B   #$F,DstMode         ; if invalid print DATA
00001656  6700 11CE                528      BEQ     PRINT_DATA
0000165A                           529      
0000165A  0C39 0002 000031F8       530      CMP.B   #$2,DstMode         ; if DstMode 010        
00001662  6700 0DDE                531      BEQ     PRINTJSR
00001666                           532      
00001666  0C39 0007 000031F8       533      CMP.B   #$7,DstMode         ; if DstMode 111 + 000
0000166E  6700 0DD2                534      BEQ     PRINTJSR
00001672                           535      
00001672  0C39 0008 000031F8       536      CMP.B   #$8,DstMode         ; if DstMode 111 + 001
0000167A  6700 0DC6                537      BEQ     PRINTJSR
0000167E                           538      
0000167E  6000 1490                539      BRA     SET_INVALID_EA      ; flag for invalid EA
00001682  6000 0DBE                540      BRA     PRINTJSR
00001686                           541      
00001686                           542  CHECK_NOP_RTS
00001686  13FC 0006 000031C8       543      MOVE.B  #6,Bits
0000168E  4EB8 138A                544      JSR     READ_BITS
00001692                           545      
00001692  B83C 0031                546      CMP.B   #%110001,D4
00001696  6700 0CFE                547      BEQ     PRINTNOP            
0000169A                           548      
0000169A  B83C 0035                549      CMP.B   #%110101,D4
0000169E  6700 0DDA                550      BEQ     PRINTRTS       
000016A2                           551          
000016A2  6600 1182                552      BNE     PRINT_DATA
000016A6                           553  
000016A6                           554  ************************** ADDQ ***************************
000016A6                           555  CHECK_ADDQ
000016A6  13FC 0003 000031C8       556      MOVE.B  #3,Bits 
000016AE  4EB8 138A                557      JSR     READ_BITS
000016B2  13C4 000031E0            558      MOVE.B  D4,DATA_FIELD
000016B8                           559      
000016B8  4EB9 00002AF2            560      JSR     FORMAT_DATA     
000016BE                           561      
000016BE  13FC 0001 000031C8       562      MOVE.B  #1,Bits
000016C6  4EB8 138A                563      JSR     READ_BITS
000016CA  B83C 0000                564      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
000016CE  6600 1156                565      BNE     PRINT_DATA          * goes to PRINT_DATA
000016D2                           566  
000016D2  13FC 0002 000031C8       567      MOVE.B  #2,Bits
000016DA  4EB8 138A                568      JSR     READ_BITS
000016DE  13C4 000031E4            569      MOVE.B  D4,SIZE             * store size into SIZE
000016E4  0C39 0003 000031E4       570      CMP.B   #%11,SIZE           * cannot be #%11
000016EC  6700 1138                571      BEQ     PRINT_DATA
000016F0                           572  
000016F0  13FC 0003 000031C8       573      MOVE.B  #3,Bits
000016F8  4EB8 138A                574      JSR     READ_BITS
000016FC  13C4 000031DB            575      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
00001702                           576      
00001702  13FC 0003 000031C8       577      MOVE.B  #3,Bits
0000170A  4EB8 138A                578      JSR     READ_BITS
0000170E  13C4 000031DA            579      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
00001714                           580      
00001714  4EB9 0000292A            581      JSR     CHECK_DESTINATION    
0000171A                           582      
0000171A  0C39 000F 000031DB       583      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
00001722  6700 1102                584      BEQ     PRINT_DATA         
00001726                           585      
00001726  0C39 000E 000031DB       586      CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
0000172E  6700 13E0                587      BEQ     SET_INVALID_EA      
00001732                           588      
00001732  0C39 000B 000031DB       589      CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
0000173A  6700 13D4                590      BEQ     SET_INVALID_EA      
0000173E                           591      
0000173E  6000 0D4A                592      BRA     PRINTADDQ
00001742                           593  
00001742                           594  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
00001742                           595  COMPARE_0110  * TODO : store condition and 8-bit displacement 
00001742  13FC 0004 000031C8       596      MOVE.B  #4,Bits 
0000174A  4EB8 138A                597      JSR     READ_BITS
0000174E                           598      
0000174E  B83C 000E                599      CMP.B   #%1110,D4
00001752  6700 0D8E                600      BEQ     PRINTBGT 
00001756                           601      
00001756  B83C 000F                602      CMP.B   #%1111,D4
0000175A  6700 0DB2                603      BEQ     PRINTBLE 
0000175E                           604      
0000175E  B83C 0007                605      CMP.B   #%0111,D4
00001762  6700 0D94                606      BEQ     PRINTBEQ  
00001766                           607      
00001766  B83C 0000                608      CMP.B   #%0000,D4
0000176A  6700 0DB8                609      BEQ     PRINTBRA
0000176E                           610      
0000176E  6000 10B6                611      BRA     PRINT_DATA 
00001772                           612  
00001772                           613  ************************** ADD, ADDA **********************
00001772                           614  COMPARE_1101    * ADD and ADDA 
00001772  13FC 0003 000031C8       615      MOVE.B  #3,Bits
0000177A  4EB8 138A                616      JSR     READ_BITS
0000177E  13C4 000031DF            617      MOVE.B  D4,TEMP_REG
00001784  13C4 000031DA            618      MOVE.B  D4,DEST_REG
0000178A                           619      
0000178A  13FC 0001 000031C8       620      MOVE.B  #1,Bits
00001792  4EB8 138A                621      JSR     READ_BITS
00001796  13C4 000031F6            622      MOVE.B  D4,XBit
0000179C                           623      
0000179C  13FC 0002 000031C8       624      MOVE.B  #2,Bits
000017A4  4EB8 138A                625      JSR     READ_BITS
000017A8  13C4 000031E4            626      MOVE.B  D4,SIZE
000017AE                           627  
000017AE  4EB9 00002AAA            628      JSR     CHECK_XBIT
000017B4                           629  
000017B4  13FC 0003 000031C8       630      MOVE.B  #3,Bits
000017BC  4EB8 138A                631      JSR     READ_BITS
000017C0  13C4 000031DE            632      MOVE.B  D4,TEMP_MODE
000017C6                           633      
000017C6  13FC 0003 000031C8       634      MOVE.B  #3,Bits
000017CE  4EB8 138A                635      JSR     READ_BITS
000017D2  13C4 000031DF            636      MOVE.B  D4,TEMP_REG   
000017D8                           637      
000017D8  4EB9 000029AA            638      JSR     CHECK_TEMP   
000017DE  0C39 000F 000031F9       639      CMP.B   #$F, TempMode
000017E6  6700 103E                640      BEQ     PRINT_DATA
000017EA                           641      
000017EA  0C39 000E 000031F9       642      CMP.B   #$E,TempMode    
000017F2  6700 131C                643      BEQ     SET_INVALID_EA 
000017F6                           644      
000017F6  0C39 0003 000031E4       645      CMP.B   #%11,SIZE 
000017FE  6700 0022                646      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
00001802                           647      
00001802  6000 0002                648      BRA     CHECK_ADD
00001806                           649      
00001806                           650  CHECK_ADD    
00001806  0C39 0000 000031E4       651      CMP.B   #%00,SIZE
0000180E  6600 0DF8                652      BNE     PRINTADD  
00001812                           653      
00001812  0C39 0001 000031F9       654      CMP.B   #$1,TempMode       * if TempMode is invalid
0000181A  6700 12F4                655      BEQ     SET_INVALID_EA       
0000181E  6000 0DE8                656      BRA     PRINTADD  
00001822                           657  
00001822                           658  CHECK_ADDA
00001822  13FC 0001 000031E4       659      MOVE.B  #%01,SIZE
0000182A                           660      
0000182A                           661  *    JSR     CHECK_SOUCE   
0000182A  0C39 000F 000031FA       662      CMP.B   #$F,SrcMode
00001832  6700 0FF2                663      BEQ     PRINT_DATA
00001836  0C39 000E 000031FA       664      CMP.B   #$E,SrcMode
0000183E  6700 12D0                665      BEQ     SET_INVALID_EA 
00001842                           666     
00001842  0C39 0000 000031F6       667      CMP.B   #%0,XBIT
0000184A  6700 0DEA                668      BEQ     PRINTADDA   
0000184E                           669                 
0000184E  13FC 0002 000031E4       670      MOVE.B  #%10,SIZE
00001856  6000 0DDE                671      BRA     PRINTADDA 
0000185A                           672   
0000185A                           673  ************************** MOVEQ ********************************
0000185A                           674  CHECK_MOVEQ
0000185A  13FC 0003 000031C8       675      MOVE.B  #3,Bits         * read next 3 bits
00001862  4EB8 138A                676      JSR     READ_BITS       * store them in D4
00001866  13C4 000031DA            677      MOVE.B  D4,DEST_REG     * move register value (used in EA)
0000186C  1439 000031DA            678      MOVE.B  DEST_REG,D2
00001872  163C 0000                679      MOVE.B  #%000,D3
00001876                           680      
00001876  13FC 0001 000031C8       681      MOVE.B  #1,Bits         * read the next bit into D4
0000187E  4EB8 138A                682      JSR     READ_BITS
00001882  B83C 0000                683      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
00001886  6600 0F9E                684      BNE     PRINT_DATA      * goes to PRINT_DATA ?
0000188A                           685      
0000188A  13FC 0008 000031C8       686      MOVE.B  #8,Bits        
00001892  4EB8 138A                687      JSR     READ_BITS
00001896  23C4 000031E0            688      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
0000189C                           689      
0000189C  13FC 0007 000031DC       690      MOVE.B  #%111,SRC_MODE  * 
000018A4  13FC 0004 000031DD       691      MOVE.B  #%100,SRC_REG   * 
000018AC  13FC 0004 00002700       692      MOVE.B  #4,SizeSplit
000018B4  6000 0C84                693      BRA     PRINTMOVEQ 
000018B8                           694      
000018B8                           695  ************************* OR *********************************
000018B8                           696  CHECK_OR
000018B8  13FC 0003 000031C8       697      MOVE.B  #3,Bits
000018C0  4EB8 138A                698      JSR     READ_BITS
000018C4  13C4 000031DF            699      MOVE.B  D4,TEMP_REG
000018CA                           700      
000018CA  13FC 0001 000031C8       701      MOVE.B  #1,Bits
000018D2  4EB8 138A                702      JSR     READ_BITS
000018D6  13C4 000031F6            703      MOVE.B  D4,XBit
000018DC                           704      
000018DC  13FC 0002 000031C8       705      MOVE.B  #2,Bits
000018E4  4EB8 138A                706      JSR     READ_BITS
000018E8  13C4 000031E4            707      MOVE.B  D4,SIZE
000018EE                           708  
000018EE  4EB9 00002AAA            709      JSR     CHECK_XBIT
000018F4                           710      
000018F4  13FC 0003 000031C8       711      MOVE.B  #3,Bits
000018FC  4EB8 138A                712      JSR     READ_BITS
00001900  13C4 000031DE            713      MOVE.B  D4,TEMP_MODE    * store TEMP_MODE
00001906                           714      
00001906  13FC 0003 000031C8       715      MOVE.B  #3,Bits
0000190E  4EB8 138A                716      JSR     READ_BITS
00001912  13C4 000031DF            717      MOVE.B  D4,TEMP_REG    * store TEMP_REG    
00001918                           718      
00001918  4EB9 000029AA            719      JSR     CHECK_TEMP   
0000191E  0C39 000F 000031F9       720      CMP.B   #$F, TempMode
00001926  6700 0EFE                721      BEQ     PRINT_DATA
0000192A  0C39 000E 000031F9       722      CMP.B   #$E,TempMode    
00001932  6700 11DC                723      BEQ     SET_INVALID_EA  
00001936                           724      
00001936  6000 0C46                725      BRA     PRINTOR
0000193A                           726  
0000193A                           727  ********************* SUB **********************
0000193A                           728  CHECK_SUB
0000193A  13FC 0003 000031C8       729      MOVE.B  #3,Bits
00001942  4EB8 138A                730      JSR     READ_BITS
00001946  13C4 000031DF            731      MOVE.B  D4,TEMP_REG
0000194C                           732      
0000194C  13FC 0001 000031C8       733      MOVE.B  #1,Bits
00001954  4EB8 138A                734      JSR     READ_BITS
00001958  13C4 000031F6            735      MOVE.B  D4,XBit
0000195E                           736      
0000195E  13FC 0002 000031C8       737      MOVE.B  #2,Bits
00001966  4EB8 138A                738      JSR     READ_BITS
0000196A  13C4 000031E4            739      MOVE.B  D4,SIZE
00001970                           740  
00001970  4EB9 00002AAA            741      JSR     CHECK_XBIT
00001976                           742      
00001976  13FC 0003 000031C8       743      MOVE.B  #3,Bits
0000197E  4EB8 138A                744      JSR     READ_BITS
00001982  13C4 000031DE            745      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001988                           746      
00001988  13FC 0003 000031C8       747      MOVE.B  #3,Bits
00001990  4EB8 138A                748      JSR     READ_BITS
00001994  13C4 000031DF            749      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
0000199A                           750      
0000199A  4EB9 000029AA            751      JSR     CHECK_TEMP   
000019A0  0C39 000F 000031F9       752      CMP.B   #$F, TempMode
000019A8  6700 0E7C                753      BEQ     PRINT_DATA
000019AC  0C39 000E 000031F9       754      CMP.B   #$E,TempMode    
000019B4  6700 115A                755      BEQ     SET_INVALID_EA
000019B8                           756      
000019B8  6000 0BF2                757      BRA     PRINTSUB
000019BC                           758  
000019BC                           759  
000019BC                           760  ******************* AND ***********************
000019BC                           761  CHECK_AND
000019BC  13FC 0003 000031C8       762      MOVE.B  #3,Bits
000019C4  4EB8 138A                763      JSR     READ_BITS
000019C8  13C4 000031DF            764      MOVE.B  D4,TEMP_REG
000019CE                           765      
000019CE  13FC 0001 000031C8       766      MOVE.B  #1,Bits
000019D6  4EB8 138A                767      JSR     READ_BITS
000019DA  13C4 000031F6            768      MOVE.B  D4,XBit
000019E0                           769      
000019E0  13FC 0002 000031C8       770      MOVE.B  #2,Bits
000019E8  4EB8 138A                771      JSR     READ_BITS
000019EC  13C4 000031E4            772      MOVE.B  D4,SIZE
000019F2                           773  
000019F2  4EB9 00002AAA            774      JSR     CHECK_XBIT
000019F8                           775      
000019F8  13FC 0003 000031C8       776      MOVE.B  #3,Bits
00001A00  4EB8 138A                777      JSR     READ_BITS
00001A04  13C4 000031DE            778      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001A0A                           779      
00001A0A  13FC 0003 000031C8       780      MOVE.B  #3,Bits
00001A12  4EB8 138A                781      JSR     READ_BITS
00001A16  13C4 000031DF            782      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001A1C                           783      
00001A1C  4EB9 000029AA            784      JSR     CHECK_TEMP   
00001A22  0C39 000F 000031F9       785      CMP.B   #$F, TempMode
00001A2A  6700 0DFA                786      BEQ     PRINT_DATA
00001A2E                           787      
00001A2E  0C39 0003 000031E4       788      CMP.B   #%11,SIZE
00001A36  6700 0DEE                789      BEQ     PRINT_DATA
00001A3A                           790      
00001A3A  0C39 000E 000031F9       791      CMP.B   #$E,TempMode    
00001A42  6700 10CC                792      BEQ     SET_INVALID_EA
00001A46                           793      
00001A46  6000 0B92                794      BRA     PRINTAND
00001A4A                           795  
00001A4A                           796      
00001A4A                           797  ******************************************
00001A4A                           798  *        THE GROUP 14
00001A4A                           799  *        LS,AS AND ROTATION
00001A4A                           800  *        
00001A4A                           801  ******************************************
00001A4A                           802  COMPARE_1110 
00001A4A  4245                     803              CLR D5     ;STORING ISOLATED BITS
00001A4C  4244                     804              CLR D4
00001A4E  3839 000031C6            805              MOVE.W COMMANDDATA,D4
00001A54  2A04                     806              MOVE.L   D4,D5
00001A56  0285 000000C0            807              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001A5C  EC8D                     808              LSR.L    #6,D5            ;NORMALIZE
00001A5E  13C5 000031E4            809              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001A64  BA3C 0003                810              CMP.B    #%11,D5    
00001A68  6700 0298                811              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001A6C  4245                     812              CLR D5
00001A6E  2A04                     813              MOVE.L   D4,D5      
00001A70  0285 00000018            814              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001A76  E68D                     815              LSR.L   #3,D5
00001A78  BA3C 0001                816              CMP.B   #%001,D5
00001A7C  6700 0020                817              BEQ     G_LS    ;LOGICAL SHIFTS
00001A80  BA3C 0003                818              CMP.B   #%011,D5
00001A84  6700 00E4                819              BEQ     G_RO    ;ROTAIONS
00001A88  BA3C 0000                820              CMP.B   #%000,D5
00001A8C  6700 01A8                821              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001A90                           822              
00001A90  13FC 0001 00000001       823              MOVE.B #1,BAD_FLAG
00001A98  4EF9 00002826            824              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001A9E                           825  
00001A9E                           826  G_LS               ;GROUP LOGICAL SHIFT
00001A9E  4245                     827       CLR   D5
00001AA0  23C4 0000320C            828       MOVE.L D4,IR_IL
00001AA6  02B9 00000020 0000320C   829       ANDI.L  #$0020,IR_IL
00001AB0  2A39 0000320C            830       MOVE.L  IR_IL,D5
00001AB6  EA8D                     831       LSR.L   #5,D5
00001AB8  BA3C 0001                832       CMP.B   #$1,D5
00001ABC  6700 0056                833       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001AC0  4245                     834       CLR D5
00001AC2  2A04                     835       MOVE.L  D4,D5
00001AC4  0285 00000100            836       ANDI.L  #$0100,D5
00001ACA  E08D                     837       LSR.L  #8,D5
00001ACC  23C5 00003204            838       MOVE.L  D5,DR
00001AD2  4245                     839       CLR D5
00001AD4  2A04                     840       MOVE.L  D4,D5
00001AD6  0285 00000E00            841       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001ADC  E08D                     842       LSR.L   #8,D5
00001ADE  E28D                     843       LSR.L   #1,D5
00001AE0  BABC 00000007            844       CMP.L   #7,D5
00001AE6  6E00 0D3E                845       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001AEA  BABC 00000000            846       CMP.L   #0,D5
00001AF0  6D00 0D34                847       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001AF4  13C5 00003210            848       MOVE.B  D5,S_COUNT
00001AFA  4EB9 00002352            849       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001B00  4245                     850       CLR     D5
00001B02  2A04                     851       MOVE.L  D4,D5
00001B04  0285 00000007            852       ANDI.L   #$0007,D5
00001B0A  13C5 00003215            853       MOVE.B   D5,dRN
00001B10  6000 0722                854       BRA      PR_LS             
00001B14                           855       
00001B14                           856  GLS_EA 
00001B14  4245                     857       CLR D5
00001B16  4244                     858       CLR D4
00001B18  3839 000031C6            859       MOVE.W COMMANDDATA,D4
00001B1E                           860  
00001B1E  2A04                     861       MOVE.L  D4,D5
00001B20  0285 00000100            862       ANDI.L  #$0100,D5
00001B26  E08D                     863       LSR.L  #8,D5
00001B28  23C5 00003204            864       MOVE.L  D5,DR     ;DIRECTION
00001B2E  4245                     865       CLR D5
00001B30  2A04                     866       MOVE.L  D4,D5
00001B32  0285 00000E00            867       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001B38  E08D                     868       LSR.L   #8,D5
00001B3A  E28D                     869       LSR.L   #1,D5
00001B3C  BABC 00000007            870       CMP.L   #7,D5
00001B42  6E00 0CE2                871       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001B46  BABC 00000000            872       CMP.L   #0,D5
00001B4C  6D00 0CD8                873       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001B50  13C5 00003214            874       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001B56  4245                     875       CLR     D5
00001B58  2A04                     876       MOVE.L   D4,D5
00001B5A  0285 00000007            877       ANDI.L   #$0007,D5
00001B60  13C5 00003215            878       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001B66  6000 04F0                879       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001B6A                           880  G_RO            ;GROUP ROTATION
00001B6A  4245                     881       CLR   D5
00001B6C  23C4 0000320C            882       MOVE.L D4,IR_IL
00001B72  02B9 00000020 0000320C   883       ANDI.L  #$0020,IR_IL
00001B7C  2A39 0000320C            884       MOVE.L  IR_IL,D5
00001B82  EA8D                     885       LSR.L   #5,D5
00001B84  BA3C 0001                886       CMP.B   #$1,D5
00001B88  6700 0056                887       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001B8C  4245                     888       CLR D5
00001B8E  2A04                     889       MOVE.L  D4,D5
00001B90  0285 00000100            890       ANDI.L  #$0100,D5
00001B96  E08D                     891       LSR.L  #8,D5
00001B98  23C5 00003204            892       MOVE.L  D5,DR
00001B9E  4245                     893       CLR D5
00001BA0  2A04                     894       MOVE.L  D4,D5
00001BA2  0285 00000E00            895       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001BA8  E08D                     896       LSR.L   #8,D5
00001BAA  E28D                     897       LSR.L   #1,D5
00001BAC  BABC 00000007            898       CMP.L   #7,D5
00001BB2  6E00 0C72                899       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001BB6  BABC 00000000            900       CMP.L   #0,D5
00001BBC  6D00 0C68                901       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001BC0  13C5 00003210            902       MOVE.B  D5,S_COUNT
00001BC6  4EB9 00002352            903       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001BCC  4245                     904       CLR     D5
00001BCE  2A04                     905       MOVE.L  D4,D5
00001BD0  0285 00000007            906       ANDI.L   #$0007,D5
00001BD6  13C5 00003215            907       MOVE.B   D5,dRN
00001BDC  6000 05B2                908       BRA      PR_RO    ;PRINT ROTATION   
00001BE0                           909  
00001BE0                           910  GRO_EA 
00001BE0  4245                     911       CLR D5
00001BE2  4244                     912       CLR D4
00001BE4  3839 000031C6            913       MOVE.W COMMANDDATA,D4
00001BEA                           914  
00001BEA  2A04                     915       MOVE.L  D4,D5
00001BEC  0285 00000100            916       ANDI.L  #$0100,D5
00001BF2  E08D                     917       LSR.L  #8,D5
00001BF4  23C5 00003204            918       MOVE.L  D5,DR     ;DIRECTION
00001BFA  4245                     919       CLR D5
00001BFC  2A04                     920       MOVE.L  D4,D5
00001BFE  0285 00000E00            921       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C04  E08D                     922       LSR.L   #8,D5
00001C06  E28D                     923       LSR.L   #1,D5
00001C08  BABC 00000007            924       CMP.L   #7,D5
00001C0E  6E00 0C16                925       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C12  BABC 00000000            926       CMP.L   #0,D5
00001C18  6D00 0C0C                927       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C1C  13C5 00003214            928       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001C22  4245                     929       CLR     D5
00001C24  2A04                     930       MOVE.L   D4,D5
00001C26  0285 00000007            931       ANDI.L   #$0007,D5
00001C2C  13C5 00003215            932       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001C32  6000 04C0                933       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001C36                           934  
00001C36                           935  
00001C36                           936  
00001C36                           937  G_AS         ;GROUP ARITHMATIC SHIFT
00001C36  4245                     938       CLR   D5
00001C38  23C4 0000320C            939       MOVE.L D4,IR_IL
00001C3E  02B9 00000020 0000320C   940       ANDI.L  #$0020,IR_IL
00001C48  2A39 0000320C            941       MOVE.L  IR_IL,D5
00001C4E  EA8D                     942       LSR.L   #5,D5
00001C50  BA3C 0001                943       CMP.B   #$1,D5
00001C54  6700 0056                944       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001C58  4245                     945       CLR D5
00001C5A  2A04                     946       MOVE.L  D4,D5
00001C5C  0285 00000100            947       ANDI.L  #$0100,D5
00001C62  E08D                     948       LSR.L  #8,D5
00001C64  23C5 00003204            949       MOVE.L  D5,DR
00001C6A  4245                     950       CLR D5
00001C6C  2A04                     951       MOVE.L  D4,D5
00001C6E  0285 00000E00            952       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C74  E08D                     953       LSR.L   #8,D5
00001C76  E28D                     954       LSR.L   #1,D5
00001C78  BABC 00000007            955       CMP.L   #7,D5
00001C7E  6E00 0BA6                956       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C82  BABC 00000000            957       CMP.L   #0,D5
00001C88  6D00 0B9C                958       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C8C  13C5 00003210            959       MOVE.B  D5,S_COUNT
00001C92  4EB9 00002352            960       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001C98  4245                     961       CLR     D5
00001C9A  2A04                     962       MOVE.L  D4,D5
00001C9C  0285 00000007            963       ANDI.L   #$0007,D5
00001CA2  13C5 00003215            964       MOVE.B   D5,dRN
00001CA8  6000 0538                965       BRA      PR_AS    ;PRINT ROTATION 
00001CAC                           966  
00001CAC                           967  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001CAC  4245                     968       CLR D5
00001CAE  4244                     969       CLR D4
00001CB0  3839 000031C6            970       MOVE.W COMMANDDATA,D4
00001CB6                           971  
00001CB6  2A04                     972       MOVE.L  D4,D5
00001CB8  0285 00000100            973       ANDI.L  #$0100,D5
00001CBE  E08D                     974       LSR.L  #8,D5
00001CC0  23C5 00003204            975       MOVE.L  D5,DR     ;DIRECTION
00001CC6  4245                     976       CLR D5
00001CC8  2A04                     977       MOVE.L  D4,D5
00001CCA  0285 00000E00            978       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001CD0  E08D                     979       LSR.L   #8,D5
00001CD2  E28D                     980       LSR.L   #1,D5
00001CD4  BABC 00000007            981       CMP.L   #7,D5
00001CDA  6E00 0B4A                982       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001CDE  BABC 00000000            983       CMP.L   #0,D5
00001CE4  6D00 0B40                984       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001CE8  13C5 00003214            985       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001CEE  4245                     986       CLR     D5
00001CF0  2A04                     987       MOVE.L   D4,D5
00001CF2  0285 00000007            988       ANDI.L   #$0007,D5
00001CF8  13C5 00003215            989       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001CFE  6000 02BC                990       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001D02                           991  
00001D02                           992  G14_MEMS 
00001D02  4245                     993         CLR D5
00001D04  2A04                     994         MOVE.L  D4,D5
00001D06  CABC 00000E00            995         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001D0C  E08D                     996         LSR.L   #8,D5
00001D0E  E28D                     997         LSR.L   #1,D5
00001D10  BA3C 0001                998         CMP.B   #%001,D5
00001D14  6700 0012                999         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001D18  BA3C 0003               1000         CMP.B   #%011,D5
00001D1C  6700 0070               1001         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001D20  BA3C 0000               1002         CMP.B   #%000,D5
00001D24  6700 00CE               1003         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001D28                          1004  
00001D28                          1005  G14_MEMS_LS 
00001D28  4245                    1006             CLR D5
00001D2A  2A04                    1007             MOVE.L  D4,D5
00001D2C  0285 00000100           1008             ANDI.L  #$0100,D5
00001D32  E08D                    1009             LSR.L  #8,D5
00001D34  13C5 00003204           1010             MOVE.B  D5,DR     ;DIRECTION
00001D3A  4245                    1011             CLR D5
00001D3C  2A04                    1012             MOVE.L D4,D5
00001D3E  0285 00000038           1013             ANDI.L  #$0038,D5
00001D44  E68D                    1014             LSR.L  #3,D5
00001D46  13C5 00003218           1015             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001D4C  4245                    1016             CLR D5
00001D4E  2A04                    1017             MOVE.L D4,D5
00001D50  0285 00000007           1018             ANDI.L  #$0007,D5
00001D56  13C5 00003215           1019             MOVE.B  D5,dRN
00001D5C  0CB9 00000000 00003218  1020             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001D66  6700 0ABE               1021             BEQ    PRINT_DATA
00001D6A  0CB9 00000001 00003218  1022             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001D74  6700 0AB0               1023             BEQ     PRINT_DATA
00001D78  13C5 00003217           1024             MOVE.B  D5,dRG     ;DESTINATION REG
00001D7E  0C39 0007 00003218      1025             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001D86  6700 00F2               1026             BEQ     CHECK_ID_LS 
00001D8A  6000 0168               1027             BRA     PR_G14_MEMS_LS             
00001D8E                          1028       
00001D8E                          1029  
00001D8E                          1030  G14_MEMS_RO
00001D8E  4245                    1031             CLR D5
00001D90  2A04                    1032             MOVE.L  D4,D5
00001D92  0285 00000100           1033             ANDI.L  #$0100,D5
00001D98  E08D                    1034             LSR.L  #8,D5
00001D9A  13C5 00003204           1035             MOVE.B  D5,DR     ;DIRECTION
00001DA0  4245                    1036             CLR D5
00001DA2  2A04                    1037             MOVE.L D4,D5
00001DA4  0285 00000038           1038             ANDI.L  #$0038,D5
00001DAA  E68D                    1039             LSR.L  #3,D5
00001DAC  13C5 00003218           1040             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001DB2  4245                    1041             CLR D5
00001DB4  2A04                    1042             MOVE.L D4,D5
00001DB6  0285 00000007           1043             ANDI.L  #$0007,D5
00001DBC  13C5 00003215           1044             MOVE.B  D5,dRN
00001DC2  0CB9 00000000 00003218  1045             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001DCC  6700 0A58               1046             BEQ    PRINT_DATA
00001DD0  0CB9 00000001 00003218  1047             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001DDA  6700 0A4A               1048             BEQ     PRINT_DATA
00001DDE  13C5 00003217           1049             MOVE.B  D5,dRG     ;DESTINATION REG
00001DE4  0C39 0007 00003218      1050             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001DEC  6700 007C               1051             BEQ     CHECK_ID_RO 
00001DF0  6000 0166               1052             BRA     PR_G14_MEMS_RO         
00001DF4                          1053  
00001DF4                          1054  G14_MEMS_AS
00001DF4  4245                    1055             CLR D5
00001DF6  2A04                    1056             MOVE.L  D4,D5
00001DF8  0285 00000100           1057             ANDI.L  #$0100,D5
00001DFE  E08D                    1058             LSR.L  #8,D5
00001E00  13C5 00003204           1059             MOVE.B  D5,DR     ;DIRECTION
00001E06  4245                    1060             CLR D5
00001E08  2A04                    1061             MOVE.L D4,D5
00001E0A  0285 00000038           1062             ANDI.L  #$0038,D5
00001E10  E68D                    1063             LSR.L  #3,D5
00001E12  13C5 00003218           1064             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001E18  4245                    1065             CLR D5
00001E1A  2A04                    1066             MOVE.L D4,D5
00001E1C  0285 00000007           1067             ANDI.L  #$0007,D5
00001E22  13C5 00003215           1068             MOVE.B  D5,dRN
00001E28  0CB9 00000000 00003218  1069             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001E32  6700 09F2               1070             BEQ    PRINT_DATA
00001E36  0CB9 00000001 00003218  1071             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001E40  6700 09E4               1072             BEQ     PRINT_DATA
00001E44  13C5 00003217           1073             MOVE.B  D5,dRG     ;DESTINATION REG
00001E4A  0C39 0007 00003218      1074             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001E52  6700 0006               1075             BEQ     CHECK_ID_AS 
00001E56  6000 0032               1076             BRA     PR_G14_MEMS_AS                          
00001E5A                          1077             
00001E5A                          1078  
00001E5A                          1079  
00001E5A  0C39 0004 00003217      1080  CHECK_ID_AS  CMP.B #$4,dRG
00001E62  6700 09C2               1081               BEQ   PRINT_DATA
00001E66  6000 0022               1082               BRA     PR_G14_MEMS_AS
00001E6A                          1083               
00001E6A  0C39 0004 00003217      1084  CHECK_ID_RO  CMP.B #$4,dRG
00001E72  6700 09B2               1085               BEQ   PRINT_DATA
00001E76  6000 00E0               1086               BRA     PR_G14_MEMS_RO
00001E7A                          1087    
00001E7A  0C39 0004 00003217      1088  CHECK_ID_LS  CMP.B #$4,dRG
00001E82  6700 09A2               1089               BEQ   PRINT_DATA
00001E86  6000 006C               1090               BRA    PR_G14_MEMS_LS
00001E8A                          1091                               
00001E8A                          1092  PR_G14_MEMS_AS
00001E8A  4EB9 000027B8           1093       JSR     PRINTCLRSPOT      * print space
00001E90                          1094   
00001E90  0C39 0000 00003204      1095       CMP.B #$0,DR 
00001E98  6700 002E               1096       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001E9C                          1097      
00001E9C                          1098      *******PRINT LSL*******
00001E9C  43F9 0000319A           1099       LEA       PASL,A1   MEM LEFT SHIF
00001EA2  103C 000E               1100       MOVE.B   #14,D0     ; moves #14 into data register D0
00001EA6  4E4F                    1101       TRAP     #15
00001EA8                          1102  
00001EA8  4EB9 000027B8           1103       JSR     PRINTCLRSPOT      * print space
00001EAE                          1104   
00001EAE  4243                    1105       CLR D3
00001EB0  4242                    1106       CLR D2
00001EB2  1439 00003218           1107       MOVE.B  dMODE,D2
00001EB8  1639 00003215           1108       MOVE.B  dRN,D3
00001EBE  4EB9 00002B84           1109       JSR     EA_START
00001EC4                          1110       
00001EC4  6000 F3E2               1111       BRA MEMORYGRABBER
00001EC8                          1112  
00001EC8                          1113       
00001EC8                          1114  PR_ASR_MEM   ;MEM RIGHT SHIFT
00001EC8  43F9 00003196           1115       LEA       PASR,A1   MEM RIGHT SHIF
00001ECE  103C 000E               1116       MOVE.B   #14,D0     ; moves #14 into data register D0
00001ED2  4E4F                    1117       TRAP     #15
00001ED4  4EB9 000027B8           1118       JSR     PRINTCLRSPOT      * print space
00001EDA                          1119  
00001EDA  4243                    1120       CLR D3
00001EDC  4242                    1121       CLR D2
00001EDE  1439 00003218           1122       MOVE.B  dMODE,D2
00001EE4  1639 00003215           1123       MOVE.B  dRN,D3
00001EEA  4EB9 00002B84           1124       JSR     EA_START
00001EF0                          1125       
00001EF0  6000 F3B6               1126       BRA MEMORYGRABBER
00001EF4                          1127               
00001EF4                          1128  
00001EF4                          1129  PR_G14_MEMS_LS 
00001EF4  0C39 0000 00003204      1130       CMP.B #$0,DR 
00001EFC  6700 002E               1131       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001F00                          1132      
00001F00                          1133      *******PRINT LSL*******
00001F00  43F9 0000318E           1134       LEA       PLSL,A1   MEM LEFT SHIF
00001F06  103C 000E               1135       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F0A  4E4F                    1136       TRAP     #15 
00001F0C                          1137       
00001F0C  4EB9 000027B8           1138       JSR     PRINTCLRSPOT      * print space
00001F12                          1139       
00001F12  4243                    1140       CLR D3
00001F14  4242                    1141       CLR D2
00001F16  1439 00003218           1142       MOVE.B  dMODE,D2
00001F1C  1639 00003215           1143       MOVE.B  dRN,D3
00001F22  4EB9 00002B84           1144       JSR     EA_START
00001F28                          1145       
00001F28  6000 F37E               1146       BRA MEMORYGRABBER
00001F2C                          1147       
00001F2C                          1148  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001F2C  43F9 00003192           1149       LEA       PLSR,A1   MEM RIGHT SHIF
00001F32  103C 000E               1150       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F36  4E4F                    1151       TRAP     #15
00001F38  4EB9 000027B8           1152       JSR     PRINTCLRSPOT      * print space
00001F3E  4243                    1153       CLR D3
00001F40  4242                    1154       CLR D2
00001F42  1439 00003218           1155       MOVE.B  dMODE,D2
00001F48  1639 00003215           1156       MOVE.B  dRN,D3
00001F4E  4EB9 00002B84           1157       JSR     EA_START
00001F54                          1158       
00001F54  6000 F352               1159       BRA    MEMORYGRABBER
00001F58                          1160  
00001F58                          1161  PR_G14_MEMS_RO
00001F58  0C39 0000 00003204      1162       CMP.B #$0,DR 
00001F60  6700 002E               1163       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001F64                          1164      
00001F64                          1165      *******PRINT ASL*******
00001F64  43F9 0000319E           1166       LEA       PROL,A1   ROTATE MEM LEFT SHIF
00001F6A  103C 000E               1167       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F6E  4E4F                    1168       TRAP     #15
00001F70                          1169  
00001F70  4EB9 000027B8           1170       JSR     PRINTCLRSPOT
00001F76                          1171        
00001F76  4243                    1172       CLR D3
00001F78  4242                    1173       CLR D2
00001F7A  1439 00003218           1174       MOVE.B  dMODE,D2
00001F80  1639 00003215           1175       MOVE.B  dRN,D3
00001F86  4EB9 00002B84           1176       JSR     EA_START
00001F8C                          1177       
00001F8C  6000 F31A               1178       BRA MEMORYGRABBER
00001F90                          1179  
00001F90                          1180  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001F90  43F9 000031A2           1181       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
00001F96  103C 000E               1182       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F9A  4E4F                    1183       TRAP     #15
00001F9C  4EB9 000027B8           1184       JSR     PRINTCLRSPOT      * print space
00001FA2                          1185  
00001FA2  4243                    1186       CLR D3
00001FA4  4242                    1187       CLR D2
00001FA6  1439 00003218           1188       MOVE.B  dMODE,D2
00001FAC  1639 00003215           1189       MOVE.B  dRN,D3
00001FB2  4EB9 00002B84           1190       JSR     EA_START
00001FB8                          1191       
00001FB8  6000 F2EE               1192       BRA MEMORYGRABBER
00001FBC                          1193  
00001FBC                          1194  
00001FBC                          1195  PR_G_AS_EA
00001FBC  0CB9 00000000 00003204  1196          CMP.L #$0,DR 
00001FC6  6700 004C               1197          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00001FCA                          1198       
00001FCA                          1199          *******PRINT ASL*******
00001FCA  43F9 0000319A           1200          LEA       PASL,A1
00001FD0  103C 000E               1201          MOVE.B   #14,D0     ; moves #14 into data register D0
00001FD4  4E4F                    1202          TRAP     #15 
00001FD6  4EB9 0000272E           1203          JSR      SIZEPRINT
00001FDC                          1204          
00001FDC  4EB9 000027B8           1205          JSR     PRINTCLRSPOT
00001FE2                          1206          
00001FE2  4242                    1207          CLR D2
00001FE4  4243                    1208          CLR D3
00001FE6  143C 0000               1209          MOVE.B  #%000,D2     ; mode data register
00001FEA  1639 00003214           1210          MOVE.B  sRN,D3       ; source register number
00001FF0  4EB9 00002B84           1211          JSR     EA_START
00001FF6                          1212          
00001FF6  4EB9 000027C6           1213          JSR     PRINTCOMA   ; print coma
00001FFC                          1214          
00001FFC  4243                    1215          CLR D3
00001FFE  4242                    1216          CLR D2
00002000  143C 0000               1217          MOVE.B  #%000,D2      ; mode data register
00002004  1639 00003215           1218          MOVE.B  dRN,D3        ; destination register
0000200A  4EB9 00002B84           1219          JSR     EA_START
00002010                          1220          
00002010  6000 F296               1221          BRA   MEMORYGRABBER
00002014                          1222  
00002014                          1223          
00002014                          1224  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
00002014  43F9 00003196           1225           LEA       PASR,A1
0000201A  103C 000E               1226          MOVE.B   #14,D0     ; moves #14 into data register D0
0000201E  4E4F                    1227          TRAP     #15 
00002020  4EB9 00002700           1228          JSR      SIZESPLIT
00002026                          1229          
00002026  4242                    1230          CLR D2
00002028  4243                    1231          CLR D3
0000202A  143C 0000               1232          MOVE.B  #%000,D2     ; mode data register
0000202E  1639 00003214           1233          MOVE.B  sRN,D3       ; source register number
00002034  4EB9 00002B84           1234          JSR     EA_START
0000203A  4EB9 000027C6           1235          JSR     PRINTCOMA   ; print coma
00002040  4243                    1236          CLR D3
00002042  4242                    1237          CLR D2
00002044  143C 0000               1238          MOVE.B  #%000,D2      ; mode data register
00002048  1639 00003215           1239          MOVE.B  dRN,D3        ; destination register
0000204E  4EB9 00002B84           1240          JSR     EA_START
00002054                          1241          
00002054  6000 F252               1242          BRA   MEMORYGRABBER
00002058                          1243  
00002058                          1244  
00002058                          1245  PR_G_LS_EA
00002058  0CB9 00000000 00003204  1246          CMP.L #$0,DR 
00002062  6700 004C               1247          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002066                          1248       
00002066                          1249          *******PRINT LSL*******
00002066  43F9 0000318E           1250          LEA       PLSL,A1
0000206C  103C 000E               1251          MOVE.B   #14,D0     ; moves #14 into data register D0
00002070  4E4F                    1252          TRAP     #15 
00002072  4EB9 0000272E           1253          JSR      SIZEPRINT
00002078                          1254          
00002078  4EB9 000027B8           1255          JSR     PRINTCLRSPOT
0000207E                          1256          
0000207E  4242                    1257          CLR D2
00002080  4243                    1258          CLR D3
00002082  143C 0000               1259          MOVE.B  #%000,D2     ; mode data register
00002086  1639 00003214           1260          MOVE.B  sRN,D3       ; source register number
0000208C  4EB9 00002B84           1261          JSR     EA_START
00002092                          1262          
00002092  4EB9 000027C6           1263          JSR     PRINTCOMA   ; print coma
00002098                          1264          
00002098  4243                    1265          CLR D3
0000209A  4242                    1266          CLR D2
0000209C  143C 0000               1267          MOVE.B  #%000,D2      ; mode data register
000020A0  1639 00003215           1268          MOVE.B  dRN,D3        ; destination register
000020A6  4EB9 00002B84           1269          JSR     EA_START
000020AC                          1270          
000020AC  6000 F1FA               1271          BRA   MEMORYGRABBER
000020B0                          1272          
000020B0                          1273  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
000020B0  43F9 00003192           1274           LEA       PLSR,A1
000020B6  103C 000E               1275           MOVE.B   #14,D0     ; moves #14 into data register D0
000020BA  4E4F                    1276          TRAP     #15 
000020BC  4EB9 0000272E           1277          JSR      SIZEPRINT
000020C2                          1278          
000020C2  4242                    1279          CLR D2
000020C4  4243                    1280          CLR D3
000020C6  143C 0000               1281          MOVE.B  #%000,D2     ; mode data register
000020CA  1639 00003214           1282          MOVE.B  sRN,D3       ; source register number
000020D0  4EB9 00002B84           1283          JSR     EA_START
000020D6  4EB9 000027C6           1284          JSR     PRINTCOMA   ; print coma
000020DC  4243                    1285          CLR D3
000020DE  4242                    1286          CLR D2
000020E0  143C 0000               1287          MOVE.B  #%000,D2      ; mode data register
000020E4  1639 00003215           1288          MOVE.B  dRN,D3        ; destination register
000020EA  4EB9 00002B84           1289          JSR     EA_START
000020F0                          1290          
000020F0  6000 F1B6               1291          BRA   MEMORYGRABBER
000020F4                          1292  
000020F4                          1293  
000020F4                          1294  PR_G_RO_EA        
000020F4  0CB9 00000000 00003204  1295          CMP.L #$0,DR 
000020FE  6700 004C               1296          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002102                          1297       
00002102                          1298          *******PRINT LSL*******
00002102  43F9 0000319E           1299          LEA       PROL,A1
00002108  103C 000E               1300          MOVE.B   #14,D0     ; moves #14 into data register D0
0000210C  4E4F                    1301          TRAP     #15 
0000210E  4EB9 0000272E           1302          JSR      SIZEPRINT
00002114                          1303          
00002114  4EB9 000027B8           1304          JSR     PRINTCLRSPOT
0000211A                          1305          
0000211A  4242                    1306          CLR D2
0000211C  4243                    1307          CLR D3
0000211E  143C 0000               1308          MOVE.B  #%000,D2     ; mode data register
00002122  1639 00003214           1309          MOVE.B  sRN,D3       ; source register number
00002128  4EB9 00002B84           1310          JSR     EA_START
0000212E  4EB9 000027C6           1311          JSR     PRINTCOMA   ; print coma
00002134  4243                    1312          CLR D3
00002136  4242                    1313          CLR D2
00002138  143C 0000               1314          MOVE.B  #%000,D2      ; mode data register
0000213C  1639 00003215           1315          MOVE.B  dRN,D3        ; destination register
00002142  4EB9 00002B84           1316          JSR     EA_START
00002148                          1317          
00002148  6000 F15E               1318          BRA   MEMORYGRABBER
0000214C                          1319  
0000214C                          1320          
0000214C                          1321  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
0000214C  43F9 000031A2           1322          LEA       PROR,A1
00002152  103C 000E               1323          MOVE.B   #14,D0     ; moves #14 into data register D0
00002156  4E4F                    1324          TRAP     #15 
00002158  4EB9 0000272E           1325          JSR      SIZEPRINT
0000215E                          1326  
0000215E  4242                    1327          CLR D2
00002160  4243                    1328          CLR D3
00002162  143C 0000               1329          MOVE.B  #%000,D2     ; mode data register
00002166  1639 00003214           1330          MOVE.B  sRN,D3       ; source register number
0000216C  4EB9 00002B84           1331          JSR     EA_START
00002172  4EB9 000027C6           1332          JSR     PRINTCOMA   ; print coma
00002178  4243                    1333          CLR D3
0000217A  4242                    1334          CLR D2
0000217C  143C 0000               1335          MOVE.B  #%000,D2      ; mode data register
00002180  1639 00003215           1336          MOVE.B  dRN,D3        ; destination register
00002186  4EB9 00002B84           1337          JSR     EA_START
0000218C                          1338          
0000218C  6000 F11A               1339          BRA   MEMORYGRABBER
00002190                          1340  
00002190                          1341  PR_RO 
00002190  0CB9 00000000 00003204  1342       CMP.L #$0,DR 
0000219A  6700 0172               1343       BEQ   PR_ROR   ;RIGHT SHIFT
0000219E                          1344      
0000219E                          1345      *******PRINT ASL*******
0000219E  43F9 0000319E           1346       LEA       PROL,A1
000021A4  103C 000E               1347       MOVE.B   #14,D0     ; moves #14 into data register D0
000021A8  4E4F                    1348       TRAP     #15 
000021AA                          1349  
000021AA  4EB9 0000272E           1350       JSR      SIZEPRINT
000021B0                          1351  
000021B0  4EB9 000027D4           1352       JSR     PRINTHASH   * print hash
000021B6                          1353  
000021B6  4241                    1354      CLR D1
000021B8  1239 00003210           1355      MOVE.B   S_COUNT,D1
000021BE  103C 0003               1356      MOVE.B   #3,D0
000021C2  4E4F                    1357      TRAP     #15
000021C4  4EB9 000027C6           1358      JSR     PRINTCOMA   ; print coma
000021CA  4243                    1359      CLR D3
000021CC  4242                    1360      CLR D2
000021CE  143C 0000               1361      MOVE.B  #%000,D2
000021D2  1639 00003215           1362      MOVE.B  dRN,D3
000021D8  4EB9 00002B84           1363      JSR     EA_START
000021DE                          1364      
000021DE  6000 F0C8               1365      BRA    MEMORYGRABBER
000021E2                          1366  
000021E2                          1367  
000021E2                          1368  PR_AS 
000021E2  0CB9 00000000 00003204  1369      CMP.L #$0,DR 
000021EC  6700 00DC               1370      BEQ   PR_ASR   ;RIGHT SHIFT
000021F0                          1371      
000021F0                          1372      *******PRINT ASL*******
000021F0  43F9 0000319A           1373       LEA       PASL,A1
000021F6  103C 000E               1374       MOVE.B   #14,D0     ; moves #14 into data register D0
000021FA  4E4F                    1375       TRAP     #15 
000021FC                          1376  
000021FC  4EB9 0000272E           1377      JSR      SIZEPRINT
00002202                          1378  
00002202  4EB9 000027D4           1379      JSR     PRINTHASH   ; print hash
00002208                          1380      
00002208  4241                    1381      CLR D1
0000220A  1239 00003210           1382      MOVE.B   S_COUNT,D1
00002210  103C 0003               1383      MOVE.B   #3,D0
00002214  4E4F                    1384      TRAP     #15
00002216  4EB9 000027C6           1385      JSR     PRINTCOMA   ; print coma
0000221C  4243                    1386      CLR D3
0000221E  4242                    1387      CLR D2
00002220  143C 0000               1388      MOVE.B  #%000,D2
00002224  1639 00003215           1389      MOVE.B  dRN,D3
0000222A  4EB9 00002B84           1390      JSR     EA_START
00002230                          1391  
00002230  6000 F076               1392      BRA    MEMORYGRABBER
00002234                          1393                        
00002234                          1394                          
00002234                          1395  PR_LS 
00002234  0CB9 00000000 00003204  1396      CMP.L #$0,DR 
0000223E  6700 0046               1397      BEQ   PR_LSR   ;RIGHT SHIFT
00002242                          1398      
00002242                          1399      *******PRINT LSL*******
00002242  43F9 0000318E           1400       LEA       PLSL,A1
00002248  103C 000E               1401       MOVE.B   #14,D0     ; moves #14 into data register D0
0000224C  4E4F                    1402       TRAP     #15 
0000224E  4EB9 0000272E           1403      JSR      SIZEPRINT
00002254                          1404  
00002254  4EB9 000027D4           1405      JSR     PRINTHASH   ; print hash
0000225A                          1406      
0000225A  4241                    1407      CLR D1
0000225C  1239 00003210           1408      MOVE.B   S_COUNT,D1
00002262  103C 0003               1409      MOVE.B   #3,D0
00002266  4E4F                    1410      TRAP     #15
00002268                          1411      
00002268  4EB9 000027C6           1412      JSR     PRINTCOMA   ; print coma
0000226E                          1413      
0000226E  4243                    1414      CLR D3
00002270  4242                    1415      CLR D2
00002272  143C 0000               1416      MOVE.B  #%000,D2
00002276  1639 00003215           1417      MOVE.B  dRN,D3
0000227C  4EB9 00002B84           1418      JSR     EA_START
00002282                          1419      
00002282  6000 F024               1420      BRA    MEMORYGRABBER
00002286                          1421      
00002286                          1422            
00002286                          1423  PR_LSR 
00002286  43F9 00003192           1424      LEA   PLSR,A1
0000228C  103C 000E               1425        MOVE.B   #14,D0     ; moves #14 into data register D0
00002290  4E4F                    1426        TRAP     #15       ; Displays message via trap 14 
00002292  4EB9 0000272E           1427        JSR      SIZEPRINT
00002298                          1428  
00002298  4EB9 000027D4           1429        JSR     PRINTHASH   ; print hash
0000229E                          1430        
0000229E  4241                    1431        CLR D1
000022A0  1239 00003210           1432        MOVE.B   S_COUNT,D1
000022A6  103C 0003               1433        MOVE.B   #3,D0
000022AA  4E4F                    1434        TRAP     #15
000022AC  4EB9 000027C6           1435        JSR     PRINTCOMA   ; print coma
000022B2  4243                    1436        CLR D3
000022B4  4242                    1437        CLR D2
000022B6  143C 0000               1438        MOVE.B #%000,D2
000022BA  1639 00003215           1439        MOVE.B  dRN,D3
000022C0  4EB9 00002B84           1440        JSR   EA_START
000022C6                          1441        
000022C6  6000 EFE0               1442        BRA MEMORYGRABBER
000022CA                          1443        
000022CA                          1444        
000022CA                          1445  PR_ASR 
000022CA  43F9 00003196           1446      LEA   PASR,A1
000022D0  103C 000E               1447         MOVE.B   #14,D0     ; moves #14 into data register D0
000022D4  4E4F                    1448        TRAP     #15       ; Displays message via trap 14 
000022D6  4EB9 0000272E           1449        JSR      SIZEPRINT
000022DC                          1450  
000022DC  4EB9 000027D4           1451        JSR     PRINTHASH   ; print hash
000022E2                          1452        
000022E2  4241                    1453        CLR D1
000022E4  1239 00003210           1454        MOVE.B   S_COUNT,D1
000022EA  103C 0003               1455        MOVE.B   #3,D0
000022EE  4E4F                    1456        TRAP     #15
000022F0  4EB9 000027C6           1457        JSR     PRINTCOMA   ; print coma
000022F6  4243                    1458        CLR D3
000022F8  4242                    1459        CLR D2
000022FA  143C 0000               1460        MOVE.B #%000,D2
000022FE  1639 00003215           1461        MOVE.B  dRN,D3
00002304  4EB9 00002B84           1462        JSR   EA_START
0000230A                          1463  
0000230A  6000 EF9C               1464        BRA MEMORYGRABBER
0000230E                          1465  
0000230E                          1466        
0000230E                          1467  PR_ROR 
0000230E  43F9 000031A2           1468        LEA   PROR,A1
00002314  103C 000E               1469        MOVE.B   #14,D0     ; moves #14 into data register D0
00002318  4E4F                    1470        TRAP     #15       ; Displays message via trap 14 
0000231A  4EB9 0000272E           1471        JSR      SIZEPRINT
00002320                          1472  
00002320  4EB9 000027D4           1473        JSR     PRINTHASH   ; print hash
00002326                          1474        
00002326  4241                    1475        CLR D1
00002328  1239 00003210           1476        MOVE.B   S_COUNT,D1
0000232E  103C 0003               1477        MOVE.B   #3,D0
00002332  4E4F                    1478        TRAP     #15
00002334  4EB9 000027C6           1479        JSR     PRINTCOMA   ; print coma
0000233A  4243                    1480        CLR D3
0000233C  4242                    1481        CLR D2
0000233E  143C 0000               1482        MOVE.B #%000,D2
00002342  1639 00003215           1483        MOVE.B  dRN,D3
00002348  4EB9 00002B84           1484        JSR   EA_START
0000234E                          1485        
0000234E  6000 EF58               1486        BRA MEMORYGRABBER
00002352                          1487        
00002352                          1488        
00002352                          1489  ;-----------------------extra parts for above code to function
00002352                          1490        
00002352                          1491  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
00002352  0C39 0000 00003210      1492           CMP.B #$0,S_COUNT
0000235A  6700 0004               1493           BEQ   IS_EIGHT
0000235E  4E75                    1494           RTS
00002360                          1495           
00002360  13FC 0008 00003210      1496  IS_EIGHT  MOVE.B #8,S_COUNT
00002368  4E75                    1497            RTS
0000236A                          1498  
0000236A                          1499  ;------------------------- printing --------------------------------
0000236A                          1500                  
0000236A  43F9 0000313A           1501  PRINTMOVE LEA PMOVE,A1
00002370  103C 000E               1502      MOVE.B   #14,D0     ; moves #14 into data register D0
00002374  4E4F                    1503      TRAP     #15       ; Displays message via trap 14
00002376  4EB9 00002700           1504      JSR     SIZESPLIT
0000237C  6000 055A               1505      BRA EADN
00002380                          1506      
00002380  43F9 00003145           1507  PRINTMOVEA LEA PMOVEA,A1
00002386  103C 000E               1508      MOVE.B   #14,D0     ; moves #14 into data register D0
0000238A  4E4F                    1509      TRAP     #15       ; Displays message via trap 14
0000238C  4EB9 00002700           1510      JSR     SIZESPLIT
00002392  6000 0544               1511      BRA EADN
00002396                          1512      
00002396                          1513                      ;First set of commands
00002396                          1514  PRINTNOP    
00002396  43F9 00003151           1515      LEA     PNOP,A1
0000239C  103C 000E               1516      MOVE.B  #14,D0 
000023A0  4E4F                    1517      TRAP    #15  
000023A2                          1518      
000023A2  6000 EF04               1519      BRA     MEMORYGRABBER
000023A6                          1520  
000023A6                          1521  PRINTMOVEM  
000023A6  43F9 0000313F           1522      LEA     PMOVEM,A1
000023AC  103C 000E               1523      MOVE.B  #14,D0 
000023B0  4E4F                    1524      TRAP    #15 
000023B2  4EB9 00002776           1525      JSR     SIZEPRINT3 
000023B8                          1526      
000023B8                          1527  *    CLR.L   D4
000023B8                          1528  *    MOVE.W  (A0)+,D4            * Move list mask into D4
000023B8                          1529      
000023B8                          1530      * TODO : CHECK THE INVELID_EA FLAG
000023B8                          1531      
000023B8                          1532  * TODO:     
000023B8                          1533  *    CMP.B   #%0,XBit
000023B8                          1534  *    BEQ     PRINT_REG_TO_MEM
000023B8                          1535  *    BRA     PRINT_MEM_TO_REG
000023B8                          1536  
000023B8                          1537  
000023B8                          1538  PRINTLEA
000023B8  43F9 00003155           1539      LEA     PLEA,A1
000023BE  103C 000E               1540      MOVE.B  #14,D0 
000023C2  4E4F                    1541      TRAP    #15 
000023C4  4EB9 000027B8           1542      JSR     PRINTCLRSPOT
000023CA                          1543      
000023CA  0C39 0001 000031F7      1544      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000023D2  6700 0466               1545      BEQ     PRINTINVALIDEA
000023D6                          1546      
000023D6  4243                    1547      CLR     D3
000023D8  4242                    1548      CLR     D2
000023DA  1439 000031DC           1549      MOVE.B  SRC_MODE,D2
000023E0  1639 000031DD           1550      MOVE.B  SRC_REG,D3
000023E6  4EB9 00002B84           1551      JSR     EA_START
000023EC                          1552  
000023EC  4EB9 000027C6           1553      JSR     PRINTCOMA           ; print coma
000023F2                          1554  
000023F2  4243                    1555      CLR     D3
000023F4  4242                    1556      CLR     D2
000023F6  143C 0001               1557      MOVE.B  #%001,D2
000023FA  1639 000031DA           1558      MOVE.B  DEST_REG,D3
00002400  4EB9 00002B84           1559      JSR     EA_START
00002406                          1560  
00002406  6000 EEA0               1561      BRA     MEMORYGRABBER
0000240A                          1562  
0000240A                          1563  PRINTNOT
0000240A  43F9 00003159           1564      LEA     PNOT,A1
00002410  103C 000E               1565      MOVE.B  #14,D0
00002414  4E4F                    1566      TRAP    #15
00002416  4EB9 00002752           1567      JSR     SIZEPRINT2
0000241C                          1568  
0000241C  0C39 0001 000031F7      1569      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002424  6700 0414               1570      BEQ     PRINTINVALIDEA    
00002428                          1571      
00002428  4243                    1572      CLR     D3
0000242A  4242                    1573      CLR     D2
0000242C  1439 000031DB           1574      MOVE.B  DEST_MODE,D2
00002432  1639 000031DA           1575      MOVE.B  DEST_REG,D3    
00002438  4EB9 00002B84           1576      JSR     EA_START
0000243E                          1577      
0000243E  6000 EE68               1578      BRA     MEMORYGRABBER
00002442                          1579  
00002442                          1580  PRINTJSR    
00002442  43F9 0000315D           1581      LEA     PJSR,A1
00002448  103C 000E               1582      MOVE.B  #14,D0 
0000244C  4E4F                    1583      TRAP    #15      
0000244E  4EB9 000027B8           1584      JSR     PRINTCLRSPOT
00002454                          1585      
00002454  0C39 0001 000031F7      1586      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
0000245C  6700 03DC               1587      BEQ     PRINTINVALIDEA
00002460                          1588      
00002460  4243                    1589      CLR     D3
00002462  4242                    1590      CLR     D2
00002464  1439 000031DB           1591      MOVE.B  DEST_MODE,D2
0000246A  1639 000031DA           1592      MOVE.B  DEST_REG,D3    
00002470  4EB9 00002B84           1593      JSR     EA_START
00002476                          1594      
00002476  6000 EE30               1595      BRA     MEMORYGRABBER
0000247A                          1596  
0000247A                          1597  
0000247A  43F9 00003161           1598  PRINTRTS    LEA PRTS,A1
00002480  103C 000E               1599      MOVE.B   #14,D0     ; moves #14 into data register D0
00002484  4E4F                    1600      TRAP     #15       ; Displays message via trap 14
00002486                          1601      
00002486  6000 EE20               1602      BRA     MEMORYGRABBER
0000248A                          1603      
0000248A                          1604                  ;ADDQ SECTION
0000248A                          1605  PRINTADDQ 
0000248A  43F9 00003189           1606      LEA     PADDQ,A1
00002490  103C 000E               1607      MOVE.B  #14,D0     ; moves #14 into data register D0
00002494  4E4F                    1608      TRAP    #15       ; Displays message via trap 14
00002496  4EB9 00002752           1609      JSR     SIZEPRINT2
0000249C                          1610      
0000249C  0C39 0001 000031F7      1611      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000024A4  6700 0394               1612      BEQ     PRINTINVALIDEA
000024A8                          1613      
000024A8  4EB9 000027D4           1614      JSR     PRINTHASH   ; print hash
000024AE  4EB9 000027E0           1615      JSR     PRINTDOLLARSIGN     ; print dollar sign
000024B4                          1616      
000024B4  4241                    1617      CLR     D1
000024B6  1239 000031E0           1618      MOVE.B  DATA_FIELD,D1
000024BC  103C 0003               1619      MOVE.B  #3,D0     
000024C0  4E4F                    1620      TRAP    #15 
000024C2                          1621      
000024C2  4EB9 000027C6           1622      JSR     PRINTCOMA   ; print coma
000024C8                          1623      
000024C8  4243                    1624      CLR     D3
000024CA  4242                    1625      CLR     D2
000024CC  1439 000031DB           1626      MOVE.B  DEST_MODE,D2
000024D2  1639 000031DA           1627      MOVE.B  DEST_REG,D3    
000024D8  4EB9 00002B84           1628      JSR     EA_START
000024DE                          1629  
000024DE  6000 EDC8               1630      BRA      MEMORYGRABBER
000024E2                          1631  
000024E2                          1632                  ;SECOND SET OF COMMANDS
000024E2  43F9 00003165           1633  PRINTBGT LEA PBGT,A1
000024E8  103C 000E               1634      MOVE.B   #14,D0     ; moves #14 into data register D0
000024EC  4E4F                    1635      TRAP     #15       ; Displays message via trap 14
000024EE  4EB9 00002700           1636      JSR SIZESPLIT
000024F4  6000 03E2               1637      BRA EADN
000024F8                          1638  
000024F8  43F9 00003169           1639  PRINTBEQ LEA PBEQ,A1
000024FE  103C 000E               1640      MOVE.B   #14,D0     ; moves #14 into data register D0
00002502  4E4F                    1641      TRAP     #15       ; Displays message via trap 14
00002504  4EB9 00002700           1642      JSR SIZESPLIT
0000250A  6000 03CC               1643      BRA EADN
0000250E                          1644  
0000250E  43F9 0000316D           1645  PRINTBLE LEA PBLE,A1
00002514  103C 000E               1646      MOVE.B   #14,D0     ; moves #14 into data register D0
00002518  4E4F                    1647      TRAP     #15       ; Displays message via trap 14
0000251A  4EB9 00002700           1648      JSR SIZESPLIT
00002520  6000 03B6               1649      BRA EADN
00002524                          1650  
00002524  43F9 00003171           1651  PRINTBRA LEA PBRA,A1
0000252A  103C 000E               1652      MOVE.B   #14,D0     ; moves #14 into data register D0
0000252E  4E4F                    1653      TRAP     #15       ; Displays message via trap 14
00002530  4EB9 00002700           1654      JSR SIZESPLIT
00002536  6000 03A0               1655      BRA EADN
0000253A                          1656      
0000253A                          1657                  ;MOVEQ SECTION
0000253A                          1658  PRINTMOVEQ 
0000253A  43F9 0000314B           1659      LEA PMOVEQ,A1
00002540  103C 000E               1660      MOVE.B   #14,D0     ; moves #14 into data register D0
00002544  4E4F                    1661      TRAP     #15       ; Displays message via trap 14
00002546                          1662      
00002546  4EB9 000027B8           1663      JSR     PRINTCLRSPOT
0000254C  4EB9 000027D4           1664      JSR     PRINTHASH   ; print hash
00002552  4EB9 000027E0           1665      JSR     PRINTDOLLARSIGN     ; print dollar sign  
00002558                          1666   
00002558  2239 000031E0           1667      MOVE.L      DATA_FIELD,D1
0000255E  143C 0010               1668      MOVE.B      #16,D2
00002562  103C 000F               1669      MOVE.B      #15,D0     ; moves #14 into data register D0
00002566  4E4F                    1670      TRAP        #15 
00002568                          1671      
00002568  4EB9 000027C6           1672      JSR     PRINTCOMA   ; print coma
0000256E  1E3C 0000               1673      MOVE.B #0,D7
00002572  7400                    1674      MOVE.L #%000,D2
00002574  1639 000031DA           1675      MOVE.B DEST_REG,D3
0000257A  6000 035C               1676      BRA EADN
0000257E                          1677  
0000257E                          1678                  ;OR SECTION
0000257E                          1679  PRINTOR 
0000257E  43F9 00003175           1680      LEA     POR,A1
00002584  103C 000E               1681      MOVE.B  #14,D0     ; moves #14 into data register D0
00002588  4E4F                    1682      TRAP    #15       ; Displays message via trap 14
0000258A  4EB9 00002752           1683      JSR     SIZEPRINT2 
00002590                          1684      
00002590  0C39 0001 000031F7      1685      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002598  6700 02A0               1686      BEQ     PRINTINVALIDEA
0000259C                          1687      
0000259C  0C39 0000 000031F6      1688      CMP.B   #%0,XBit
000025A4  6700 02A2               1689      BEQ     PRINT_EA_TO_DN
000025A8  6000 02E6               1690      BRA     PRINT_DN_TO_EA
000025AC                          1691      
000025AC                          1692  
000025AC                          1693                  ;SUB SECTION
000025AC                          1694  PRINTSUB 
000025AC  43F9 00003178           1695      LEA PSUB,A1
000025B2  103C 000E               1696      MOVE.B   #14,D0     ; moves #14 into data register D0
000025B6  4E4F                    1697      TRAP     #15       ; Displays message via trap 14 
000025B8  4EB9 00002752           1698      JSR     SIZEPRINT2 
000025BE                          1699      
000025BE  0C39 0001 000031F7      1700      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000025C6  6700 0272               1701      BEQ     PRINTINVALIDEA
000025CA                          1702      
000025CA  0C39 0000 000031F6      1703      CMP.B   #%0,XBit
000025D2  6700 0274               1704      BEQ     PRINT_EA_TO_DN
000025D6  6000 02B8               1705      BRA     PRINT_DN_TO_EA
000025DA                          1706      
000025DA                          1707  
000025DA                          1708                  ;AND SECTION
000025DA                          1709  PRINTAND 
000025DA  43F9 0000317C           1710      LEA PAND,A1
000025E0  103C 000E               1711      MOVE.B   #14,D0     ; moves #14 into data register D0
000025E4  4E4F                    1712      TRAP     #15       ; Displays message via trap 14
000025E6  4EB9 00002752           1713      JSR     SIZEPRINT2 
000025EC                          1714      
000025EC  0C39 0001 000031F7      1715      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
000025F4  6700 0244               1716      BEQ     PRINTINVALIDEA
000025F8                          1717      
000025F8  0C39 0000 000031F6      1718      CMP.B   #%0,XBit
00002600  6700 0246               1719      BEQ     PRINT_EA_TO_DN
00002604  6000 028A               1720      BRA     PRINT_DN_TO_EA
00002608                          1721  
00002608                          1722                  ;ADD SPLIT              
00002608                          1723  PRINTADD 
00002608  43F9 00003180           1724      LEA PADD,A1
0000260E  103C 000E               1725      MOVE.B   #14,D0     ; moves #14 into data register D0
00002612  4E4F                    1726      TRAP     #15       ; Displays message via trap 14
00002614                          1727      
00002614  4EB9 00002752           1728      JSR     SIZEPRINT2 
0000261A                          1729      
0000261A  0C39 0001 000031F7      1730      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002622  6700 0216               1731      BEQ     PRINTINVALIDEA
00002626                          1732      
00002626  0C39 0000 000031F6      1733      CMP.B   #%0,XBit
0000262E  6700 0218               1734      BEQ     PRINT_EA_TO_DN
00002632  6000 025C               1735      BRA     PRINT_DN_TO_EA
00002636                          1736      
00002636                          1737  PRINTADDA 
00002636  43F9 00003184           1738      LEA PADDA,A1
0000263C  103C 000E               1739      MOVE.B   #14,D0     ; moves #14 into data register D0
00002640  4E4F                    1740      TRAP     #15       ; Displays message via trap 14
00002642  4EB9 00002752           1741      JSR     SIZEPRINT2 
00002648                          1742      
00002648  0C39 0001 000031F7      1743      CMP.B   #%1,INVALID_EA      ; check for invalid EA flagg 
00002650  6700 01E8               1744      BEQ     PRINTINVALIDEA
00002654                          1745      
00002654  13F9 000031DE 000031DC  1746      MOVE.B  TEMP_MODE,SRC_MODE
0000265E  13F9 000031DF 000031DD  1747      MOVE.B  TEMP_REG,SRC_REG
00002668  4243                    1748      CLR     D3
0000266A  4242                    1749      CLR     D2
0000266C  1439 000031DC           1750      MOVE.B  SRC_MODE,D2
00002672  1639 000031DD           1751      MOVE.B  SRC_REG,D3
00002678  4EB9 00002B84           1752      JSR     EA_START
0000267E                          1753  
0000267E  4EB9 000027C6           1754      JSR     PRINTCOMA   ; print coma
00002684                          1755  
00002684  4243                    1756      CLR     D3
00002686  4242                    1757      CLR     D2
00002688  143C 0001               1758      MOVE.B  #%001,D2
0000268C  1639 000031DA           1759      MOVE.B  DEST_REG,D3
00002692  4EB9 00002B84           1760      JSR     EA_START
00002698                          1761  
00002698  6000 EC0E               1762      BRA     MEMORYGRABBER
0000269C                          1763      
0000269C                          1764                  ;THIRD ROTATE SPLIT   
0000269C                          1765  PRINTROTATESPLIT 
0000269C  0C79 0000 00003139      1766      CMP #0,CommandDetail   
000026A4                          1767      *BEQ PRINTLSL
000026A4  0C79 0001 00003139      1768      CMP #1,CommandDetail   
000026AC                          1769      *BEQ PRINTLSLDOUBLE
000026AC  0C79 0002 00003139      1770      CMP #2,CommandDetail   
000026B4                          1771      *BEQ PRINTLSR
000026B4  0C79 0003 00003139      1772      CMP #3,CommandDetail   
000026BC                          1773      *BEQ PRINTLSRDOUBLE
000026BC  0C79 0004 00003139      1774      CMP #4,CommandDetail   
000026C4                          1775      *BEQ PRINTASR
000026C4  0C79 0005 00003139      1776      CMP #5,CommandDetail   
000026CC                          1777      *BEQ PRINTASRDOUBLE
000026CC  0C79 0006 00003139      1778      CMP #6,CommandDetail   
000026D4                          1779      *BEQ PRINTASL
000026D4  0C79 0007 00003139      1780      CMP #7,CommandDetail   
000026DC                          1781      *BEQ PRINTASLDOUBLE
000026DC  0C79 0008 00003139      1782      CMP #8,CommandDetail   
000026E4                          1783      *BEQ PRINTROL
000026E4  0C79 0009 00003139      1784      CMP #9,CommandDetail   
000026EC                          1785      *BEQ PRINTROLDOUBLE
000026EC  0C79 000A 00003139      1786      CMP #10,CommandDetail
000026F4                          1787      *BEQ PRINTROR     
000026F4  0C79 000B 00003139      1788      CMP #11,CommandDetail
000026FC                          1789      *BEQ PRINTRORDOUBLE            
000026FC  6000 EBAA               1790      BRA MEMORYGRABBER    
00002700                          1791  
00002700                          1792  
00002700                          1793                  ;SIZE PRINTER
00002700                          1794  SIZESPLIT   
00002700  0CB9 00000001 000031CA  1795      CMP.L #1,SizeValue
0000270A  6700 0082               1796      BEQ PRINTB
0000270E  0CB9 00000002 000031CA  1797      CMP.L #2,SizeValue
00002718  6700 0082               1798      BEQ PRINTW
0000271C  0CB9 00000003 000031CA  1799      CMP.L #3,SizeValue
00002726  6700 0082               1800      BEQ PRINTL
0000272A  6000 008C               1801      BRA PRINTCLRSPOT ; go to EA/DN section
0000272E                          1802  
0000272E                          1803  SIZEPRINT 
0000272E  0C39 0000 000031E4      1804       CMP.B  #$0,SIZE
00002736  6700 0056               1805       BEQ    PRINTB
0000273A  0C39 0001 000031E4      1806       CMP.B  #$1,SIZE
00002742  6700 0058               1807       BEQ    PRINTW      
00002746  0C39 0002 000031E4      1808       CMP.B  #$2,SIZE
0000274E  6700 005A               1809       BEQ    PRINTL 
00002752                          1810  
00002752                          1811  SIZEPRINT2   
00002752  0C39 0000 000031E4      1812      CMP.B   #$00,SIZE
0000275A  6700 0032               1813      BEQ     PRINTB
0000275E  0C39 0001 000031E4      1814      CMP.B   #$01,SIZE
00002766  6700 0034               1815      BEQ     PRINTW
0000276A  0C39 0010 000031E4      1816      CMP.B   #$10,SIZE
00002772  6000 0036               1817      BRA     PRINTL
00002776                          1818  
00002776                          1819  SIZEPRINT3
00002776  0C39 0000 000031E4      1820      CMP.B   #$0,SIZE
0000277E  6700 001C               1821      BEQ     PRINTW
00002782  0C39 0001 000031E4      1822      CMP.B   #$1,SIZE
0000278A  6700 001E               1823      BEQ     PRINTL
0000278E                          1824  
0000278E                          1825  PRINTB  
0000278E  43F9 000031CE           1826      LEA     PB,A1
00002794  103C 000E               1827      MOVE.B  #14,D0     ; moves #14 into data register D0
00002798  4E4F                    1828      TRAP    #15       ; Displays message via trap 14
0000279A  4E75                    1829      RTS
0000279C                          1830  
0000279C                          1831  PRINTW      
0000279C  43F9 000031D2           1832      LEA     PW,A1
000027A2  103C 000E               1833      MOVE.B  #14,D0     ; moves #14 into data register D0
000027A6  4E4F                    1834      TRAP    #15       ; Displays message via trap 14
000027A8  4E75                    1835      RTS
000027AA                          1836      
000027AA                          1837  PRINTL 
000027AA  43F9 000031D6           1838      LEA     PL,A1
000027B0  103C 000E               1839      MOVE.B  #14,D0     ; moves #14 into data register D0
000027B4  4E4F                    1840      TRAP    #15       ; Displays message via trap 14
000027B6  4E75                    1841      RTS
000027B8                          1842  
000027B8                          1843  PRINTCLRSPOT 
000027B8  43F9 000031E5           1844      LEA     CLRSPOT,A1
000027BE  103C 000E               1845      MOVE.B  #14,D0     ; moves #14 into data register D0
000027C2  4E4F                    1846      TRAP    #15       ; Displays message via trap 14
000027C4  4E75                    1847      RTS
000027C6                          1848  
000027C6                          1849  PRINTCOMA   
000027C6  43F9 000031EB           1850      LEA     COMA,A1
000027CC  103C 000E               1851      MOVE.B  #14,D0     
000027D0  4E4F                    1852      TRAP    #15
000027D2  4E75                    1853      RTS
000027D4                          1854  
000027D4                          1855  PRINTHASH 
000027D4  43F9 000031E7           1856      LEA     HASH,A1         ; print hash
000027DA  700E                    1857      MOVEQ   #14,D0
000027DC  4E4F                    1858      TRAP    #15
000027DE  4E75                    1859      RTS
000027E0                          1860  
000027E0                          1861  PRINTDOLLARSIGN   
000027E0  43F9 000031E9           1862      LEA     DOLLARSIGN,A1   ; print dollar sign
000027E6  103C 000E               1863      MOVE.B  #14,D0
000027EA  4E4F                    1864      TRAP    #15 
000027EC  4E75                    1865      RTS
000027EE                          1866      
000027EE                          1867  PRINTNEG
000027EE  43F9 000031EF           1868      LEA     NEG,A1          ; print "-"
000027F4  103C 000E               1869      MOVE.B  #14,D0
000027F8  4E4F                    1870      TRAP    #15
000027FA  4E75                    1871      RTS
000027FC                          1872      
000027FC                          1873  PRINTPLUS
000027FC  43F9 000031ED           1874      LEA     PLUS,A1      * print "+"
00002802  103C 000E               1875      MOVE.B  #14,D0
00002806  4E4F                    1876      TRAP    #15
00002808  4E75                    1877      RTS  
0000280A                          1878  
0000280A                          1879  PRINTOPEN
0000280A  43F9 000031F1           1880      LEA     OPEN,A1      * print "("
00002810  103C 000E               1881      MOVE.B  #14,D0
00002814  4E4F                    1882      TRAP    #15
00002816  4E75                    1883      RTS 
00002818                          1884      
00002818                          1885  PRINTCLOSED  
00002818  43F9 000031F3           1886      LEA     CLOSED,A1      * print ")"
0000281E  103C 000E               1887      MOVE.B  #14,D0
00002822  4E4F                    1888      TRAP    #15
00002824  4E75                    1889      RTS 
00002826                          1890  
00002826                          1891  PRINT_DATA
00002826  43F9 000031A6           1892      LEA     PDATA,A1
0000282C  103C 000E               1893      MOVE.B  #14,D0
00002830  4E4F                    1894      TRAP    #15
00002832                          1895      
00002832  4EB8 27B8               1896      JSR     PRINTCLRSPOT      * print space
00002836                          1897      
00002836                          1898      * TODO: PRINT #$
00002836                          1899      * TODO: PRINT COMMANDDATA 
00002836  6000 EA70               1900      BRA     MEMORYGRABBER  
0000283A                          1901  
0000283A                          1902  PRINTINVALIDEA
0000283A  43F9 000031AB           1903      LEA     PINVALIDEA,A1
00002840  103C 000E               1904      MOVE.B  #14,D0
00002844  4E4F                    1905      TRAP    #15
00002846  4E75                    1906      RTS
00002848                          1907      
00002848                          1908  PRINT_EA_TO_DN
00002848  13F9 000031DE 000031DC  1909      MOVE.B  TEMP_MODE,SRC_MODE
00002852  13F9 000031DF 000031DD  1910      MOVE.B  TEMP_REG,SRC_REG
0000285C  4243                    1911      CLR     D3
0000285E  4242                    1912      CLR     D2
00002860  1439 000031DC           1913      MOVE.B  SRC_MODE,D2
00002866  1639 000031DD           1914      MOVE.B  SRC_REG,D3
0000286C  4EB9 00002B84           1915      JSR     EA_START
00002872                          1916  
00002872  4EB8 27C6               1917      JSR     PRINTCOMA   ; print coma
00002876                          1918   
00002876  4243                    1919      CLR     D3
00002878  4242                    1920      CLR     D2
0000287A  1439 000031DB           1921      MOVE.B  DEST_MODE,D2
00002880  1639 000031DA           1922      MOVE.B  DEST_REG,D3
00002886  4EB9 00002B84           1923      JSR     EA_START
0000288C                          1924  
0000288C  6000 EA1A               1925      BRA     MEMORYGRABBER
00002890                          1926      
00002890                          1927  PRINT_DN_TO_EA    
00002890  4243                    1928      CLR     D3
00002892  4242                    1929      CLR     D2
00002894  1439 000031DB           1930      MOVE.B  DEST_MODE,D2
0000289A  1639 000031DD           1931      MOVE.B  SRC_REG,D3
000028A0  4EB9 00002B84           1932      JSR     EA_START
000028A6                          1933      
000028A6  4EB8 27C6               1934      JSR     PRINTCOMA   ; print coma
000028AA                          1935      
000028AA  13F9 000031DE 000031DC  1936      MOVE.B  TEMP_MODE,SRC_MODE
000028B4  13F9 000031DF 000031DD  1937      MOVE.B  TEMP_REG,SRC_REG
000028BE  4243                    1938      CLR     D3
000028C0  4242                    1939      CLR     D2
000028C2  1439 000031DC           1940      MOVE.B  SRC_MODE,D2
000028C8  1639 000031DD           1941      MOVE.B  SRC_REG,D3
000028CE  4EB9 00002B84           1942      JSR     EA_START
000028D4                          1943      
000028D4  6000 E9D2               1944      BRA     MEMORYGRABBER
000028D8                          1945  
000028D8                          1946  
000028D8                          1947                  ;PRINT EA/DN
000028D8                          1948  EADN 
000028D8  BE3C 0000               1949      CMP.B   #0,D7
000028DC  6700 0030               1950      BEQ     PRINTNOTRAIL
000028E0  BE3C 0001               1951      CMP.B   #1,D7
000028E4  6700 000E               1952      BEQ     PRINTONETRAIL 
000028E8  BE3C 0002               1953      CMP.B   #2,D7
000028EC  6700 0010               1954      BEQ     PRINTTWOTRAIL
000028F0                          1955      
000028F0  6000 E9B6               1956      BRA     MEMORYGRABBER
000028F4                          1957      
000028F4                          1958  PRINTONETRAIL 
000028F4  4EB9 00002B84           1959      JSR EA_Start
000028FA  6000 E9AC               1960      BRA MEMORYGRABBER
000028FE                          1961  
000028FE                          1962  PRINTTWOTRAIL 
000028FE  4EB9 00002B84           1963      JSR EA_Start
00002904  4EB9 00002B84           1964      JSR EA_Start
0000290A  6000 E99C               1965      BRA MEMORYGRABBER
0000290E                          1966      
0000290E                          1967  PRINTNOTRAIL 
0000290E  4EB9 00002B84           1968      JSR EA_Start
00002914  6000 E992               1969      BRA MEMORYGRABBER
00002918                          1970  
00002918                          1971  CLOSINGSTATEMENTS     
00002918  43F9 00003134           1972      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000291E  103C 000E               1973      MOVE.B   #14,D0     ; moves #14 into data register D0
00002922  4E4F                    1974      TRAP     #15       ; Displays message via trap 14
00002924                          1975     
00002924                          1976  STOP    
00002924  103C 0009               1977      MOVE.B #9,D0        ; moves #9 into data register D0
00002928  4E4F                    1978      TRAP     #15       ; halt simulator via trap 9
0000292A                          1979   
0000292A                          1980  
0000292A                          1981  
0000292A                          1982  
0000292A                          1983      
0000292A                          1984  ;----------------------------- ADDED THIS FOR OP CODE PART 
0000292A                          1985  ********* CHECK DESTINATION ***********
0000292A                          1986  CHECK_DESTINATION
0000292A  13FC 000F 000031F8      1987      MOVE.B  #$F,DstMode
00002932                          1988      
00002932  0C39 0007 000031DB      1989      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
0000293A  6700 0026               1990      BEQ     CHECK_DEST_REG             * Checks registers
0000293E                          1991      
0000293E  0C39 0005 000031DB      1992      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
00002946  6700 0058               1993      BEQ     R_CHECK_DEST    * Print DATA instead 
0000294A                          1994      
0000294A  0C39 0006 000031DB      1995      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002952  6700 004C               1996      BEQ     R_CHECK_DEST    * Print DATA instead
00002956                          1997      
00002956  13F9 000031DB 000031F8  1998      MOVE.B  DEST_MODE,DstMode
00002960  4E75                    1999      RTS
00002962                          2000  CHECK_DEST_REG
00002962  0C39 0002 000031DA      2001      CMP.B   #2,DEST_REG             * if DEST_REG = 010
0000296A  6700 0034               2002      BEQ     R_CHECK_DEST
0000296E                          2003  
0000296E  0C39 0003 000031DA      2004      CMP.B   #3,DEST_REG         * if DEST_REG = 011
00002976  6700 0028               2005      BEQ     R_CHECK_DEST
0000297A                          2006      
0000297A  0C39 0005 000031DA      2007      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002982  6C00 016C               2008      BGE     RETURN
00002986                          2009      
00002986  13F9 000031DB 000031F8  2010      MOVE.B  DEST_MODE,DstMode
00002990  4286                    2011      CLR.L   D6
00002992  1C39 000031DA           2012      MOVE.B  DEST_REG,D6
00002998  DD39 000031F8           2013      ADD.B   D6,DstMode
0000299E  4E75                    2014      RTS
000029A0                          2015  R_CHECK_DEST
000029A0  13FC 000E 000031F8      2016      MOVE.B  #$E,DstMode
000029A8  4E75                    2017      RTS
000029AA                          2018  ********* CHECK TEMP ***********
000029AA                          2019  CHECK_TEMP
000029AA                          2020  
000029AA  13FC 000F 000031F9      2021      MOVE.B  #$F,TempMode
000029B2                          2022      
000029B2  0C39 0007 000031DE      2023      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
000029BA  6700 0026               2024      BEQ     CHECK_TEMP_REG      * Checks registers
000029BE                          2025  
000029BE  0C39 0005 000031DE      2026      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
000029C6  6700 0058               2027      BEQ     R_CHECK_TEMP    * 
000029CA                          2028      
000029CA  0C39 0006 000031DE      2029      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
000029D2  6700 004C               2030      BEQ     R_CHECK_TEMP    * 
000029D6                          2031      
000029D6  13F9 000031DE 000031F9  2032      MOVE.B  TEMP_MODE,TempMode
000029E0  4E75                    2033      RTS
000029E2                          2034  CHECK_TEMP_REG
000029E2  0C39 0002 000031DF      2035      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
000029EA  6700 0034               2036      BEQ     R_CHECK_TEMP
000029EE                          2037  
000029EE  0C39 0003 000031DF      2038      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
000029F6  6700 0028               2039      BEQ     R_CHECK_TEMP
000029FA                          2040      
000029FA  0C39 0005 000031DF      2041      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002A02  6700 00EC               2042      BEQ     RETURN
00002A06                          2043      
00002A06  13F9 000031DE 000031F9  2044      MOVE.B  TEMP_MODE,TempMode
00002A10  4286                    2045      CLR.L   D6
00002A12  1C39 000031DF           2046      MOVE.B  TEMP_REG,D6
00002A18  DD39 000031F9           2047      ADD.B   D6,TempMode
00002A1E  4E75                    2048      RTS
00002A20                          2049  R_CHECK_TEMP
00002A20  13FC 000E 000031F9      2050      MOVE.B  #$E,TempMode
00002A28  4E75                    2051      RTS
00002A2A                          2052  ******************** CHECK_SOURCE ******************** 
00002A2A                          2053  CHECK_SOURCE    * TODO
00002A2A  13FC 000F 000031FA      2054      MOVE.B  #$F,SrcMode
00002A32                          2055      
00002A32  0C39 0007 000031DC      2056      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002A3A  6700 0026               2057      BEQ     CHECK_SOURCE_REG    * Checks registers
00002A3E                          2058  
00002A3E  0C39 0005 000031DC      2059      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
00002A46  6700 0058               2060      BEQ     R_CHECK_SOURCE 
00002A4A                          2061      
00002A4A  0C39 0006 000031DC      2062      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002A52  6700 004C               2063      BEQ     R_CHECK_SOURCE 
00002A56                          2064      
00002A56  13F9 000031DC 000031FA  2065      MOVE.B  SRC_MODE,SrcMode
00002A60  4E75                    2066      RTS
00002A62                          2067  CHECK_SOURCE_REG
00002A62  0C39 0002 000031DD      2068      CMP.B   #2,SRC_REG             * if RRRS = 010
00002A6A  6700 0034               2069      BEQ     R_CHECK_SOURCE
00002A6E                          2070  
00002A6E  0C39 0003 000031DD      2071      CMP.B   #3,SRC_REG          * if RRRS = 011
00002A76  6700 0028               2072      BEQ     R_CHECK_SOURCE
00002A7A                          2073      
00002A7A  0C39 0005 000031DD      2074      CMP.B   #5,SRC_REG      * if RRRS = 101
00002A82  6C00 006C               2075      BGE     RETURN
00002A86                          2076      
00002A86  13F9 000031DC 000031FA  2077      MOVE.B  SRC_MODE,SrcMode
00002A90  4286                    2078      CLR.L   D6
00002A92  1C39 000031DD           2079      MOVE.B  SRC_REG,D6
00002A98  DD39 000031FA           2080      ADD.B   D6,SrcMode
00002A9E  4E75                    2081      RTS
00002AA0                          2082  R_CHECK_SOURCE
00002AA0  13FC 000E 000031FA      2083      MOVE.B  #$E,SrcMode
00002AA8  4E75                    2084      RTS
00002AAA                          2085  ******************** XBIT ********************
00002AAA                          2086  CHECK_XBIT      
00002AAA  0C39 0000 000031F6      2087      CMP.B   #%0,XBit
00002AB2  6700 0008               2088      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002AB6  6600 001E               2089      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002ABA  4E75                    2090      RTS
00002ABC                          2091  TEMP_TO_DEST
00002ABC  13F9 000031DF 000031DA  2092      MOVE.B  TEMP_REG,DEST_REG
00002AC6  13F9 000031DE 000031DB  2093      MOVE.B  TEMP_MODE,DEST_MODE
00002AD0  4EB8 292A               2094      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002AD4  4E75                    2095      RTS
00002AD6                          2096  TEMP_TO_SRC
00002AD6  13F9 000031DF 000031DD  2097      MOVE.B  TEMP_REG,SRC_REG
00002AE0  13F9 000031DE 000031DC  2098      MOVE.B  TEMP_MODE,SRC_MODE
00002AEA  4EB8 2A2A               2099      JSR     CHECK_SOURCE                 
00002AEE  4E75                    2100      RTS
00002AF0                          2101    
00002AF0                          2102  ******************** OTHER COMMANDS ********************
00002AF0                          2103  RETURN
00002AF0  4E75                    2104      RTS
00002AF2                          2105  
00002AF2                          2106  FORMAT_DATA
00002AF2  0C39 0000 000031E0      2107      CMP.B   #0,DATA_FIELD
00002AFA  66F4                    2108      BNE     RETURN
00002AFC  13FC 0008 000031E0      2109      MOVE.B  #8,DATA_FIELD
00002B04  4E75                    2110      RTS
00002B06                          2111  
00002B06                          2112  CHECK_DATA_NEG
00002B06  BC3C 0080               2113      CMP.B   #128,D6
00002B0A  6700 FCE2               2114      BEQ     PRINTNEG
00002B0E  4E75                    2115      RTS
00002B10                          2116      
00002B10                          2117      
00002B10                          2118  SET_INVALID_EA
00002B10  13FC 0001 000031F7      2119      MOVE.B  #%1,INVALID_EA 
00002B18                          2120      
00002B18                          2121  CLEARMR
00002B18  13FC 0000 000031DA      2122      MOVE.B  #0,DEST_REG 
00002B20  13FC 0000 000031DB      2123      MOVE.B  #0,DEST_MODE
00002B28  13FC 0000 000031DC      2124      MOVE.B  #0,SRC_MODE
00002B30  13FC 0000 000031DD      2125      MOVE.B  #0,SRC_REG
00002B38  13FC 0000 000031DE      2126      MOVE.B  #0,TEMP_MODE
00002B40  13FC 0000 000031DF      2127      MOVE.B  #0,TEMP_REG 
00002B48  13FC 0000 000031E4      2128      MOVE.B  #0,SIZE
00002B50  13FC 0000 000031CA      2129      MOVE.B  #0,SizeValue
00002B58  23FC 00000000 000031E0  2130      MOVE.L  #0,DATA_FIELD
00002B62  13FC 0000 000031F7      2131      MOVE.B  #0,INVALID_EA
00002B6A  23FC 00000000 000031C6  2132      MOVE.L  #0,COMMANDDATA
00002B74  7200                    2133      MOVE.L #0,D1
00002B76  7400                    2134      MOVE.L #0,D2
00002B78  7600                    2135      MOVE.L #0,D3
00002B7A  7800                    2136      MOVE.L #0,D4
00002B7C  7A00                    2137      MOVE.L #0,D5
00002B7E  7C00                    2138      MOVE.L #0,D6
00002B80  7E00                    2139      MOVE.L #0,D7
00002B82  4E75                    2140      RTS  
00002B84                          2141  
00002B84                          2142  *************    
00002B84                          2143  
00002B84                          2144  *******************************************************
00002B84                          2145  * EA subroutine
00002B84                          2146  * Purpose: Generate EA
00002B84                          2147  *         Addresses used: 
00002B84                          2148  *            D2 FOR MODE
00002B84                          2149  *            D3 FOR REGISTER
00002B84                          2150  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002B84                          2151  *            D1 FOR PRINTING
00002B84                          2152  *            A6 MIMICKS INSTRUCTION BUFFER
00002B84                          2153  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002B84                          2154  ***************************************************
00002B84                          2155  
00002B84  0C39 000F 000031FB      2156  EA_start        CMP.B      #$F,STATE
00002B8C  6700 0352               2157                  BEQ        EA_FINISH
00002B90  4EF9 00002EE2           2158                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002B96                          2159  
00002B96  B47C 0000               2160  Continue_EA     CMP.W       #MODE000,D2             
00002B9A  6700 0036               2161                  BEQ         DATA_REGISTER                 
00002B9E  B47C 0001               2162                  CMP.W       #MODE001,D2               
00002BA2  6700 004A               2163                  BEQ         ADDRESS_REGISTER                 
00002BA6  B47C 0002               2164                  CMP.W       #MODE010,D2              
00002BAA  6700 005E               2165                  BEQ         ADDRESS_REGISTER_DIRECT               
00002BAE  B47C 0003               2166                  CMP.W       #MODE011,D2              
00002BB2  6700 007A               2167                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002BB6  B47C 0004               2168                  CMP.W       #MODE100,D2          
00002BBA  6700 009A               2169                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002BBE  B47C 0007               2170                  CMP.W       #MODE111,D2          
00002BC2  6700 00BA               2171                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002BC6  13FC 0001 000031FB      2172                  MOVE.B      #BAD_FLAG,STATE               
00002BCE  6000 0310               2173                  BRA         EA_FINISH              
00002BD2                          2174                  
00002BD2                          2175  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002BD2  123C 0044               2176                  MOVE.B   #D,D1
00002BD6  103C 0006               2177                  MOVE.B  #6,D0
00002BDA  4E4F                    2178                  TRAP    #15
00002BDC  0685 00000030           2179                  ADDI.L   #$30,D5
00002BE2  1205                    2180                  MOVE.B   D5,D1
00002BE4  103C 0006               2181                  MOVE.B  #6,D0
00002BE8  4E4F                    2182                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002BEA  6000 02F4               2183                  BRA      EA_FINISH
00002BEE                          2184                      
00002BEE                          2185  
00002BEE  123C 0041               2186  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002BF2  103C 0006               2187                   MOVE.B  #6,D0
00002BF6  4E4F                    2188                   TRAP    #15
00002BF8  0685 00000030           2189                   ADDI.L   #$30,D5
00002BFE  1205                    2190                   MOVE.B   D5,D1
00002C00  103C 0006               2191                   MOVE.B  #6,D0
00002C04  4E4F                    2192                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C06  6000 02D8               2193                   BRA      EA_FINISH
00002C0A                          2194  
00002C0A                          2195                   
00002C0A                          2196  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002C0A  4EB8 280A               2197                          JSR     PRINTOPEN   
00002C0E  123C 0041               2198                          MOVE.B   #A,D1
00002C12  103C 0006               2199                          MOVE.B  #6,D0
00002C16  4E4F                    2200                          TRAP    #15
00002C18  0685 00000030           2201                          ADDI.L   #$30,D5
00002C1E  1205                    2202                          MOVE.B   D5,D1
00002C20  103C 0006               2203                          MOVE.B  #6,D0
00002C24  4E4F                    2204                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C26  4EB8 2818               2205                          JSR     PRINTCLOSED
00002C2A  6000 02B4               2206                          BRA      EA_FINISH
00002C2E                          2207  
00002C2E                          2208  
00002C2E                          2209  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002C2E  4EB8 280A               2210                             JSR     PRINTOPEN
00002C32  123C 0041               2211                             MOVE.B   #A,D1
00002C36  103C 0006               2212                             MOVE.B  #6,D0
00002C3A  4E4F                    2213                             TRAP    #15
00002C3C  0685 00000030           2214                             ADDI.L   #$30,D5
00002C42  1205                    2215                             MOVE.B   D5,D1
00002C44  103C 0006               2216                             MOVE.B  #6,D0
00002C48  4E4F                    2217                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C4A  4EB8 2818               2218                             JSR     PRINTCLOSED
00002C4E  4EB8 27FC               2219                             JSR      PRINTPLUS
00002C52  6000 028C               2220                             BRA      EA_FINISH
00002C56                          2221  
00002C56                          2222  
00002C56                          2223  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002C56  4EB8 27EE               2224                             JSR      PRINTNEG
00002C5A  4EB8 280A               2225                             JSR     PRINTOPEN
00002C5E  123C 0041               2226                             MOVE.B   #A,D1
00002C62  103C 0006               2227                             MOVE.B  #6,D0
00002C66  4E4F                    2228                             TRAP    #15
00002C68  0685 00000030           2229                             ADDI.L   #$30,D5
00002C6E  1205                    2230                             MOVE.B   D5,D1
00002C70  103C 0006               2231                             MOVE.B  #6,D0
00002C74  4E4F                    2232                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C76  4EB8 2818               2233                             JSR     PRINTCLOSED
00002C7A  6000 0264               2234                             BRA      EA_FINISH
00002C7E                          2235  
00002C7E                          2236  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002C7E  6000 0002               2237                                BRA  CONTINUE_A_I_A
00002C82                          2238                                
00002C82                          2239                                
00002C82                          2240  CONTINUE_A_I_A                
00002C82  BA3C 0004               2241                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002C86  6700 001E               2242                                BEQ         IMMIDIATE_REGISTER                
00002C8A  BA3C 0000               2243                                CMP.B       #0,D5                ; WORD ADDRESSING
00002C8E  6700 0042               2244                                BEQ         WORD_ADDRESSING                
00002C92  BA3C 0001               2245                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002C96  6700 0048               2246                                BEQ         LONG_ADDRESSING              
00002C9A  13FC 0001 000031FB      2247                                MOVE.B      #BAD_FLAG,STATE              
00002CA2  6000 023C               2248                                BRA         EA_FINISH                * jump to end   
00002CA6                          2249                                
00002CA6                          2250                                
00002CA6  4EB8 27D4               2251  IMMIDIATE_REGISTER            JSR     PRINTHASH   * print hashtag
00002CAA  0C39 0001 000031E4      2252                                CMP.B #1,SIZE   ;BYTE
00002CB2  6700 003A               2253                                BEQ   GETBYTE
00002CB6  0C39 0002 000031E4      2254                                CMP.B #2,SIZE   ;BYTE
00002CBE  6700 0038               2255                                BEQ   GETWORD
00002CC2  0C39 0003 000031E4      2256                                CMP.B #3,SIZE   ;BYTE
00002CCA  6700 0036               2257                                BEQ   GETLONG
00002CCE  6000 0032               2258                                BRA   GETLONG
00002CD2                          2259                                
00002CD2                          2260  
00002CD2  4EB8 27E0               2261  WORD_ADDRESSING              JSR    PRINTDOLLARSIGN
00002CD6  3E1E                    2262                               MOVE.W  (A6)+,D7
00002CD8  6000 00B2               2263                               BRA   PRINT_WORD
00002CDC  6000 0202               2264                               BRA   EA_FINISH
00002CE0                          2265  
00002CE0  4EB8 27E0               2266  LONG_ADDRESSING              JSR    PRINTDOLLARSIGN
00002CE4  2E1E                    2267                               MOVE.L  (A6)+,D7
00002CE6  6000 0122               2268                               BRA   PRINT_LONG
00002CEA  6000 01F4               2269                               BRA   EA_FINISH                            
00002CEE                          2270  
00002CEE                          2271  GETBYTE      
00002CEE  1E1E                    2272                  MOVE.B   (A6)+,D7    
00002CF0  6B00 001A               2273                  BMI     ADD_NEGATIVE
00002CF4  6000 001E               2274                  BRA     PRINT_BRANCHING
00002CF8                          2275  GETWORD                
00002CF8  3E1E                    2276                  MOVE.W   (A6)+,D7
00002CFA  6B00 0010               2277                  BMI     ADD_NEGATIVE
00002CFE  6000 0014               2278                  BRA     PRINT_BRANCHING
00002D02                          2279  GETLONG                
00002D02                          2280                  
00002D02  2E1E                    2281                  MOVE.L   (A6)+,D7
00002D04  6B00 0006               2282                  BMI     ADD_NEGATIVE
00002D08  6000 000A               2283                  BRA     PRINT_BRANCHING
00002D0C                          2284                  
00002D0C  4EB8 27EE               2285  ADD_NEGATIVE    JSR     PRINTNEG
00002D10  6000 0002               2286                  BRA    PRINT_BRANCHING
00002D14                          2287  
00002D14                          2288  
00002D14  0C39 0001 000031E4      2289  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002D1C  6700 001C               2290                  BEQ    PRINT_BYTE    
00002D20  0C39 0002 000031E4      2291                  CMP.B #2,SIZE   ;WORD
00002D28  6700 0062               2292                  BEQ    PRINT_WORD
00002D2C  0C39 0003 000031E4      2293                  CMP.B  #3,SIZE  ;LONG
00002D34  6700 00D4               2294                  BEQ    PRINT_LONG
00002D38  60DA                    2295                  BRA    PRINT_BRANCHING
00002D3A                          2296  
00002D3A                          2297  
00002D3A                          2298  
00002D3A                          2299  
00002D3A                          2300                  
00002D3A                          2301  **** BYTE DATA PRINTING***********************
00002D3A  4241                    2302  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002D3C                          2303                 
00002D3C                          2304  
00002D3C  BEBC 0000000F           2305                 CMP.L   #$F,D7              
00002D42  6F00 0006               2306                 BLE     BYTE_ONE_LOOP                  
00002D46  6000 000E               2307                 BRA     READ_BYTE
00002D4A                          2308  
00002D4A                          2309  BYTE_ONE_LOOP
00002D4A  13FC 0001 00003216      2310                  MOVE.B  #1,NUMBER_OF_HEX  
00002D52  6000 0002               2311                  BRA     READ_BYTE
00002D56                          2312      
00002D56                          2313  READ_BYTE                           
00002D56  0C39 0000 00003216      2314      CMP.B   #0,NUMBER_OF_HEX               
00002D5E  6700 0014               2315      BEQ     COPYBYTE
00002D62                          2316      
00002D62  123C 0030               2317      MOVE.B  #$30,D1             
00002D66  103C 0006               2318      MOVE.B  #6,D0               
00002D6A  4E4F                    2319      TRAP    #15
00002D6C                          2320  
00002D6C  5339 00003216           2321      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002D72  60E2                    2322      BRA     READ_BYTE           ; LOOP
00002D74                          2323      
00002D74                          2324  COPYBYTE
00002D74  2207                    2325      MOVE.L  D7,D1               ; COPY DATA 
00002D76  143C 0010               2326      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002D7A  103C 000F               2327      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002D7E  4E4F                    2328      TRAP    #15
00002D80  13FC 0000 00003216      2329      MOVE.B  #0,NUMBER_OF_HEX
00002D88  6000 0156               2330      BRA  EA_FINISH
00002D8C                          2331  
00002D8C                          2332  
00002D8C                          2333  
00002D8C                          2334  
00002D8C                          2335  
00002D8C                          2336  ******PRINT WORD DATA******************
00002D8C  4241                    2337  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002D8E                          2338                 
00002D8E                          2339  
00002D8E  BEBC 0000000F           2340                 CMP.L   #$F,D7              
00002D94  6F00 001A               2341                 BLE     WORD_ONE_LOOP
00002D98  BEBC 000000FF           2342                 CMP.L   #$FF,D7              
00002D9E  6F00 001C               2343                 BLE     WORD_TWO_LOOP
00002DA2  BEBC 00000FFF           2344                 CMP.L   #$FFF,D7              
00002DA8  6F00 001E               2345                 BLE     WORD_THREE_LOOP                  
00002DAC  6000 0026               2346                 BRA     READ_WORD
00002DB0                          2347  
00002DB0                          2348  WORD_ONE_LOOP
00002DB0  13FC 0001 00003216      2349                  MOVE.B  #1,NUMBER_OF_HEX  
00002DB8  6000 001A               2350                  BRA     READ_WORD
00002DBC                          2351                  
00002DBC                          2352  WORD_TWO_LOOP
00002DBC  13FC 0002 00003216      2353                  MOVE.B  #2,NUMBER_OF_HEX  
00002DC4  6000 000E               2354                  BRA     READ_WORD
00002DC8                          2355                  
00002DC8                          2356  WORD_THREE_LOOP
00002DC8  13FC 0003 00003216      2357                  MOVE.B  #3,NUMBER_OF_HEX  
00002DD0  6000 0002               2358                  BRA     READ_WORD                
00002DD4                          2359      
00002DD4                          2360  READ_WORD                           
00002DD4  0C39 0000 00003216      2361      CMP.B   #0,NUMBER_OF_HEX               
00002DDC  6700 0014               2362      BEQ     COPYWORD
00002DE0                          2363      
00002DE0  123C 0030               2364      MOVE.B  #$30,D1             
00002DE4  103C 0006               2365      MOVE.B  #6,D0               
00002DE8  4E4F                    2366      TRAP    #15
00002DEA                          2367  
00002DEA  5339 00003216           2368      SUBI.B  #1,NUMBER_OF_HEX              
00002DF0  60E2                    2369      BRA     READ_WORD                   ; LOOP
00002DF2                          2370  
00002DF2                          2371  COPYWORD
00002DF2  2207                    2372      MOVE.L  D7,D1               ; COPY DATA 
00002DF4  143C 0010               2373      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002DF8  103C 000F               2374      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002DFC  4E4F                    2375      TRAP    #15
00002DFE  13FC 0000 00003216      2376      MOVE.B  #0,NUMBER_OF_HEX
00002E06  6000 00D8               2377      BRA  EA_FINISH
00002E0A                          2378  
00002E0A                          2379  ****************PRINT LONG DATA*****************
00002E0A  4241                    2380  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00002E0C                          2381                 
00002E0C                          2382  
00002E0C  BEBC 0000000F           2383                 CMP.L   #$F,D7              
00002E12  6F00 0042               2384                 BLE     LONG_ONE_LOOP
00002E16  BEBC 000000FF           2385                 CMP.L   #$FF,D7              
00002E1C  6F00 0044               2386                 BLE     LONG_TWO_LOOP
00002E20  BEBC 00000FFF           2387                 CMP.L   #$FFF,D7              
00002E26  6F00 0046               2388                 BLE     LONG_THREE_LOOP
00002E2A  BEBC 0000FFFF           2389                 CMP.L   #$FFFF,D7              
00002E30  6F00 0048               2390                 BLE     LONG_FOUR_LOOP
00002E34  BEBC 000FFFFF           2391                 CMP.L   #$FFFFF,D7              
00002E3A  6F00 004A               2392                 BLE     LONG_FIVE_LOOP
00002E3E  BEBC 00FFFFFF           2393                 CMP.L   #$FFFFFF,D7              
00002E44  6F00 004C               2394                 BLE     LONG_SIX_LOOP
00002E48  BEBC 0FFFFFFF           2395                 CMP.L   #$FFFFFFF,D7              
00002E4E  6F00 004E               2396                 BLE     LONG_SEVEN_LOOP                  
00002E52  6000 0056               2397                 BRA     READ_LONG
00002E56                          2398  
00002E56                          2399  LONG_ONE_LOOP
00002E56  13FC 0001 00003216      2400                  MOVE.B  #1,NUMBER_OF_HEX  
00002E5E  6000 004A               2401                  BRA     READ_LONG
00002E62                          2402                  
00002E62                          2403  LONG_TWO_LOOP
00002E62  13FC 0002 00003216      2404                  MOVE.B  #2,NUMBER_OF_HEX  
00002E6A  6000 003E               2405                  BRA     READ_LONG
00002E6E                          2406                  
00002E6E                          2407  LONG_THREE_LOOP
00002E6E  13FC 0003 00003216      2408                  MOVE.B  #3,NUMBER_OF_HEX  
00002E76  6000 0032               2409                  BRA     READ_LONG                
00002E7A                          2410  LONG_FOUR_LOOP
00002E7A  13FC 0004 00003216      2411                  MOVE.B  #4,NUMBER_OF_HEX  
00002E82  6000 0026               2412                  BRA     READ_LONG
00002E86                          2413                  
00002E86                          2414  LONG_FIVE_LOOP
00002E86  13FC 0005 00003216      2415                  MOVE.B  #5,NUMBER_OF_HEX  
00002E8E  6000 001A               2416                  BRA     READ_LONG
00002E92                          2417                  
00002E92                          2418  LONG_SIX_LOOP
00002E92  13FC 0006 00003216      2419                  MOVE.B  #6,NUMBER_OF_HEX  
00002E9A  6000 000E               2420                  BRA     READ_LONG
00002E9E                          2421  LONG_SEVEN_LOOP
00002E9E  13FC 0007 00003216      2422                  MOVE.B  #7,NUMBER_OF_HEX  
00002EA6  6000 0002               2423                  BRA     READ_LONG
00002EAA                          2424  
00002EAA                          2425       
00002EAA                          2426  READ_LONG                           
00002EAA  0C39 0000 00003216      2427      CMP.B   #0,NUMBER_OF_HEX               
00002EB2  6700 0014               2428      BEQ     COPYLONG
00002EB6  123C 0030               2429      MOVE.B  #$30,D1             
00002EBA  103C 0006               2430      MOVE.B  #6,D0               
00002EBE  4E4F                    2431      TRAP    #15
00002EC0                          2432  
00002EC0  5339 00003216           2433      SUBI.B  #1,NUMBER_OF_HEX               
00002EC6  60E2                    2434      BRA     READ_LONG                   ; LOOP
00002EC8                          2435  
00002EC8                          2436  COPYLONG
00002EC8  2207                    2437      MOVE.L  D7,D1               ; COPY DATA 
00002ECA  143C 0010               2438      MOVE.B  #16,D2              ; USIGN BASE TO 16
00002ECE  103C 000F               2439      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002ED2  4E4F                    2440      TRAP    #15
00002ED4  13FC 0000 00003216      2441      MOVE.B  #0,NUMBER_OF_HEX
00002EDC  6000 0002               2442      BRA  EA_FINISH
00002EE0                          2443  
00002EE0                          2444    
00002EE0                          2445  
00002EE0  4E75                    2446  EA_FINISH      RTS
00002EE2                          2447  
00002EE2                          2448  
00002EE2                          2449  
00002EE2                          2450  
00002EE2                          2451  ************************************************
00002EE2                          2452  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
00002EE2                          2453  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
00002EE2                          2454  ************************************************
00002EE2                          2455  REGISTER_NUMBER_TO_DECIMAL 
00002EE2  B67C 0000               2456                             CMP.W       #REG_0,D3
00002EE6  6700 0046               2457                             BEQ         RG0
00002EEA  B67C 0001               2458                             CMP.W       #REG_1,D3
00002EEE  6700 0046               2459                             BEQ         RG1
00002EF2  B67C 0002               2460                             CMP.W       #REG_2,D3
00002EF6  6700 0046               2461                             BEQ         RG2
00002EFA  B67C 0003               2462                             CMP.W       #REG_3,D3
00002EFE  6700 0046               2463                             BEQ         RG3
00002F02  B67C 0004               2464                             CMP.W       #REG_4,D3
00002F06  6700 0046               2465                             BEQ         RG4
00002F0A  B67C 0005               2466                             CMP.W       #REG_5,D3
00002F0E  6700 0046               2467                             BEQ         RG5
00002F12  B67C 0006               2468                             CMP.W       #REG_6,D3
00002F16  6700 0046               2469                             BEQ         RG6
00002F1A  B67C 0007               2470                             CMP.W       #REG_7,D3
00002F1E  6700 0046               2471                             BEQ         RG7
00002F22  13FC 0001 000031FB      2472                             MOVE.B      #BAD_FLAG,STATE
00002F2A  4EF8 2B96               2473                             JMP         CONTINUE_EA
00002F2E                          2474   
00002F2E  1A3C 0000               2475  RG0    MOVE.B   #0,D5
00002F32  4EF8 2B96               2476         JMP      Continue_EA
00002F36  1A3C 0001               2477  RG1    MOVE.B   #1,D5
00002F3A  4EF8 2B96               2478         JMP      Continue_EA
00002F3E  1A3C 0002               2479  RG2    MOVE.B   #2,D5
00002F42  4EF8 2B96               2480         JMP      Continue_EA
00002F46  1A3C 0003               2481  RG3    MOVE.B   #3,D5
00002F4A  4EF8 2B96               2482         JMP      Continue_EA
00002F4E  1A3C 0004               2483  RG4    MOVE.B   #4,D5
00002F52  4EF8 2B96               2484         JMP      Continue_EA
00002F56  1A3C 0005               2485  RG5    MOVE.B   #5,D5
00002F5A  4EF8 2B96               2486         JMP      Continue_EA
00002F5E  1A3C 0006               2487  RG6    MOVE.B   #6,D5
00002F62  4EF8 2B96               2488         JMP      Continue_EA
00002F66  1A3C 0007               2489  RG7    MOVE.B   #7,D5
00002F6A  4EF8 2B96               2490         JMP      Continue_EA 
00002F6E                          2491      
00002F6E                          2492  ;------------------------------------------------
00002F6E                          2493      
00002F6E                          2494  Float   DS.L 1 #0
00002F72                          2495  
00002F72                          2496  ValOne    DS.B 1 #0
00002F73                          2497  ValTwo    DS.B 1 #0
00002F74                          2498  ValThree    DS.B 1 #0
00002F75                          2499  ValFour    DS.B 1 #0
00002F76                          2500  ValFive    DS.B 1 #0
00002F77                          2501  ValSix    DS.B 1 #0
00002F78                          2502  ValSeven    DS.B 1 #0
00002F79                          2503  ValEight    DS.B 1 #0
00002F7A                          2504  
00002F7A                          2505  Addsum DS.W 1 #0
00002F7C                          2506  CarryBit DS.B 1 #0   
00002F7D                          2507  
00002F7D                          2508  Trailers DS.B 1 #0
00002F7E                          2509  Source DS.L 1 #0
00002F82                          2510  Destination DS.L 1 #0
00002F86                          2511  
00002F86                          2512          ;generic command lines
00002F86= 57 65 6C 63 6F 6D ...   2513  WELCOME DC.B 'Welcome to our decoder',CR,LF,0
00002F9F= 50 6C 65 61 73 65 ...   2514  USERPAGEBREAK DC.B 'Please Press enter to see next 25 codes',0
00002FC7= 4E 75 6D 62 65 72 ...   2515  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
00002FF3= 53 65 63 6F 6E 64 ...   2516  OUTOFORDER DC.B    'Second Num lower than the first Num, please reenter second Num',CR,LF,0
00003034= 50 6C 65 61 73 65 ...   2517  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory address, perferablly in 8 byte form: ',0 
00003077= 50 6C 65 61 73 65 ...   2518  MESSAGESECONDADRESS DC.B    'Please enter ending memory address, perferablly in 8 byte form: ',0 
000030B8= 59 6F 75 20 68 61 ...   2519  FINALMESSAGE1    DC.B    'You have reached the end of the program',CR,LF,0
000030E2= 50 6C 65 61 73 65 ...   2520  FINALMESSAGE2    DC.B    'Please enter 0 to exit, or 1 to restart: ',0
0000310C= 45 78 69 74 69 6E ...   2521  GOODBYEMESSAGE    DC.B    'Exiting, have a good rest of your day',CR,LF,0
00003134= 20 0D 0A 00             2522  CLEAR DC.B      ' ',CR,LF,0
00003138                          2523  
00003138                          2524          ;the collection of actual command lines to print
00003138                          2525  CommandPrinter    DS.B 1 #0
00003139                          2526  CommandDetail    DS.B 1 #0
0000313A= 4D 4F 56 45 00          2527  PMOVE DC.B      'MOVE',0
0000313F= 4D 4F 56 45 4D 00       2528  PMOVEM DC.B      'MOVEM',0
00003145= 4D 4F 56 45 41 00       2529  PMOVEA DC.B      'MOVEA',0
0000314B= 4D 4F 56 45 51 00       2530  PMOVEQ DC.B      'MOVEQ',0
00003151= 4E 4F 50 00             2531  PNOP DC.B      'NOP',0
00003155= 4C 45 41 00             2532  PLEA DC.B      'LEA',0
00003159= 4E 4F 54 00             2533  PNOT DC.B      'NOT',0
0000315D= 4A 53 52 00             2534  PJSR DC.B      'JSR',0
00003161= 52 54 53 00             2535  PRTS DC.B      'RTS',0
00003165= 42 47 54 00             2536  PBGT DC.B      'BGT',0
00003169= 42 45 51 00             2537  PBEQ DC.B      'BEQ',0
0000316D= 42 4C 45 00             2538  PBLE DC.B      'BLE',0
00003171= 42 52 41 00             2539  PBRA DC.B      'BRA',0
00003175= 4F 52 00                2540  POR DC.B      'OR',0
00003178= 53 55 42 00             2541  PSUB DC.B      'SUB',0
0000317C= 41 4E 44 00             2542  PAND DC.B      'AND',0
00003180= 41 44 44 00             2543  PADD DC.B      'ADD',0
00003184= 41 44 44 41 00          2544  PADDA DC.B      'ADDA',0
00003189= 41 44 44 51 00          2545  PADDQ DC.B      'ADDQ',0
0000318E= 4C 53 4C 00             2546  PLSL DC.B      'LSL',0
00003192= 4C 53 52 00             2547  PLSR DC.B      'LSR',0
00003196= 41 53 52 00             2548  PASR DC.B      'ASR',0
0000319A= 41 53 4C 00             2549  PASL DC.B      'ASL',0
0000319E= 52 4F 4C 00             2550  PROL DC.B      'ROL',0
000031A2= 52 4F 52 00             2551  PROR DC.B      'ROR',0
000031A6                          2552  
000031A6= 44 41 54 41 00          2553  PDATA   DC.B    'DATA',0
000031AB= 49 4E 56 41 4C 49 ...   2554  PINVALIDEA  DC.B    'INVALID EA',0
000031B6                          2555  
000031B6= 00                      2556  INPUT   DC.B    0
000031B7                          2557  
000031B8= 00000000                2558  STARTINGADDRESS     DC.L 0
000031BC= 00000000                2559  CURRENTADDRESS      DC.L 0
000031C0= 00000000                2560  ENDINGADDRESS       DC.L 0
000031C4= 0000                    2561  CYCLECOUNTER        DC.W 0
000031C6= 0000                    2562  COMMANDDATA         DC.W 0
000031C8= 00                      2563  Bits                DC.B 0
000031C9                          2564  
000031C9                          2565          ;the sizes to print
000031CA                          2566  SizeValue           DS.L 1 #0
000031CE= 2E 42 20 00             2567  PB DC.B      '.B ',0
000031D2= 2E 57 20 00             2568  PW DC.B      '.W ',0
000031D6= 2E 4C 20 00             2569  PL DC.B      '.L ',0
000031DA                          2570  
000031DA                          2571  ;----- ADDED FOR THE OP CODE PART
000031DA                          2572  
000031DA= 00                      2573  DEST_REG        DC.B    0
000031DB= 00                      2574  DEST_MODE       DC.B    0
000031DC                          2575  
000031DC= 00                      2576  SRC_MODE        DC.B    0
000031DD= 00                      2577  SRC_REG         DC.B    0
000031DE                          2578  
000031DE= 00                      2579  TEMP_MODE       DC.B    0
000031DF= 00                      2580  TEMP_REG        DC.B    0
000031E0                          2581  
000031E0                          2582  DATA_FIELD      DS.L    1 #0
000031E4= 00                      2583  SIZE            DC.B    0
000031E5                          2584  
000031E5= 20 00                   2585  CLRSPOT         DC.B    ' ',0
000031E7= 23 00                   2586  HASH            DC.B    '#',0
000031E9= 24 00                   2587  DOLLARSIGN      DC.B    '$',0
000031EB= 2C 00                   2588  COMA            DC.B    ',',0
000031ED= 2B 00                   2589  PLUS            DC.B    '+',0
000031EF= 2D 00                   2590  NEG             DC.B    '-',0
000031F1= 28 00                   2591  OPEN            DC.B    '(',0
000031F3= 29 00                   2592  CLOSED          DC.B    ')',0
000031F5                          2593  
000031F5= 00                      2594  INDEX           DC.B    0
000031F6                          2595  
000031F6= 00                      2596  XBIT            DC.B    0
000031F7= 00                      2597  INVALID_EA      DC.B    0
000031F8                          2598  
000031F8= 00                      2599  DstMode         DC.B    0
000031F9= 00                      2600  TempMode        DC.B    0
000031FA= 00                      2601  SrcMode         DC.B    0
000031FB                          2602  
000031FB                          2603  ;------ ADDED FOR EA CODE PART
000031FB                          2604  
000031FB  =00000000               2605  REG_0  EQU         %000
000031FB  =00000001               2606  REG_1  EQU         %001
000031FB  =00000002               2607  REG_2  EQU         %010
000031FB  =00000003               2608  REG_3  EQU         %011
000031FB  =00000004               2609  REG_4  EQU         %100
000031FB  =00000005               2610  REG_5  EQU         %101
000031FB  =00000006               2611  REG_6  EQU         %110
000031FB  =00000007               2612  REG_7  EQU         %111
000031FB                          2613  
000031FB  =00000000               2614  MODE000       EQU         %000                   * MODE Dn
000031FB  =00000001               2615  MODE001       EQU         %001                   * MODE An
000031FB  =00000002               2616  MODE010       EQU         %010                   * MODE (An)
000031FB  =00000003               2617  MODE011       EQU         %011                   * MODE (An)+
000031FB  =00000004               2618  MODE100       EQU         %100                   * MODE -(An)
000031FB  =00000007               2619  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
000031FB                          2620  
000031FB= 00                      2621  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
000031FC  =00000001               2622  BAD_FLAG      EQU         1
000031FC= 00008000                2623  word          DC.L        $8000
00003200                          2624  SIZE_IL       DS.L        1             ;SIZE ISOLATION
00003204                          2625  DR            DS.L        1             ;DIRECTION ISOLATION
00003208                          2626  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
0000320C                          2627  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
00003210                          2628  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
00003214                          2629  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
00003215                          2630  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
00003216= 00                      2631  NUMBER_OF_HEX DC.B        0
00003217                          2632  dRG           DS.B        1
00003218                          2633  dMODE         DS.B        1
00003219                          2634  sRG           DS.B        1
0000321A                          2635  
0000321A= 00000100                2636  print_buffer  DC.l       $100
0000321E                          2637  
0000321E                          2638  ***** ASCII VALUES FOR EA CHARACTERS**************
0000321E  =00000044               2639  D                       EQU      $44
0000321E  =00000041               2640  A                       EQU      $41
0000321E                          2641  
0000321E                          2642      
0000321E                          2643      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2C7E
ADDRESS_REGISTER    2BEE
ADDRESS_REGISTER_DECREMENT  2C56
ADDRESS_REGISTER_DIRECT  2C0A
ADDRESS_REGISTER_INCREMENT  2C2E
ADDSUM              2F7A
ADD_NEGATIVE        2D0C
BADVAL              2FC7
BAD_FLAG            1
BITS                31C8
BYTE_ONE_LOOP       2D4A
CARRYBIT            2F7C
CHAR1               1178
CHAR2               1190
CHARSUB             11A8
CHECK_ADD           1806
CHECK_ADDA          1822
CHECK_ADDQ          16A6
CHECK_AND           19BC
CHECK_DATA_NEG      2B06
CHECK_DESTINATION   292A
CHECK_DEST_REG      2962
CHECK_ID_AS         1E5A
CHECK_ID_LS         1E7A
CHECK_ID_RO         1E6A
CHECK_JSR           1624
CHECK_LEA           144E
CHECK_MOVEM_1000    154A
CHECK_MOVEM_1100    15FC
CHECK_MOVEQ         185A
CHECK_NOP_JSR_RTS   1604
CHECK_NOP_RTS       1686
CHECK_NOT           14D2
CHECK_OR            18B8
CHECK_SOURCE        2A2A
CHECK_SOURCE_REG    2A62
CHECK_SUB           193A
CHECK_TEMP          29AA
CHECK_TEMP_REG      29E2
CHECK_XBIT          2AAA
CLEAR               3134
CLEARMR             2B18
CLOSED              31F3
CLOSINGSTATEMENTS   2918
CLRSPOT             31E5
COMA                31EB
COMMANDDATA         31C6
COMMANDDETAIL       3139
COMMANDPRINTER      3138
COMPARE_0100        1416
COMPARE_0110        1742
COMPARE_1101        1772
COMPARE_1110        1A4A
COMPARE_GROUPS      13B2
CONTINUE_A_I_A      2C82
CONTINUE_EA         2B96
COPYBYTE            2D74
COPYLONG            2EC8
COPYWORD            2DF2
CR                  D
CURRENTADDRESS      31BC
CYCLECOUNTER        31C4
D                   44
DATA_FIELD          31E0
DATA_REGISTER       2BD2
DESTINATION         2F82
DEST_MODE           31DB
DEST_REG            31DA
DMODE               3218
DOLLARSIGN          31E9
DONE                11D2
DR                  3204
DRG                 3217
DRN                 3215
DSTMODE             31F8
EADN                28D8
EA_FINISH           2EE0
EA_START            2B84
EIGHT_SHIFT         2352
ENDING              1324
ENDINGADDRESS       31C0
ENTRYLOOP           11C0
EXIT                1220
FINALMESSAGE1       30B8
FINALMESSAGE2       30E2
FLOAT               2F6E
FORMAT_DATA         2AF2
G14_MEMS            1D02
G14_MEMS_AS         1DF4
G14_MEMS_LS         1D28
G14_MEMS_RO         1D8E
G14_TYPE            3208
GAS_EA              1CAC
GETBYTE             2CEE
GETLONG             2D02
GETWORD             2CF8
GLS_EA              1B14
GOODBYE             136E
GOODBYEMESSAGE      310C
GRO_EA              1BE0
G_AS                1C36
G_LS                1A9E
G_RO                1B6A
HASH                31E7
IMMIDIATE_REGISTER  2CA6
INDEX               31F5
INPUT               31B6
INT2                1158
INTSUB              1170
INVALID             11B0
INVALID_EA          31F7
IR_IL               320C
IS_EIGHT            2360
LARGERISSUE         127E
LARGERTHAN          129C
LF                  A
LOADDATAONE         101E
LOADDATATWO         1070
LONG_ADDRESSING     2CE0
LONG_FIVE_LOOP      2E86
LONG_FOUR_LOOP      2E7A
LONG_ONE_LOOP       2E56
LONG_SEVEN_LOOP     2E9E
LONG_SIX_LOOP       2E92
LONG_THREE_LOOP     2E6E
LONG_TWO_LOOP       2E62
LOOP_READ_BITS      1394
MEMORYGRABBER       12A8
MESSAGEFIRSTADRESS  3034
MESSAGESECONDADRESS  3077
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
NEG                 31EF
NUMBER_OF_HEX       3216
OPEN                31F1
OUTOFORDER          2FF3
PADD                3180
PADDA               3184
PADDQ               3189
PAGEBREAK           1302
PAND                317C
PASL                319A
PASR                3196
PB                  31CE
PBEQ                3169
PBGT                3165
PBLE                316D
PBRA                3171
PDATA               31A6
PINVALIDEA          31AB
PJSR                315D
PL                  31D6
PLEA                3155
PLSL                318E
PLSR                3192
PLUS                31ED
PMOVE               313A
PMOVEA              3145
PMOVEM              313F
PMOVEQ              314B
PNOP                3151
PNOT                3159
POR                 3175
PRINTADD            2608
PRINTADDA           2636
PRINTADDQ           248A
PRINTAND            25DA
PRINTB              278E
PRINTBEQ            24F8
PRINTBGT            24E2
PRINTBLE            250E
PRINTBRA            2524
PRINTCLOSED         2818
PRINTCLRSPOT        27B8
PRINTCOMA           27C6
PRINTDOLLARSIGN     27E0
PRINTHASH           27D4
PRINTINVALIDEA      283A
PRINTJSR            2442
PRINTL              27AA
PRINTLEA            23B8
PRINTMOVE           236A
PRINTMOVEA          2380
PRINTMOVEM          23A6
PRINTMOVEQ          253A
PRINTNEG            27EE
PRINTNOP            2396
PRINTNOT            240A
PRINTNOTRAIL        290E
PRINTONETRAIL       28F4
PRINTOPEN           280A
PRINTOR             257E
PRINTPLUS           27FC
PRINTROTATESPLIT    269C
PRINTRTS            247A
PRINTSUB            25AC
PRINTTWOTRAIL       28FE
PRINTW              279C
PRINT_BRANCHING     2D14
PRINT_BUFFER        321A
PRINT_BYTE          2D3A
PRINT_DATA          2826
PRINT_DN_TO_EA      2890
PRINT_EA_TO_DN      2848
PRINT_LONG          2E0A
PRINT_WORD          2D8C
PROL                319E
PROR                31A2
PRTS                3161
PR_AS               21E2
PR_ASR              22CA
PR_ASR_EA           2014
PR_ASR_MEM          1EC8
PR_G14_MEMS_AS      1E8A
PR_G14_MEMS_LS      1EF4
PR_G14_MEMS_RO      1F58
PR_G_AS_EA          1FBC
PR_G_LS_EA          2058
PR_G_RO_EA          20F4
PR_LS               2234
PR_LSR              2286
PR_LSR_EA           20B0
PR_LSR_MEM          1F2C
PR_RO               2190
PR_ROR              230E
PR_ROR_EA           214C
PR_ROR_MEM          1F90
PSUB                3178
PW                  31D2
READ_BITS           138A
READ_BYTE           2D56
READ_LONG           2EAA
READ_WORD           2DD4
REGISTER_NUMBER_TO_DECIMAL  2EE2
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2AF0
RG0                 2F2E
RG1                 2F36
RG2                 2F3E
RG3                 2F46
RG4                 2F4E
RG5                 2F56
RG6                 2F5E
RG7                 2F66
R_CHECK_DEST        29A0
R_CHECK_SOURCE      2AA0
R_CHECK_TEMP        2A20
SET                 13AA
SET_INVALID_EA      2B10
SIZE                31E4
SIZEPRINT           272E
SIZEPRINT2          2752
SIZEPRINT3          2776
SIZESPLIT           2700
SIZEVALUE           31CA
SIZE_IL             3200
SOURCE              2F7E
SRCMODE             31FA
SRC_MODE            31DC
SRC_REG             31DD
SRG                 3219
SRN                 3214
START               1000
STARTCHECK          1140
STARTINGADDRESS     31B8
STATE               31FB
STOP                2924
STOREADRESSES       1290
S_COUNT             3210
TEMPMODE            31F9
TEMP_MODE           31DE
TEMP_REG            31DF
TEMP_TO_DEST        2ABC
TEMP_TO_SRC         2AD6
TRAILERS            2F7D
USERPAGEBREAK       2F9F
VAL1                10C6
VAL2                10D0
VAL3                10E0
VAL4                10F0
VAL5                1100
VAL6                1110
VAL7                1120
VAL8                1130
VALEIGHT            2F79
VALFIVE             2F76
VALFOUR             2F75
VALONE              2F72
VALSEVEN            2F78
VALSIX              2F77
VALTHREE            2F74
VALTWO              2F73
WELCOME             2F86
WORD                31FC
WORD_ADDRESSING     2CD2
WORD_ONE_LOOP       2DB0
WORD_THREE_LOOP     2DC8
WORD_TWO_LOOP       2DBC
XBIT                31F6
