00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/8/2021 6:50:30 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000                            12  START
00001000  43F9 000034D8             13      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001006  103C 000E                 14      MOVE.B   #14,D0     ; moves #14 into data register D0
0000100A  4E4F                      15      TRAP     #15
0000100C  7400                      16      MOVE.L #0,D2
0000100E  43F9 00003280             17      LEA      WELCOME,A1 ; Loads MESSAGE into adress at A1
00001014  103C 000E                 18      MOVE.B   #14,D0     ; moves #14 into data register D0
00001018  4E4F                      19      TRAP     #15       ; Displays message via trap 
0000101A  6000 0002                 20      BRA LOADDATAONE
0000101E                            21      
0000101E                            22  * TODO: a welcome message with format message 
0000101E                            23      
0000101E                            24  LOADDATAONE
0000101E  43F9 0000332E             25      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
00001024  103C 000E                 26      MOVE.B   #14,D0     ; moves #14 into data register D0
00001028  4E4F                      27      TRAP     #15       ; Displays message via trap 14    
0000102A                            28      
0000102A  43F9 000034A7             29      LEA     INPUT,A1
00001030  103C 0002                 30      MOVE.B  #2,D0 *takes the string of what the user enters
00001034  4E4F                      31      TRAP    #15
00001036                            32      
00001036  4280                      33      CLR.L   D0
00001038                            34      
00001038                            35      * TODO: check if the input if odd - invalid imput
00001038                            36      
00001038                            37  
00001038                            38      
00001038  1A3C 0000                 39      MOVE.B  #0,D5
0000103C                            40      
0000103C  13D9 0000A000             41      MOVE.B (A1)+,$A000
00001042  13D9 0000A010             42      MOVE.B (A1)+,$A010
00001048  13D9 0000A020             43      MOVE.B (A1)+,$A020
0000104E  13D9 0000A030             44      MOVE.B (A1)+,$A030
00001054  13D9 0000A040             45      MOVE.B (A1)+,$A040
0000105A  13D9 0000A050             46      MOVE.B (A1)+,$A050
00001060  13D9 0000A060             47      MOVE.B (A1)+,$A060
00001066  13D9 0000A070             48      MOVE.B (A1)+,$A070
0000106C                            49      
0000106C  6000 0058                 50      BRA VAL1
00001070                            51  
00001070                            52  LOADDATATWO    
00001070  43F9 00003371             53      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
00001076  103C 000E                 54      MOVE.B   #14,D0     ; moves #14 into data register D0
0000107A  4E4F                      55      TRAP     #15       ; Displays message via trap 14    
0000107C                            56      
0000107C  43F9 000034A7             57      LEA     INPUT,A1
00001082  103C 0002                 58      MOVE.B  #2,D0 *takes the string of what the user enters
00001086  4E4F                      59      TRAP    #15
00001088                            60      
00001088  1A3C 0000                 61      MOVE.B  #0,D5
0000108C                            62      
0000108C  13D9 0000A000             63      MOVE.B (A1)+,$A000
00001092  13D9 0000A010             64      MOVE.B (A1)+,$A010
00001098  13D9 0000A020             65      MOVE.B (A1)+,$A020
0000109E  13D9 0000A030             66      MOVE.B (A1)+,$A030
000010A4  13D9 0000A040             67      MOVE.B (A1)+,$A040
000010AA  13D9 0000A050             68      MOVE.B (A1)+,$A050
000010B0  13D9 0000A060             69      MOVE.B (A1)+,$A060
000010B6  13D9 0000A070             70      MOVE.B (A1)+,$A070
000010BC                            71      
000010BC  43F9 00003371             72      LEA MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
000010C2                            73      
000010C2  6000 0002                 74      BRA VAL1
000010C6                            75  
000010C6                            76      
000010C6                            77  VAL1    
000010C6  1839 0000A000             78      MOVE.B $A000,D4
000010CC  6000 0072                 79      BRA STARTCHECK
000010D0  13C4 0000A000             80  VAL2    MOVE.B D4,$A000
000010D6  1839 0000A010             81      MOVE.B $A010,D4
000010DC  6000 0062                 82      BRA STARTCHECK
000010E0  13C4 0000A010             83  VAL3    MOVE.B D4,$A010
000010E6  1839 0000A020             84      MOVE.B $A020,D4
000010EC  6000 0052                 85      BRA STARTCHECK
000010F0  13C4 0000A020             86  VAL4    MOVE.B D4,$A020
000010F6  1839 0000A030             87      MOVE.B $A030,D4
000010FC  6000 0042                 88      BRA STARTCHECK
00001100  13C4 0000A030             89  VAL5    MOVE.B D4,$A030
00001106  1839 0000A040             90      MOVE.B $A040,D4
0000110C  6000 0032                 91      BRA STARTCHECK
00001110  13C4 0000A040             92  VAL6    MOVE.B D4,$A040
00001116  1839 0000A050             93      MOVE.B $A050,D4
0000111C  6000 0022                 94      BRA STARTCHECK
00001120  13C4 0000A050             95  VAL7    MOVE.B D4,$A050
00001126  1839 0000A060             96      MOVE.B $A060,D4
0000112C  6000 0012                 97      BRA STARTCHECK
00001130  13C4 0000A060             98  VAL8    MOVE.B D4,$A060
00001136  1839 0000A070             99      MOVE.B $A070,D4
0000113C  6000 0002                100      BRA STARTCHECK
00001140                           101    
00001140                           102  STARTCHECK  
00001140  B83C 0030                103      CMP.B   #48,D4
00001144  6D00 006A                104      BLT INVALID
00001148  B83C 0030                105      CMP.B   #48,D4
0000114C  6700 0022                106      BEQ INTSUB
00001150  B83C 0030                107      CMP.B   #48,D4
00001154  6E00 0002                108      BGT INT2
00001158                           109      
00001158                           110  
00001158                           111  INT2 
00001158                           112      
00001158  B83C 0039                113      CMP.B   #57,D4
0000115C  6D00 0012                114      BLT INTSUB
00001160  B83C 0039                115      CMP.B   #57,D4
00001164  6700 000A                116      BEQ INTSUB
00001168  B83C 0039                117      CMP.B   #57,D4
0000116C  6E00 000A                118      BGT CHAR1
00001170                           119      
00001170                           120  INTSUB 
00001170  0404 0030                121      SUB.B #$30,D4
00001174  6000 005C                122      BRA     DONE
00001178                           123  
00001178                           124  CHAR1 
00001178                           125      
00001178  B83C 0041                126      CMP.B   #65,D4
0000117C  6D00 0032                127      BLT INVALID
00001180  B83C 0041                128      CMP.B   #65,D4
00001184  6700 0022                129      BEQ CHARSUB
00001188  B83C 0041                130      CMP.B   #65,D4
0000118C  6E00 0002                131      BGT CHAR2
00001190                           132      
00001190                           133  CHAR2 
00001190                           134      
00001190  B83C 0046                135      CMP.B   #70,D4
00001194  6D00 0012                136      BLT CHARSUB
00001198  B83C 0046                137      CMP.B   #70,D4
0000119C  6700 000A                138      BEQ CHARSUB
000011A0  B83C 0046                139      CMP.B   #70,D4
000011A4  6E00 000A                140      BGT INVALID
000011A8                           141      
000011A8                           142  CHARSUB 
000011A8  0404 0037                143      SUB.B #$37,D4
000011AC  6000 0024                144      BRA DONE
000011B0                           145      
000011B0                           146  INVALID 
000011B0  43F9 000032C1            147      LEA BADVAL,A1
000011B6  103C 000E                148      MOVE.B   #14,D0     ; moves #14 into data register D0
000011BA  4E4F                     149      TRAP     #15       ; Displays message via trap 14
000011BC  6000 0002                150      BRA     ENTRYLOOP
000011C0                           151      
000011C0                           152  ENTRYLOOP
000011C0  B43C 0000                153      CMP.B #0,D2
000011C4  6700 FE58                154      BEQ LOADDATAONE
000011C8  B43C 0001                155      CMP.B #1,D2
000011CC  6700 FEA2                156      BEQ LOADDATATWO
000011D0  4E75                     157      RTS
000011D2                           158      
000011D2                           159  DONE    
000011D2  5205                     160          ADD.B #1,D5
000011D4  BA3C 0000                161          CMP.B #0,D5
000011D8  6700 FEEC                162          BEQ VAL1
000011DC  BA3C 0001                163          CMP.B #1,D5
000011E0  6700 FEEE                164          BEQ VAL2
000011E4  BA3C 0002                165          CMP.B #2,D5
000011E8  6700 FEF6                166          BEQ VAL3
000011EC  BA3C 0003                167          CMP.B #3,D5
000011F0  6700 FEFE                168          BEQ VAL4
000011F4  BA3C 0004                169          CMP.B #4,D5
000011F8  6700 FF06                170          BEQ VAL5
000011FC  BA3C 0005                171          CMP.B #5,D5
00001200  6700 FF0E                172          BEQ VAL6
00001204  BA3C 0006                173          CMP.B #6,D5
00001208  6700 FF16                174          BEQ VAL7
0000120C  BA3C 0007                175          CMP.B #7,D5
00001210  6700 FF1E                176          BEQ VAL8
00001214  BA3C 0008                177          CMP.B #8,D5
00001218  6700 0006                178          BEQ EXIT
0000121C                           179          
0000121C  6000 FF22                180          BRA     STARTCHECK
00001220                           181  
00001220                           182  
00001220                           183  
00001220  13C4 0000A070            184  EXIT    MOVE.B D4,$A070
00001226                           185      
00001226  4284                     186      CLR.L D4
00001228  D839 0000A000            187      ADD.B $A000,D4
0000122E  E98C                     188      LSL.L #4,D4
00001230  D839 0000A010            189      ADD.B $A010,D4
00001236  E98C                     190      LSL.L #4,D4
00001238  D839 0000A020            191      ADD.B $A020,D4
0000123E  E98C                     192      LSL.L #4,D4
00001240  D839 0000A030            193      ADD.B $A030,D4
00001246  E98C                     194      LSL.L #4,D4
00001248  D839 0000A040            195      ADD.B $A040,D4
0000124E  E98C                     196      LSL.L #4,D4
00001250  D839 0000A050            197      ADD.B $A050,D4
00001256  E98C                     198      LSL.L #4,D4
00001258  D839 0000A060            199      ADD.B $A060,D4
0000125E  E98C                     200      LSL.L #4,D4
00001260  D839 0000A070            201      ADD.B $A070,D4
00001266                           202      
00001266  2E04                     203      MOVE.L D4,D7
00001268  4244                     204      CLR D4
0000126A  B43C 0001                205      CMP.B #1,D2
0000126E  6700 0020                206      BEQ STOREADRESSES
00001272  2C07                     207      MOVE.L D7,D6
00001274  143C 0001                208      MOVE.B #1,D2
00001278  7A00                     209      MOVE.L #0,D5
0000127A  6000 FDF4                210      BRA LOADDATATWO
0000127E                           211      
0000127E                           212  ;---------------------------------------------------------
0000127E                           213  
0000127E                           214  LARGERISSUE
0000127E  43F9 000032ED            215      LEA     OUTOFORDER,A1
00001284  103C 000E                216      MOVE.B  #14,D0     ; moves #14 into data register D0
00001288  4E4F                     217      TRAP    #15       ; Displays message via trap 14
0000128A  7400                     218      MOVE.L  #0,D2
0000128C  6000 FD90                219      BRA     LOADDATAONE
00001290                           220  
00001290                           221  STOREADRESSES
00001290  23C7 000034B0            222      MOVE.L  D7,ENDINGADDRESS
00001296  23C6 000034A8            223      MOVE.L  D6,STARTINGADDRESS
0000129C                           224  LARGERTHAN    
0000129C  BE86                     225      CMP.L D6,D7
0000129E  6DDE                     226      BLT LARGERISSUE
000012A0  4247                     227      CLR     D7
000012A2  2C79 000034A8            228      MOVE.L   STARTINGADDRESS,A6
000012A8                           229      
000012A8                           230  MEMORYGRABBER
000012A8  2879 000034B0            231      MOVE.L  ENDINGADDRESS,A4
000012AE  BDCC                     232      CMPA.L  A4,A6
000012B0  6C00 0066                233      BGE     ENDING 
000012B4                           234      
000012B4  0C79 0019 000034B4       235      CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
000012BC  6C00 0038                236      BGE     PAGEBREAK
000012C0  5279 000034B4            237      ADD.W   #1,CYCLECOUNTER
000012C6                           238      
000012C6                           239      * TODO: CLEAR MODES AND REGISTERS
000012C6  4EB9 00002DDC            240      JSR CLEARMR     * CLEAR MODES AND REGISTERS
000012CC                           241      
000012CC  23CE 000034AC            242      MOVE.L      A6,CURRENTADDRESS   
000012D2  2239 000034AC            243      MOVE.L      CURRENTADDRESS,D1
000012D8  143C 0010                244      MOVE.B      #16,D2
000012DC  103C 000F                245      MOVE.B      #15,D0     ; moves #14 into data register D0
000012E0  4E4F                     246      TRAP        #15  
000012E2                           247      
000012E2  4EB9 00002A78            248      JSR     PRINTCLRSPOT      * print space
000012E8                           249      
000012E8  361E                     250      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012EA  33C3 000034B6            251      MOVE.W      D3, COMMANDDATA
000012F0                           252   
000012F0  6000 00B4                253      BRA         COMPARE_GROUPS
000012F4                           254      
000012F4  60B2                     255      BRA MEMORYGRABBER
000012F6                           256      
000012F6                           257  PAGEBREAK
000012F6  43F9 00003299            258      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
000012FC  103C 000E                259      MOVE.B   #14,D0     ; moves #14 into data register D0
00001300  4E4F                     260      TRAP     #15       ; Displays message via trap 14
00001302  43F9 000034A7            261      LEA     INPUT,A1
00001308  103C 0002                262      MOVE.B  #2,D0 *takes the string of what the user enters
0000130C  4E4F                     263      TRAP    #15
0000130E  33FC 0000 000034B4       264      MOVE.W #0,CYCLECOUNTER
00001316  6090                     265      BRA MEMORYGRABBER
00001318                           266   
00001318                           267  ENDING 
00001318  33FC 0000 000034B4       268      MOVE.W #0,CYCLECOUNTER
00001320  43F9 000033B2            269      LEA     FINALMESSAGE1,A1     * Prints End of Program message
00001326  103C 000E                270      MOVE.B  #14,D0
0000132A  4E4F                     271      TRAP    #15
0000132C  43F9 000033DC            272      LEA     FINALMESSAGE2,A1     * Prints End of Program message
00001332  103C 000E                273      MOVE.B  #14,D0
00001336  4E4F                     274      TRAP    #15
00001338  43F9 000034A7            275      LEA     INPUT,A1
0000133E  103C 0005                276      MOVE.B  #5,D0 *takes the single charater the user enters
00001342  4E4F                     277      TRAP    #15
00001344  B23C 0031                278      CMP.B #49,D1
00001348  6700 FCB6                279      BEQ START
0000134C  B23C 0030                280      CMP.B #48,D1
00001350  6700 0010                281      BEQ GOODBYE
00001354  43F9 000032C1            282      LEA     BADVAL,A1     * Prints End of Program message
0000135A  103C 000E                283      MOVE.B  #14,D0
0000135E  4E4F                     284      TRAP    #15
00001360  60B6                     285      BRA ENDING
00001362                           286  
00001362                           287  GOODBYE
00001362  43F9 000034D8            288      LEA      CLRSPOT,A1 ; Loads MESSAGE into adress at A1
00001368  103C 000E                289      MOVE.B   #14,D0     ; moves #14 into data register D0
0000136C  4E4F                     290      TRAP     #15  
0000136E  43F9 00003406            291      LEA     GOODBYEMESSAGE,A1     * Prints End of Program message
00001374  103C 000E                292      MOVE.B  #14,D0
00001378  4E4F                     293      TRAP    #15
0000137A  FFFF FFFF                294      SIMHALT             ; halt simulator   
0000137E                           295      
0000137E                           296  ;-------------------------- OP CODE SECTION -------------------------------
0000137E                           297  
0000137E                           298  READ_BITS
0000137E  4287                     299      CLR.L   D7
00001380  4284                     300      CLR.L   D4
00001382  1E39 000034B8            301      MOVE.B  Bits,D7
00001388                           302      
00001388                           303  LOOP_READ_BITS    
00001388  BE3C 0000                304      CMP.B   #0,D7           * counter
0000138C  6700 1A0C                305      BEQ     RETURN
00001390                           306      
00001390  E34C                     307      LSL.W   #1,D4           * make space for new bit
00001392  E34B                     308      LSL.W   #1,D3          
00001394                           309  
00001394  6500 0008                310      BCS     SET             * if 1, then branch to SET
00001398  5307                     311      SUBI.B  #1,D7          
0000139A  4EF8 1388                312      JMP     LOOP_READ_BITS
0000139E                           313  SET
0000139E  5244                     314      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
000013A0  5307                     315      SUBI.B  #1, D7
000013A2  4EF8 1388                316      JMP     LOOP_READ_BITS  
000013A6                           317      
000013A6                           318  
000013A6                           319  
000013A6                           320  COMPARE_GROUPS              * comapres the 4 bits of the instruction
000013A6  13FC 0004 000034B8       321      MOVE.B  #4,Bits         
000013AE  4EB8 137E                322      JSR     READ_BITS       * get the first 4 bits and store it in D4
000013B2                           323  
000013B2  B87C 0001                324      CMP.W   #%0001,D4      
000013B6  6700 005E                325      BEQ     CHECK_MOVE    * if equal, goes to CHECK_MOVE.B
000013BA                           326      
000013BA  B87C 0002                327      CMP.W   #%0010,D4      
000013BE  6700 0056                328      BEQ     CHECK_MOVE    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
000013C2                           329      
000013C2  B87C 0003                330      CMP.W   #%0011,D4      
000013C6  6700 004E                331      BEQ     CHECK_MOVE    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
000013CA                           332      
000013CA  B87C 0004                333      CMP.W   #%0100,D4      
000013CE  6700 02DA                334      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
000013D2                           335      
000013D2  B87C 0005                336      CMP.W   #%0101,D4      
000013D6  6700 0576                337      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
000013DA                           338      
000013DA  B87C 0006                339      CMP.W   #%0110,D4      
000013DE  6700 05F2                340      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
000013E2                           341      
000013E2  B87C 0007                342      CMP.W   #%0111,D4      
000013E6  6700 06D6                343      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
000013EA                           344      
000013EA  B87C 0008                345      CMP.W   #%1000,D4      
000013EE  6700 072C                346      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
000013F2                           347      
000013F2  B87C 0009                348      CMP.W   #%1001,D4      
000013F6  6700 079A                349      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
000013FA                           350      
000013FA  B87C 000C                351      CMP.W   #%1100,D4      
000013FE  6700 080A                352      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
00001402                           353      
00001402  B87C 000D                354      CMP.W   #%1101,D4      
00001406  6700 05FA                355      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
0000140A                           356      
0000140A  B87C 000E                357      CMP.W   #%1110,D4      
0000140E  6700 0872                358      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
00001412                           359      
00001412  6600 19B4                360      BNE     PRINT_DATA      * all other instructions are not supported 
00001416                           361  
00001416                           362  CHECK_MOVE
00001416                           363  
00001416  33F9 000034B6 0000350C   364      MOVE.W COMMANDDATA, myWord  * grab 16 bit instruction from main           
00001420                           365      
00001420                           366      * grab ID (first 4 bits), use D3, D4 as temp
00001420  3639 0000350C            367      MOVE.W  myWord, D3                  
00001426  183C 000C                368      MOVE.B  #12,D4
0000142A  E86B                     369      LSR.W   D4,D3                       
0000142C  13C3 0000350E            370      MOVE.B  D3, ID
00001432                           371  
00001432                           372      * grab DestReg (next 3 bits)
00001432  3639 0000350C            373      MOVE.W  myWord, D3
00001438  183C 0004                374      MOVE.B  #4, D4
0000143C  E96B                     375      LSL.W   D4, D3                     
0000143E  183C 000D                376      MOVE.B  #13,D4
00001442  E86B                     377      LSR.W   D4,D3                       
00001444  13C3 0000350F            378      MOVE.B  D3, DstReg
0000144A                           379  
0000144A                           380      * grab DestMod (next 3 bits)
0000144A  3639 0000350C            381      MOVE.W  myWord, D3                  
00001450  183C 0007                382      MOVE.B  #7, D4
00001454  E96B                     383      LSL.W   D4, D3                      
00001456  183C 000D                384      MOVE.B  #13,D4
0000145A  E86B                     385      LSR.W   D4,D3                       
0000145C  13C3 00003510            386      MOVE.B  D3, DstMod
00001462                           387  
00001462                           388      * grab SrcReg (next 3 bits)
00001462  3639 0000350C            389      MOVE.W  myWord, D3                  
00001468  183C 000A                390      MOVE.B  #10, D4
0000146C  E96B                     391      LSL.W   D4, D3                      
0000146E  183C 000D                392      MOVE.B  #13,D4
00001472  E86B                     393      LSR.W   D4,D3                       
00001474  13C3 00003512            394      MOVE.B  D3, SrcMod
0000147A                           395      
0000147A                           396      * grab SrcMod (next 3 bits)
0000147A  3639 0000350C            397      MOVE.W  myWord, D3                  
00001480  183C 000D                398      MOVE.B  #13, D4
00001484  E96B                     399      LSL.W   D4, D3                      
00001486  183C 000D                400      MOVE.B  #13,D4
0000148A  E86B                     401      LSR.W   D4,D3                       
0000148C  13C3 00003511            402      MOVE.B  D3, SrcReg
00001492                           403  
00001492                           404  
00001492                           405      * check if MOVE or MOVEA using DestMod
00001492  0C39 0001 00003510       406      CMP.B   #1, DstMod                  * DestMod == 1: MOVEA
0000149A  6700 0012                407      BEQ     DS_MOVEA                  
0000149E  6000 0002                408      BRA     DS_MOVE                     * Else: MOVE
000014A2                           409      
000014A2                           410  DS_MOVE        
000014A2  13FC 0000 0000350A       411      MOVE.B  #0,OpName                   * OpName = 0 for MOVE
000014AA  6000 001A                412      BRA     CMP_SIZE
000014AE                           413  
000014AE                           414  DS_MOVEA        
000014AE  0C39 0001 0000350E       415      CMP.B   #1, ID
000014B6  6700 0182                416      BEQ     ERROR                       * MOVEA cannot have ID = 1
000014BA  13FC 0001 0000350A       417      MOVE.B  #01,OpName                  * OpName = 1 for MOVEA
000014C2  6000 0002                418      BRA     CMP_SIZE
000014C6                           419      
000014C6                           420  CMP_SIZE   
000014C6  0C39 0001 0000350E       421      CMP.B   #1, ID                    
000014CE  6700 001A                422      BEQ     SIZE_B
000014D2  0C39 0003 0000350E       423      CMP.B   #3, ID                    
000014DA  6700 001C                424      BEQ     SIZE_W
000014DE  0C39 0002 0000350E       425      CMP.B   #2, ID                   
000014E6  6700 001E                426      BEQ     SIZE_L
000014EA                           427      
000014EA                           428  
000014EA                           429  SIZE_B        
000014EA  23FC 00000001 000034BA   430      MOVE.L  #1,SizeValue                 * Set size to 1=Byte
000014F4  6000 001E                431      BRA     CHECK_SRCMOD
000014F8                           432      
000014F8                           433  SIZE_W         
000014F8  23FC 00000002 000034BA   434      MOVE.L  #2,SizeValue                 * Set size to 2=Word
00001502  6000 0010                435      BRA     CHECK_SRCMOD
00001506                           436      
00001506                           437  SIZE_L         
00001506  23FC 00000003 000034BA   438      MOVE.L  #3,SizeValue                 * Set size to 3=Long
00001510  6000 0002                439      BRA     CHECK_SRCMOD
00001514                           440  
00001514                           441  CHECK_SRCMOD
00001514  0C39 0007 00003512       442      CMP.B   #7, SrcMod                * Check if source mode is 7
0000151C  6700 0006                443      BEQ     CHECK_SRCREG              * Check source register
00001520  6000 00C0                444      BRA     CHECK_DESTMOD             * Source not 7, now check destination Mod
00001524                           445      
00001524                           446  CHECK_SRCREG    
00001524  0C39 0000 00003511       447      CMP.B   #0, SrcReg                * Check is source register is 0
0000152C  6700 0088                448      BEQ     DtaSrcWrd                 * Load next word
00001530  0C39 0001 00003511       449      CMP.B   #1, SrcReg                * Check if source register is 1
00001538  6700 0092                450      BEQ     DtaSrcLng                 * Load next long
0000153C  0C39 0004 00003511       451      CMP.B   #4, SrcReg                * Check if source register is 4 (immediate value)
00001544  6700 0006                452      BEQ     DtaSrcImd                 * Load first word into word one
00001548  6000 00F0                453      BRA     ERROR                     * Invalid register value
0000154C                           454  
0000154C                           455  DtaSrcImd    
0000154C  0C39 0001 0000350E       456      CMP.B   #1, ID                    * ID = 1 - size is byte
00001554  6700 001E                457      BEQ     DtaSrcImdB                * Load next byte
00001558  0C39 0002 0000350E       458      CMP.B   #2, ID                    * ID = 2 - size is word
00001560  6700 0028                459      BEQ     DtaSrcImdW                * Load next word
00001564  0C39 0003 0000350E       460      CMP.B   #3, ID                    * ID = 3 - size is long
0000156C  6700 0032                461      BEQ     DtaSrcImdL                * Load next long
00001570  6000 00C8                462      BRA     ERROR                     * Invalid opID (this should never happen)  
00001574                           463      
00001574                           464      
00001574                           465  DtaSrcImdB   
00001574  4283                     466      CLR.L   D3
00001576  361A                     467      MOVE.W  (A2)+,D3
00001578  23C3 00003514            468      MOVE.L  D3,opDta1
0000157E  13FC 0003 00003518       469      MOVE.B  #3, opDta1T               * Set Data 1 type as 0=Byte
00001586  6000 005A                470      BRA     CHECK_DESTMOD             * Check destination mode
0000158A                           471  
0000158A                           472  DtaSrcImdW  
0000158A  4283                     473      CLR.L   D3
0000158C  361A                     474      MOVE.W  (A2)+,D3
0000158E  23C3 00003514            475      MOVE.L  D3,opDta1
00001594  13FC 0003 00003518       476      MOVE.B  #3, opDta1T               * Set Data 1 type as 1=Word
0000159C  6000 0044                477      BRA     CHECK_DESTMOD             * Check destination mode
000015A0                           478  
000015A0                           479  DtaSrcImdL   
000015A0  4283                     480      CLR.L   D3
000015A2  261A                     481      MOVE.L  (A2)+,D3
000015A4  23C3 00003514            482      MOVE.L  D3,opDta1
000015AA  13FC 0003 00003518       483      MOVE.B  #3, opDta1T               * Set Data 1 type as 2=Long
000015B2  6000 002E                484      BRA     CHECK_DESTMOD             * Check destination mode
000015B6                           485  
000015B6                           486  DtaSrcWrd    
000015B6  4283                     487      CLR.L   D3
000015B8  361A                     488      MOVE.W  (A2)+,D3
000015BA  23C3 00003514            489      MOVE.L  D3,opDta1
000015C0  13FC 0001 00003518       490      MOVE.B  #1, opDta1T               * Set Data 1 type as 1=Word
000015C8  6000 0018                491      BRA     CHECK_DESTMOD             * Check destination mode
000015CC                           492  
000015CC                           493  DtaSrcLng                        
000015CC  4283                     494      CLR.L   D3
000015CE  261A                     495      MOVE.L  (A2)+,D3
000015D0  23C3 00003514            496      MOVE.L  D3,opDta1
000015D6  13FC 0002 00003518       497      MOVE.B  #2, opDta1T               * Set Data 1 type as 2=Long
000015DE  6000 0002                498      BRA     CHECK_DESTMOD             * Check destination mode
000015E2                           499  
000015E2                           500  CHECK_DESTMOD
000015E2  0C39 0007 00003510       501      CMP.B   #7, DstMod                * Check if destination mode is 7
000015EA  6700 0006                502      BEQ     CEHCK_DESTREG             * Check destination register
000015EE  6000 0054                503      BRA     myDONE                      * Destination not 7, done with data
000015F2                           504                      
000015F2                           505  CEHCK_DESTREG    
000015F2  0C39 0000 0000350F       506      CMP.B   #0, DstReg                * Check if destination register is 0
000015FA  6700 0012                507      BEQ     DtaDstWrd                 * Load next word
000015FE  0C39 0001 0000350F       508      CMP.B   #1, DstReg                * Check if destination register is 1
00001606  6700 001C                509      BEQ     DtaDstLng                 * Load next long
0000160A  6000 002E                510      BRA     ERROR                     * Invalid registration Mode
0000160E                           511  
0000160E                           512  DtaDstWrd    
0000160E  4283                     513      CLR.L   D3
00001610  361A                     514      MOVE.W  (A2)+,D3
00001612  23C3 0000351A            515      MOVE.L  D3,opDta2
00001618  13FC 0001 0000351E       516      MOVE.B  #1, opDta2T               * Set Data2 type as 1=Word
00001620  6000 0022                517      BRA     myDONE
00001624                           518      
00001624                           519  DtaDstLng    
00001624  4283                     520      CLR.L   D3
00001626  261A                     521      MOVE.L  (A2)+,D3
00001628  23C3 0000351A            522      MOVE.L  D3,opDta2
0000162E  13FC 0002 0000351E       523      MOVE.B  #2, opDta2T               * Set Data2 type as 2=Long
00001636  6000 000C                524      BRA     myDONE
0000163A                           525  
0000163A                           526  ERROR
0000163A  13FC 0000 0000351F       527      MOVE.B  #0, ERR                  * Error 1 = A-OK; 0 = Invalid EA
00001642  4E75                     528      RTS
00001644                           529  
00001644                           530  myDONE
00001644  13FC 0001 0000351F       531       MOVE.B  #1, ERR                 * Clear error flag
0000164C  0C39 0000 0000350A       532       CMP.B   #0, OpName              * 0 = OpName for MOVE
00001654  43F9 00003434            533       LEA PMOVE,A1
0000165A  103C 000E                534        MOVE.B   #14,D0                 ; moves #14 into data register D0
0000165E  4E4F                     535        TRAP     #15                    ; Displays message via trap 14
00001660  0C39 0001 0000350A       536       CMP.B   #1, OpName              * 1 = OpName for MOVEA
00001668  6700 1084                537       BEQ     PRINTMOVEA
0000166C  4EB9 000029D8            538       JSR     SIZESPLIT               * Print size, variable SizeValue has to be set
00001672                           539       
00001672                           540       * EA Part
00001672  4242                     541       CLR     D2                      * Source to EA
00001674  4243                     542       CLR     D3
00001676  3439 00003512            543       MOVE.W  SrcMod, D2
0000167C  1639 00003511            544       MOVE.B  SrcReg, D3
00001682  4EB9 00002E36            545       JSR     EA_start
00001688                           546       
00001688  43F9 00003520            547       LEA     Comma, A1                * Print comma
0000168E  103C 000E                548       MOVE.B  #14, D0
00001692  4E4F                     549       TRAP    #15
00001694                           550       
00001694  4242                     551       CLR     D2                       * Destination to EA
00001696  4243                     552       CLR     D3
00001698  3439 00003510            553       MOVE.W  DstMod, D2
0000169E  3639 0000350F            554       MOVE.W  DstReg, D3
000016A4  4EB9 00002E36            555       JSR     EA_start
000016AA                           556       
000016AA                           557       
000016AA                           558  
000016AA                           559  
000016AA                           560  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
000016AA                           561  
000016AA                           562  COMPARE_0100
000016AA  0803 000C                563      BTST.L  #$0C,D3             * compare bit 8 for LEA
000016AE  6600 0032                564      BNE     CHECK_LEA
000016B2                           565      
000016B2  13FC 0004 000034B8       566      MOVE.B  #4,Bits
000016BA  4EB8 137E                567      JSR     READ_BITS
000016BE                           568      
000016BE  B87C 0006                569      CMP.W   #%0110,D4
000016C2  6700 00AA                570      BEQ     CHECK_NOT           * goes to NOT
000016C6                           571      
000016C6  B87C 0008                572      CMP.W   #%1000,D4
000016CA  6700 0126                573      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
000016CE                           574      
000016CE  B87C 000C                575      CMP.W   #%1100,D4       
000016D2  6700 01CC                576      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
000016D6                           577      
000016D6  B87C 000E                578      CMP.W   #%1110,D4
000016DA  6700 01CC                579      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
000016DE                           580      
000016DE  6600 16E8                581      BNE     PRINT_DATA
000016E2                           582  
000016E2                           583  CHECK_LEA
000016E2  13FC 0003 000034B8       584      MOVE.B  #3,Bits  
000016EA  4EB8 137E                585      JSR     READ_BITS 
000016EE  13C4 000034CA            586      MOVE.B  D4,DEST_REG  
000016F4                           587  
000016F4  13FC 0003 000034B8       588      MOVE.B  #3,Bits
000016FC  4EB8 137E                589      JSR     READ_BITS
00001700  B83C 0007                590      CMP.B   #7,D4               * if mode = 111 = continue
00001704  6600 16C2                591      BNE     PRINT_DATA
00001708                           592  
00001708  13FC 0003 000034B8       593      MOVE.B  #3,Bits
00001710  4EB8 137E                594      JSR     READ_BITS 
00001714  13C4 000034CC            595      MOVE.B  D4,SRC_MODE           
0000171A                           596  
0000171A  13FC 0003 000034B8       597      MOVE.B  #3,Bits 
00001722  4EB8 137E                598      JSR     READ_BITS 
00001726  13C4 000034CD            599      MOVE.B  D4,SRC_REG 
0000172C                           600      
0000172C                           601      *MOVE.B  #3,CmdIndex         
0000172C  4EB9 00002CD4            602      JSR     CHECK_SOURCE                * Check Source Mode
00001732                           603      
00001732  0C39 000F 000034E5       604      CMP.B   #$F,SrcMode         * If SrcMode is invalid
0000173A  6700 168C                605      BEQ     PRINT_DATA
0000173E                           606      
0000173E  0C39 0002 000034E5       607      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
00001746  6700 0FE2                608      BEQ     PRINTLEA        
0000174A                           609      
0000174A  0C39 0007 000034E5       610      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
00001752  6700 0FD6                611      BEQ     PRINTLEA    
00001756                           612      
00001756  0C39 0008 000034E5       613      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
0000175E  6700 0FCA                614      BEQ     PRINTLEA
00001762                           615              
00001762  13FC 0001 000034E2       616      MOVE.B  #1,INVALID_EA   
0000176A  6000 0FBE                617      BRA     PRINTLEA    
0000176E                           618      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
0000176E                           619  
0000176E                           620      
0000176E                           621  CHECK_NOT 
0000176E                           622      * TODO : TEST
0000176E  13FC 0002 000034B8       623      MOVE.B  #2,Bits             
00001776  4EB8 137E                624      JSR     READ_BITS             
0000177A  13C4 000034D5            625      MOVE.B  D4,SIZE_BITS               * Stores size 
00001780                           626      
00001780                           627     * JSR     SETSIZE2             * set correct size for printing
00001780                           628      
00001780  B83C 0003                629      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
00001784  6700 1642                630      BEQ     PRINT_DATA          * Else, If 11 size invalid
00001788                           631      
00001788  13FC 0003 000034B8       632      MOVE.B  #3,Bits       
00001790  4EB8 137E                633      JSR     READ_BITS       
00001794  13C4 000034CB            634      MOVE.B  D4,DEST_MODE             
0000179A                           635  
0000179A  13FC 0003 000034B8       636      MOVE.B  #3,Bits       
000017A2  4EB8 137E                637      JSR     READ_BITS
000017A6  13C4 000034CA            638      MOVE.B  D4,DEST_REG             
000017AC                           639      
000017AC                           640      *MOVE.B  #2,CmdIndex 
000017AC  4EB9 00002BD4            641      JSR     CHECK_DESTINATION               * Check Destination Mode
000017B2                           642  
000017B2  0C39 000F 000034E3       643      CMP.B   #$F,DstMode         * If DstMode is invalid
000017BA  6700 160C                644      BEQ     PRINT_DATA      
000017BE                           645  
000017BE  0C39 000E 000034E3       646      CMP.B   #$E,DstMode         * If DstMode is invalid EA
000017C6  13FC 0001 000034E2       647      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000017CE                           648      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000017CE                           649  
000017CE  0C39 0001 000034E3       650      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
000017D6  13FC 0001 000034E2       651      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000017DE                           652      
000017DE  0C39 000B 000034E3       653      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
000017E6  13FC 0001 000034E2       654      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000017EE  6000 0F50                655      BRA     PRINTNOT
000017F2                           656  
000017F2                           657  CHECK_MOVEM_1000 
000017F2                           658      * TODO : TEST WITH EA 
000017F2  13FC 0001 000034B8       659      MOVE.B  #1,Bits
000017FA  4EB8 137E                660      JSR     READ_BITS
000017FE  B83C 0001                661      CMP.B   #%1,D4
00001802  6600 15C4                662      BNE     PRINT_DATA
00001806                           663      
00001806  13FC 0001 000034B8       664      MOVE.B  #1,Bits
0000180E  4EB8 137E                665      JSR     READ_BITS
00001812  13C4 000034D5            666      MOVE.B  D4,SIZE_BITS
00001818                           667      
00001818                           668    *  JSR     SETSIZE1
00001818                           669  
00001818  13FC 0003 000034B8       670      MOVE.B  #3,Bits
00001820  4EB8 137E                671      JSR     READ_BITS
00001824  13C4 000034CE            672      MOVE.B  D4,TEMP_MODE
0000182A                           673      
0000182A  13FC 0003 000034B8       674      MOVE.B  #3,Bits
00001832  4EB8 137E                675      JSR     READ_BITS
00001836  13C4 000034CF            676      MOVE.B  D4,TEMP_REG
0000183C                           677      
0000183C  4EB9 00002C54            678      JSR     CHECK_TEMP
00001842  4EB9 00002D54            679      JSR     CHECK_XBIT
00001848                           680      
00001848  0C39 000F 000034E4       681      CMP.B   #$F,TempMode        * If TempMode is invalid
00001850  6700 1576                682      BEQ     PRINT_DATA              * Print DATA instead
00001854                           683  
00001854  0C39 000E 000034E4       684      CMP.B   #$E,TempMode        * If TempMode is invalid EA
0000185C                           685    *  BEQ     SETINVEA           * 
0000185C  13FC 0001 000034E2       686      MOVE.B  #1,INVALID_EA
00001864                           687     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001864                           688  
00001864  0C39 0002 000034E4       689      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
0000186C  6700 0EA6                690      BEQ     PRINTMOVEM              
00001870                           691  
00001870  0C39 0007 000034E4       692      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
00001878  6700 0E9A                693      BEQ     PRINTMOVEM   
0000187C                           694  
0000187C  0C39 0008 000034E4       695      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
00001884  6700 0E8E                696      BEQ     PRINTMOVEM   
00001888                           697                 
00001888  0C39 0004 000034E3       698      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
00001890  6700 0E82                699      BEQ     PRINTMOVEM   
00001894                           700  
00001894  0C39 0003 000034E5       701      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
0000189C  6700 0E76                702      BEQ     PRINTMOVEM   
000018A0                           703     * BRA     SETINVEA
000018A0                           704      
000018A0                           705  CHECK_MOVEM_1100     
000018A0  13FC 0001 000034E1       706      MOVE.B      #1,XBIT
000018A8                           707      
000018A8                           708  
000018A8                           709  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
000018A8  13FC 0002 000034B8       710      MOVE.B  #2,Bits
000018B0  4EB8 137E                711      JSR     READ_BITS
000018B4                           712      
000018B4  B83C 0002                713      CMP.B   #%10,D4
000018B8  6700 000E                714      BEQ     CHECK_JSR           * goes to JSR
000018BC                           715      
000018BC  B83C 0001                716      CMP.B   #%01,D4 
000018C0  6700 006C                717      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
000018C4                           718  
000018C4  6600 1502                719      BNE     PRINT_DATA
000018C8                           720  
000018C8                           721  CHECK_JSR       * TODO: TEST
000018C8                           722  
000018C8  13FC 0003 000034B8       723      MOVE.B  #3,Bits
000018D0  4EB8 137E                724      JSR     READ_BITS
000018D4  13C4 000034CB            725      MOVE.B  D4,DEST_MODE
000018DA                           726      
000018DA  13FC 0003 000034B8       727      MOVE.B  #3,Bits
000018E2  4EB8 137E                728      JSR     READ_BITS
000018E6  13C4 000034CA            729      MOVE.B  D4,DEST_REG
000018EC                           730      
000018EC                           731      *MOVE.B  #4,INDEX
000018EC  4EB9 00002BD4            732      JSR     CHECK_DESTINATION
000018F2                           733      
000018F2  0C39 000F 000034E3       734      CMP.B   #$F,DstMode         * if invalid print DATA
000018FA  6700 14CC                735      BEQ     PRINT_DATA
000018FE                           736      
000018FE  0C39 0002 000034E3       737      CMP.B   #$2,DstMode         * if DstMode 010        
00001906  6700 0E4E                738      BEQ     PRINTJSR
0000190A                           739      
0000190A  0C39 0007 000034E3       740      CMP.B   #$7,DstMode         * if DstMode 111 + 000
00001912  6700 0E42                741      BEQ     PRINTJSR
00001916                           742      
00001916  0C39 0008 000034E3       743      CMP.B   #$8,DstMode         * if DstMode 111 + 001
0000191E  6700 0E36                744      BEQ     PRINTJSR
00001922                           745      
00001922  13FC 0001 000034E2       746      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
0000192A                           747      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
0000192A  6000 0E2A                748      BRA     PRINTJSR
0000192E                           749      
0000192E                           750  CHECK_NOP_RTS
0000192E  13FC 0006 000034B8       751      MOVE.B  #6,Bits
00001936  4EB8 137E                752      JSR READ_BITS
0000193A                           753      
0000193A  B83C 0031                754      CMP.B   #%110001,D4
0000193E  6700 0DC4                755      BEQ     PRINTNOP            
00001942                           756      
00001942  B83C 0035                757      CMP.B   #%110101,D4
00001946  6700 0E24                758      BEQ     PRINTRTS       
0000194A                           759          
0000194A  6600 147C                760      BNE     PRINT_DATA
0000194E                           761  
0000194E                           762  ************************** ADDQ ***************************
0000194E                           763  CHECK_ADDQ
0000194E  13FC 0003 000034B8       764      MOVE.B  #3,Bits 
00001956  4EB8 137E                765      JSR     READ_BITS
0000195A  13C4 000034D0            766      MOVE.B  D4,DATA_FIELD
00001960                           767      
00001960  4EB9 00002D9C            768      JSR     FORMAT_DATA     
00001966                           769      
00001966  13FC 0001 000034B8       770      MOVE.B  #1,Bits
0000196E  4EB8 137E                771      JSR     READ_BITS
00001972  B83C 0000                772      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
00001976  6600 1450                773      BNE     PRINT_DATA          * goes to PRINT_DATA
0000197A                           774  
0000197A  13FC 0002 000034B8       775      MOVE.B  #2,Bits
00001982  4EB8 137E                776      JSR     READ_BITS
00001986  13C4 000034D5            777      MOVE.B  D4,SIZE_BITS             * store size into SIZE
0000198C  0C39 0003 000034D5       778      CMP.B   #%11,SIZE_BITS           * cannot be #%11
00001994  6700 1432                779      BEQ     PRINT_DATA
00001998                           780  
00001998  13FC 0003 000034B8       781      MOVE.B  #3,Bits
000019A0  4EB8 137E                782      JSR     READ_BITS
000019A4  13C4 000034CB            783      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
000019AA                           784      
000019AA  13FC 0003 000034B8       785      MOVE.B  #3,Bits
000019B2  4EB8 137E                786      JSR     READ_BITS
000019B6  13C4 000034CA            787      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
000019BC                           788      
000019BC  4EB9 00002BD4            789      JSR     CHECK_DESTINATION    
000019C2                           790      
000019C2  0C39 000F 000034CB       791      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
000019CA  6700 13FC                792      BEQ     PRINT_DATA         
000019CE                           793      
000019CE                           794   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
000019CE                           795   *   BEQ     INVALID_EA          * TODO 
000019CE                           796      
000019CE                           797   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
000019CE                           798   *   BEQ     INVALID_EA         * TODO
000019CE                           799      
000019CE  6000 0DAC                800      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
000019D2                           801  
000019D2                           802  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
000019D2                           803  COMPARE_0110  * TODO : store condition and 8-bit displacement 
000019D2  13FC 0004 000034B8       804      MOVE.B  #4,Bits 
000019DA  4EB8 137E                805      JSR     READ_BITS
000019DE                           806      
000019DE  B83C 000E                807      CMP.B   #%1110,D4
000019E2  6700 0DF6                808      BEQ     PRINTBGT 
000019E6                           809      
000019E6  B83C 000F                810      CMP.B   #%1111,D4
000019EA  6700 0E1A                811      BEQ     PRINTBLE 
000019EE                           812      
000019EE  B83C 0007                813      CMP.B   #%0111,D4
000019F2  6700 0DFC                814      BEQ     PRINTBEQ  
000019F6                           815      
000019F6  B83C 0000                816      CMP.B   #%0000,D4
000019FA  6700 0E20                817      BEQ     PRINTBRA
000019FE                           818      
000019FE  6000 13C8                819      BRA     PRINT_DATA 
00001A02                           820  
00001A02                           821  ************************** ADD, ADDA **********************
00001A02                           822  COMPARE_1101    * ADD and ADDA 
00001A02  13FC 0003 000034B8       823      MOVE.B  #3,Bits
00001A0A  4EB8 137E                824      JSR     READ_BITS
00001A0E  13C4 000034CF            825      MOVE.B  D4,TEMP_REG
00001A14                           826      
00001A14  13FC 0001 000034B8       827      MOVE.B  #1,Bits
00001A1C  4EB8 137E                828      JSR     READ_BITS
00001A20  13C4 000034E1            829      MOVE.B  D4,XBit
00001A26                           830      
00001A26  13FC 0002 000034B8       831      MOVE.B  #2,Bits
00001A2E  4EB8 137E                832      JSR     READ_BITS
00001A32  13C4 000034D5            833      MOVE.B  D4,SIZE_BITS
00001A38                           834  
00001A38  4EB9 00002D54            835      JSR     CHECK_XBIT
00001A3E                           836  
00001A3E  13FC 0003 000034B8       837      MOVE.B  #3,Bits
00001A46  4EB8 137E                838      JSR     READ_BITS
00001A4A  13C4 000034CE            839      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001A50                           840      
00001A50  13FC 0003 000034B8       841      MOVE.B  #3,Bits
00001A58  4EB8 137E                842      JSR     READ_BITS
00001A5C  13C4 000034CF            843      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001A62                           844      
00001A62  4EB9 00002C54            845      JSR     CHECK_TEMP   
00001A68  0C39 000F 000034E4       846      CMP.B   #$F, TempMode
00001A70  6700 1356                847      BEQ     PRINT_DATA
00001A74                           848    *  CMP.B   #$E,TempMode    
00001A74                           849    *  BEQ     INVALID_EA              * TODO
00001A74                           850      
00001A74  0C39 0003 000034D5       851      CMP.B   #%11,SIZE_BITS 
00001A7C  6700 0020                852      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
00001A80                           853      
00001A80  4EF9 00001A86            854      JMP          CHECK_ADD
00001A86                           855      
00001A86                           856  CHECK_ADD    
00001A86  0C39 0000 000034D5       857      CMP.B   #%00,SIZE_BITS
00001A8E  6600 000A                858      BNE     CCHECK_ADD  
00001A92                           859      
00001A92  0C39 0001 000034E4       860      CMP.B   #$1,TempMode       * if TempMode is invalid
00001A9A                           861    *  BEQ     INVALID_EA              * TODO 
00001A9A                           862  CCHECK_ADD
00001A9A  6000 0E40                863      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
00001A9E                           864  
00001A9E                           865  
00001A9E                           866  CHECK_ADDA
00001A9E  13FC 0001 000034D5       867      MOVE.B  #%01,SIZE_BITS
00001AA6                           868      
00001AA6                           869  *    JSR     CHECK_SOUCE   
00001AA6                           870  *    CMP.B   #$F,SrcMde
00001AA6                           871  *    BEQ     PRINT_DATA
00001AA6                           872  *    CMP.B   #$E,SrcMode
00001AA6                           873  *    BEQ     INVALID_EA                  * TODO
00001AA6                           874     
00001AA6  0C39 0000 000034E1       875      CMP.B   #%0,XBIT
00001AAE  6700 0E4E                876      BEQ     PRINTADDA   
00001AB2                           877                 
00001AB2  13FC 0002 000034D5       878      MOVE.B  #%10,SIZE_BITS
00001ABA  6000 0E42                879      BRA     PRINTADDA 
00001ABE                           880   
00001ABE                           881  ************************** MOVEQ ********************************
00001ABE                           882  CHECK_MOVEQ
00001ABE  13FC 0003 000034B8       883      MOVE.B  #3,Bits         * read next 3 bits
00001AC6  4EB8 137E                884      JSR     READ_BITS       * store them in D4
00001ACA  13C4 000034CA            885      MOVE.B  D4,DEST_REG     * move register value (used in EA)
00001AD0  1439 000034CA            886      MOVE.B  DEST_REG,D2
00001AD6  163C 0000                887      MOVE.B  #%000,D3
00001ADA                           888      
00001ADA  13FC 0001 000034B8       889      MOVE.B  #1,Bits         * read the next bit into D4
00001AE2  4EB8 137E                890      JSR     READ_BITS
00001AE6  B83C 0000                891      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
00001AEA  6600 12DC                892      BNE     PRINT_DATA      * goes to PRINT_DATA ?
00001AEE                           893      
00001AEE  13FC 0008 000034B8       894      MOVE.B  #8,Bits        
00001AF6  4EB8 137E                895      JSR     READ_BITS
00001AFA  23C4 000034D0            896      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
00001B00                           897      
00001B00  13FC 0007 000034CC       898      MOVE.B  #%111,SRC_MODE  * 
00001B08  13FC 0004 000034CD       899      MOVE.B  #%100,SRC_REG   * 
00001B10  13FC 0004 000029D8       900      MOVE.B  #4,SizeSplit
00001B18  6000 0D18                901      BRA     PRINTMOVEQ 
00001B1C                           902      
00001B1C                           903  ************************* OR *********************************
00001B1C                           904  CHECK_OR
00001B1C  13FC 0003 000034B8       905      MOVE.B  #3,Bits
00001B24  4EB8 137E                906      JSR     READ_BITS
00001B28  13C4 000034CF            907      MOVE.B  D4,TEMP_REG
00001B2E                           908      
00001B2E  13FC 0001 000034B8       909      MOVE.B  #1,Bits
00001B36  4EB8 137E                910      JSR     READ_BITS
00001B3A  13C4 000034E1            911      MOVE.B  D4,XBit
00001B40                           912      
00001B40  13FC 0002 000034B8       913      MOVE.B  #2,Bits
00001B48  4EB8 137E                914      JSR     READ_BITS
00001B4C  13C4 000034D5            915      MOVE.B  D4,SIZE_BITS
00001B52                           916  
00001B52  4EB9 00002D54            917      JSR     CHECK_XBIT
00001B58                           918      
00001B58  13FC 0003 000034B8       919      MOVE.B  #3,Bits
00001B60  4EB8 137E                920      JSR     READ_BITS
00001B64  13C4 000034CE            921      MOVE.B  D4,TEMP_MODE    * store TEMP_MODE
00001B6A                           922      
00001B6A  13FC 0003 000034B8       923      MOVE.B  #3,Bits
00001B72  4EB8 137E                924      JSR     READ_BITS
00001B76  13C4 000034CF            925      MOVE.B  D4,TEMP_REG    * store TEMP_REG    
00001B7C                           926      
00001B7C  4EB9 00002C54            927      JSR     CHECK_TEMP   
00001B82  0C39 000F 000034E4       928      CMP.B   #$F, TempMode
00001B8A  6700 123C                929      BEQ     PRINT_DATA
00001B8E                           930    *  CMP.B   #$E,TempMode    
00001B8E                           931    *  BEQ     INVALID_EA              * TODO
00001B8E                           932      
00001B8E  6000 0CE6                933      BRA     PRINTOR
00001B92                           934  
00001B92                           935  ********************* SUB **********************
00001B92                           936  CHECK_SUB
00001B92  13FC 0003 000034B8       937      MOVE.B  #3,Bits
00001B9A  4EB8 137E                938      JSR     READ_BITS
00001B9E  13C4 000034CF            939      MOVE.B  D4,TEMP_REG
00001BA4                           940      
00001BA4  13FC 0001 000034B8       941      MOVE.B  #1,Bits
00001BAC  4EB8 137E                942      JSR     READ_BITS
00001BB0  13C4 000034E1            943      MOVE.B  D4,XBit
00001BB6                           944      
00001BB6  13FC 0002 000034B8       945      MOVE.B  #2,Bits
00001BBE  4EB8 137E                946      JSR     READ_BITS
00001BC2  13C4 000034D5            947      MOVE.B  D4,SIZE_BITS
00001BC8                           948  
00001BC8                           949    *  MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
00001BC8                           950          
00001BC8                           951    *  MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001BC8  4EB9 00002D54            952      JSR     CHECK_XBIT
00001BCE                           953      
00001BCE  13FC 0003 000034B8       954      MOVE.B  #3,Bits
00001BD6  4EB8 137E                955      JSR     READ_BITS
00001BDA  13C4 000034CE            956      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001BE0                           957      
00001BE0  13FC 0003 000034B8       958      MOVE.B  #3,Bits
00001BE8  4EB8 137E                959      JSR     READ_BITS
00001BEC  13C4 000034CF            960      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001BF2                           961      
00001BF2                           962      *MOVE.B  #7,INDEX
00001BF2  4EB9 00002C54            963      JSR     CHECK_TEMP   
00001BF8  0C39 000F 000034E4       964      CMP.B   #$F, TempMode
00001C00  6700 11C6                965      BEQ     PRINT_DATA
00001C04                           966    *  CMP.B   #$E,TempMode    
00001C04                           967    *  BEQ     INVALID_EA              * TODO
00001C04                           968      
00001C04  4EF9 00002898            969      JMP     PRINTSUB
00001C0A                           970  
00001C0A                           971  
00001C0A                           972  ******************* AND ***********************
00001C0A                           973  CHECK_AND
00001C0A  13FC 0003 000034B8       974      MOVE.B  #3,Bits
00001C12  4EB8 137E                975      JSR     READ_BITS
00001C16  13C4 000034CF            976      MOVE.B  D4,TEMP_REG
00001C1C                           977      
00001C1C  13FC 0001 000034B8       978      MOVE.B  #1,Bits
00001C24  4EB8 137E                979      JSR     READ_BITS
00001C28  13C4 000034E1            980      MOVE.B  D4,XBit
00001C2E                           981      
00001C2E  13FC 0002 000034B8       982      MOVE.B  #2,Bits
00001C36  4EB8 137E                983      JSR     READ_BITS
00001C3A  13C4 000034D5            984      MOVE.B  D4,SIZE_BITS
00001C40                           985  
00001C40  4EB9 00002D54            986      JSR     CHECK_XBIT
00001C46                           987      
00001C46  13FC 0003 000034B8       988      MOVE.B  #3,Bits
00001C4E  4EB8 137E                989      JSR     READ_BITS
00001C52  13C4 000034CE            990      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001C58                           991      
00001C58  13FC 0003 000034B8       992      MOVE.B  #3,Bits
00001C60  4EB8 137E                993      JSR     READ_BITS
00001C64  13C4 000034CF            994      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001C6A                           995      
00001C6A  4EB9 00002C54            996      JSR     CHECK_TEMP   
00001C70  0C39 000F 000034E4       997      CMP.B   #$F, TempMode
00001C78  6700 114E                998      BEQ     PRINT_DATA
00001C7C                           999    *  CMP.B   #$E,TempMode    
00001C7C                          1000    *  BEQ     INVALID_EA              * TODO
00001C7C                          1001      
00001C7C  4EF9 000028BA           1002      JMP     PRINTAND
00001C82                          1003  
00001C82                          1004      
00001C82                          1005  ******************************************
00001C82                          1006  *        THE GROUP 14
00001C82                          1007  *        LS,AS AND ROTATION
00001C82                          1008  *        
00001C82                          1009  ******************************************
00001C82                          1010  COMPARE_1110 
00001C82  4245                    1011              CLR D5     ;STORING ISOLATED BITS
00001C84  4244                    1012              CLR D4
00001C86  3839 000034B6           1013              MOVE.W COMMANDDATA,D4
00001C8C  2A04                    1014              MOVE.L   D4,D5
00001C8E  0285 000000C0           1015              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001C94  EC8D                    1016              LSR.L    #6,D5            ;NORMALIZE
00001C96  13C5 000034D4           1017              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001C9C  BA3C 0003               1018              CMP.B    #%11,D5    
00001CA0  6700 0298               1019              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001CA4  4245                    1020              CLR D5
00001CA6  2A04                    1021              MOVE.L   D4,D5      
00001CA8  0285 00000018           1022              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001CAE  E68D                    1023              LSR.L   #3,D5
00001CB0  BA3C 0001               1024              CMP.B   #%001,D5
00001CB4  6700 0020               1025              BEQ     G_LS    ;LOGICAL SHIFTS
00001CB8  BA3C 0003               1026              CMP.B   #%011,D5
00001CBC  6700 00E4               1027              BEQ     G_RO    ;ROTAIONS
00001CC0  BA3C 0000               1028              CMP.B   #%000,D5
00001CC4  6700 01A8               1029              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001CC8                          1030              
00001CC8  13FC 0001 00000001      1031              MOVE.B #1,BAD_FLAG
00001CD0  4EF9 00002DC8           1032              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001CD6                          1033  
00001CD6                          1034  G_LS               ;GROUP LOGICAL SHIFT
00001CD6  4245                    1035       CLR   D5
00001CD8  23C4 000034F8           1036       MOVE.L D4,IR_IL
00001CDE  02B9 00000020 000034F8  1037       ANDI.L  #$0020,IR_IL
00001CE8  2A39 000034F8           1038       MOVE.L  IR_IL,D5
00001CEE  EA8D                    1039       LSR.L   #5,D5
00001CF0  BA3C 0001               1040       CMP.B   #$1,D5
00001CF4  6700 0056               1041       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001CF8  4245                    1042       CLR D5
00001CFA  2A04                    1043       MOVE.L  D4,D5
00001CFC  0285 00000100           1044       ANDI.L  #$0100,D5
00001D02  E08D                    1045       LSR.L  #8,D5
00001D04  23C5 000034F0           1046       MOVE.L  D5,DR
00001D0A  4245                    1047       CLR D5
00001D0C  2A04                    1048       MOVE.L  D4,D5
00001D0E  0285 00000E00           1049       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001D14  E08D                    1050       LSR.L   #8,D5
00001D16  E28D                    1051       LSR.L   #1,D5
00001D18  BABC 00000007           1052       CMP.L   #7,D5
00001D1E  6E00 10A8               1053       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D22  BABC 00000000           1054       CMP.L   #0,D5
00001D28  6D00 109E               1055       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D2C  13C5 000034FC           1056       MOVE.B  D5,S_COUNT
00001D32  4EB9 000026C8           1057       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001D38  4245                    1058       CLR     D5
00001D3A  2A04                    1059       MOVE.L  D4,D5
00001D3C  0285 00000007           1060       ANDI.L   #$0007,D5
00001D42  13C5 00003501           1061       MOVE.B   D5,dRN
00001D48  6000 0812               1062       BRA      PR_LS             
00001D4C                          1063       
00001D4C                          1064  GLS_EA 
00001D4C  4245                    1065       CLR D5
00001D4E  4244                    1066       CLR D4
00001D50  3839 000034B6           1067       MOVE.W COMMANDDATA,D4
00001D56                          1068  
00001D56  2A04                    1069       MOVE.L  D4,D5
00001D58  0285 00000100           1070       ANDI.L  #$0100,D5
00001D5E  E08D                    1071       LSR.L  #8,D5
00001D60  23C5 000034F0           1072       MOVE.L  D5,DR     ;DIRECTION
00001D66  4245                    1073       CLR D5
00001D68  2A04                    1074       MOVE.L  D4,D5
00001D6A  0285 00000E00           1075       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001D70  E08D                    1076       LSR.L   #8,D5
00001D72  E28D                    1077       LSR.L   #1,D5
00001D74  BABC 00000007           1078       CMP.L   #7,D5
00001D7A  6E00 104C               1079       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001D7E  BABC 00000000           1080       CMP.L   #0,D5
00001D84  6D00 1042               1081       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001D88  13C5 00003500           1082       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001D8E  4245                    1083       CLR     D5
00001D90  2A04                    1084       MOVE.L   D4,D5
00001D92  0285 00000007           1085       ANDI.L   #$0007,D5
00001D98  13C5 00003501           1086       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001D9E  6000 0568               1087       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001DA2                          1088  G_RO            ;GROUP ROTATION
00001DA2  4245                    1089       CLR   D5
00001DA4  23C4 000034F8           1090       MOVE.L D4,IR_IL
00001DAA  02B9 00000020 000034F8  1091       ANDI.L  #$0020,IR_IL
00001DB4  2A39 000034F8           1092       MOVE.L  IR_IL,D5
00001DBA  EA8D                    1093       LSR.L   #5,D5
00001DBC  BA3C 0001               1094       CMP.B   #$1,D5
00001DC0  6700 0056               1095       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001DC4  4245                    1096       CLR D5
00001DC6  2A04                    1097       MOVE.L  D4,D5
00001DC8  0285 00000100           1098       ANDI.L  #$0100,D5
00001DCE  E08D                    1099       LSR.L  #8,D5
00001DD0  23C5 000034F0           1100       MOVE.L  D5,DR
00001DD6  4245                    1101       CLR D5
00001DD8  2A04                    1102       MOVE.L  D4,D5
00001DDA  0285 00000E00           1103       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001DE0  E08D                    1104       LSR.L   #8,D5
00001DE2  E28D                    1105       LSR.L   #1,D5
00001DE4  BABC 00000007           1106       CMP.L   #7,D5
00001DEA  6E00 0FDC               1107       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001DEE  BABC 00000000           1108       CMP.L   #0,D5
00001DF4  6D00 0FD2               1109       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001DF8  13C5 000034FC           1110       MOVE.B  D5,S_COUNT
00001DFE  4EB9 000026C8           1111       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001E04  4245                    1112       CLR     D5
00001E06  2A04                    1113       MOVE.L  D4,D5
00001E08  0285 00000007           1114       ANDI.L   #$0007,D5
00001E0E  13C5 00003501           1115       MOVE.B   D5,dRN
00001E14  6000 0672               1116       BRA      PR_RO    ;PRINT ROTATION   
00001E18                          1117  
00001E18                          1118  GRO_EA 
00001E18  4245                    1119       CLR D5
00001E1A  4244                    1120       CLR D4
00001E1C  3839 000034B6           1121       MOVE.W COMMANDDATA,D4
00001E22                          1122  
00001E22  2A04                    1123       MOVE.L  D4,D5
00001E24  0285 00000100           1124       ANDI.L  #$0100,D5
00001E2A  E08D                    1125       LSR.L  #8,D5
00001E2C  23C5 000034F0           1126       MOVE.L  D5,DR     ;DIRECTION
00001E32  4245                    1127       CLR D5
00001E34  2A04                    1128       MOVE.L  D4,D5
00001E36  0285 00000E00           1129       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001E3C  E08D                    1130       LSR.L   #8,D5
00001E3E  E28D                    1131       LSR.L   #1,D5
00001E40  BABC 00000007           1132       CMP.L   #7,D5
00001E46  6E00 0F80               1133       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001E4A  BABC 00000000           1134       CMP.L   #0,D5
00001E50  6D00 0F76               1135       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001E54  13C5 00003500           1136       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001E5A  4245                    1137       CLR     D5
00001E5C  2A04                    1138       MOVE.L   D4,D5
00001E5E  0285 00000007           1139       ANDI.L   #$0007,D5
00001E64  13C5 00003501           1140       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001E6A  6000 055C               1141       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001E6E                          1142  
00001E6E                          1143  
00001E6E                          1144  
00001E6E                          1145  G_AS         ;GROUP ARITHMATIC SHIFT
00001E6E  4245                    1146       CLR   D5
00001E70  23C4 000034F8           1147       MOVE.L D4,IR_IL
00001E76  02B9 00000020 000034F8  1148       ANDI.L  #$0020,IR_IL
00001E80  2A39 000034F8           1149       MOVE.L  IR_IL,D5
00001E86  EA8D                    1150       LSR.L   #5,D5
00001E88  BA3C 0001               1151       CMP.B   #$1,D5
00001E8C  6700 0056               1152       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001E90  4245                    1153       CLR D5
00001E92  2A04                    1154       MOVE.L  D4,D5
00001E94  0285 00000100           1155       ANDI.L  #$0100,D5
00001E9A  E08D                    1156       LSR.L  #8,D5
00001E9C  23C5 000034F0           1157       MOVE.L  D5,DR
00001EA2  4245                    1158       CLR D5
00001EA4  2A04                    1159       MOVE.L  D4,D5
00001EA6  0285 00000E00           1160       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001EAC  E08D                    1161       LSR.L   #8,D5
00001EAE  E28D                    1162       LSR.L   #1,D5
00001EB0  BABC 00000007           1163       CMP.L   #7,D5
00001EB6  6E00 0F10               1164       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001EBA  BABC 00000000           1165       CMP.L   #0,D5
00001EC0  6D00 0F06               1166       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001EC4  13C5 000034FC           1167       MOVE.B  D5,S_COUNT
00001ECA  4EB9 000026C8           1168       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001ED0  4245                    1169       CLR     D5
00001ED2  2A04                    1170       MOVE.L  D4,D5
00001ED4  0285 00000007           1171       ANDI.L   #$0007,D5
00001EDA  13C5 00003501           1172       MOVE.B   D5,dRN
00001EE0  6000 0610               1173       BRA      PR_AS    ;PRINT ROTATION 
00001EE4                          1174  
00001EE4                          1175  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001EE4  4245                    1176       CLR D5
00001EE6  4244                    1177       CLR D4
00001EE8  3839 000034B6           1178       MOVE.W COMMANDDATA,D4
00001EEE                          1179  
00001EEE  2A04                    1180       MOVE.L  D4,D5
00001EF0  0285 00000100           1181       ANDI.L  #$0100,D5
00001EF6  E08D                    1182       LSR.L  #8,D5
00001EF8  23C5 000034F0           1183       MOVE.L  D5,DR     ;DIRECTION
00001EFE  4245                    1184       CLR D5
00001F00  2A04                    1185       MOVE.L  D4,D5
00001F02  0285 00000E00           1186       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001F08  E08D                    1187       LSR.L   #8,D5
00001F0A  E28D                    1188       LSR.L   #1,D5
00001F0C  BABC 00000007           1189       CMP.L   #7,D5
00001F12  6E00 0EB4               1190       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001F16  BABC 00000000           1191       CMP.L   #0,D5
00001F1C  6D00 0EAA               1192       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001F20  13C5 00003500           1193       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001F26  4245                    1194       CLR     D5
00001F28  2A04                    1195       MOVE.L   D4,D5
00001F2A  0285 00000007           1196       ANDI.L   #$0007,D5
00001F30  13C5 00003501           1197       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001F36  6000 0310               1198       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001F3A                          1199  
00001F3A                          1200  G14_MEMS 
00001F3A  4245                    1201         CLR D5
00001F3C  2A04                    1202         MOVE.L  D4,D5
00001F3E  CABC 00000E00           1203         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001F44  E08D                    1204         LSR.L   #8,D5
00001F46  E28D                    1205         LSR.L   #1,D5
00001F48  BA3C 0001               1206         CMP.B   #%001,D5
00001F4C  6700 0012               1207         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001F50  BA3C 0003               1208         CMP.B   #%011,D5
00001F54  6700 0070               1209         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001F58  BA3C 0000               1210         CMP.B   #%000,D5
00001F5C  6700 00CE               1211         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001F60                          1212  
00001F60                          1213  G14_MEMS_LS 
00001F60  4245                    1214             CLR D5
00001F62  2A04                    1215             MOVE.L  D4,D5
00001F64  0285 00000100           1216             ANDI.L  #$0100,D5
00001F6A  E08D                    1217             LSR.L  #8,D5
00001F6C  13C5 000034F0           1218             MOVE.B  D5,DR     ;DIRECTION
00001F72  4245                    1219             CLR D5
00001F74  2A04                    1220             MOVE.L D4,D5
00001F76  0285 00000038           1221             ANDI.L  #$0038,D5
00001F7C  E68D                    1222             LSR.L  #3,D5
00001F7E  13C5 00003504           1223             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001F84  4245                    1224             CLR D5
00001F86  2A04                    1225             MOVE.L D4,D5
00001F88  0285 00000007           1226             ANDI.L  #$0007,D5
00001F8E  13C5 00003501           1227             MOVE.B  D5,dRN
00001F94  0CB9 00000000 00003504  1228             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001F9E  6700 0E28               1229             BEQ    PRINT_DATA
00001FA2  0CB9 00000001 00003504  1230             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001FAC  6700 0E1A               1231             BEQ     PRINT_DATA
00001FB0  13C5 00003503           1232             MOVE.B  D5,dRG     ;DESTINATION REG
00001FB6  0C39 0007 00003504      1233             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001FBE  6700 00F2               1234             BEQ     CHECK_ID_LS 
00001FC2  6000 0180               1235             BRA     PR_G14_MEMS_LS             
00001FC6                          1236       
00001FC6                          1237  
00001FC6                          1238  G14_MEMS_RO
00001FC6  4245                    1239             CLR D5
00001FC8  2A04                    1240             MOVE.L  D4,D5
00001FCA  0285 00000100           1241             ANDI.L  #$0100,D5
00001FD0  E08D                    1242             LSR.L  #8,D5
00001FD2  13C5 000034F0           1243             MOVE.B  D5,DR     ;DIRECTION
00001FD8  4245                    1244             CLR D5
00001FDA  2A04                    1245             MOVE.L D4,D5
00001FDC  0285 00000038           1246             ANDI.L  #$0038,D5
00001FE2  E68D                    1247             LSR.L  #3,D5
00001FE4  13C5 00003504           1248             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001FEA  4245                    1249             CLR D5
00001FEC  2A04                    1250             MOVE.L D4,D5
00001FEE  0285 00000007           1251             ANDI.L  #$0007,D5
00001FF4  13C5 00003501           1252             MOVE.B  D5,dRN
00001FFA  0CB9 00000000 00003504  1253             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00002004  6700 0DC2               1254             BEQ    PRINT_DATA
00002008  0CB9 00000001 00003504  1255             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00002012  6700 0DB4               1256             BEQ     PRINT_DATA
00002016  13C5 00003503           1257             MOVE.B  D5,dRG     ;DESTINATION REG
0000201C  0C39 0007 00003504      1258             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00002024  6700 007C               1259             BEQ     CHECK_ID_RO 
00002028  6000 019C               1260             BRA     PR_G14_MEMS_RO         
0000202C                          1261  
0000202C                          1262  G14_MEMS_AS
0000202C  4245                    1263             CLR D5
0000202E  2A04                    1264             MOVE.L  D4,D5
00002030  0285 00000100           1265             ANDI.L  #$0100,D5
00002036  E08D                    1266             LSR.L  #8,D5
00002038  13C5 000034F0           1267             MOVE.B  D5,DR     ;DIRECTION
0000203E  4245                    1268             CLR D5
00002040  2A04                    1269             MOVE.L D4,D5
00002042  0285 00000038           1270             ANDI.L  #$0038,D5
00002048  E68D                    1271             LSR.L  #3,D5
0000204A  13C5 00003504           1272             MOVE.B  D5,dMODE     ;DESTINATION MODE
00002050  4245                    1273             CLR D5
00002052  2A04                    1274             MOVE.L D4,D5
00002054  0285 00000007           1275             ANDI.L  #$0007,D5
0000205A  13C5 00003501           1276             MOVE.B  D5,dRN
00002060  0CB9 00000000 00003504  1277             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
0000206A  6700 0D5C               1278             BEQ    PRINT_DATA
0000206E  0CB9 00000001 00003504  1279             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00002078  6700 0D4E               1280             BEQ     PRINT_DATA
0000207C  13C5 00003503           1281             MOVE.B  D5,dRG     ;DESTINATION REG
00002082  0C39 0007 00003504      1282             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
0000208A  6700 0006               1283             BEQ     CHECK_ID_AS 
0000208E  6000 0032               1284             BRA     PR_G14_MEMS_AS                          
00002092                          1285             
00002092                          1286  
00002092                          1287  
00002092  0C39 0004 00003503      1288  CHECK_ID_AS  CMP.B #$4,dRG
0000209A  6700 0D2C               1289               BEQ   PRINT_DATA
0000209E  6000 0022               1290               BRA     PR_G14_MEMS_AS
000020A2                          1291               
000020A2  0C39 0004 00003503      1292  CHECK_ID_RO  CMP.B #$4,dRG
000020AA  6700 0D1C               1293               BEQ   PRINT_DATA
000020AE  6000 0116               1294               BRA     PR_G14_MEMS_RO
000020B2                          1295    
000020B2  0C39 0004 00003503      1296  CHECK_ID_LS  CMP.B #$4,dRG
000020BA  6700 0D0C               1297               BEQ   PRINT_DATA
000020BE  6000 0084               1298               BRA    PR_G14_MEMS_LS
000020C2                          1299                               
000020C2                          1300  PR_G14_MEMS_AS
000020C2  4EB9 00002A78           1301       JSR     PRINTCLRSPOT      * print space
000020C8                          1302   
000020C8  0C39 0000 000034F0      1303       CMP.B #$0,DR 
000020D0  6700 003A               1304       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
000020D4                          1305      
000020D4                          1306      *******PRINT LSL*******
000020D4  43F9 00003496           1307       LEA       PASL,A1   MEM LEFT SHIF
000020DA  103C 000E               1308       MOVE.B   #14,D0     ; moves #14 into data register D0
000020DE  4E4F                    1309       TRAP     #15
000020E0                          1310  
000020E0  4EB9 00002A78           1311       JSR     PRINTCLRSPOT      * print space
000020E6                          1312   
000020E6  4243                    1313       CLR D3
000020E8  4242                    1314       CLR D2
000020EA  1439 00003504           1315       MOVE.B  dMODE,D2
000020F0  1639 00003501           1316       MOVE.B  dRN,D3
000020F6  4EB9 00002E36           1317       JSR     EA_START
000020FC                          1318       
000020FC  43F9 0000342E           1319       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002102  103C 000E               1320       MOVE.B   #14,D0     ; moves #14 into data register D0
00002106  4E4F                    1321       TRAP     #15       ; Displays message via trap 14
00002108                          1322       
00002108  6000 F19E               1323       BRA MEMORYGRABBER
0000210C                          1324  
0000210C                          1325       
0000210C                          1326  PR_ASR_MEM   ;MEM RIGHT SHIFT
0000210C                          1327            
0000210C  43F9 00003492           1328       LEA       PASR,A1   MEM RIGHT SHIF
00002112  103C 000E               1329       MOVE.B   #14,D0     ; moves #14 into data register D0
00002116  4E4F                    1330       TRAP     #15
00002118                          1331  
00002118  4EB9 00002A78           1332       JSR     PRINTCLRSPOT      * print space
0000211E                          1333   
0000211E  4243                    1334       CLR D3
00002120  4242                    1335       CLR D2
00002122  1439 00003504           1336       MOVE.B  dMODE,D2
00002128  1639 00003501           1337       MOVE.B  dRN,D3
0000212E  4EB9 00002E36           1338       JSR     EA_START
00002134                          1339       
00002134  43F9 0000342E           1340       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000213A  103C 000E               1341       MOVE.B   #14,D0     ; moves #14 into data register D0
0000213E  4E4F                    1342       TRAP     #15       ; Displays message via trap 14
00002140                          1343       
00002140  6000 F166               1344       BRA MEMORYGRABBER
00002144                          1345  
00002144                          1346  
00002144                          1347               
00002144                          1348  
00002144                          1349  PR_G14_MEMS_LS
00002144  4EB9 00002A78           1350       JSR     PRINTCLRSPOT      * print space
0000214A                          1351   
0000214A  0C39 0000 000034F0      1352       CMP.B #$0,DR 
00002152  6700 003A               1353       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00002156                          1354      
00002156                          1355      *******PRINT LSL*******
00002156  43F9 0000348A           1356       LEA       PLSL,A1   MEM LEFT SHIF
0000215C  103C 000E               1357       MOVE.B   #14,D0     ; moves #14 into data register D0
00002160  4E4F                    1358       TRAP     #15 
00002162                          1359       
00002162  4EB9 00002A78           1360       JSR     PRINTCLRSPOT      * print space
00002168                          1361       
00002168  4243                    1362       CLR D3
0000216A  4242                    1363       CLR D2
0000216C  1439 00003504           1364       MOVE.B  dMODE,D2
00002172  1639 00003501           1365       MOVE.B  dRN,D3
00002178  4EB9 00002E36           1366       JSR     EA_START
0000217E                          1367       
0000217E  43F9 0000342E           1368       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002184  103C 000E               1369       MOVE.B   #14,D0     ; moves #14 into data register D0
00002188  4E4F                    1370       TRAP     #15       ; Displays message via trap 14
0000218A                          1371       
0000218A  6000 F11C               1372       BRA MEMORYGRABBER
0000218E                          1373       
0000218E                          1374  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
0000218E  43F9 0000348E           1375       LEA       PLSR,A1   MEM RIGHT SHIF
00002194  103C 000E               1376       MOVE.B   #14,D0     ; moves #14 into data register D0
00002198  4E4F                    1377       TRAP     #15
0000219A                          1378       
0000219A  4EB9 00002A78           1379       JSR     PRINTCLRSPOT
000021A0                          1380   
000021A0  4243                    1381       CLR D3
000021A2  4242                    1382       CLR D2
000021A4  1439 00003504           1383       MOVE.B  dMODE,D2
000021AA  1639 00003501           1384       MOVE.B  dRN,D3
000021B0  4EB9 00002E36           1385       JSR     EA_START
000021B6                          1386       
000021B6  43F9 0000342E           1387       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000021BC  103C 000E               1388       MOVE.B   #14,D0     ; moves #14 into data register D0
000021C0  4E4F                    1389       TRAP     #15       ; Displays message via trap 14
000021C2                          1390       
000021C2  6000 F0E4               1391       BRA    MEMORYGRABBER
000021C6                          1392  
000021C6                          1393  PR_G14_MEMS_RO
000021C6  4EB9 00002A78           1394       JSR     PRINTCLRSPOT      * print space
000021CC                          1395       
000021CC  0C39 0000 000034F0      1396       CMP.B #$0,DR 
000021D4  6700 003A               1397       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
000021D8                          1398      
000021D8                          1399      *******PRINT ASL*******
000021D8  43F9 0000349A           1400       LEA       PROL,A1   ROTATE MEM LEFT SHIF
000021DE  103C 000E               1401       MOVE.B   #14,D0     ; moves #14 into data register D0
000021E2  4E4F                    1402       TRAP     #15
000021E4                          1403  
000021E4  4EB9 00002A78           1404       JSR     PRINTCLRSPOT
000021EA                          1405        
000021EA  4243                    1406       CLR D3
000021EC  4242                    1407       CLR D2
000021EE  1439 00003504           1408       MOVE.B  dMODE,D2
000021F4  1639 00003501           1409       MOVE.B  dRN,D3
000021FA  4EB9 00002E36           1410       JSR     EA_START
00002200                          1411       
00002200  43F9 0000342E           1412       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002206  103C 000E               1413       MOVE.B   #14,D0     ; moves #14 into data register D0
0000220A  4E4F                    1414       TRAP     #15       ; Displays message via trap 14
0000220C                          1415       
0000220C  6000 F09A               1416       BRA MEMORYGRABBER
00002210                          1417  
00002210                          1418  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00002210  43F9 0000349E           1419       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
00002216  103C 000E               1420       MOVE.B   #14,D0     ; moves #14 into data register D0
0000221A  4E4F                    1421       TRAP     #15
0000221C                          1422  
0000221C  4EB9 00002A78           1423       JSR     PRINTCLRSPOT
00002222                          1424   
00002222  4243                    1425       CLR D3
00002224  4242                    1426       CLR D2
00002226  1439 00003504           1427       MOVE.B  dMODE,D2
0000222C  1639 00003501           1428       MOVE.B  dRN,D3
00002232  4EB9 00002E36           1429       JSR     EA_START
00002238                          1430       
00002238  43F9 0000342E           1431       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000223E  103C 000E               1432       MOVE.B   #14,D0     ; moves #14 into data register D0
00002242  4E4F                    1433       TRAP     #15       ; Displays message via trap 14
00002244                          1434       
00002244  6000 F062               1435       BRA MEMORYGRABBER
00002248                          1436  
00002248                          1437  
00002248                          1438  
00002248                          1439  
00002248                          1440  PR_G_AS_EA
00002248  4EB9 00002A78           1441         JSR     PRINTCLRSPOT      * print space
0000224E                          1442  
0000224E  0CB9 00000000 000034F0  1443          CMP.L #$0,DR 
00002258  6700 0058               1444          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000225C                          1445       
0000225C                          1446          *******PRINT ASL*******
0000225C  43F9 00003496           1447          LEA       PASL,A1
00002262  103C 000E               1448          MOVE.B   #14,D0     ; moves #14 into data register D0
00002266  4E4F                    1449          TRAP     #15 
00002268  4EB9 00002A06           1450          JSR      SIZEPRINT
0000226E                          1451          
0000226E  4EB9 00002A78           1452          JSR     PRINTCLRSPOT
00002274                          1453          
00002274  4242                    1454          CLR D2
00002276  4243                    1455          CLR D3
00002278  143C 0000               1456          MOVE.B  #%000,D2     ; mode data register
0000227C  1639 00003500           1457          MOVE.B  sRN,D3       ; source register number
00002282  4EB9 00002E36           1458          JSR     EA_START
00002288                          1459          
00002288  4EB9 00002A86           1460          JSR     PRINTCOMA   ; print coma
0000228E                          1461          
0000228E  4243                    1462          CLR D3
00002290  4242                    1463          CLR D2
00002292  143C 0000               1464          MOVE.B  #%000,D2      ; mode data register
00002296  1639 00003501           1465          MOVE.B  dRN,D3        ; destination register
0000229C  4EB9 00002E36           1466          JSR     EA_START
000022A2                          1467          
000022A2  43F9 0000342E           1468          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000022A8  103C 000E               1469          MOVE.B   #14,D0     ; moves #14 into data register D0
000022AC  4E4F                    1470          TRAP     #15       ; Displays message via trap 14
000022AE                          1471          
000022AE  6000 EFF8               1472          BRA   MEMORYGRABBER
000022B2                          1473  
000022B2                          1474          
000022B2                          1475  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
000022B2  43F9 00003492           1476           LEA       PASR,A1
000022B8  103C 000E               1477          MOVE.B   #14,D0     ; moves #14 into data register D0
000022BC  4E4F                    1478          TRAP     #15 
000022BE  4EB9 000029D8           1479          JSR      SIZESPLIT
000022C4                          1480          
000022C4  4EB9 00002A78           1481          JSR     PRINTCLRSPOT
000022CA                          1482          
000022CA  4242                    1483          CLR D2
000022CC  4243                    1484          CLR D3
000022CE  143C 0000               1485          MOVE.B  #%000,D2     ; mode data register
000022D2  1639 00003500           1486          MOVE.B  sRN,D3       ; source register number
000022D8  4EB9 00002E36           1487          JSR     EA_START
000022DE  4EB9 00002A86           1488          JSR     PRINTCOMA   ; print coma
000022E4  4243                    1489          CLR D3
000022E6  4242                    1490          CLR D2
000022E8  143C 0000               1491          MOVE.B  #%000,D2      ; mode data register
000022EC  1639 00003501           1492          MOVE.B  dRN,D3        ; destination register
000022F2  4EB9 00002E36           1493          JSR     EA_START
000022F8                          1494          
000022F8  43F9 0000342E           1495          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000022FE  103C 000E               1496          MOVE.B   #14,D0     ; moves #14 into data register D0
00002302  4E4F                    1497          TRAP     #15       ; Displays message via trap 14
00002304                          1498          
00002304  6000 EFA2               1499          BRA   MEMORYGRABBER
00002308                          1500  
00002308                          1501  
00002308                          1502  PR_G_LS_EA
00002308  4EB9 00002A78           1503          JSR     PRINTCLRSPOT      * print space
0000230E                          1504  
0000230E  0CB9 00000000 000034F0  1505          CMP.L #$0,DR 
00002318  6700 0058               1506          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
0000231C                          1507       
0000231C                          1508          *******PRINT LSL*******
0000231C  43F9 0000348A           1509          LEA       PLSL,A1
00002322  103C 000E               1510          MOVE.B   #14,D0     ; moves #14 into data register D0
00002326  4E4F                    1511          TRAP     #15 
00002328  4EB9 00002A06           1512          JSR      SIZEPRINT
0000232E                          1513          
0000232E  4EB9 00002A78           1514          JSR     PRINTCLRSPOT
00002334                          1515          
00002334  4242                    1516          CLR D2
00002336  4243                    1517          CLR D3
00002338  143C 0000               1518          MOVE.B  #%000,D2     ; mode data register
0000233C  1639 00003500           1519          MOVE.B  sRN,D3       ; source register number
00002342  4EB9 00002E36           1520          JSR     EA_START
00002348                          1521          
00002348  4EB9 00002A86           1522          JSR     PRINTCOMA   ; print coma
0000234E                          1523          
0000234E  4243                    1524          CLR D3
00002350  4242                    1525          CLR D2
00002352  143C 0000               1526          MOVE.B  #%000,D2      ; mode data register
00002356  1639 00003501           1527          MOVE.B  dRN,D3        ; destination register
0000235C  4EB9 00002E36           1528          JSR     EA_START
00002362                          1529          
00002362  43F9 0000342E           1530          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002368  103C 000E               1531          MOVE.B   #14,D0     ; moves #14 into data register D0
0000236C  4E4F                    1532          TRAP     #15       ; Displays message via trap 14
0000236E                          1533          
0000236E  6000 EF38               1534          BRA   MEMORYGRABBER
00002372                          1535          
00002372                          1536  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
00002372  43F9 0000348E           1537           LEA       PLSR,A1
00002378  103C 000E               1538           MOVE.B   #14,D0     ; moves #14 into data register D0
0000237C  4E4F                    1539          TRAP     #15 
0000237E  4EB9 00002A06           1540          JSR      SIZEPRINT
00002384                          1541          
00002384  4EB9 00002A78           1542          JSR     PRINTCLRSPOT
0000238A                          1543          
0000238A  4242                    1544          CLR D2
0000238C  4243                    1545          CLR D3
0000238E  143C 0000               1546          MOVE.B  #%000,D2     ; mode data register
00002392  1639 00003500           1547          MOVE.B  sRN,D3       ; source register number
00002398  4EB9 00002E36           1548          JSR     EA_START
0000239E  4EB9 00002A86           1549          JSR     PRINTCOMA   ; print coma
000023A4  4243                    1550          CLR D3
000023A6  4242                    1551          CLR D2
000023A8  143C 0000               1552          MOVE.B  #%000,D2      ; mode data register
000023AC  1639 00003501           1553          MOVE.B  dRN,D3        ; destination register
000023B2  4EB9 00002E36           1554          JSR     EA_START
000023B8                          1555          
000023B8  43F9 0000342E           1556          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000023BE  103C 000E               1557          MOVE.B   #14,D0     ; moves #14 into data register D0
000023C2  4E4F                    1558          TRAP     #15       ; Displays message via trap 14
000023C4                          1559          
000023C4  6000 EEE2               1560          BRA   MEMORYGRABBER
000023C8                          1561  
000023C8                          1562  
000023C8                          1563  PR_G_RO_EA
000023C8  4EB9 00002A78           1564          JSR     PRINTCLRSPOT      * print space 
000023CE                          1565          
000023CE  0CB9 00000000 000034F0  1566           CMP.L #$0,DR 
000023D8  6700 0058               1567          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000023DC                          1568       
000023DC                          1569          *******PRINT LSL*******
000023DC  43F9 0000349A           1570          LEA       PROL,A1
000023E2  103C 000E               1571          MOVE.B   #14,D0     ; moves #14 into data register D0
000023E6  4E4F                    1572          TRAP     #15 
000023E8  4EB9 00002A06           1573          JSR      SIZEPRINT
000023EE                          1574          
000023EE  4EB9 00002A78           1575          JSR     PRINTCLRSPOT
000023F4                          1576          
000023F4  4242                    1577          CLR D2
000023F6  4243                    1578          CLR D3
000023F8  143C 0000               1579          MOVE.B  #%000,D2     ; mode data register
000023FC  1639 00003500           1580          MOVE.B  sRN,D3       ; source register number
00002402  4EB9 00002E36           1581          JSR     EA_START
00002408  4EB9 00002A86           1582          JSR     PRINTCOMA   ; print coma
0000240E  4243                    1583          CLR D3
00002410  4242                    1584          CLR D2
00002412  143C 0000               1585          MOVE.B  #%000,D2      ; mode data register
00002416  1639 00003501           1586          MOVE.B  dRN,D3        ; destination register
0000241C  4EB9 00002E36           1587          JSR     EA_START
00002422                          1588          
00002422  43F9 0000342E           1589          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002428  103C 000E               1590          MOVE.B   #14,D0     ; moves #14 into data register D0
0000242C  4E4F                    1591          TRAP     #15       ; Displays message via trap 14
0000242E                          1592          
0000242E  6000 EE78               1593          BRA   MEMORYGRABBER
00002432                          1594  
00002432                          1595          
00002432                          1596  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
00002432  43F9 0000349E           1597          LEA       PROR,A1
00002438  103C 000E               1598          MOVE.B   #14,D0     ; moves #14 into data register D0
0000243C  4E4F                    1599          TRAP     #15 
0000243E  4EB9 00002A06           1600          JSR      SIZEPRINT
00002444                          1601          
00002444  4EB9 00002A78           1602          JSR     PRINTCLRSPOT
0000244A                          1603          
0000244A  4242                    1604          CLR D2
0000244C  4243                    1605          CLR D3
0000244E  143C 0000               1606          MOVE.B  #%000,D2     ; mode data register
00002452  1639 00003500           1607          MOVE.B  sRN,D3       ; source register number
00002458  4EB9 00002E36           1608          JSR     EA_START
0000245E  4EB9 00002A86           1609          JSR     PRINTCOMA   ; print coma
00002464  4243                    1610          CLR D3
00002466  4242                    1611          CLR D2
00002468  143C 0000               1612          MOVE.B  #%000,D2      ; mode data register
0000246C  1639 00003501           1613          MOVE.B  dRN,D3        ; destination register
00002472  4EB9 00002E36           1614          JSR     EA_START
00002478                          1615          
00002478  43F9 0000342E           1616          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000247E  103C 000E               1617          MOVE.B   #14,D0     ; moves #14 into data register D0
00002482  4E4F                    1618          TRAP     #15       ; Displays message via trap 14
00002484                          1619          
00002484  6000 EE22               1620          BRA   MEMORYGRABBER
00002488                          1621  
00002488                          1622  PR_RO 
00002488  4EB9 00002A78           1623       JSR     PRINTCLRSPOT      * print space
0000248E                          1624   
0000248E  0CB9 00000000 000034F0  1625       CMP.L #$0,DR 
00002498  6700 01D8               1626       BEQ   PR_ROR   ;RIGHT SHIFT
0000249C                          1627      
0000249C                          1628      *******PRINT ASL*******
0000249C  43F9 0000349A           1629       LEA       PROL,A1
000024A2  103C 000E               1630       MOVE.B   #14,D0     ; moves #14 into data register D0
000024A6  4E4F                    1631       TRAP     #15 
000024A8                          1632  
000024A8  4EB9 00002A06           1633       JSR      SIZEPRINT
000024AE                          1634      
000024AE  4EB9 00002A78           1635       JSR     PRINTCLRSPOT
000024B4  4EB9 00002A94           1636       JSR     PRINTHASH   * print hash
000024BA                          1637  
000024BA                          1638      
000024BA  4241                    1639      CLR D1
000024BC  1239 000034FC           1640      MOVE.B   S_COUNT,D1
000024C2  103C 0003               1641      MOVE.B   #3,D0
000024C6  4E4F                    1642      TRAP     #15
000024C8  4EB9 00002A86           1643      JSR     PRINTCOMA   ; print coma
000024CE  4243                    1644      CLR D3
000024D0  4242                    1645      CLR D2
000024D2  143C 0000               1646      MOVE.B  #%000,D2
000024D6  1639 00003501           1647      MOVE.B  dRN,D3
000024DC  4EB9 00002E36           1648      JSR     EA_START
000024E2                          1649      
000024E2  43F9 0000342E           1650      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000024E8  103C 000E               1651      MOVE.B   #14,D0     ; moves #14 into data register D0
000024EC  4E4F                    1652      TRAP     #15       ; Displays message via trap 14
000024EE                          1653  
000024EE                          1654      
000024EE  6000 EDB8               1655      BRA    MEMORYGRABBER
000024F2                          1656  
000024F2                          1657  
000024F2                          1658  
000024F2                          1659  PR_AS 
000024F2  4EB9 00002A78           1660       JSR     PRINTCLRSPOT      * print space
000024F8                          1661  
000024F8  0CB9 00000000 000034F0  1662       CMP.L #$0,DR 
00002502  6700 0118               1663      BEQ   PR_ASR   ;RIGHT SHIFT
00002506                          1664      
00002506                          1665      *******PRINT ASL*******
00002506  43F9 00003496           1666       LEA       PASL,A1
0000250C  103C 000E               1667       MOVE.B   #14,D0     ; moves #14 into data register D0
00002510  4E4F                    1668       TRAP     #15 
00002512                          1669  
00002512  4EB9 00002A06           1670      JSR      SIZEPRINT
00002518                          1671      
00002518  4EB9 00002A78           1672      JSR     PRINTCLRSPOT
0000251E  4EB9 00002A94           1673      JSR     PRINTHASH   ; print hash
00002524                          1674      
00002524  4241                    1675      CLR D1
00002526  1239 000034FC           1676      MOVE.B   S_COUNT,D1
0000252C  103C 0003               1677      MOVE.B   #3,D0
00002530  4E4F                    1678      TRAP     #15
00002532  4EB9 00002A86           1679      JSR     PRINTCOMA   ; print coma
00002538  4243                    1680      CLR D3
0000253A  4242                    1681      CLR D2
0000253C  143C 0000               1682      MOVE.B  #%000,D2
00002540  1639 00003501           1683      MOVE.B  dRN,D3
00002546  4EB9 00002E36           1684      JSR     EA_START
0000254C                          1685      
0000254C  43F9 0000342E           1686      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002552  103C 000E               1687      MOVE.B   #14,D0     ; moves #14 into data register D0
00002556  4E4F                    1688      TRAP     #15       ; Displays message via trap 14
00002558                          1689  
00002558  6000 ED4E               1690      BRA    MEMORYGRABBER
0000255C                          1691  
0000255C                          1692                        
0000255C                          1693                          
0000255C                          1694  PR_LS 
0000255C  4EB9 00002A78           1695      JSR     PRINTCLRSPOT      * print space
00002562                          1696  
00002562  0CB9 00000000 000034F0  1697      CMP.L #$0,DR 
0000256C  6700 0058               1698      BEQ   PR_LSR   ;RIGHT SHIFT
00002570                          1699      
00002570                          1700      *******PRINT LSL*******
00002570  43F9 0000348A           1701       LEA       PLSL,A1
00002576  103C 000E               1702       MOVE.B   #14,D0     ; moves #14 into data register D0
0000257A  4E4F                    1703       TRAP     #15 
0000257C                          1704  
0000257C  4EB9 00002A06           1705      JSR      SIZEPRINT
00002582                          1706      
00002582  4EB9 00002A78           1707      JSR     PRINTCLRSPOT
00002588  4EB9 00002A94           1708      JSR     PRINTHASH   ; print hash
0000258E                          1709      
0000258E  4241                    1710      CLR D1
00002590  1239 000034FC           1711      MOVE.B   S_COUNT,D1
00002596  103C 0003               1712      MOVE.B   #3,D0
0000259A  4E4F                    1713      TRAP     #15
0000259C  4EB9 00002A86           1714      JSR     PRINTCOMA   ; print coma
000025A2  4243                    1715      CLR D3
000025A4  4242                    1716      CLR D2
000025A6  143C 0000               1717      MOVE.B  #%000,D2
000025AA  1639 00003501           1718      MOVE.B  dRN,D3
000025B0  4EB9 00002E36           1719      JSR     EA_START
000025B6                          1720      
000025B6  43F9 0000342E           1721      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000025BC  103C 000E               1722      MOVE.B   #14,D0     ; moves #14 into data register D0
000025C0  4E4F                    1723      TRAP     #15       ; Displays message via trap 14
000025C2                          1724  
000025C2                          1725      
000025C2  6000 ECE4               1726      BRA    MEMORYGRABBER
000025C6                          1727            
000025C6  43F9 0000348E           1728  PR_LSR LEA   PLSR,A1
000025CC  103C 000E               1729        MOVE.B   #14,D0     ; moves #14 into data register D0
000025D0  4E4F                    1730        TRAP     #15       ; Displays message via trap 14 
000025D2  4EB9 00002A06           1731        JSR      SIZEPRINT
000025D8                          1732        
000025D8  4EB9 00002A78           1733        JSR     PRINTCLRSPOT
000025DE  4EB9 00002A94           1734        JSR     PRINTHASH   ; print hash
000025E4                          1735        
000025E4  4241                    1736        CLR D1
000025E6  1239 000034FC           1737        MOVE.B   S_COUNT,D1
000025EC  103C 0003               1738        MOVE.B   #3,D0
000025F0  4E4F                    1739        TRAP     #15
000025F2  4EB9 00002A86           1740        JSR     PRINTCOMA   ; print coma
000025F8  4243                    1741        CLR D3
000025FA  4242                    1742        CLR D2
000025FC  143C 0000               1743        MOVE.B #%000,D2
00002600  1639 00003501           1744        MOVE.B  dRN,D3
00002606  4EB9 00002E36           1745        JSR   EA_START
0000260C                          1746        
0000260C  43F9 0000342E           1747        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002612  103C 000E               1748        MOVE.B   #14,D0     ; moves #14 into data register D0
00002616  4E4F                    1749        TRAP     #15       ; Displays message via trap 14
00002618                          1750  
00002618                          1751        
00002618  6000 EC8E               1752        BRA MEMORYGRABBER
0000261C                          1753        
0000261C  43F9 00003492           1754  PR_ASR LEA   PASR,A1
00002622  103C 000E               1755         MOVE.B   #14,D0     ; moves #14 into data register D0
00002626  4E4F                    1756        TRAP     #15       ; Displays message via trap 14 
00002628  4EB9 00002A06           1757        JSR      SIZEPRINT
0000262E                          1758        
0000262E  4EB9 00002A78           1759        JSR     PRINTCLRSPOT
00002634  4EB9 00002A94           1760        JSR     PRINTHASH   ; print hash
0000263A                          1761        
0000263A  4241                    1762        CLR D1
0000263C  1239 000034FC           1763        MOVE.B   S_COUNT,D1
00002642  103C 0003               1764        MOVE.B   #3,D0
00002646  4E4F                    1765        TRAP     #15
00002648  4EB9 00002A86           1766        JSR     PRINTCOMA   ; print coma
0000264E  4243                    1767        CLR D3
00002650  4242                    1768        CLR D2
00002652  143C 0000               1769        MOVE.B #%000,D2
00002656  1639 00003501           1770        MOVE.B  dRN,D3
0000265C  4EB9 00002E36           1771        JSR   EA_START
00002662                          1772        
00002662  43F9 0000342E           1773        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002668  103C 000E               1774        MOVE.B   #14,D0     ; moves #14 into data register D0
0000266C  4E4F                    1775        TRAP     #15       ; Displays message via trap 14
0000266E                          1776  
0000266E  6000 EC38               1777        BRA MEMORYGRABBER
00002672                          1778  
00002672                          1779        
00002672                          1780  PR_ROR 
00002672  43F9 0000349E           1781        LEA   PROR,A1
00002678  103C 000E               1782        MOVE.B   #14,D0     ; moves #14 into data register D0
0000267C  4E4F                    1783        TRAP     #15       ; Displays message via trap 14 
0000267E  4EB9 00002A06           1784        JSR      SIZEPRINT
00002684                          1785        
00002684  4EB9 00002A78           1786        JSR     PRINTCLRSPOT
0000268A  4EB9 00002A94           1787        JSR     PRINTHASH   ; print hash
00002690                          1788        
00002690  4241                    1789        CLR D1
00002692  1239 000034FC           1790        MOVE.B   S_COUNT,D1
00002698  103C 0003               1791        MOVE.B   #3,D0
0000269C  4E4F                    1792        TRAP     #15
0000269E  4EB9 00002A86           1793        JSR     PRINTCOMA   ; print coma
000026A4  4243                    1794        CLR D3
000026A6  4242                    1795        CLR D2
000026A8  143C 0000               1796        MOVE.B #%000,D2
000026AC  1639 00003501           1797        MOVE.B  dRN,D3
000026B2  4EB9 00002E36           1798        JSR   EA_START
000026B8                          1799        
000026B8  43F9 0000342E           1800        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000026BE  103C 000E               1801        MOVE.B   #14,D0     ; moves #14 into data register D0
000026C2  4E4F                    1802        TRAP     #15       ; Displays message via trap 14
000026C4                          1803  
000026C4                          1804        
000026C4  6000 EBE2               1805        BRA MEMORYGRABBER
000026C8                          1806        
000026C8                          1807  ;-----------------------extra parts for above code to function
000026C8                          1808        
000026C8                          1809  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
000026C8  0C39 0000 000034FC      1810           CMP.B #$0,S_COUNT
000026D0  6700 0004               1811           BEQ   IS_EIGHT
000026D4  4E75                    1812           RTS
000026D6                          1813           
000026D6  13FC 0008 000034FC      1814  IS_EIGHT  MOVE.B #8,S_COUNT
000026DE  4E75                    1815            RTS
000026E0                          1816  
000026E0                          1817  ;---------------------------------------------------------
000026E0                          1818                  ;MOVE SECTION
000026E0  43F9 00003434           1819  PRINTMOVE LEA PMOVE,A1
000026E6  103C 000E               1820      MOVE.B   #14,D0     ; moves #14 into data register D0
000026EA  4E4F                    1821      TRAP     #15       ; Displays message via trap 14
000026EC                          1822     * JSR     SIZESPLIT
000026EC                          1823      *BRA EADN
000026EC  4E75                    1824      RTS
000026EE                          1825      
000026EE  43F9 00003440           1826  PRINTMOVEA LEA PMOVEA,A1
000026F4  103C 000E               1827      MOVE.B   #14,D0     ; moves #14 into data register D0
000026F8  4E4F                    1828      TRAP     #15       ; Displays message via trap 14
000026FA  4EB9 000029D8           1829      JSR     SIZESPLIT
00002700  6000 045C               1830      BRA EADN
00002704                          1831      
00002704                          1832                      ;First set of commands
00002704  43F9 0000344D           1833  PRINTNOP    LEA PNOP,A1
0000270A  103C 000E               1834      MOVE.B   #14,D0     ; moves #14 into data register D0
0000270E  4E4F                    1835      TRAP     #15       ; Displays message via trap 14
00002710                          1836      
00002710  6000 EB96               1837      BRA     MEMORYGRABBER
00002714                          1838  
00002714  43F9 00003439           1839  PRINTMOVEM  LEA PMOVEM,A1
0000271A  103C 000E               1840      MOVE.B   #14,D0     ; moves #14 into data register D0
0000271E  4E4F                    1841      TRAP     #15       ; Displays message via trap 14
00002720  4EB9 000029D8           1842      JSR     SIZESPLIT
00002726  6000 0436               1843      BRA EADN
0000272A                          1844  
0000272A  43F9 00003451           1845  PRINTLEA    LEA PLEA,A1
00002730  103C 000E               1846      MOVE.B   #14,D0     ; moves #14 into data register D0
00002734  4E4F                    1847      TRAP     #15       ; Displays message via trap 14
00002736  4EB9 000029D8           1848      JSR     SIZESPLIT
0000273C  6000 0420               1849      BRA EADN
00002740                          1850  
00002740  43F9 00003455           1851  PRINTNOT    LEA PNOT,A1
00002746  103C 000E               1852      MOVE.B   #14,D0     ; moves #14 into data register D0
0000274A  4E4F                    1853      TRAP     #15       ; Displays message via trap 14
0000274C  4EB9 000029D8           1854      JSR     SIZESPLIT
00002752  6000 040A               1855      BRA EADN
00002756                          1856  
00002756  43F9 00003459           1857  PRINTJSR    LEA PJSR,A1
0000275C  103C 000E               1858      MOVE.B   #14,D0     ; moves #14 into data register D0
00002760  4E4F                    1859      TRAP     #15       ; Displays message via trap 14
00002762  4EB9 000029D8           1860      JSR     SIZESPLIT
00002768  6000 03F4               1861      BRA EADN
0000276C                          1862  
0000276C  43F9 0000345D           1863  PRINTRTS    LEA PRTS,A1
00002772  103C 000E               1864      MOVE.B   #14,D0     ; moves #14 into data register D0
00002776  4E4F                    1865      TRAP     #15       ; Displays message via trap 14
00002778                          1866      
00002778  6000 EB2E               1867      BRA     MEMORYGRABBER
0000277C                          1868      
0000277C                          1869                  ;ADDQ SECTION
0000277C                          1870  PRINTADDQ 
0000277C  43F9 00003485           1871      LEA     PADDQ,A1
00002782  103C 000E               1872      MOVE.B  #14,D0     ; moves #14 into data register D0
00002786  4E4F                    1873      TRAP    #15       ; Displays message via trap 14
00002788                          1874  
00002788  4EB9 00002A2A           1875      JSR     SIZEPRINT2
0000278E  4EB9 00002A78           1876      JSR     PRINTCLRSPOT 
00002794  4EB9 00002A94           1877      JSR     PRINTHASH   ; print hash
0000279A  4EB9 00002AA0           1878      JSR     PRINTDOLLARSIGN     ; print dollar sign
000027A0                          1879      
000027A0  4241                    1880      CLR     D1
000027A2  1239 000034D0           1881      MOVE.B  DATA_FIELD,D1
000027A8  103C 0003               1882      MOVE.B  #3,D0     
000027AC  4E4F                    1883      TRAP    #15 
000027AE                          1884      
000027AE  4EB9 00002A86           1885      JSR     PRINTCOMA   ; print coma
000027B4                          1886      
000027B4  4243                    1887      CLR     D3
000027B6  4242                    1888      CLR     D2
000027B8  1439 000034CB           1889      MOVE.B  DEST_MODE,D2
000027BE  1639 000034CA           1890      MOVE.B  DEST_REG,D3
000027C4                          1891      
000027C4  4EB9 00002E36           1892      JSR     EA_START
000027CA                          1893      
000027CA  43F9 0000342E           1894      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
000027D0  103C 000E               1895      MOVE.B  #14,D0     ; moves #14 into data register D0
000027D4  4E4F                    1896      TRAP    #15       ; Displays message via trap 14
000027D6                          1897      
000027D6  6000 EAD0               1898     BRA      MEMORYGRABBER
000027DA                          1899  
000027DA                          1900                  ;SECOND SET OF COMMANDS
000027DA  43F9 00003461           1901  PRINTBGT LEA PBGT,A1
000027E0  103C 000E               1902      MOVE.B   #14,D0     ; moves #14 into data register D0
000027E4  4E4F                    1903      TRAP     #15       ; Displays message via trap 14
000027E6  4EB9 000029D8           1904      JSR SIZESPLIT
000027EC  6000 0370               1905      BRA EADN
000027F0                          1906  
000027F0  43F9 00003465           1907  PRINTBEQ LEA PBEQ,A1
000027F6  103C 000E               1908      MOVE.B   #14,D0     ; moves #14 into data register D0
000027FA  4E4F                    1909      TRAP     #15       ; Displays message via trap 14
000027FC  4EB9 000029D8           1910      JSR SIZESPLIT
00002802  6000 035A               1911      BRA EADN
00002806                          1912  
00002806  43F9 00003469           1913  PRINTBLE LEA PBLE,A1
0000280C  103C 000E               1914      MOVE.B   #14,D0     ; moves #14 into data register D0
00002810  4E4F                    1915      TRAP     #15       ; Displays message via trap 14
00002812  4EB9 000029D8           1916      JSR SIZESPLIT
00002818  6000 0344               1917      BRA EADN
0000281C                          1918  
0000281C  43F9 0000346D           1919  PRINTBRA LEA PBRA,A1
00002822  103C 000E               1920      MOVE.B   #14,D0     ; moves #14 into data register D0
00002826  4E4F                    1921      TRAP     #15       ; Displays message via trap 14
00002828  4EB9 000029D8           1922      JSR SIZESPLIT
0000282E  6000 032E               1923      BRA EADN
00002832                          1924      
00002832                          1925                  ;MOVEQ SECTION
00002832                          1926  PRINTMOVEQ 
00002832  43F9 00003446           1927      LEA PMOVEQ,A1
00002838  103C 000E               1928      MOVE.B   #14,D0     ; moves #14 into data register D0
0000283C  4E4F                    1929      TRAP     #15       ; Displays message via trap 14
0000283E                          1930      
0000283E  4EB9 00002A78           1931      JSR     PRINTCLRSPOT
00002844  4EB9 00002A94           1932      JSR     PRINTHASH   ; print hash
0000284A  4EB9 00002AA0           1933      JSR     PRINTDOLLARSIGN     ; print dollar sign  
00002850                          1934   
00002850  2239 000034D0           1935      MOVE.L      DATA_FIELD,D1
00002856  143C 0010               1936      MOVE.B      #16,D2
0000285A  103C 000F               1937      MOVE.B      #15,D0     ; moves #14 into data register D0
0000285E  4E4F                    1938      TRAP        #15 
00002860                          1939      
00002860  4EB9 00002A86           1940      JSR     PRINTCOMA   ; print coma
00002866  1E3C 0000               1941      MOVE.B #0,D7
0000286A  7400                    1942      MOVE.L #%000,D2
0000286C  1639 000034CA           1943      MOVE.B DEST_REG,D3
00002872  6000 02EA               1944      BRA EADN
00002876                          1945  
00002876                          1946                  ;OR SECTION
00002876                          1947  PRINTOR 
00002876  43F9 00003471           1948      LEA     POR,A1
0000287C  103C 000E               1949      MOVE.B  #14,D0     ; moves #14 into data register D0
00002880  4E4F                    1950      TRAP    #15       ; Displays message via trap 14
00002882                          1951      
00002882  4EB9 00002A2A           1952      JSR     SIZEPRINT2 
00002888                          1953      
00002888                          1954      * TODO : CHECK THE INVELID_EA FLAG
00002888                          1955      
00002888  0C39 0000 000034E1      1956      CMP.B   #%0,XBit
00002890  6700 021C               1957      BEQ     PRINT_EA_TO_DN
00002894  6000 0270               1958      BRA     PRINT_DN_TO_EA
00002898                          1959      
00002898                          1960  
00002898                          1961                  ;SUB SECTION
00002898                          1962  PRINTSUB 
00002898  43F9 00003474           1963      LEA PSUB,A1
0000289E  103C 000E               1964      MOVE.B   #14,D0     ; moves #14 into data register D0
000028A2  4E4F                    1965      TRAP     #15       ; Displays message via trap 14
000028A4                          1966      
000028A4  4EB9 00002A2A           1967       JSR     SIZEPRINT2 
000028AA                          1968      
000028AA                          1969      * TODO : CHECK THE INVELID_EA FLAG
000028AA                          1970      
000028AA  0C39 0000 000034E1      1971      CMP.B   #%0,XBit
000028B2  6700 01FA               1972      BEQ     PRINT_EA_TO_DN
000028B6  6000 024E               1973      BRA     PRINT_DN_TO_EA
000028BA                          1974      
000028BA                          1975  
000028BA                          1976                  ;AND SECTION
000028BA                          1977  PRINTAND 
000028BA  43F9 00003478           1978      LEA PAND,A1
000028C0  103C 000E               1979      MOVE.B   #14,D0     ; moves #14 into data register D0
000028C4  4E4F                    1980      TRAP     #15       ; Displays message via trap 14
000028C6                          1981      
000028C6  4EB9 00002A2A           1982      JSR     SIZEPRINT2 
000028CC                          1983      
000028CC                          1984      * TODO : CHECK THE INVELID_EA FLAG
000028CC                          1985      
000028CC  0C39 0000 000034E1      1986      CMP.B   #%0,XBit
000028D4  6700 01D8               1987      BEQ     PRINT_EA_TO_DN
000028D8  6000 022C               1988      BRA     PRINT_DN_TO_EA
000028DC                          1989  
000028DC                          1990                  ;ADD SPLIT              
000028DC                          1991  PRINTADD 
000028DC  43F9 0000347C           1992      LEA PADD,A1
000028E2  103C 000E               1993      MOVE.B   #14,D0     ; moves #14 into data register D0
000028E6  4E4F                    1994      TRAP     #15       ; Displays message via trap 14
000028E8                          1995      
000028E8  4EB9 00002A2A           1996      JSR     SIZEPRINT2 
000028EE                          1997      
000028EE                          1998      * TODO : CHECK THE INVELID_EA FLAG
000028EE                          1999      
000028EE  0C39 0000 000034E1      2000      CMP.B   #%0,XBit
000028F6  6700 01B6               2001      BEQ     PRINT_EA_TO_DN
000028FA  6000 020A               2002      BRA     PRINT_DN_TO_EA
000028FE                          2003      
000028FE                          2004  PRINTADDA 
000028FE  43F9 00003480           2005      LEA PADDA,A1
00002904  103C 000E               2006      MOVE.B   #14,D0     ; moves #14 into data register D0
00002908  4E4F                    2007      TRAP     #15       ; Displays message via trap 14
0000290A                          2008      
0000290A  4EB9 00002A2A           2009      JSR     SIZEPRINT2 
00002910                          2010      
00002910                          2011      * TODO : CHECK THE INVELID_EA FLAG
00002910                          2012      
00002910  13F9 000034CE 000034CC  2013      MOVE.B  TEMP_MODE,SRC_MODE
0000291A  13F9 000034CF 000034CD  2014      MOVE.B  TEMP_REG,SRC_REG
00002924  4243                    2015      CLR     D3
00002926  4242                    2016      CLR     D2
00002928  1439 000034CC           2017      MOVE.B  SRC_MODE,D2
0000292E  1639 000034CD           2018      MOVE.B  SRC_REG,D3
00002934  4EB9 00002E36           2019      JSR     EA_START
0000293A                          2020  
0000293A  4EB9 00002A86           2021      JSR     PRINTCOMA   ; print coma
00002940  13FC 0001 000034CB      2022      MOVE.B  #%001,DEST_MODE
00002948  4243                    2023      CLR     D3
0000294A  4242                    2024      CLR     D2
0000294C  1439 000034CB           2025      MOVE.B  DEST_MODE,D2
00002952  1639 000034CA           2026      MOVE.B  DEST_REG,D3
00002958  4EB9 00002E36           2027      JSR     EA_START
0000295E                          2028  
0000295E  4EB9 00002A78           2029      JSR     PRINTCLRSPOT
00002964  43F9 0000342E           2030      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
0000296A  103C 000E               2031      MOVE.B  #14,D0     ; moves #14 into data register D0
0000296E  4E4F                    2032      TRAP    #15       ; Displays message via trap 14
00002970  6000 E936               2033      BRA     MEMORYGRABBER
00002974                          2034      
00002974                          2035                  ;THIRD ROTATE SPLIT   
00002974                          2036  PRINTROTATESPLIT 
00002974  0C79 0000 00003433      2037      CMP #0,CommandDetail   
0000297C                          2038      *BEQ PRINTLSL
0000297C  0C79 0001 00003433      2039      CMP #1,CommandDetail   
00002984                          2040      *BEQ PRINTLSLDOUBLE
00002984  0C79 0002 00003433      2041      CMP #2,CommandDetail   
0000298C                          2042      *BEQ PRINTLSR
0000298C  0C79 0003 00003433      2043      CMP #3,CommandDetail   
00002994                          2044      *BEQ PRINTLSRDOUBLE
00002994  0C79 0004 00003433      2045      CMP #4,CommandDetail   
0000299C                          2046      *BEQ PRINTASR
0000299C  0C79 0005 00003433      2047      CMP #5,CommandDetail   
000029A4                          2048      *BEQ PRINTASRDOUBLE
000029A4  0C79 0006 00003433      2049      CMP #6,CommandDetail   
000029AC                          2050      *BEQ PRINTASL
000029AC  0C79 0007 00003433      2051      CMP #7,CommandDetail   
000029B4                          2052      *BEQ PRINTASLDOUBLE
000029B4  0C79 0008 00003433      2053      CMP #8,CommandDetail   
000029BC                          2054      *BEQ PRINTROL
000029BC  0C79 0009 00003433      2055      CMP #9,CommandDetail   
000029C4                          2056      *BEQ PRINTROLDOUBLE
000029C4  0C79 000A 00003433      2057      CMP #10,CommandDetail
000029CC                          2058      *BEQ PRINTROR     
000029CC  0C79 000B 00003433      2059      CMP #11,CommandDetail
000029D4                          2060      *BEQ PRINTRORDOUBLE            
000029D4  6000 E8D2               2061      BRA MEMORYGRABBER    
000029D8                          2062  
000029D8                          2063  
000029D8                          2064                  ;SIZE PRINTER
000029D8                          2065  SIZESPLIT   
000029D8  0CB9 00000001 000034BA  2066      CMP.L #1,SizeValue
000029E2  6700 006A               2067      BEQ PRINTB
000029E6  0CB9 00000002 000034BA  2068      CMP.L #2,SizeValue
000029F0  6700 006A               2069      BEQ PRINTW
000029F4  0CB9 00000003 000034BA  2070      CMP.L #3,SizeValue
000029FE  6700 006A               2071      BEQ PRINTL
00002A02  6000 0074               2072      BRA PRINTCLRSPOT ; go to EA/DN section
00002A06                          2073  
00002A06                          2074  SIZEPRINT 
00002A06  0C39 0000 000034D4      2075       CMP.B  #$0,SIZE
00002A0E  6700 003E               2076       BEQ   PRINTB
00002A12  0C39 0001 000034D4      2077       CMP.B  #$1,SIZE
00002A1A  6700 0040               2078       BEQ   PRINTW      
00002A1E  0C39 0002 000034D4      2079       CMP.B  #$2,SIZE
00002A26  6700 0042               2080       BEQ   PRINTL 
00002A2A                          2081  
00002A2A                          2082  SIZEPRINT2   
00002A2A  0C39 0000 000034D5      2083      CMP.B #$00,SIZE_BITS
00002A32  6700 001A               2084      BEQ PRINTB
00002A36  0C39 0001 000034D5      2085      CMP.B #$01,SIZE_BITS
00002A3E  6700 001C               2086      BEQ PRINTW
00002A42  0C39 0010 000034D5      2087      CMP.B #$10,SIZE_BITS
00002A4A  6000 001E               2088      BRA  PRINTL
00002A4E                          2089  
00002A4E                          2090  PRINTB  
00002A4E  43F9 000034BE           2091      LEA PB,A1
00002A54  103C 000E               2092      MOVE.B   #14,D0     ; moves #14 into data register D0
00002A58  4E4F                    2093      TRAP     #15       ; Displays message via trap 14
00002A5A  4E75                    2094      RTS
00002A5C                          2095  
00002A5C                          2096  PRINTW      
00002A5C  43F9 000034C2           2097      LEA PW,A1
00002A62  103C 000E               2098      MOVE.B   #14,D0     ; moves #14 into data register D0
00002A66  4E4F                    2099      TRAP     #15       ; Displays message via trap 14
00002A68  4E75                    2100      RTS
00002A6A                          2101      
00002A6A                          2102  PRINTL 
00002A6A  43F9 000034C6           2103      LEA PL,A1
00002A70  103C 000E               2104      MOVE.B   #14,D0     ; moves #14 into data register D0
00002A74  4E4F                    2105      TRAP     #15       ; Displays message via trap 14
00002A76  4E75                    2106      RTS
00002A78                          2107  
00002A78                          2108  PRINTCLRSPOT 
00002A78  43F9 000034D8           2109      LEA CLRSPOT,A1
00002A7E  103C 000E               2110      MOVE.B   #14,D0     ; moves #14 into data register D0
00002A82  4E4F                    2111      TRAP     #15       ; Displays message via trap 14
00002A84  4E75                    2112      RTS
00002A86                          2113  
00002A86                          2114  PRINTCOMA   
00002A86  43F9 000034DE           2115      LEA     COMA,A1
00002A8C  103C 000E               2116      MOVE.B  #14,D0     
00002A90  4E4F                    2117      TRAP    #15
00002A92  4E75                    2118      RTS
00002A94                          2119  
00002A94                          2120  PRINTHASH 
00002A94  43F9 000034D6           2121      LEA     HASH,A1    * print hash
00002A9A  700E                    2122      MOVEQ   #14,D0
00002A9C  4E4F                    2123      TRAP    #15
00002A9E  4E75                    2124      RTS
00002AA0                          2125  
00002AA0                          2126  PRINTDOLLARSIGN   
00002AA0  43F9 000034DC           2127      LEA     DOLLARSIGN,A1   * print dollar sign
00002AA6  103C 000E               2128      MOVE.B   #14,D0
00002AAA  4E4F                    2129      TRAP     #15 
00002AAC  4E75                    2130      RTS
00002AAE                          2131  
00002AAE                          2132  PRINT_EA_TO_DN
00002AAE  13F9 000034CE 000034CC  2133      MOVE.B  TEMP_MODE,SRC_MODE
00002AB8  13F9 000034CF 000034CD  2134      MOVE.B  TEMP_REG,SRC_REG
00002AC2  4243                    2135      CLR     D3
00002AC4  4242                    2136      CLR     D2
00002AC6  1439 000034CC           2137      MOVE.B  SRC_MODE,D2
00002ACC  1639 000034CD           2138      MOVE.B  SRC_REG,D3
00002AD2  4EB9 00002E36           2139      JSR     EA_START
00002AD8                          2140  
00002AD8  4EB8 2A86               2141      JSR     PRINTCOMA   ; print coma
00002ADC                          2142   
00002ADC  4243                    2143      CLR     D3
00002ADE  4242                    2144      CLR     D2
00002AE0  1439 000034CB           2145      MOVE.B  DEST_MODE,D2
00002AE6  1639 000034CA           2146      MOVE.B  DEST_REG,D3
00002AEC  4EB9 00002E36           2147      JSR     EA_START
00002AF2                          2148  
00002AF2  4EB8 2A78               2149      JSR     PRINTCLRSPOT
00002AF6  43F9 0000342E           2150      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
00002AFC  103C 000E               2151      MOVE.B  #14,D0     ; moves #14 into data register D0
00002B00  4E4F                    2152      TRAP    #15       ; Displays message via trap 14
00002B02  6000 E7A4               2153      BRA     MEMORYGRABBER
00002B06                          2154      
00002B06                          2155  PRINT_DN_TO_EA    
00002B06  4243                    2156      CLR     D3
00002B08  4242                    2157      CLR     D2
00002B0A  1439 000034CB           2158      MOVE.B  DEST_MODE,D2
00002B10  1639 000034CD           2159      MOVE.B  SRC_REG,D3
00002B16  4EB9 00002E36           2160      JSR     EA_START
00002B1C                          2161      
00002B1C  4EB8 2A86               2162      JSR     PRINTCOMA   ; print coma
00002B20                          2163      
00002B20  13F9 000034CE 000034CC  2164      MOVE.B  TEMP_MODE,SRC_MODE
00002B2A  13F9 000034CF 000034CD  2165      MOVE.B  TEMP_REG,SRC_REG
00002B34  4243                    2166      CLR     D3
00002B36  4242                    2167      CLR     D2
00002B38  1439 000034CC           2168      MOVE.B  SRC_MODE,D2
00002B3E  1639 000034CD           2169      MOVE.B  SRC_REG,D3
00002B44  4EB9 00002E36           2170      JSR     EA_START
00002B4A                          2171      
00002B4A  4EB8 2A78               2172      JSR     PRINTCLRSPOT
00002B4E  43F9 0000342E           2173      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
00002B54  103C 000E               2174      MOVE.B  #14,D0     ; moves #14 into data register D0
00002B58  4E4F                    2175      TRAP    #15       ; Displays message via trap 14
00002B5A  6000 E74C               2176      BRA     MEMORYGRABBER
00002B5E                          2177  
00002B5E                          2178  
00002B5E                          2179                  ;PRINT EA/DN
00002B5E                          2180  EADN 
00002B5E  BE3C 0000               2181      CMP.B   #0,D7
00002B62  6700 0048               2182      BEQ     PRINTNOTRAIL
00002B66  BE3C 0001               2183      CMP.B   #1,D7
00002B6A  6700 000E               2184      BEQ     PRINTONETRAIL 
00002B6E  BE3C 0002               2185      CMP.B   #2,D7
00002B72  6700 001C               2186      BEQ     PRINTTWOTRAIL
00002B76                          2187      
00002B76  6000 E730               2188      BRA     MEMORYGRABBER
00002B7A                          2189      
00002B7A                          2190  PRINTONETRAIL 
00002B7A  4EB9 00002E36           2191      JSR EA_Start
00002B80  43F9 0000342E           2192      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002B86  103C 000E               2193      MOVE.B   #14,D0     ; moves #14 into data register D0
00002B8A  4E4F                    2194      TRAP     #15       ; Displays message via trap 14
00002B8C  6000 E71A               2195      BRA MEMORYGRABBER
00002B90                          2196  
00002B90                          2197  PRINTTWOTRAIL 
00002B90  4EB9 00002E36           2198      JSR EA_Start
00002B96  4EB9 00002E36           2199      JSR EA_Start
00002B9C  43F9 0000342E           2200      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002BA2  103C 000E               2201      MOVE.B   #14,D0     ; moves #14 into data register D0
00002BA6  4E4F                    2202      TRAP     #15       ; Displays message via trap 14
00002BA8  6000 E6FE               2203      BRA MEMORYGRABBER
00002BAC                          2204      
00002BAC                          2205  PRINTNOTRAIL 
00002BAC  4EB9 00002E36           2206      JSR EA_Start
00002BB2  43F9 0000342E           2207      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002BB8  103C 000E               2208      MOVE.B   #14,D0     ; moves #14 into data register D0
00002BBC  4E4F                    2209      TRAP     #15       ; Displays message via trap 14
00002BBE  6000 E6E8               2210      BRA MEMORYGRABBER
00002BC2                          2211  
00002BC2                          2212  CLOSINGSTATEMENTS     
00002BC2  43F9 0000342E           2213      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002BC8  103C 000E               2214      MOVE.B   #14,D0     ; moves #14 into data register D0
00002BCC  4E4F                    2215      TRAP     #15       ; Displays message via trap 14
00002BCE                          2216     
00002BCE                          2217  STOP    
00002BCE  103C 0009               2218      MOVE.B #9,D0        ; moves #9 into data register D0
00002BD2  4E4F                    2219      TRAP     #15       ; halt simulator via trap 9
00002BD4                          2220     
00002BD4                          2221      
00002BD4                          2222  ;----------------------------- ADDED THIS FOR OP CODE PART 
00002BD4                          2223  ********* CHECK DESTINATION ***********
00002BD4                          2224  CHECK_DESTINATION
00002BD4  13FC 000F 000034E3      2225      MOVE.B  #$F,DstMode
00002BDC                          2226      
00002BDC  0C39 0007 000034CB      2227      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
00002BE4  6700 0026               2228      BEQ     CHECK_DEST_REG             * Checks registers
00002BE8                          2229      
00002BE8  0C39 0005 000034CB      2230      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
00002BF0  6700 0058               2231      BEQ     R_CHECK_DEST    * Print DATA instead 
00002BF4                          2232      
00002BF4  0C39 0006 000034CB      2233      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002BFC  6700 004C               2234      BEQ     R_CHECK_DEST    * Print DATA instead
00002C00                          2235      
00002C00  13F9 000034CB 000034E3  2236      MOVE.B  DEST_MODE,DstMode
00002C0A  4E75                    2237      RTS
00002C0C                          2238  CHECK_DEST_REG
00002C0C  0C39 0002 000034CA      2239      CMP.B   #2,DEST_REG             * if DEST_REG = 010
00002C14  6700 0034               2240      BEQ     R_CHECK_DEST
00002C18                          2241  
00002C18  0C39 0003 000034CA      2242      CMP.B   #3,DEST_REG         * if DEST_REG = 011
00002C20  6700 0028               2243      BEQ     R_CHECK_DEST
00002C24                          2244      
00002C24  0C39 0005 000034CA      2245      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002C2C  6C00 016C               2246      BGE     RETURN
00002C30                          2247      
00002C30  13F9 000034CB 000034E3  2248      MOVE.B  DEST_MODE,DstMode
00002C3A  4286                    2249      CLR.L   D6
00002C3C  1C39 000034CA           2250      MOVE.B  DEST_REG,D6
00002C42  DD39 000034E3           2251      ADD.B   D6,DstMode
00002C48  4E75                    2252      RTS
00002C4A                          2253  R_CHECK_DEST
00002C4A  13FC 000E 000034E3      2254      MOVE.B  #$E,DstMode
00002C52  4E75                    2255      RTS
00002C54                          2256  ********* CHECK TEMP ***********
00002C54                          2257  CHECK_TEMP
00002C54                          2258  
00002C54  13FC 000F 000034E4      2259      MOVE.B  #$F,TempMode
00002C5C                          2260      
00002C5C  0C39 0007 000034CE      2261      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
00002C64  6700 0026               2262      BEQ     CHECK_TEMP_REG      * Checks registers
00002C68                          2263  
00002C68  0C39 0005 000034CE      2264      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
00002C70  6700 0058               2265      BEQ     R_CHECK_TEMP    * 
00002C74                          2266      
00002C74  0C39 0006 000034CE      2267      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
00002C7C  6700 004C               2268      BEQ     R_CHECK_TEMP    * 
00002C80                          2269      
00002C80  13F9 000034CE 000034E4  2270      MOVE.B  TEMP_MODE,TempMode
00002C8A  4E75                    2271      RTS
00002C8C                          2272  CHECK_TEMP_REG
00002C8C  0C39 0002 000034CF      2273      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
00002C94  6700 0034               2274      BEQ     R_CHECK_TEMP
00002C98                          2275  
00002C98  0C39 0003 000034CF      2276      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
00002CA0  6700 0028               2277      BEQ     R_CHECK_TEMP
00002CA4                          2278      
00002CA4  0C39 0005 000034CF      2279      CMP.B   #5,TEMP_REG             * if RRRT = 101
00002CAC  6700 00EC               2280      BEQ     RETURN
00002CB0                          2281      
00002CB0  13F9 000034CE 000034E4  2282      MOVE.B  TEMP_MODE,TempMode
00002CBA  4286                    2283      CLR.L   D6
00002CBC  1C39 000034CF           2284      MOVE.B  TEMP_REG,D6
00002CC2  DD39 000034E4           2285      ADD.B   D6,TempMode
00002CC8  4E75                    2286      RTS
00002CCA                          2287  R_CHECK_TEMP
00002CCA  13FC 000E 000034E4      2288      MOVE.B  #$E,TempMode
00002CD2  4E75                    2289      RTS
00002CD4                          2290  ******************** CHECK_SOURCE ******************** 
00002CD4                          2291  CHECK_SOURCE    * TODO
00002CD4  13FC 000F 000034E5      2292      MOVE.B  #$F,SrcMode
00002CDC                          2293      
00002CDC  0C39 0007 000034CC      2294      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
00002CE4  6700 0026               2295      BEQ     CHECK_SOURCE_REG    * Checks registers
00002CE8                          2296  
00002CE8  0C39 0005 000034CC      2297      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
00002CF0  6700 0058               2298      BEQ     R_CHECK_SOURCE 
00002CF4                          2299      
00002CF4  0C39 0006 000034CC      2300      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002CFC  6700 004C               2301      BEQ     R_CHECK_SOURCE 
00002D00                          2302      
00002D00  13F9 000034CC 000034E5  2303      MOVE.B  SRC_MODE,SrcMode
00002D0A  4E75                    2304      RTS
00002D0C                          2305  CHECK_SOURCE_REG
00002D0C  0C39 0002 000034CD      2306      CMP.B   #2,SRC_REG             * if RRRS = 010
00002D14  6700 0034               2307      BEQ     R_CHECK_SOURCE
00002D18                          2308  
00002D18  0C39 0003 000034CD      2309      CMP.B   #3,SRC_REG          * if RRRS = 011
00002D20  6700 0028               2310      BEQ     R_CHECK_SOURCE
00002D24                          2311      
00002D24  0C39 0005 000034CD      2312      CMP.B   #5,SRC_REG      * if RRRS = 101
00002D2C  6C00 006C               2313      BGE     RETURN
00002D30                          2314      
00002D30  13F9 000034CC 000034E5  2315      MOVE.B  SRC_MODE,SrcMode
00002D3A  4286                    2316      CLR.L   D6
00002D3C  1C39 000034CD           2317      MOVE.B  SRC_REG,D6
00002D42  DD39 000034E5           2318      ADD.B   D6,SrcMode
00002D48  4E75                    2319      RTS
00002D4A                          2320  R_CHECK_SOURCE
00002D4A  13FC 000E 000034E5      2321      MOVE.B  #$E,SrcMode
00002D52  4E75                    2322      RTS
00002D54                          2323  ******************** XBIT ********************
00002D54                          2324  CHECK_XBIT      
00002D54  0C39 0000 000034E1      2325      CMP.B   #%0,XBit
00002D5C  6700 0008               2326      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002D60  6600 001E               2327      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002D64  4E75                    2328      RTS
00002D66                          2329  TEMP_TO_DEST
00002D66  13F9 000034CF 000034CA  2330      MOVE.B  TEMP_REG,DEST_REG
00002D70  13F9 000034CE 000034CB  2331      MOVE.B  TEMP_MODE,DEST_MODE
00002D7A  4EB8 2BD4               2332      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002D7E  4E75                    2333      RTS
00002D80                          2334  TEMP_TO_SRC
00002D80  13F9 000034CF 000034CD  2335      MOVE.B  TEMP_REG,SRC_REG
00002D8A  13F9 000034CE 000034CC  2336      MOVE.B  TEMP_MODE,SRC_MODE
00002D94  4EB8 2CD4               2337      JSR     CHECK_SOURCE                 
00002D98  4E75                    2338      RTS
00002D9A                          2339    
00002D9A                          2340  ******************** OTHER COMMANDS ********************
00002D9A                          2341  RETURN
00002D9A  4E75                    2342      RTS
00002D9C                          2343  
00002D9C                          2344  FORMAT_DATA
00002D9C  0C39 0000 000034D0      2345      CMP.B   #0,DATA_FIELD
00002DA4  66F4                    2346      BNE     RETURN
00002DA6  13FC 0008 000034D0      2347      MOVE.B  #8,DATA_FIELD
00002DAE  4E75                    2348      RTS
00002DB0                          2349  
00002DB0                          2350  CHECK_DATA_NEG
00002DB0  BC3C 0080               2351      CMP.B   #128,D6
00002DB4  6700 0004               2352      BEQ     PRINT_NEG
00002DB8  4E75                    2353      RTS
00002DBA                          2354      
00002DBA                          2355  PRINT_NEG
00002DBA  43F9 000034DA           2356      LEA     NEG,A1      * print "-"
00002DC0  103C 000E               2357      MOVE.B  #14,D0
00002DC4  4E4F                    2358      TRAP    #15
00002DC6  4E75                    2359      RTS
00002DC8                          2360  
00002DC8                          2361  PRINT_DATA
00002DC8  43F9 000034A2           2362      LEA     PDATA,A1
00002DCE  103C 000E               2363      MOVE.B  #14,D0
00002DD2  4E4F                    2364      TRAP    #15
00002DD4                          2365      
00002DD4  4EB8 2A78               2366      JSR     PRINTCLRSPOT      * print space
00002DD8                          2367      
00002DD8                          2368      * TODO: PRINT #$
00002DD8                          2369      * TODO: PRINT COMMANDDATA 
00002DD8  4E75                    2370      RTS
00002DDA                          2371      
00002DDA                          2372  * SET SIZE FOR SIZESPLIT    
00002DDA                          2373  *SETSIZE1
00002DDA                          2374  *    CMP.B   #%0,SIZE_BITS
00002DDA                          2375  *    BEQ     SETSIZEW
00002DDA                          2376  *    CMP.B   #%1,SIZE_BITS
00002DDA                          2377  *    BEQ     SETSIZEL
00002DDA                          2378  *    RTS
00002DDA                          2379  *SETSIZE2
00002DDA                          2380  *    CMP.B   #%00,SIZE_BITS
00002DDA                          2381   *   BEQ     SETSIZEB
00002DDA                          2382    *  CMP.B   #%01,SIZE_BITS
00002DDA                          2383    *  BEQ     SETSIZEW
00002DDA                          2384     * CMP.B   #%10,SIZE_BITS
00002DDA                          2385      *BEQ     SETSIZEL
00002DDA                          2386  *SETSIZEB
00002DDA                          2387   *   MOVE.L  #1,SizeValue
00002DDA  4E75                    2388      RTS
00002DDC                          2389  *SETSIZEW
00002DDC                          2390   *   MOVE.L  #2,SizeValue 
00002DDC                          2391    *  RTS
00002DDC                          2392  *SETSIZEL
00002DDC                          2393   *   MOVE.L  #3,SizeValue
00002DDC                          2394    *  RTS
00002DDC                          2395      
00002DDC                          2396  *SETINVEA
00002DDC                          2397      *MOVE.B  #1,INVALID_EA
00002DDC                          2398      *RTS     
00002DDC                          2399      
00002DDC                          2400  CLEARMR
00002DDC  13FC 0000 000034CA      2401      MOVE.B  #0,DEST_REG 
00002DE4  13FC 0000 000034CB      2402      MOVE.B  #0,DEST_MODE
00002DEC  13FC 0000 000034CC      2403      MOVE.B  #0,SRC_MODE
00002DF4  13FC 0000 000034CD      2404      MOVE.B  #0,SRC_REG
00002DFC  13FC 0000 000034CE      2405      MOVE.B  #0,TEMP_MODE
00002E04  13FC 0000 000034CF      2406      MOVE.B  #0,TEMP_REG 
00002E0C  13FC 0000 000034D5      2407      MOVE.B  #0,SIZE_BITS
00002E14  13FC 0000 000034BA      2408      MOVE.B  #0,SizeValue
00002E1C  23FC 00000000 000034D0  2409      MOVE.L  #0,DATA_FIELD
00002E26  7200                    2410      MOVE.L #0,D1
00002E28  7400                    2411      MOVE.L #0,D2
00002E2A  7600                    2412      MOVE.L #0,D3
00002E2C  7800                    2413      MOVE.L #0,D4
00002E2E  7A00                    2414      MOVE.L #0,D5
00002E30  7C00                    2415      MOVE.L #0,D6
00002E32  7E00                    2416      MOVE.L #0,D7
00002E34  4E75                    2417      RTS  
00002E36                          2418  
00002E36                          2419  *************    
00002E36                          2420  
00002E36                          2421  *******************************************************
00002E36                          2422  * EA subroutine
00002E36                          2423  * Purpose: Generate EA
00002E36                          2424  *         Addresses used: 
00002E36                          2425  *            D2 FOR MODE
00002E36                          2426  *            D3 FOR REGISTER
00002E36                          2427  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002E36                          2428  *            D1 FOR PRINTING
00002E36                          2429  *            A6 MIMICKS INSTRUCTION BUFFER
00002E36                          2430  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002E36                          2431  ***************************************************
00002E36                          2432  
00002E36  0C39 000F 000034E6      2433  EA_start        CMP.B      #$F,STATE
00002E3E  6700 039A               2434                  BEQ        EA_FINISH
00002E42  4EF9 000031DC           2435                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002E48                          2436  
00002E48  B47C 0000               2437  Continue_EA     CMP.W       #MODE000,D2             
00002E4C  6700 0036               2438                  BEQ         DATA_REGISTER                 
00002E50  B47C 0001               2439                  CMP.W       #MODE001,D2               
00002E54  6700 004A               2440                  BEQ         ADDRESS_REGISTER                 
00002E58  B47C 0002               2441                  CMP.W       #MODE010,D2              
00002E5C  6700 005E               2442                  BEQ         ADDRESS_REGISTER_DIRECT               
00002E60  B47C 0003               2443                  CMP.W       #MODE011,D2              
00002E64  6700 0086               2444                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002E68  B47C 0004               2445                  CMP.W       #MODE100,D2          
00002E6C  6700 00B8               2446                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002E70  B47C 0007               2447                  CMP.W       #MODE111,D2          
00002E74  6700 00EA               2448                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002E78  13FC 0001 000034E6      2449                  MOVE.B      #BAD_FLAG,STATE               
00002E80  6000 0358               2450                  BRA         EA_FINISH              
00002E84                          2451                  
00002E84                          2452  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002E84  123C 0044               2453                  MOVE.B   #D,D1
00002E88  103C 0006               2454                  MOVE.B  #6,D0
00002E8C  4E4F                    2455                  TRAP    #15
00002E8E  0685 00000030           2456                  ADDI.L   #$30,D5
00002E94  1205                    2457                  MOVE.B   D5,D1
00002E96  103C 0006               2458                  MOVE.B  #6,D0
00002E9A  4E4F                    2459                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002E9C  6000 033C               2460                  BRA      EA_FINISH
00002EA0                          2461                      
00002EA0                          2462  
00002EA0  123C 0041               2463  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002EA4  103C 0006               2464                   MOVE.B  #6,D0
00002EA8  4E4F                    2465                   TRAP    #15
00002EAA  0685 00000030           2466                   ADDI.L   #$30,D5
00002EB0  1205                    2467                   MOVE.B   D5,D1
00002EB2  103C 0006               2468                   MOVE.B  #6,D0
00002EB6  4E4F                    2469                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002EB8  6000 0320               2470                   BRA      EA_FINISH
00002EBC                          2471  
00002EBC                          2472                   
00002EBC                          2473  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002EBC  123C 0028               2474                          MOVE.B   #OPEN_PARENTHESIS,D1
00002EC0  103C 0006               2475                          MOVE.B   #6,D0
00002EC4  4E4F                    2476                          TRAP     #15
00002EC6  123C 0041               2477                          MOVE.B   #A,D1
00002ECA  103C 0006               2478                          MOVE.B  #6,D0
00002ECE  4E4F                    2479                          TRAP    #15
00002ED0  0685 00000030           2480                          ADDI.L   #$30,D5
00002ED6  1205                    2481                          MOVE.B   D5,D1
00002ED8  103C 0006               2482                          MOVE.B  #6,D0
00002EDC  4E4F                    2483                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002EDE  123C 0029               2484                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002EE2  103C 0006               2485                          MOVE.B  #6,D0
00002EE6  4E4F                    2486                          TRAP    #15
00002EE8  6000 02F0               2487                          BRA      EA_FINISH
00002EEC                          2488  
00002EEC                          2489  
00002EEC                          2490  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002EEC  123C 0028               2491                             MOVE.B   #OPEN_PARENTHESIS,D1
00002EF0  103C 0006               2492                             MOVE.B   #6,D0
00002EF4  4E4F                    2493                             TRAP     #15
00002EF6  123C 0041               2494                             MOVE.B   #A,D1
00002EFA  103C 0006               2495                             MOVE.B  #6,D0
00002EFE  4E4F                    2496                             TRAP    #15
00002F00  0685 00000030           2497                             ADDI.L   #$30,D5
00002F06  1205                    2498                             MOVE.B   D5,D1
00002F08  103C 0006               2499                             MOVE.B  #6,D0
00002F0C  4E4F                    2500                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002F0E  123C 0029               2501                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002F12  103C 0006               2502                             MOVE.B  #6,D0
00002F16  4E4F                    2503                             TRAP    #15
00002F18                          2504                           *  MOVE.B   #PLUS_SIGN,(A4)+
00002F18  123C 002B               2505                           MOVE.B   #PLUS_SIGN,D1
00002F1C  103C 0006               2506                             MOVE.B  #6,D0
00002F20  4E4F                    2507                             TRAP    #15
00002F22  6000 02B6               2508                             BRA      EA_FINISH
00002F26                          2509  
00002F26                          2510  
00002F26                          2511  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002F26  123C 002D               2512                             MOVE.B   #MINUS_SIGN,D1
00002F2A  103C 0006               2513                             MOVE.B   #6,D0
00002F2E  4E4F                    2514                             TRAP        #15
00002F30  123C 0028               2515                             MOVE.B   #OPEN_PARENTHESIS,D1
00002F34  103C 0006               2516                             MOVE.B   #6,D0
00002F38  4E4F                    2517                             TRAP     #15
00002F3A  123C 0041               2518                             MOVE.B   #A,D1
00002F3E  103C 0006               2519                             MOVE.B  #6,D0
00002F42  4E4F                    2520                             TRAP    #15
00002F44  0685 00000030           2521                             ADDI.L   #$30,D5
00002F4A  1205                    2522                             MOVE.B   D5,D1
00002F4C  103C 0006               2523                             MOVE.B  #6,D0
00002F50  4E4F                    2524                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002F52  123C 0029               2525                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002F56  103C 0006               2526                             MOVE.B  #6,D0
00002F5A  4E4F                    2527                             TRAP    #15
00002F5C  6000 027C               2528                             BRA      EA_FINISH
00002F60                          2529  
00002F60                          2530  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002F60  6000 0002               2531                                BRA  CONTINUE_A_I_A
00002F64                          2532                                
00002F64                          2533                                
00002F64                          2534  CONTINUE_A_I_A                
00002F64  BA3C 0004               2535                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002F68  6700 001E               2536                                BEQ         IMMIDIATE_REGISTER                
00002F6C  BA3C 0000               2537                                CMP.B       #0,D5                ; WORD ADDRESSING
00002F70  6700 0048               2538                                BEQ         WORD_ADDRESSING                
00002F74  BA3C 0001               2539                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002F78  6700 0054               2540                                BEQ         LONG_ADDRESSING              
00002F7C  13FC 0001 000034E6      2541                                MOVE.B      #BAD_FLAG,STATE              
00002F84  6000 0254               2542                                BRA         EA_FINISH                * jump to end   
00002F88                          2543                                
00002F88                          2544                                
00002F88  123C 0023               2545  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002F8C  103C 0006               2546                                MOVE.B #6,D0
00002F90  4E4F                    2547                                TRAP   #15
00002F92  0C39 0001 000034D4      2548                                CMP.B #1,SIZE   ;BYTE
00002F9A  6700 0046               2549                                BEQ   GETBYTE
00002F9E  0C39 0002 000034D4      2550                                CMP.B #2,SIZE   ;BYTE
00002FA6  6700 0044               2551                                BEQ   GETWORD
00002FAA  0C39 0003 000034D4      2552                                CMP.B #3,SIZE   ;BYTE
00002FB2  6700 0042               2553                                BEQ   GETLONG
00002FB6  6000 003E               2554                                BRA   GETLONG
00002FBA                          2555                                
00002FBA                          2556  
00002FBA  123C 0024               2557  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002FBE  103C 0006               2558                               MOVE.B #6,D0
00002FC2  4E4F                    2559                               TRAP  #15
00002FC4  3E1E                    2560                               MOVE.W  (A6)+,D7
00002FC6  6000 00BE               2561                               BRA   PRINT_WORD
00002FCA  6000 020E               2562                               BRA   EA_FINISH
00002FCE                          2563  
00002FCE  123C 0024               2564  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002FD2  103C 0006               2565                               MOVE.B #6,D0
00002FD6  4E4F                    2566                               TRAP  #15
00002FD8  2E1E                    2567                               MOVE.L  (A6)+,D7
00002FDA  6000 0128               2568                               BRA   PRINT_LONG
00002FDE  6000 01FA               2569                               BRA   EA_FINISH                            
00002FE2                          2570  
00002FE2                          2571  GETBYTE      
00002FE2  1E1E                    2572                  MOVE.B   (A6)+,D7    
00002FE4  6B00 001A               2573                  BMI     ADD_NEGATIVE
00002FE8  6000 0024               2574                  BRA     PRINT_BRANCHING
00002FEC                          2575  GETWORD                
00002FEC  3E1E                    2576                  MOVE.W   (A6)+,D7
00002FEE  6B00 0010               2577                  BMI     ADD_NEGATIVE
00002FF2  6000 001A               2578                  BRA     PRINT_BRANCHING
00002FF6                          2579  GETLONG                
00002FF6                          2580                  
00002FF6  2E1E                    2581                  MOVE.L   (A6)+,D7
00002FF8  6B00 0006               2582                  BMI     ADD_NEGATIVE
00002FFC  6000 0010               2583                  BRA     PRINT_BRANCHING
00003000                          2584                  
00003000  123C 002D               2585  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00003004  123C 0006               2586                  MOVE.B #6,D1
00003008  4E4F                    2587                  TRAP   #15
0000300A  6000 0002               2588                  BRA    PRINT_BRANCHING
0000300E                          2589  
0000300E                          2590  
0000300E  0C39 0001 000034D4      2591  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00003016  6700 001C               2592                  BEQ    PRINT_BYTE    
0000301A  0C39 0002 000034D4      2593                  CMP.B #2,SIZE   ;WORD
00003022  6700 0062               2594                  BEQ    PRINT_WORD
00003026  0C39 0003 000034D4      2595                  CMP.B  #3,SIZE  ;LONG
0000302E  6700 00D4               2596                  BEQ    PRINT_LONG
00003032  60DA                    2597                  BRA    PRINT_BRANCHING
00003034                          2598  
00003034                          2599  
00003034                          2600  
00003034                          2601  
00003034                          2602                  
00003034                          2603  **** BYTE DATA PRINTING***********************
00003034  4241                    2604  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00003036                          2605                 
00003036                          2606  
00003036  BEBC 0000000F           2607                 CMP.L   #$F,D7              
0000303C  6F00 0006               2608                 BLE     BYTE_ONE_LOOP                  
00003040  6000 000E               2609                 BRA     READ_BYTE
00003044                          2610  
00003044                          2611  BYTE_ONE_LOOP
00003044  13FC 0001 00003502      2612                  MOVE.B  #1,NUMBER_OF_HEX  
0000304C  6000 0002               2613                  BRA     READ_BYTE
00003050                          2614      
00003050                          2615  READ_BYTE                           
00003050  0C39 0000 00003502      2616      CMP.B   #0,NUMBER_OF_HEX               
00003058  6700 0014               2617      BEQ     COPYBYTE
0000305C                          2618      
0000305C  123C 0030               2619      MOVE.B  #$30,D1             
00003060  103C 0006               2620      MOVE.B  #6,D0               
00003064  4E4F                    2621      TRAP    #15
00003066                          2622  
00003066  5339 00003502           2623      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
0000306C  60E2                    2624      BRA     READ_BYTE           ; LOOP
0000306E                          2625      
0000306E                          2626  COPYBYTE
0000306E  2207                    2627      MOVE.L  D7,D1               ; COPY DATA 
00003070  143C 0010               2628      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00003074  103C 000F               2629      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00003078  4E4F                    2630      TRAP    #15
0000307A  13FC 0000 00003502      2631      MOVE.B  #0,NUMBER_OF_HEX
00003082  6000 0156               2632      BRA  EA_FINISH
00003086                          2633  
00003086                          2634  
00003086                          2635  
00003086                          2636  
00003086                          2637  
00003086                          2638  ******PRINT WORD DATA******************
00003086  4241                    2639  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00003088                          2640                 
00003088                          2641  
00003088  BEBC 0000000F           2642                 CMP.L   #$F,D7              
0000308E  6F00 001A               2643                 BLE     WORD_ONE_LOOP
00003092  BEBC 000000FF           2644                 CMP.L   #$FF,D7              
00003098  6F00 001C               2645                 BLE     WORD_TWO_LOOP
0000309C  BEBC 00000FFF           2646                 CMP.L   #$FFF,D7              
000030A2  6F00 001E               2647                 BLE     WORD_THREE_LOOP                  
000030A6  6000 0026               2648                 BRA     READ_WORD
000030AA                          2649  
000030AA                          2650  WORD_ONE_LOOP
000030AA  13FC 0001 00003502      2651                  MOVE.B  #1,NUMBER_OF_HEX  
000030B2  6000 001A               2652                  BRA     READ_WORD
000030B6                          2653                  
000030B6                          2654  WORD_TWO_LOOP
000030B6  13FC 0002 00003502      2655                  MOVE.B  #2,NUMBER_OF_HEX  
000030BE  6000 000E               2656                  BRA     READ_WORD
000030C2                          2657                  
000030C2                          2658  WORD_THREE_LOOP
000030C2  13FC 0003 00003502      2659                  MOVE.B  #3,NUMBER_OF_HEX  
000030CA  6000 0002               2660                  BRA     READ_WORD                
000030CE                          2661      
000030CE                          2662  READ_WORD                           
000030CE  0C39 0000 00003502      2663      CMP.B   #0,NUMBER_OF_HEX               
000030D6  6700 0014               2664      BEQ     COPYWORD
000030DA                          2665      
000030DA  123C 0030               2666      MOVE.B  #$30,D1             
000030DE  103C 0006               2667      MOVE.B  #6,D0               
000030E2  4E4F                    2668      TRAP    #15
000030E4                          2669  
000030E4  5339 00003502           2670      SUBI.B  #1,NUMBER_OF_HEX              
000030EA  60E2                    2671      BRA     READ_WORD                   ; LOOP
000030EC                          2672  
000030EC                          2673  COPYWORD
000030EC  2207                    2674      MOVE.L  D7,D1               ; COPY DATA 
000030EE  143C 0010               2675      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
000030F2  103C 000F               2676      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
000030F6  4E4F                    2677      TRAP    #15
000030F8  13FC 0000 00003502      2678      MOVE.B  #0,NUMBER_OF_HEX
00003100  6000 00D8               2679      BRA  EA_FINISH
00003104                          2680  
00003104                          2681  ****************PRINT LONG DATA*****************
00003104  4241                    2682  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00003106                          2683                 
00003106                          2684  
00003106  BEBC 0000000F           2685                 CMP.L   #$F,D7              
0000310C  6F00 0042               2686                 BLE     LONG_ONE_LOOP
00003110  BEBC 000000FF           2687                 CMP.L   #$FF,D7              
00003116  6F00 0044               2688                 BLE     LONG_TWO_LOOP
0000311A  BEBC 00000FFF           2689                 CMP.L   #$FFF,D7              
00003120  6F00 0046               2690                 BLE     LONG_THREE_LOOP
00003124  BEBC 0000FFFF           2691                 CMP.L   #$FFFF,D7              
0000312A  6F00 0048               2692                 BLE     LONG_FOUR_LOOP
0000312E  BEBC 000FFFFF           2693                 CMP.L   #$FFFFF,D7              
00003134  6F00 004A               2694                 BLE     LONG_FIVE_LOOP
00003138  BEBC 00FFFFFF           2695                 CMP.L   #$FFFFFF,D7              
0000313E  6F00 004C               2696                 BLE     LONG_SIX_LOOP
00003142  BEBC 0FFFFFFF           2697                 CMP.L   #$FFFFFFF,D7              
00003148  6F00 004E               2698                 BLE     LONG_SEVEN_LOOP                  
0000314C  6000 0056               2699                 BRA     READ_LONG
00003150                          2700  
00003150                          2701  LONG_ONE_LOOP
00003150  13FC 0001 00003502      2702                  MOVE.B  #1,NUMBER_OF_HEX  
00003158  6000 004A               2703                  BRA     READ_LONG
0000315C                          2704                  
0000315C                          2705  LONG_TWO_LOOP
0000315C  13FC 0002 00003502      2706                  MOVE.B  #2,NUMBER_OF_HEX  
00003164  6000 003E               2707                  BRA     READ_LONG
00003168                          2708                  
00003168                          2709  LONG_THREE_LOOP
00003168  13FC 0003 00003502      2710                  MOVE.B  #3,NUMBER_OF_HEX  
00003170  6000 0032               2711                  BRA     READ_LONG                
00003174                          2712  LONG_FOUR_LOOP
00003174  13FC 0004 00003502      2713                  MOVE.B  #4,NUMBER_OF_HEX  
0000317C  6000 0026               2714                  BRA     READ_LONG
00003180                          2715                  
00003180                          2716  LONG_FIVE_LOOP
00003180  13FC 0005 00003502      2717                  MOVE.B  #5,NUMBER_OF_HEX  
00003188  6000 001A               2718                  BRA     READ_LONG
0000318C                          2719                  
0000318C                          2720  LONG_SIX_LOOP
0000318C  13FC 0006 00003502      2721                  MOVE.B  #6,NUMBER_OF_HEX  
00003194  6000 000E               2722                  BRA     READ_LONG
00003198                          2723  LONG_SEVEN_LOOP
00003198  13FC 0007 00003502      2724                  MOVE.B  #7,NUMBER_OF_HEX  
000031A0  6000 0002               2725                  BRA     READ_LONG
000031A4                          2726  
000031A4                          2727       
000031A4                          2728  READ_LONG                           
000031A4  0C39 0000 00003502      2729      CMP.B   #0,NUMBER_OF_HEX               
000031AC  6700 0014               2730      BEQ     COPYLONG
000031B0  123C 0030               2731      MOVE.B  #$30,D1             
000031B4  103C 0006               2732      MOVE.B  #6,D0               
000031B8  4E4F                    2733      TRAP    #15
000031BA                          2734  
000031BA  5339 00003502           2735      SUBI.B  #1,NUMBER_OF_HEX               
000031C0  60E2                    2736      BRA     READ_LONG                   ; LOOP
000031C2                          2737  
000031C2                          2738  COPYLONG
000031C2  2207                    2739      MOVE.L  D7,D1               ; COPY DATA 
000031C4  143C 0010               2740      MOVE.B  #16,D2              ; USIGN BASE TO 16
000031C8  103C 000F               2741      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
000031CC  4E4F                    2742      TRAP    #15
000031CE  13FC 0000 00003502      2743      MOVE.B  #0,NUMBER_OF_HEX
000031D6  6000 0002               2744      BRA  EA_FINISH
000031DA                          2745  
000031DA                          2746    
000031DA                          2747  
000031DA  4E75                    2748  EA_FINISH      RTS
000031DC                          2749  
000031DC                          2750  
000031DC                          2751  
000031DC                          2752  
000031DC                          2753  ************************************************
000031DC                          2754  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
000031DC                          2755  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
000031DC                          2756  ************************************************
000031DC                          2757  REGISTER_NUMBER_TO_DECIMAL 
000031DC  B67C 0000               2758                             CMP.W       #REG_0,D3
000031E0  6700 0046               2759                             BEQ         RG0
000031E4  B67C 0001               2760                             CMP.W       #REG_1,D3
000031E8  6700 0046               2761                             BEQ         RG1
000031EC  B67C 0002               2762                             CMP.W       #REG_2,D3
000031F0  6700 0046               2763                             BEQ         RG2
000031F4  B67C 0003               2764                             CMP.W       #REG_3,D3
000031F8  6700 0046               2765                             BEQ         RG3
000031FC  B67C 0004               2766                             CMP.W       #REG_4,D3
00003200  6700 0046               2767                             BEQ         RG4
00003204  B67C 0005               2768                             CMP.W       #REG_5,D3
00003208  6700 0046               2769                             BEQ         RG5
0000320C  B67C 0006               2770                             CMP.W       #REG_6,D3
00003210  6700 0046               2771                             BEQ         RG6
00003214  B67C 0007               2772                             CMP.W       #REG_7,D3
00003218  6700 0046               2773                             BEQ         RG7
0000321C  13FC 0001 000034E6      2774                             MOVE.B      #BAD_FLAG,STATE
00003224  4EF8 2E48               2775                             JMP         CONTINUE_EA
00003228                          2776   
00003228  1A3C 0000               2777  RG0    MOVE.B   #0,D5
0000322C  4EF8 2E48               2778         JMP      Continue_EA
00003230  1A3C 0001               2779  RG1    MOVE.B   #1,D5
00003234  4EF8 2E48               2780         JMP      Continue_EA
00003238  1A3C 0002               2781  RG2    MOVE.B   #2,D5
0000323C  4EF8 2E48               2782         JMP      Continue_EA
00003240  1A3C 0003               2783  RG3    MOVE.B   #3,D5
00003244  4EF8 2E48               2784         JMP      Continue_EA
00003248  1A3C 0004               2785  RG4    MOVE.B   #4,D5
0000324C  4EF8 2E48               2786         JMP      Continue_EA
00003250  1A3C 0005               2787  RG5    MOVE.B   #5,D5
00003254  4EF8 2E48               2788         JMP      Continue_EA
00003258  1A3C 0006               2789  RG6    MOVE.B   #6,D5
0000325C  4EF8 2E48               2790         JMP      Continue_EA
00003260  1A3C 0007               2791  RG7    MOVE.B   #7,D5
00003264  4EF8 2E48               2792         JMP      Continue_EA 
00003268                          2793      
00003268                          2794  ;------------------------------------------------
00003268                          2795      
00003268                          2796  Float   DS.L 1 #0
0000326C                          2797  
0000326C                          2798  ValOne    DS.B 1 #0
0000326D                          2799  ValTwo    DS.B 1 #0
0000326E                          2800  ValThree    DS.B 1 #0
0000326F                          2801  ValFour    DS.B 1 #0
00003270                          2802  ValFive    DS.B 1 #0
00003271                          2803  ValSix    DS.B 1 #0
00003272                          2804  ValSeven    DS.B 1 #0
00003273                          2805  ValEight    DS.B 1 #0
00003274                          2806  
00003274                          2807  Addsum DS.W 1 #0
00003276                          2808  CarryBit DS.B 1 #0   
00003277                          2809  
00003277                          2810  Trailers DS.B 1 #0
00003278                          2811  Source DS.L 1 #0
0000327C                          2812  Destination DS.L 1 #0
00003280                          2813  
00003280                          2814          ;generic command lines
00003280= 57 65 6C 63 6F 6D ...   2815  WELCOME DC.B 'Welcome to our decoder',CR,LF,0
00003299= 50 6C 65 61 73 65 ...   2816  USERPAGEBREAK DC.B 'Please Press enter to see next 25 codes',0
000032C1= 4E 75 6D 62 65 72 ...   2817  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
000032ED= 53 65 63 6F 6E 64 ...   2818  OUTOFORDER DC.B    'Second Num lower than the first Num, please reenter second Num',CR,LF,0
0000332E= 50 6C 65 61 73 65 ...   2819  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory address, perferablly in 8 byte form: ',0 
00003371= 50 6C 65 61 73 65 ...   2820  MESSAGESECONDADRESS DC.B    'Please enter ending memory address, perferablly in 8 byte form: ',0 
000033B2= 59 6F 75 20 68 61 ...   2821  FINALMESSAGE1    DC.B    'You have reached the end of the program',CR,LF,0
000033DC= 50 6C 65 61 73 65 ...   2822  FINALMESSAGE2    DC.B    'Please enter 0 to exit, or 1 to restart: ',0
00003406= 45 78 69 74 69 6E ...   2823  GOODBYEMESSAGE    DC.B    'Exiting, have a good rest of your day',CR,LF,0
0000342E= 20 0D 0A 00             2824  CLEAR DC.B      ' ',CR,LF,0
00003432                          2825  
00003432                          2826          ;the collection of actual command lines to print
00003432                          2827  CommandPrinter    DS.B 1 #0
00003433                          2828  CommandDetail    DS.B 1 #0
00003434= 4D 4F 56 45 00          2829  PMOVE DC.B      'MOVE',0
00003439= 4D 4F 56 45 4D 20 00    2830  PMOVEM DC.B      'MOVEM ',0
00003440= 4D 4F 56 45 41 00       2831  PMOVEA DC.B      'MOVEA',0
00003446= 4D 4F 56 45 51 20 00    2832  PMOVEQ DC.B      'MOVEQ ',0
0000344D= 4E 4F 50 00             2833  PNOP DC.B      'NOP',0
00003451= 4C 45 41 00             2834  PLEA DC.B      'LEA',0
00003455= 4E 4F 54 00             2835  PNOT DC.B      'NOT',0
00003459= 4A 53 52 00             2836  PJSR DC.B      'JSR',0
0000345D= 52 54 53 00             2837  PRTS DC.B      'RTS',0
00003461= 42 47 54 00             2838  PBGT DC.B      'BGT',0
00003465= 42 45 51 00             2839  PBEQ DC.B      'BEQ',0
00003469= 42 4C 45 00             2840  PBLE DC.B      'BLE',0
0000346D= 42 52 41 00             2841  PBRA DC.B      'BRA',0
00003471= 4F 52 00                2842  POR DC.B      'OR',0
00003474= 53 55 42 00             2843  PSUB DC.B      'SUB',0
00003478= 41 4E 44 00             2844  PAND DC.B      'AND',0
0000347C= 41 44 44 00             2845  PADD DC.B      'ADD',0
00003480= 41 44 44 41 00          2846  PADDA DC.B      'ADDA',0
00003485= 41 44 44 51 00          2847  PADDQ DC.B      'ADDQ',0
0000348A= 4C 53 4C 00             2848  PLSL DC.B      'LSL',0
0000348E= 4C 53 52 00             2849  PLSR DC.B      'LSR',0
00003492= 41 53 52 00             2850  PASR DC.B      'ASR',0
00003496= 41 53 4C 00             2851  PASL DC.B      'ASL',0
0000349A= 52 4F 4C 00             2852  PROL DC.B      'ROL',0
0000349E= 52 4F 52 00             2853  PROR DC.B      'ROR',0
000034A2                          2854  
000034A2= 44 41 54 41 00          2855  PDATA   DC.B    'DATA',0
000034A7                          2856  
000034A7= 00                      2857  INPUT   DC.B    0
000034A8                          2858  
000034A8= 00000000                2859  STARTINGADDRESS     DC.L 0
000034AC= 00000000                2860  CURRENTADDRESS      DC.L 0
000034B0= 00000000                2861  ENDINGADDRESS       DC.L 0
000034B4= 0000                    2862  CYCLECOUNTER        DC.W 0
000034B6= 0000                    2863  COMMANDDATA         DC.W 0
000034B8= 00                      2864  Bits                DC.B 0
000034B9                          2865  
000034B9                          2866          ;the sizes to print
000034BA                          2867  SizeValue           DS.L 1 #0
000034BE= 2E 42 20 00             2868  PB DC.B      '.B ',0
000034C2= 2E 57 20 00             2869  PW DC.B      '.W ',0
000034C6= 2E 4C 20 00             2870  PL DC.B      '.L ',0
000034CA                          2871  
000034CA                          2872  ;----- ADDED FOR THE OP CODE PART
000034CA                          2873  
000034CA= 00                      2874  DEST_REG        DC.B    0
000034CB= 00                      2875  DEST_MODE       DC.B    0
000034CC                          2876  
000034CC= 00                      2877  SRC_MODE        DC.B    0
000034CD= 00                      2878  SRC_REG         DC.B    0
000034CE                          2879  
000034CE= 00                      2880  TEMP_MODE       DC.B    0
000034CF= 00                      2881  TEMP_REG        DC.B    0
000034D0                          2882  
000034D0                          2883  DATA_FIELD      DS.L    1 #0
000034D4= 00                      2884  SIZE            DC.B    0
000034D5= 00                      2885  SIZE_BITS        DC.B    0
000034D6                          2886  
000034D6= 23 00                   2887  HASH            DC.B    '#',0
000034D8= 20 00                   2888  CLRSPOT         DC.B    ' ',0
000034DA= 2D 00                   2889  NEG             DC.B    '-',0
000034DC= 24 00                   2890  DOLLARSIGN      DC.B    '$',0
000034DE= 2C 00                   2891  COMA            DC.B    ',',0
000034E0                          2892  
000034E0= 00                      2893  INDEX           DC.B    0
000034E1                          2894  
000034E1= 00                      2895  XBIT            DC.B    0
000034E2= 00                      2896  INVALID_EA      DC.B    0
000034E3                          2897  
000034E3= 00                      2898  DstMode         DC.B    0
000034E4= 00                      2899  TempMode        DC.B    0
000034E5= 00                      2900  SrcMode         DC.B    0
000034E6                          2901  
000034E6                          2902  ;------ ADDED FOR EA CODE PART
000034E6                          2903  
000034E6  =00000000               2904  REG_0  EQU         %000
000034E6  =00000001               2905  REG_1  EQU         %001
000034E6  =00000002               2906  REG_2  EQU         %010
000034E6  =00000003               2907  REG_3  EQU         %011
000034E6  =00000004               2908  REG_4  EQU         %100
000034E6  =00000005               2909  REG_5  EQU         %101
000034E6  =00000006               2910  REG_6  EQU         %110
000034E6  =00000007               2911  REG_7  EQU         %111
000034E6                          2912  
000034E6  =00000000               2913  MODE000       EQU         %000                   * MODE Dn
000034E6  =00000001               2914  MODE001       EQU         %001                   * MODE An
000034E6  =00000002               2915  MODE010       EQU         %010                   * MODE (An)
000034E6  =00000003               2916  MODE011       EQU         %011                   * MODE (An)+
000034E6  =00000004               2917  MODE100       EQU         %100                   * MODE -(An)
000034E6  =00000007               2918  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
000034E6                          2919  
000034E6= 00                      2920  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
000034E7  =00000001               2921  BAD_FLAG      EQU         1
000034E8= 00008000                2922  word          DC.L        $8000
000034EC                          2923  SIZE_IL       DS.L        1             ;SIZE ISOLATION
000034F0                          2924  DR            DS.L        1             ;DIRECTION ISOLATION
000034F4                          2925  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
000034F8                          2926  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
000034FC                          2927  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
00003500                          2928  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
00003501                          2929  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
00003502= 00                      2930  NUMBER_OF_HEX DC.B        0
00003503                          2931  dRG           DS.B        1
00003504                          2932  dMODE         DS.B        1
00003505                          2933  sRG           DS.B        1
00003506                          2934  
00003506= 00000100                2935  print_buffer  DC.l       $100
0000350A                          2936  
0000350A= 00                      2937  OpName            DC.B     $00                     * 0 = MOVE, 1 = MOVEA
0000350B                          2938  
0000350C= 0000                    2939  myWord              DC.W     $0000                   * 16 bit instruction Word
0000350E= 00                      2940  ID                DC.B     $00                     * First 4 bit value ID
0000350F= FF                      2941  DstReg            DC.B     $FF                     * Destination Register Value D3
00003510= FF                      2942  DstMod            DC.B     $FF                     * Destination Mode Value D2
00003511= FF                      2943  SrcReg            DC.B     $FF                     * Source Register Value D3 JUMP EA_start
00003512= FF                      2944  SrcMod            DC.B     $FF                     * Source Register Mode D2
00003513                          2945  
00003514= 00000000                2946  opDta1            DC.L     $00000000               * Data value one (most likely source)
00003518= FF                      2947  opDta1T           DC.B     $FF                     * Data value one type ($FF not set, 0=byte, 1=word, 2=long)
0000351A= 00000000                2948  opDta2            DC.L     $00000000               * Data value two (most likely destination)
0000351E= FF                      2949  opDta2T           DC.B     $FF                     * Data value two type ($FF not set, 0=byte, 1=word, 2=long)
0000351F                          2950                 
0000351F= 01                      2951  Err               DC.B     $01                     * Error byte, 1 = OK, 0 = Error                 
00003520                          2952  
00003520= 2C 00                   2953  Comma             DC.B     ',', 0
00003522                          2954  
00003522                          2955  ***** ASCII VALUES FOR EA CHARACTERS**************
00003522  =00000044               2956  D                       EQU      $44
00003522  =00000041               2957  A                       EQU      $41
00003522  =00000028               2958  OPEN_PARENTHESIS        EQU      $28
00003522  =00000024               2959  DOLLAR_SIGN             EQU      $24
00003522  =00000029               2960  CLOSED_PARENTHESIS      EQU      $29
00003522  =0000002B               2961  PLUS_SIGN               EQU      $2B
00003522  =0000002D               2962  MINUS_SIGN              EQU      $2D
00003522  =00000023               2963  HASH_TAG                EQU      $23
00003522  =00000025               2964  PERCENT_SIGN            EQU      $25
00003522                          2965  
00003522                          2966  
00003522                          2967      
00003522                          2968      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2F60
ADDRESS_REGISTER    2EA0
ADDRESS_REGISTER_DECREMENT  2F26
ADDRESS_REGISTER_DIRECT  2EBC
ADDRESS_REGISTER_INCREMENT  2EEC
ADDSUM              3274
ADD_NEGATIVE        3000
BADVAL              32C1
BAD_FLAG            1
BITS                34B8
BYTE_ONE_LOOP       3044
CARRYBIT            3276
CCHECK_ADD          1A9A
CEHCK_DESTREG       15F2
CHAR1               1178
CHAR2               1190
CHARSUB             11A8
CHECK_ADD           1A86
CHECK_ADDA          1A9E
CHECK_ADDQ          194E
CHECK_AND           1C0A
CHECK_DATA_NEG      2DB0
CHECK_DESTINATION   2BD4
CHECK_DESTMOD       15E2
CHECK_DEST_REG      2C0C
CHECK_ID_AS         2092
CHECK_ID_LS         20B2
CHECK_ID_RO         20A2
CHECK_JSR           18C8
CHECK_LEA           16E2
CHECK_MOVE          1416
CHECK_MOVEM_1000    17F2
CHECK_MOVEM_1100    18A0
CHECK_MOVEQ         1ABE
CHECK_NOP_JSR_RTS   18A8
CHECK_NOP_RTS       192E
CHECK_NOT           176E
CHECK_OR            1B1C
CHECK_SOURCE        2CD4
CHECK_SOURCE_REG    2D0C
CHECK_SRCMOD        1514
CHECK_SRCREG        1524
CHECK_SUB           1B92
CHECK_TEMP          2C54
CHECK_TEMP_REG      2C8C
CHECK_XBIT          2D54
CLEAR               342E
CLEARMR             2DDC
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   2BC2
CLRSPOT             34D8
CMP_SIZE            14C6
COMA                34DE
COMMA               3520
COMMANDDATA         34B6
COMMANDDETAIL       3433
COMMANDPRINTER      3432
COMPARE_0100        16AA
COMPARE_0110        19D2
COMPARE_1101        1A02
COMPARE_1110        1C82
COMPARE_GROUPS      13A6
CONTINUE_A_I_A      2F64
CONTINUE_EA         2E48
COPYBYTE            306E
COPYLONG            31C2
COPYWORD            30EC
CR                  D
CURRENTADDRESS      34AC
CYCLECOUNTER        34B4
D                   44
DATA_FIELD          34D0
DATA_REGISTER       2E84
DESTINATION         327C
DEST_MODE           34CB
DEST_REG            34CA
DMODE               3504
DOLLARSIGN          34DC
DOLLAR_SIGN         24
DONE                11D2
DR                  34F0
DRG                 3503
DRN                 3501
DSTMOD              3510
DSTMODE             34E3
DSTREG              350F
DS_MOVE             14A2
DS_MOVEA            14AE
DTADSTLNG           1624
DTADSTWRD           160E
DTASRCIMD           154C
DTASRCIMDB          1574
DTASRCIMDL          15A0
DTASRCIMDW          158A
DTASRCLNG           15CC
DTASRCWRD           15B6
EADN                2B5E
EA_FINISH           31DA
EA_START            2E36
EIGHT_SHIFT         26C8
ENDING              1318
ENDINGADDRESS       34B0
ENTRYLOOP           11C0
ERR                 351F
ERROR               163A
EXIT                1220
FINALMESSAGE1       33B2
FINALMESSAGE2       33DC
FLOAT               3268
FORMAT_DATA         2D9C
G14_MEMS            1F3A
G14_MEMS_AS         202C
G14_MEMS_LS         1F60
G14_MEMS_RO         1FC6
G14_TYPE            34F4
GAS_EA              1EE4
GETBYTE             2FE2
GETLONG             2FF6
GETWORD             2FEC
GLS_EA              1D4C
GOODBYE             1362
GOODBYEMESSAGE      3406
GRO_EA              1E18
G_AS                1E6E
G_LS                1CD6
G_RO                1DA2
HASH                34D6
HASH_TAG            23
ID                  350E
IMMIDIATE_REGISTER  2F88
INDEX               34E0
INPUT               34A7
INT2                1158
INTSUB              1170
INVALID             11B0
INVALID_EA          34E2
IR_IL               34F8
IS_EIGHT            26D6
LARGERISSUE         127E
LARGERTHAN          129C
LF                  A
LOADDATAONE         101E
LOADDATATWO         1070
LONG_ADDRESSING     2FCE
LONG_FIVE_LOOP      3180
LONG_FOUR_LOOP      3174
LONG_ONE_LOOP       3150
LONG_SEVEN_LOOP     3198
LONG_SIX_LOOP       318C
LONG_THREE_LOOP     3168
LONG_TWO_LOOP       315C
LOOP_READ_BITS      1388
MEMORYGRABBER       12A8
MESSAGEFIRSTADRESS  332E
MESSAGESECONDADRESS  3371
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
MYDONE              1644
MYWORD              350C
NEG                 34DA
NUMBER_OF_HEX       3502
OPDTA1              3514
OPDTA1T             3518
OPDTA2              351A
OPDTA2T             351E
OPEN_PARENTHESIS    28
OPNAME              350A
OUTOFORDER          32ED
PADD                347C
PADDA               3480
PADDQ               3485
PAGEBREAK           12F6
PAND                3478
PASL                3496
PASR                3492
PB                  34BE
PBEQ                3465
PBGT                3461
PBLE                3469
PBRA                346D
PDATA               34A2
PERCENT_SIGN        25
PJSR                3459
PL                  34C6
PLEA                3451
PLSL                348A
PLSR                348E
PLUS_SIGN           2B
PMOVE               3434
PMOVEA              3440
PMOVEM              3439
PMOVEQ              3446
PNOP                344D
PNOT                3455
POR                 3471
PRINTADD            28DC
PRINTADDA           28FE
PRINTADDQ           277C
PRINTAND            28BA
PRINTB              2A4E
PRINTBEQ            27F0
PRINTBGT            27DA
PRINTBLE            2806
PRINTBRA            281C
PRINTCLRSPOT        2A78
PRINTCOMA           2A86
PRINTDOLLARSIGN     2AA0
PRINTHASH           2A94
PRINTJSR            2756
PRINTL              2A6A
PRINTLEA            272A
PRINTMOVE           26E0
PRINTMOVEA          26EE
PRINTMOVEM          2714
PRINTMOVEQ          2832
PRINTNOP            2704
PRINTNOT            2740
PRINTNOTRAIL        2BAC
PRINTONETRAIL       2B7A
PRINTOR             2876
PRINTROTATESPLIT    2974
PRINTRTS            276C
PRINTSUB            2898
PRINTTWOTRAIL       2B90
PRINTW              2A5C
PRINT_BRANCHING     300E
PRINT_BUFFER        3506
PRINT_BYTE          3034
PRINT_DATA          2DC8
PRINT_DN_TO_EA      2B06
PRINT_EA_TO_DN      2AAE
PRINT_LONG          3104
PRINT_NEG           2DBA
PRINT_WORD          3086
PROL                349A
PROR                349E
PRTS                345D
PR_AS               24F2
PR_ASR              261C
PR_ASR_EA           22B2
PR_ASR_MEM          210C
PR_G14_MEMS_AS      20C2
PR_G14_MEMS_LS      2144
PR_G14_MEMS_RO      21C6
PR_G_AS_EA          2248
PR_G_LS_EA          2308
PR_G_RO_EA          23C8
PR_LS               255C
PR_LSR              25C6
PR_LSR_EA           2372
PR_LSR_MEM          218E
PR_RO               2488
PR_ROR              2672
PR_ROR_EA           2432
PR_ROR_MEM          2210
PSUB                3474
PW                  34C2
READ_BITS           137E
READ_BYTE           3050
READ_LONG           31A4
READ_WORD           30CE
REGISTER_NUMBER_TO_DECIMAL  31DC
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2D9A
RG0                 3228
RG1                 3230
RG2                 3238
RG3                 3240
RG4                 3248
RG5                 3250
RG6                 3258
RG7                 3260
R_CHECK_DEST        2C4A
R_CHECK_SOURCE      2D4A
R_CHECK_TEMP        2CCA
SET                 139E
SIZE                34D4
SIZEPRINT           2A06
SIZEPRINT2          2A2A
SIZESPLIT           29D8
SIZEVALUE           34BA
SIZE_B              14EA
SIZE_BITS           34D5
SIZE_IL             34EC
SIZE_L              1506
SIZE_W              14F8
SOURCE              3278
SRCMOD              3512
SRCMODE             34E5
SRCREG              3511
SRC_MODE            34CC
SRC_REG             34CD
SRG                 3505
SRN                 3500
START               1000
STARTCHECK          1140
STARTINGADDRESS     34A8
STATE               34E6
STOP                2BCE
STOREADRESSES       1290
S_COUNT             34FC
TEMPMODE            34E4
TEMP_MODE           34CE
TEMP_REG            34CF
TEMP_TO_DEST        2D66
TEMP_TO_SRC         2D80
TRAILERS            3277
USERPAGEBREAK       3299
VAL1                10C6
VAL2                10D0
VAL3                10E0
VAL4                10F0
VAL5                1100
VAL6                1110
VAL7                1120
VAL8                1130
VALEIGHT            3273
VALFIVE             3270
VALFOUR             326F
VALONE              326C
VALSEVEN            3272
VALSIX              3271
VALTHREE            326E
VALTWO              326D
WELCOME             3280
WORD                34E8
WORD_ADDRESSING     2FBA
WORD_ONE_LOOP       30AA
WORD_THREE_LOOP     30C2
WORD_TWO_LOOP       30B6
XBIT                34E1
