00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/7/2021 9:50:52 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A     
00001000                             9  START:  ORG    $1000     ; first instruction of program
00001000                            10  
00001000                            11  * Put program code here
00001000  7400                      12      MOVE.L #0,D2
00001002  6000 0002                 13      BRA LOADDATAONE
00001006                            14      
00001006                            15  * TODO: a welcome message with format message 
00001006                            16      
00001006                            17  LOADDATAONE
00001006  43F9 0000302B             18      LEA      MESSAGEFIRSTADRESS,A1 ; Loads MESSAGE into adress at A1
0000100C  103C 000E                 19      MOVE.B   #14,D0     ; moves #14 into data register D0
00001010  4E4F                      20      TRAP     #15       ; Displays message via trap 14    
00001012                            21      
00001012  43F9 00003101             22      LEA     INPUT,A1
00001018  103C 0002                 23      MOVE.B  #2,D0 *takes the string of what the user enters
0000101C  4E4F                      24      TRAP    #15
0000101E                            25      
0000101E  4280                      26      CLR.L   D0
00001020                            27      
00001020                            28      * TODO: check if the input if odd - invalid imput
00001020                            29      
00001020                            30  
00001020                            31      
00001020  1A3C 0000                 32      MOVE.B  #0,D5
00001024                            33      
00001024  13D9 0000A000             34      MOVE.B (A1)+,$A000
0000102A  13D9 0000A010             35      MOVE.B (A1)+,$A010
00001030  13D9 0000A020             36      MOVE.B (A1)+,$A020
00001036  13D9 0000A030             37      MOVE.B (A1)+,$A030
0000103C  13D9 0000A040             38      MOVE.B (A1)+,$A040
00001042  13D9 0000A050             39      MOVE.B (A1)+,$A050
00001048  13D9 0000A060             40      MOVE.B (A1)+,$A060
0000104E  13D9 0000A070             41      MOVE.B (A1)+,$A070
00001054                            42      
00001054  6000 004C                 43      BRA VAL1
00001058                            44  
00001058                            45  LOADDATATWO    
00001058  43F9 00003051             46      LEA      MESSAGESECONDADRESS,A1 ; Loads MESSAGE into adress at A1
0000105E  103C 000E                 47      MOVE.B   #14,D0     ; moves #14 into data register D0
00001062  4E4F                      48      TRAP     #15       ; Displays message via trap 14    
00001064                            49      
00001064  103C 0002                 50      MOVE.B  #2,D0 *takes the string of what the user enters
00001068  4E4F                      51      TRAP    #15
0000106A                            52      
0000106A  1A3C 0000                 53      MOVE.B  #0,D5
0000106E                            54      
0000106E  13D9 0000A000             55      MOVE.B (A1)+,$A000
00001074  13D9 0000A010             56      MOVE.B (A1)+,$A010
0000107A  13D9 0000A020             57      MOVE.B (A1)+,$A020
00001080  13D9 0000A030             58      MOVE.B (A1)+,$A030
00001086  13D9 0000A040             59      MOVE.B (A1)+,$A040
0000108C  13D9 0000A050             60      MOVE.B (A1)+,$A050
00001092  13D9 0000A060             61      MOVE.B (A1)+,$A060
00001098  13D9 0000A070             62      MOVE.B (A1)+,$A070
0000109E                            63      
0000109E  6000 0002                 64      BRA VAL1
000010A2                            65  
000010A2                            66      
000010A2                            67  VAL1    
000010A2  1839 0000A000             68      MOVE.B $A000,D4
000010A8  6000 0072                 69      BRA STARTCHECK
000010AC  13C4 0000A000             70  VAL2    MOVE.B D4,$A000
000010B2  1839 0000A010             71      MOVE.B $A010,D4
000010B8  6000 0062                 72      BRA STARTCHECK
000010BC  13C4 0000A010             73  VAL3    MOVE.B D4,$A010
000010C2  1839 0000A020             74      MOVE.B $A020,D4
000010C8  6000 0052                 75      BRA STARTCHECK
000010CC  13C4 0000A020             76  VAL4    MOVE.B D4,$A020
000010D2  1839 0000A030             77      MOVE.B $A030,D4
000010D8  6000 0042                 78      BRA STARTCHECK
000010DC  13C4 0000A030             79  VAL5    MOVE.B D4,$A030
000010E2  1839 0000A040             80      MOVE.B $A040,D4
000010E8  6000 0032                 81      BRA STARTCHECK
000010EC  13C4 0000A040             82  VAL6    MOVE.B D4,$A040
000010F2  1839 0000A050             83      MOVE.B $A050,D4
000010F8  6000 0022                 84      BRA STARTCHECK
000010FC  13C4 0000A050             85  VAL7    MOVE.B D4,$A050
00001102  1839 0000A060             86      MOVE.B $A060,D4
00001108  6000 0012                 87      BRA STARTCHECK
0000110C  13C4 0000A060             88  VAL8    MOVE.B D4,$A060
00001112  1839 0000A070             89      MOVE.B $A070,D4
00001118  6000 0002                 90      BRA STARTCHECK
0000111C                            91    
0000111C                            92  STARTCHECK  
0000111C  B83C 0030                 93      CMP.B   #48,D4
00001120  6D00 006A                 94      BLT INVALID
00001124  B83C 0030                 95      CMP.B   #48,D4
00001128  6700 0022                 96      BEQ INTSUB
0000112C  B83C 0030                 97      CMP.B   #48,D4
00001130  6E00 0002                 98      BGT INT2
00001134                            99      
00001134                           100  
00001134                           101  INT2 
00001134                           102      
00001134  B83C 0039                103      CMP.B   #57,D4
00001138  6D00 0012                104      BLT INTSUB
0000113C  B83C 0039                105      CMP.B   #57,D4
00001140  6700 000A                106      BEQ INTSUB
00001144  B83C 0039                107      CMP.B   #57,D4
00001148  6E00 000A                108      BGT CHAR1
0000114C                           109      
0000114C                           110  INTSUB 
0000114C  0404 0030                111      SUB.B #$30,D4
00001150  6000 005C                112      BRA     DONE
00001154                           113  
00001154                           114  CHAR1 
00001154                           115      
00001154  B83C 0041                116      CMP.B   #65,D4
00001158  6D00 0032                117      BLT INVALID
0000115C  B83C 0041                118      CMP.B   #65,D4
00001160  6700 0022                119      BEQ CHARSUB
00001164  B83C 0041                120      CMP.B   #65,D4
00001168  6E00 0002                121      BGT CHAR2
0000116C                           122      
0000116C                           123  CHAR2 
0000116C                           124      
0000116C  B83C 0046                125      CMP.B   #70,D4
00001170  6D00 0012                126      BLT CHARSUB
00001174  B83C 0046                127      CMP.B   #70,D4
00001178  6700 000A                128      BEQ CHARSUB
0000117C  B83C 0046                129      CMP.B   #70,D4
00001180  6E00 000A                130      BGT INVALID
00001184                           131      
00001184                           132  CHARSUB 
00001184  0404 0037                133      SUB.B #$37,D4
00001188  6000 0024                134      BRA DONE
0000118C                           135      
0000118C                           136  INVALID 
0000118C  43F9 00002FFF            137      LEA BADVAL,A1
00001192  103C 000E                138      MOVE.B   #14,D0     ; moves #14 into data register D0
00001196  4E4F                     139      TRAP     #15       ; Displays message via trap 14
00001198  6000 0002                140      BRA     ENTRYLOOP
0000119C                           141      
0000119C                           142  ENTRYLOOP
0000119C  B43C 0000                143      CMP.B #0,D2
000011A0  6700 FE64                144      BEQ LOADDATAONE
000011A4  B43C 0001                145      CMP.B #1,D2
000011A8  6700 FEAE                146      BEQ LOADDATATWO
000011AC  4E75                     147      RTS
000011AE                           148      
000011AE  5205                     149  DONE    ADD.B #1,D5
000011B0  BA3C 0000                150          CMP.B #0,D5
000011B4  6700 FEEC                151          BEQ VAL1
000011B8  BA3C 0001                152          CMP.B #1,D5
000011BC  6700 FEEE                153          BEQ VAL2
000011C0  BA3C 0002                154          CMP.B #2,D5
000011C4  6700 FEF6                155          BEQ VAL3
000011C8  BA3C 0003                156          CMP.B #3,D5
000011CC  6700 FEFE                157          BEQ VAL4
000011D0  BA3C 0004                158          CMP.B #4,D5
000011D4  6700 FF06                159          BEQ VAL5
000011D8  BA3C 0005                160          CMP.B #5,D5
000011DC  6700 FF0E                161          BEQ VAL6
000011E0  BA3C 0006                162          CMP.B #6,D5
000011E4  6700 FF16                163          BEQ VAL7
000011E8  BA3C 0007                164          CMP.B #7,D5
000011EC  6700 FF1E                165          BEQ VAL8
000011F0  BA3C 0008                166          CMP.B #8,D5
000011F4  6700 0006                167          BEQ EXIT
000011F8                           168          
000011F8  6000 FF22                169          BRA     STARTCHECK
000011FC                           170  
000011FC                           171  
000011FC                           172  
000011FC  13C4 0000A070            173  EXIT    MOVE.B D4,$A070
00001202                           174      
00001202  4284                     175      CLR.L D4
00001204  D839 0000A000            176      ADD.B $A000,D4
0000120A  E98C                     177      LSL.L #4,D4
0000120C  D839 0000A010            178      ADD.B $A010,D4
00001212  E98C                     179      LSL.L #4,D4
00001214  D839 0000A020            180      ADD.B $A020,D4
0000121A  E98C                     181      LSL.L #4,D4
0000121C  D839 0000A030            182      ADD.B $A030,D4
00001222  E98C                     183      LSL.L #4,D4
00001224  D839 0000A040            184      ADD.B $A040,D4
0000122A  E98C                     185      LSL.L #4,D4
0000122C  D839 0000A050            186      ADD.B $A050,D4
00001232  E98C                     187      LSL.L #4,D4
00001234  D839 0000A060            188      ADD.B $A060,D4
0000123A  E98C                     189      LSL.L #4,D4
0000123C  D839 0000A070            190      ADD.B $A070,D4
00001242                           191      
00001242  2E04                     192      MOVE.L D4,D7
00001244  4244                     193      CLR D4
00001246  B43C 0001                194      CMP.B #1,D2
0000124A  6700 000E                195      BEQ STOREADRESSES
0000124E  2C07                     196      MOVE.L D7,D6
00001250  143C 0001                197      MOVE.B #1,D2
00001254  7A00                     198      MOVE.L #0,D5
00001256  6000 FE00                199      BRA LOADDATATWO
0000125A                           200      
0000125A                           201  ;---------------------------------------------------------
0000125A                           202  
0000125A                           203  STOREADRESSES
0000125A  33FC 0000 0000310E       204      MOVE.W #0,CYCLECOUNTER
00001262  23C7 0000310A            205      MOVE.L  D7,ENDINGADDRESS
00001268  23C6 00003102            206      MOVE.L  D6,STARTINGADDRESS
0000126E  4247                     207      CLR     D7
00001270  2E79 0000310A            208      MOVE.L   ENDINGADDRESS,A7
00001276  2C79 00003102            209      MOVE.L   STARTINGADDRESS,A6
0000127C  4EF9 00001282            210      JMP     MEMORYGRABBER
00001282                           211      
00001282                           212  MEMORYGRABBER
00001282  BDF9 0000310A            213      CMPA.L  ENDINGADDRESS,A6
00001288  6E00 1644                214      BGT     ENDING 
0000128C                           215      
0000128C  0C79 0019 0000310E       216       CMP.W   #25,CYCLECOUNTER * TODO: IMPLEMENT PAGEBREAK
00001294  6700 0038                217       BEQ     PAGEBREAK
00001298  5279 0000310E            218       ADD.W   #1,CYCLECOUNTER
0000129E                           219      
0000129E  4EB9 00002B46            220      JSR CLEARMR     * CLEAR MODES AND REGISTERS
000012A4                           221      
000012A4  23CE 00003106            222      MOVE.L      A6,CURRENTADDRESS   
000012AA  2239 00003106            223      MOVE.L      CURRENTADDRESS,D1
000012B0  143C 0010                224      MOVE.B      #16,D2
000012B4  103C 000F                225      MOVE.B      #15,D0     ; moves #14 into data register D0
000012B8  4E4F                     226      TRAP        #15  
000012BA                           227      
000012BA  4EB9 00002822            228      JSR     PRINTCLRSPOT      * print space
000012C0                           229      
000012C0  361E                     230      MOVE.W      (A6)+, D3   * copy instruction's 16 bits into D3
000012C2  33C3 0000310E            231      MOVE.W      D3, COMMANDDATA
000012C8                           232   
000012C8  6000 004E                233      BRA         COMPARE_GROUPS
000012CC                           234      
000012CC  60B4                     235      BRA MEMORYGRABBER
000012CE                           236      
000012CE                           237  PAGEBREAK
000012CE  43F9 00002FEA            238      LEA      USERPAGEBREAK,A1 ; Loads MESSAGE into adress at A1
000012D4  103C 000E                239      MOVE.B   #14,D0     ; moves #14 into data register D0
000012D8  4E4F                     240      TRAP     #15       ; Displays message via trap 14
000012DA  43F9 00003101            241      LEA     INPUT,A1
000012E0  103C 0002                242      MOVE.B  #2,D0 *takes the string of what the user enters
000012E4  4E4F                     243      TRAP    #15
000012E6  33FC 0000 0000310E       244      MOVE.W #0,CYCLECOUNTER
000012EE  6092                     245      BRA MEMORYGRABBER
000012F0                           246      
000012F0                           247      
000012F0                           248  ;-------------------------- OP CODE SECTION -------------------------------
000012F0                           249  
000012F0                           250  READ_BITS
000012F0  4287                     251      CLR.L   D7
000012F2  4284                     252      CLR.L   D4
000012F4  1E39 00003110            253      MOVE.B  Bits,D7
000012FA                           254      
000012FA                           255  LOOP_READ_BITS    
000012FA  BE3C 0000                256      CMP.B   #0,D7           * counter
000012FE  6700 17A4                257      BEQ     RETURN
00001302                           258      
00001302  E34C                     259      LSL.W   #1,D4           * make space for new bit
00001304  E34B                     260      LSL.W   #1,D3          
00001306                           261  
00001306  6500 0008                262      BCS     SET             * if 1, then branch to SET
0000130A  5307                     263      SUBI.B  #1,D7          
0000130C  4EF8 12FA                264      JMP     LOOP_READ_BITS
00001310                           265  SET
00001310  5244                     266      ADD.W   #%0001,D4       * adds 1 to the final destination (D4) 
00001312  5307                     267      SUBI.B  #1, D7
00001314  4EF8 12FA                268      JMP     LOOP_READ_BITS  
00001318                           269      
00001318                           270  
00001318                           271  
00001318                           272  COMPARE_GROUPS              * comapres the 4 bits of the instruction
00001318  13FC 0004 00003110       273      MOVE.B  #4,Bits         
00001320  4EB8 12F0                274      JSR     READ_BITS       * get the first 4 bits and store it in D4
00001324                           275  
00001324  B87C 0001                276      CMP.W   #%0001,D4      
00001328                           277      *BEQ     CHECK_MOVE_B    * if equal, goes to CHECK_MOVE.B
00001328                           278      
00001328  B87C 0002                279      CMP.W   #%0010,D4      
0000132C                           280      *BEQ     COMPARE_0010    * if equal, goes to COMPARE_0010 for MOVE.L and MOVEA.L
0000132C                           281      
0000132C  B87C 0003                282      CMP.W   #%0011,D4      
00001330                           283      *BEQ     COMPARE_0011    * if equal, goes to COMPARE_0011 for MOVE.W and MOVEA.W
00001330                           284      
00001330  B87C 0004                285      CMP.W   #%0100,D4      
00001334  6700 0046                286      BEQ     COMPARE_0100    * if equal, goes to COMPARE_0100 for NOP, MOVEM, LEA, NOT, JSR, RTS
00001338                           287      
00001338  B87C 0005                288      CMP.W   #%0101,D4      
0000133C  6700 02EE                289      BEQ     CHECK_ADDQ      * if equal, goes to CHECK_ADDQ
00001340                           290      
00001340  B87C 0006                291      CMP.W   #%0110,D4      
00001344  6700 0370                292      BEQ     COMPARE_0110    * if equal, goes to COMPARE_0110 for Bcc(BGT, BLE, BEQ) and BRA
00001348                           293      
00001348  B87C 0007                294      CMP.W   #%0111,D4      
0000134C  6700 04D0                295      BEQ     CHECK_MOVEQ     * if equal, goes to CHECK_MOVEQ
00001350                           296      
00001350  B87C 0008                297      CMP.W   #%1000,D4      
00001354  6700 0526                298      BEQ     CHECK_OR        * if equal, goes to CHECK_OR
00001358                           299      
00001358  B87C 0009                300      CMP.W   #%1001,D4      
0000135C  6700 059C                301      BEQ     CHECK_SUB       * if equal, goes to CHECK_SUB
00001360                           302      
00001360  B87C 000C                303      CMP.W   #%1100,D4      
00001364  6700 0622                304      BEQ     CHECK_AND       * if equal, goes to CHECK_AND
00001368                           305      
00001368  B87C 000D                306      CMP.W   #%1101,D4      
0000136C  6700 0378                307      BEQ     COMPARE_1101    * if equal, goes to COMPARE_1101 for ADD and ADDA
00001370                           308      
00001370  B87C 000E                309      CMP.W   #%1110,D4      
00001374  6700 06A0                310      BEQ     COMPARE_1110    * if equal, goes to COMPARE_1110 for LSL, LSR, ASR, ASL, ROL, ROR
00001378                           311      
00001378  6600 1758                312      BNE     PRINT_DATA      * all other instructions are not supported 
0000137C                           313  
0000137C                           314  
0000137C                           315  
0000137C                           316  *************************** NOP, MOVEM, LEA, NOT, JSR, RTS ***************************
0000137C                           317  
0000137C                           318  COMPARE_0100
0000137C  0803 000C                319      BTST.L  #$0C,D3             * compare bit 8 for LEA
00001380  6600 0032                320      BNE     CHECK_LEA
00001384                           321      
00001384  13FC 0004 00003110       322      MOVE.B  #4,Bits
0000138C  4EB8 12F0                323      JSR     READ_BITS
00001390                           324      
00001390  B87C 0006                325      CMP.W   #%0110,D4
00001394  6700 00AA                326      BEQ     CHECK_NOT           * goes to NOT
00001398                           327      
00001398  B87C 0008                328      CMP.W   #%1000,D4
0000139C  6700 012C                329      BEQ     CHECK_MOVEM_1000       * goes to MOVEM_1000
000013A0                           330      
000013A0  B87C 000C                331      CMP.W   #%1100,D4       
000013A4  6700 01D8                332      BEQ     CHECK_MOVEM_1100       * goes to MOVEM_1100
000013A8                           333      
000013A8  B87C 000E                334      CMP.W   #%1110,D4
000013AC  6700 01D8                335      BEQ     CHECK_NOP_JSR_RTS             * goes to compare for 1110 (NOP,JSR,RTS)
000013B0                           336      
000013B0  6600 1720                337      BNE     PRINT_DATA
000013B4                           338  
000013B4                           339  CHECK_LEA
000013B4  13FC 0003 00003110       340      MOVE.B  #3,Bits  
000013BC  4EB8 12F0                341      JSR     READ_BITS 
000013C0  13C4 00003122            342      MOVE.B  D4,DEST_REG  
000013C6                           343  
000013C6  13FC 0003 00003110       344      MOVE.B  #3,Bits
000013CE  4EB8 12F0                345      JSR     READ_BITS
000013D2  B83C 0007                346      CMP.B   #7,D4               * if mode = 111 = continue
000013D6  6600 16FA                347      BNE     PRINT_DATA
000013DA                           348  
000013DA  13FC 0003 00003110       349      MOVE.B  #3,Bits
000013E2  4EB8 12F0                350      JSR     READ_BITS 
000013E6  13C4 00003124            351      MOVE.B  D4,SRC_MODE           
000013EC                           352  
000013EC  13FC 0003 00003110       353      MOVE.B  #3,Bits 
000013F4  4EB8 12F0                354      JSR     READ_BITS 
000013F8  13C4 00003125            355      MOVE.B  D4,SRC_REG 
000013FE                           356      
000013FE                           357      *MOVE.B  #3,CmdIndex         
000013FE  4EB9 000029DE            358      JSR     CHECK_SOURCE                * Check Source Mode
00001404                           359      
00001404  0C39 000F 0000313D       360      CMP.B   #$F,SrcMode         * If SrcMode is invalid
0000140C  6700 16C4                361      BEQ     PRINT_DATA
00001410                           362      
00001410  0C39 0002 0000313D       363      CMP.B   #$2,SrcMode         * If SrcMode is 010 = '(An)'
00001418  6700 10BC                364      BEQ     PRINTLEA        
0000141C                           365      
0000141C  0C39 0007 0000313D       366      CMP.B   #$7,SrcMode         * If SrcMode is 111 + 000 = (XXX).W
00001424  6700 10B0                367      BEQ     PRINTLEA    
00001428                           368      
00001428  0C39 0008 0000313D       369      CMP.B   #$8,SrcMode         * If SrcMode is 111 + 001 = (XXX).L
00001430  6700 10A4                370      BEQ     PRINTLEA
00001434                           371              
00001434  13FC 0001 0000313A       372      MOVE.B  #1,INVALID_EA   
0000143C  6000 1098                373      BRA     PRINTLEA    
00001440                           374      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001440                           375  
00001440                           376      
00001440                           377  CHECK_NOT 
00001440                           378      * TODO : TEST
00001440  13FC 0002 00003110       379      MOVE.B  #2,Bits             
00001448  4EB8 12F0                380      JSR     READ_BITS             
0000144C  13C4 0000312D            381      MOVE.B  D4,SIZE_BITS               * Stores size 
00001452                           382      
00001452  4EB9 00002AFE            383      JSR     SETSIZE2             * set correct size for printing
00001458                           384      
00001458  B83C 0003                385      CMP.B   #%11,D4             * Compare the size bits to 00, 01, 10 (b,w,l)
0000145C  6700 1674                386      BEQ     PRINT_DATA          * Else, If 11 size invalid
00001460                           387      
00001460  13FC 0003 00003110       388      MOVE.B  #3,Bits       
00001468  4EB8 12F0                389      JSR     READ_BITS       
0000146C  13C4 00003123            390      MOVE.B  D4,DEST_MODE             
00001472                           391  
00001472  13FC 0003 00003110       392      MOVE.B  #3,Bits       
0000147A  4EB8 12F0                393      JSR     READ_BITS
0000147E  13C4 00003122            394      MOVE.B  D4,DEST_REG             
00001484                           395      
00001484                           396      *MOVE.B  #2,CmdIndex 
00001484  4EB9 000028DE            397      JSR     CHECK_DESTINATION               * Check Destination Mode
0000148A                           398  
0000148A  0C39 000F 0000313B       399      CMP.B   #$F,DstMode         * If DstMode is invalid
00001492  6700 163E                400      BEQ     PRINT_DATA      
00001496                           401  
00001496  0C39 000E 0000313B       402      CMP.B   #$E,DstMode         * If DstMode is invalid EA
0000149E  13FC 0001 0000313A       403      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000014A6                           404      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
000014A6                           405  
000014A6  0C39 0001 0000313B       406      CMP.B   #$1,DstMode         * If DstMode is 001 = 'An'
000014AE  13FC 0001 0000313A       407      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000014B6                           408      
000014B6  0C39 000B 0000313B       409      CMP.B   #$B,DstMode         * If DstMode is 111 + 100 = #<data>
000014BE  13FC 0001 0000313A       410      MOVE.B  #1,INVALID_EA               * FLAG FOR INVALID EA
000014C6  6000 1024                411      BRA     PRINTNOT
000014CA                           412  
000014CA                           413  CHECK_MOVEM_1000 
000014CA                           414      * TODO : TEST WITH EA 
000014CA  13FC 0001 00003110       415      MOVE.B  #1,Bits
000014D2  4EB8 12F0                416      JSR     READ_BITS
000014D6  B83C 0001                417      CMP.B   #%1,D4
000014DA  6600 15F6                418      BNE     PRINT_DATA
000014DE                           419      
000014DE  13FC 0001 00003110       420      MOVE.B  #1,Bits
000014E6  4EB8 12F0                421      JSR     READ_BITS
000014EA  13C4 0000312D            422      MOVE.B  D4,SIZE_BITS
000014F0                           423      
000014F0  4EB9 00002AE4            424      JSR     SETSIZE1
000014F6                           425  
000014F6  13FC 0003 00003110       426      MOVE.B  #3,Bits
000014FE  4EB8 12F0                427      JSR     READ_BITS
00001502  13C4 00003126            428      MOVE.B  D4,TEMP_MODE
00001508                           429      
00001508  13FC 0003 00003110       430      MOVE.B  #3,Bits
00001510  4EB8 12F0                431      JSR     READ_BITS
00001514  13C4 00003127            432      MOVE.B  D4,TEMP_REG
0000151A                           433      
0000151A  4EB9 0000295E            434      JSR     CHECK_TEMP
00001520  4EB9 00002A5E            435      JSR     CHECK_XBIT
00001526                           436      
00001526  0C39 000F 0000313C       437      CMP.B   #$F,TempMode        * If TempMode is invalid
0000152E  6700 15A2                438      BEQ     PRINT_DATA              * Print DATA instead
00001532                           439  
00001532  0C39 000E 0000313C       440      CMP.B   #$E,TempMode        * If TempMode is invalid EA
0000153A                           441    *  BEQ     SETINVEA           * 
0000153A  13FC 0001 0000313A       442      MOVE.B  #1,INVALID_EA
00001542                           443     *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001542                           444  
00001542  0C39 0002 0000313C       445      CMP.B   #$2,TempMode        * If TempMode is 010 = '(An)'
0000154A  6700 0F74                446      BEQ     PRINTMOVEM              
0000154E                           447  
0000154E  0C39 0007 0000313C       448      CMP.B   #$7,TempMode        * If TempMode is 111 + 000 = (XXX).W
00001556  6700 0F68                449      BEQ     PRINTMOVEM   
0000155A                           450  
0000155A  0C39 0008 0000313C       451      CMP.B   #$8,TempMode        * If TempMode is 111 + 001 = (XXX).L
00001562  6700 0F5C                452      BEQ     PRINTMOVEM   
00001566                           453                 
00001566  0C39 0004 0000313B       454      CMP.B   #$4,DstMode         * If DstMode is 100 = '-(An)'
0000156E  6700 0F50                455      BEQ     PRINTMOVEM   
00001572                           456  
00001572  0C39 0003 0000313D       457      CMP.B   #$3,SrcMode         * If SrcMode is 011 = '(An)+'
0000157A  6700 0F44                458      BEQ     PRINTMOVEM   
0000157E                           459     * BRA     SETINVEA
0000157E                           460      
0000157E                           461  CHECK_MOVEM_1100     
0000157E  13FC 0001 00003139       462      MOVE.B      #1,XBIT
00001586                           463      
00001586                           464  
00001586                           465  CHECK_NOP_JSR_RTS   *   NOP, JSR, RTS   *
00001586  13FC 0002 00003110       466      MOVE.B  #2,Bits
0000158E  4EB8 12F0                467      JSR     READ_BITS
00001592                           468      
00001592  B83C 0002                469      CMP.B   #%10,D4
00001596  6700 000E                470      BEQ     CHECK_JSR           * goes to JSR
0000159A                           471      
0000159A  B83C 0001                472      CMP.B   #%01,D4 
0000159E  6700 006C                473      BEQ     CHECK_NOP_RTS       * goes to NOP and RTS
000015A2                           474  
000015A2  6600 152E                475      BNE     PRINT_DATA
000015A6                           476  
000015A6                           477  CHECK_JSR       * TODO: TEST
000015A6                           478  
000015A6  13FC 0003 00003110       479      MOVE.B  #3,Bits
000015AE  4EB8 12F0                480      JSR     READ_BITS
000015B2  13C4 00003123            481      MOVE.B  D4,DEST_MODE
000015B8                           482      
000015B8  13FC 0003 00003110       483      MOVE.B  #3,Bits
000015C0  4EB8 12F0                484      JSR     READ_BITS
000015C4  13C4 00003122            485      MOVE.B  D4,DEST_REG
000015CA                           486      
000015CA                           487      *MOVE.B  #4,INDEX
000015CA  4EB9 000028DE            488      JSR     CHECK_DESTINATION
000015D0                           489      
000015D0  0C39 000F 0000313B       490      CMP.B   #$F,DstMode         * if invalid print DATA
000015D8  6700 14F8                491      BEQ     PRINT_DATA
000015DC                           492      
000015DC  0C39 0002 0000313B       493      CMP.B   #$2,DstMode         * if DstMode 010        
000015E4  6700 0F1C                494      BEQ     PRINTJSR
000015E8                           495      
000015E8  0C39 0007 0000313B       496      CMP.B   #$7,DstMode         * if DstMode 111 + 000
000015F0  6700 0F10                497      BEQ     PRINTJSR
000015F4                           498      
000015F4  0C39 0008 0000313B       499      CMP.B   #$8,DstMode         * if DstMode 111 + 001
000015FC  6700 0F04                500      BEQ     PRINTJSR
00001600                           501      
00001600  13FC 0001 0000313A       502      MOVE.B  #1,INVALID_EA      * sets flag that EA is invalid 
00001608                           503      *TODO: WHEN PRINTJSR CHECK IF THIS FLAG IS 1 -> PRINT 'INVALID EA
00001608  6000 0EF8                504      BRA     PRINTJSR
0000160C                           505      
0000160C                           506  CHECK_NOP_RTS
0000160C  13FC 0006 00003110       507      MOVE.B  #6,Bits
00001614  4EB8 12F0                508      JSR READ_BITS
00001618                           509      
00001618  B83C 0031                510      CMP.B   #%110001,D4
0000161C  6700 0E92                511      BEQ     PRINTNOP            
00001620                           512      
00001620  B83C 0035                513      CMP.B   #%110101,D4
00001624  6700 0EF2                514      BEQ     PRINTRTS       
00001628                           515          
00001628  6600 14A8                516      BNE     PRINT_DATA
0000162C                           517  
0000162C                           518  ************************** ADDQ ***************************
0000162C                           519  CHECK_ADDQ
0000162C  13FC 0003 00003110       520      MOVE.B  #3,Bits 
00001634  4EB8 12F0                521      JSR     READ_BITS
00001638  13C4 00003128            522      MOVE.B  D4,DATA_FIELD
0000163E                           523      
0000163E  4EB9 00002AA6            524      JSR     FORMAT_DATA     
00001644                           525      
00001644  13FC 0001 00003110       526      MOVE.B  #1,Bits
0000164C  4EB8 12F0                527      JSR     READ_BITS
00001650  B83C 0000                528      CMP.B   #0,D4               * if not equal to 0 - ILLEGAL INSTRUCTION
00001654  6600 147C                529      BNE     PRINT_DATA          * goes to PRINT_DATA
00001658                           530  
00001658  13FC 0002 00003110       531      MOVE.B  #2,Bits
00001660  4EB8 12F0                532      JSR     READ_BITS
00001664  13C4 0000312D            533      MOVE.B  D4,SIZE_BITS             * store size into SIZE
0000166A  0C39 0003 0000312D       534      CMP.B   #%11,SIZE_BITS           * cannot be #%11
00001672  6700 145E                535      BEQ     PRINT_DATA
00001676  4EB9 00002AFE            536      JSR     SETSIZE2            * for printing 
0000167C                           537  
0000167C  13FC 0003 00003110       538      MOVE.B  #3,Bits
00001684  4EB8 12F0                539      JSR     READ_BITS
00001688  13C4 00003123            540      MOVE.B  D4,DEST_MODE        * store the effective address MODE in DEST_MODE
0000168E                           541      
0000168E  13FC 0003 00003110       542      MOVE.B  #3,Bits
00001696  4EB8 12F0                543      JSR     READ_BITS
0000169A  13C4 00003122            544      MOVE.B  D4,DEST_REG         * store the effective address REGISTER in DEST_REG
000016A0                           545      
000016A0  4EB9 000028DE            546      JSR     CHECK_DESTINATION    
000016A6                           547      
000016A6  0C39 000F 00003123       548      CMP.B   #$F,DEST_MODE       * if destination mode is invalid
000016AE  6700 1422                549      BEQ     PRINT_DATA         
000016B2                           550      
000016B2                           551   *   CMP.B   #$E,DEST_MODE       * if destination mode is invalid EA
000016B2                           552   *   BEQ     INVALID_EA          * TODO 
000016B2                           553      
000016B2                           554   *   CMP.B   #$B,DEST_MODE       * if destination mode 111+100 = #<data>
000016B2                           555   *   BEQ     INVALID_EA         * TODO
000016B2                           556      
000016B2  6000 0E74                557      BRA     PRINTADDQ          * TODO: check the name I/O; check what need EA 
000016B6                           558  
000016B6                           559  ************************* Bcc(BGT, BLE, BEQ) and BRA ***********************
000016B6                           560  COMPARE_0110  * TODO : store condition and 8-bit displacement 
000016B6  13FC 0004 00003110       561      MOVE.B  #4,Bits 
000016BE  4EB8 12F0                562      JSR     READ_BITS
000016C2                           563      
000016C2  B83C 000E                564      CMP.B   #%1110,D4
000016C6  6700 0EBE                565      BEQ     PRINTBGT 
000016CA                           566      
000016CA  B83C 000F                567      CMP.B   #%1111,D4
000016CE  6700 0EE2                568      BEQ     PRINTBLE 
000016D2                           569      
000016D2  B83C 0007                570      CMP.B   #%0111,D4
000016D6  6700 0EC4                571      BEQ     PRINTBEQ  
000016DA                           572      
000016DA  B83C 0000                573      CMP.B   #%0000,D4
000016DE  6700 0EE8                574      BEQ     PRINTBRA
000016E2                           575      
000016E2  6000 13EE                576      BRA     PRINT_DATA 
000016E6                           577  
000016E6                           578  ************************** ADD, ADDA **********************
000016E6                           579  COMPARE_1101    * ADD and ADDA 
000016E6  13FC 0003 00003110       580      MOVE.B  #3,Bits
000016EE  4EB8 12F0                581      JSR     READ_BITS
000016F2  13C4 00003127            582      MOVE.B  D4,TEMP_REG ;push to EA storage (probably D2)
000016F8                           583      
000016F8  13FC 0001 00003110       584      MOVE.B  #1,Bits
00001700  4EB8 12F0                585      JSR     READ_BITS
00001704  13C4 00003139            586      MOVE.B  D4,XBit
0000170A                           587      
0000170A  13FC 0002 00003110       588      MOVE.B  #2,Bits
00001712  4EB8 12F0                589      JSR     READ_BITS
00001716  13C4 0000312D            590      MOVE.B  D4,SIZE_BITS
0000171C                           591      
0000171C  13FC 0001 00003126       592      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
00001724  0C39 0003 0000312D       593      CMP.B   #%11,SIZE_BITS 
0000172C  6700 0072                594      BEQ     CHECK_ADDA      * if SIZE_FIELD is #%11 equals branches to CHECK_ADDA
00001730                           595      
00001730  13FC 0000 00003126       596      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001738  4EB9 00002A5E            597      JSR     CHECK_XBIT
0000173E                           598      
0000173E                           599      ;These two need to be pushed to EA for second variable, order determined
0000173E                           600      ;by size
0000173E  13FC 0003 00003110       601      MOVE.B  #3,Bits
00001746  4EB8 12F0                602      JSR     READ_BITS
0000174A  13C4 00003126            603      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
00001750                           604      
00001750  13FC 0003 00003110       605      MOVE.B  #3,Bits
00001758  4EB8 12F0                606      JSR     READ_BITS
0000175C  13C4 00003127            607      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001762                           608      
00001762  13FC 0007 00003138       609      MOVE.B  #7,INDEX
0000176A  4EB9 0000295E            610      JSR     CHECK_TEMP   
00001770  0C39 000F 0000313C       611      CMP.B   #$F, TempMode
00001778  6700 1358                612      BEQ     PRINT_DATA
0000177C                           613    *  CMP.B   #$E,TempMode    
0000177C                           614    *  BEQ     INVALID_EA              * TODO
0000177C                           615      
0000177C  4EF9 00001782            616      JMP     CHECK_ADD
00001782                           617      
00001782                           618  CHECK_ADD
00001782  4EB9 00002AFE            619      JSR     SETSIZE2
00001788  0C39 0000 0000312D       620      CMP.B   #%00,SIZE_BITS
00001790  6600 000A                621      BNE     CCHECK_ADD  
00001794                           622      
00001794  0C39 0001 0000313C       623      CMP.B   #$1,TempMode       * if TempMode is invalid
0000179C                           624    *  BEQ     INVALID_EA              * TODO 
0000179C                           625  CCHECK_ADD
0000179C  6000 0F9C                626      BRA     PRINTADD               * TODO: check the name I/O; check what need EA
000017A0                           627  
000017A0                           628  
000017A0                           629  CHECK_ADDA
000017A0  13FC 0001 0000312D       630      MOVE.B  #%01,SIZE_BITS
000017A8                           631  
000017A8  0C39 0000 00003139       632      CMP.B   #%0,XBIT
000017B0  6700 0010                633      BEQ     CCHECK_ADDA
000017B4  13FC 0002 0000312D       634      MOVE.B  #%10,SIZE_BITS
000017BC                           635      
000017BC  4EB9 00002AFE            636      JSR     SETSIZE2
000017C2                           637  
000017C2                           638  CCHECK_ADDA
000017C2  4EB9 00002AFE            639      JSR     SETSIZE2
000017C8                           640      
000017C8  13F9 00003127 00003122   641      MOVE.B  TEMP_REG,DEST_REG
000017D2  13F9 00003126 00003123   642      MOVE.B  TEMP_MODE,DEST_MODE     * set MOVE_DEST to 'An'
000017DC  13FC 0001 0000313B       643      MOVE.B  #$1,DstMode
000017E4                           644      
000017E4  13FC 0003 00003110       645      MOVE.B  #3,Bits        
000017EC  4EB8 12F0                646      JSR     READ_BITS
000017F0  13C4 00003124            647      MOVE.B  D4,SRC_MODE    
000017F6                           648      
000017F6  13FC 0003 00003110       649      MOVE.B  #3,Bits        
000017FE  4EB8 12F0                650      JSR     READ_BITS
00001802  13C4 00003125            651      MOVE.B  D4,SRC_REG
00001808                           652      
00001808                           653     * MOVE.B  #8,INDEX
00001808  4EB9 000029DE            654      JSR     CHECK_SOURCE
0000180E  0C39 000F 0000313D       655      CMP.B   #$F,SrcMode
00001816  6700 12BA                656      BEQ     PRINT_DATA
0000181A                           657     * CMP.B   #$E,SrcMode
0000181A                           658     * BEQ     INVALID_EA                  * TODO 
0000181A                           659      
0000181A  6000 0F34                660      BRA     PRINTADDA                  * TODO: check the name I/O; check what need EA
0000181E                           661  
0000181E                           662  ************************** MOVEQ ********************************
0000181E                           663  CHECK_MOVEQ
0000181E  13FC 0003 00003110       664      MOVE.B  #3,Bits         * read next 3 bits
00001826  4EB8 12F0                665      JSR     READ_BITS       * store them in D4
0000182A  13C4 00003122            666      MOVE.B  D4,DEST_REG     * move register value (used in EA)
00001830  1439 00003122            667      MOVE.B  DEST_REG,D2
00001836  163C 0000                668      MOVE.B  #%000,D3
0000183A                           669      
0000183A  13FC 0001 00003110       670      MOVE.B  #1,Bits         * read the next bit into D4
00001842  4EB8 12F0                671      JSR     READ_BITS
00001846  B83C 0000                672      CMP.B   #0,D4           * if not equal to 0 - ILLEGAL INSTRUCTION
0000184A  6600 1286                673      BNE     PRINT_DATA      * goes to PRINT_DATA ?
0000184E                           674      
0000184E  13FC 0008 00003110       675      MOVE.B  #8,Bits        
00001856  4EB8 12F0                676      JSR     READ_BITS
0000185A  23C4 00003128            677      MOVE.L  D4,DATA_FIELD         * moves data value to DATA_FIELD
00001860                           678      
00001860  13FC 0007 00003124       679      MOVE.B  #%111,SRC_MODE  * 
00001868  13FC 0004 00003125       680      MOVE.B  #%100,SRC_REG   * 
00001870  13FC 0004 000027CA       681      MOVE.B  #4,SizeSplit
00001878  6000 0D64                682      BRA     PRINTMOVEQ 
0000187C                           683      
0000187C                           684  ************************* OR *********************************
0000187C                           685  CHECK_OR
0000187C  13FC 0003 00003110       686      MOVE.B  #3,Bits
00001884  4EB8 12F0                687      JSR     READ_BITS
00001888  13C4 00003127            688      MOVE.B  D4,TEMP_REG
0000188E                           689      
0000188E  13FC 0001 00003110       690      MOVE.B  #1,Bits
00001896  4EB8 12F0                691      JSR     READ_BITS
0000189A  13C4 00003139            692      MOVE.B  D4,XBit
000018A0                           693      
000018A0  13FC 0002 00003110       694      MOVE.B  #2,Bits
000018A8  4EB8 12F0                695      JSR     READ_BITS
000018AC  13C4 0000312D            696      MOVE.B  D4,SIZE_BITS
000018B2                           697      
000018B2  4EB9 00002AFE            698      JSR     SETSIZE2
000018B8                           699  
000018B8                           700     * MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
000018B8                           701          
000018B8                           702     * MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
000018B8  4EB9 00002A5E            703      JSR     CHECK_XBIT
000018BE                           704      
000018BE  13FC 0003 00003110       705      MOVE.B  #3,Bits
000018C6  4EB8 12F0                706      JSR     READ_BITS
000018CA  13C4 00003126            707      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
000018D0                           708      
000018D0  13FC 0003 00003110       709      MOVE.B  #3,Bits
000018D8  4EB8 12F0                710      JSR     READ_BITS
000018DC  13C4 00003127            711      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
000018E2                           712      
000018E2                           713      *MOVE.B  #7,INDEX
000018E2  4EB9 0000295E            714      JSR     CHECK_TEMP   
000018E8  0C39 000F 0000313C       715      CMP.B   #$F, TempMode
000018F0  6700 11E0                716      BEQ     PRINT_DATA
000018F4                           717    *  CMP.B   #$E,TempMode    
000018F4                           718    *  BEQ     INVALID_EA              * TODO
000018F4                           719      
000018F4  4EF9 00002622            720      JMP     PRINTOR
000018FA                           721  
000018FA                           722  ********************* SUB **********************
000018FA                           723  CHECK_SUB
000018FA  13FC 0003 00003110       724      MOVE.B  #3,Bits
00001902  4EB8 12F0                725      JSR     READ_BITS
00001906  13C4 00003127            726      MOVE.B  D4,TEMP_REG
0000190C                           727      
0000190C  13FC 0001 00003110       728      MOVE.B  #1,Bits
00001914  4EB8 12F0                729      JSR     READ_BITS
00001918  13C4 00003139            730      MOVE.B  D4,XBit
0000191E                           731      
0000191E  13FC 0002 00003110       732      MOVE.B  #2,Bits
00001926  4EB8 12F0                733      JSR     READ_BITS
0000192A  13C4 0000312D            734      MOVE.B  D4,SIZE_BITS
00001930                           735      
00001930  4EB9 00002AFE            736      JSR     SETSIZE2
00001936                           737  
00001936  13FC 0001 00003126       738      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
0000193E                           739          
0000193E  13FC 0000 00003126       740      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
00001946  4EB9 00002A5E            741      JSR     CHECK_XBIT
0000194C                           742      
0000194C  13FC 0003 00003110       743      MOVE.B  #3,Bits
00001954  4EB8 12F0                744      JSR     READ_BITS
00001958  13C4 00003126            745      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
0000195E                           746      
0000195E  13FC 0003 00003110       747      MOVE.B  #3,Bits
00001966  4EB8 12F0                748      JSR     READ_BITS
0000196A  13C4 00003127            749      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
00001970                           750      
00001970                           751      *MOVE.B  #7,INDEX
00001970  4EB9 0000295E            752      JSR     CHECK_TEMP   
00001976  0C39 000F 0000313C       753      CMP.B   #$F, TempMode
0000197E  6700 1152                754      BEQ     PRINT_DATA
00001982                           755    *  CMP.B   #$E,TempMode    
00001982                           756    *  BEQ     INVALID_EA              * TODO
00001982                           757      
00001982  4EF9 0000270E            758      JMP     PRINTSUB
00001988                           759  
00001988                           760  
00001988                           761  ******************* AND ***********************
00001988                           762  CHECK_AND
00001988  13FC 0003 00003110       763      MOVE.B  #3,Bits
00001990  4EB8 12F0                764      JSR     READ_BITS
00001994  13C4 00003127            765      MOVE.B  D4,TEMP_REG
0000199A                           766      
0000199A  13FC 0001 00003110       767      MOVE.B  #1,Bits
000019A2  4EB8 12F0                768      JSR     READ_BITS
000019A6  13C4 00003139            769      MOVE.B  D4,XBit
000019AC                           770      
000019AC  13FC 0002 00003110       771      MOVE.B  #2,Bits
000019B4  4EB8 12F0                772      JSR     READ_BITS
000019B8  13C4 0000312D            773      MOVE.B  D4,SIZE_BITS
000019BE                           774      
000019BE  4EB9 00002AFE            775      JSR     SETSIZE2
000019C4                           776  
000019C4  13FC 0001 00003126       777      MOVE.B  #%001,TEMP_MODE * sets TEMP_MODE to #%001 
000019CC                           778          
000019CC  13FC 0000 00003126       779      MOVE.B  #%000,TEMP_MODE * sets TEMP_MODE to #%000
000019D4  4EB9 00002A5E            780      JSR     CHECK_XBIT
000019DA                           781      
000019DA  13FC 0003 00003110       782      MOVE.B  #3,Bits
000019E2  4EB8 12F0                783      JSR     READ_BITS
000019E6  13C4 00003126            784      MOVE.B  D4,TEMP_MODE    * reads and stores 3 bits in TEMP_MODE
000019EC                           785      
000019EC  13FC 0003 00003110       786      MOVE.B  #3,Bits
000019F4  4EB8 12F0                787      JSR     READ_BITS
000019F8  13C4 00003127            788      MOVE.B  D4,TEMP_REG    * reads and stores 3 bits in TEMP_REG    
000019FE                           789      
000019FE                           790      *MOVE.B  #7,INDEX
000019FE  4EB9 0000295E            791      JSR     CHECK_TEMP   
00001A04  0C39 000F 0000313C       792      CMP.B   #$F, TempMode
00001A0C  6700 10C4                793      BEQ     PRINT_DATA
00001A10                           794    *  CMP.B   #$E,TempMode    
00001A10                           795    *  BEQ     INVALID_EA              * TODO
00001A10                           796      
00001A10  4EF9 00002724            797      JMP     PRINTAND
00001A16                           798  
00001A16                           799      
00001A16                           800  **************************************LS,AS and ROTATE section********************************* 
00001A16                           801  COMPARE_1110 
00001A16  4245                     802              CLR D5     ;STORING ISOLATED BITS
00001A18  4244                     803              CLR D4
00001A1A  3839 0000310E            804              MOVE.W COMMANDDATA,D4
00001A20  2A04                     805              MOVE.L   D4,D5
00001A22  0285 000000C0            806              ANDI.L    #$00C0,D5   ;ISOLATE THE SIZE 
00001A28  EC8D                     807              LSR.L    #6,D5            ;NORMALIZE
00001A2A  13C5 0000312C            808              MOVE.B   D5,SIZE          ;SAVE THE SIZE
00001A30  13F9 0000312C 00003112   809              MOVE.B   SIZE,SizeValue
00001A3A  5239 00003112            810              ADD.B    #1,SizeValue
00001A40  BA3C 0003                811              CMP.B    #%11,D5    
00001A44  6700 0298                812              BEQ      G14_MEMS         ;MEMORY SHIFTING
00001A48  4245                     813              CLR D5
00001A4A  2A04                     814              MOVE.L   D4,D5      
00001A4C  0285 00000018            815              ANDI.L    #$0018,D5  ; ISOLATE THE TYPE
00001A52  E68D                     816              LSR.L   #3,D5
00001A54  BA3C 0001                817              CMP.B   #%001,D5
00001A58  6700 0020                818              BEQ     G_LS    ;LOGICAL SHIFTS
00001A5C  BA3C 0003                819              CMP.B   #%011,D5
00001A60  6700 00E4                820              BEQ     G_RO    ;ROTAIONS
00001A64  BA3C 0000                821              CMP.B   #%000,D5
00001A68  6700 01A8                822              BEQ     G_AS    ;ARITHMATIC SHIFTS
00001A6C                           823              
00001A6C  13FC 0001 00000001       824              MOVE.B #1,BAD_FLAG
00001A74  4EF9 00002AD2            825              JMP   PRINT_DATA   ; PRINT BAD DATA  
00001A7A                           826  
00001A7A                           827  G_LS               ;GROUP LOGICAL SHIFT
00001A7A  4245                     828       CLR   D5
00001A7C  23C4 00003150            829       MOVE.L D4,IR_IL
00001A82  02B9 00000020 00003150   830       ANDI.L  #$0020,IR_IL
00001A8C  2A39 00003150            831       MOVE.L  IR_IL,D5
00001A92  EA8D                     832       LSR.L   #5,D5
00001A94  BA3C 0001                833       CMP.B   #$1,D5
00001A98  6700 0056                834       BEQ     GLS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001A9C  4245                     835       CLR D5
00001A9E  2A04                     836       MOVE.L  D4,D5
00001AA0  0285 00000100            837       ANDI.L  #$0100,D5
00001AA6  E08D                     838       LSR.L  #8,D5
00001AA8  23C5 00003148            839       MOVE.L  D5,DR
00001AAE  4245                     840       CLR D5
00001AB0  2A04                     841       MOVE.L  D4,D5
00001AB2  0285 00000E00            842       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001AB8  E08D                     843       LSR.L   #8,D5
00001ABA  E28D                     844       LSR.L   #1,D5
00001ABC  BABC 00000007            845       CMP.L   #7,D5
00001AC2  6E00 100E                846       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001AC6  BABC 00000000            847       CMP.L   #0,D5
00001ACC  6D00 1004                848       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001AD0  13C5 00003154            849       MOVE.B  D5,S_COUNT
00001AD6  4EB9 0000246C            850       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT 
00001ADC  4245                     851       CLR     D5
00001ADE  2A04                     852       MOVE.L  D4,D5
00001AE0  0285 00000007            853       ANDI.L   #$0007,D5
00001AE6  13C5 00003159            854       MOVE.B   D5,dRN
00001AEC  6000 0812                855       BRA      PR_LS             
00001AF0                           856       
00001AF0                           857  GLS_EA 
00001AF0  4245                     858       CLR D5
00001AF2  4244                     859       CLR D4
00001AF4  3839 0000310E            860       MOVE.W COMMANDDATA,D4
00001AFA                           861  
00001AFA  2A04                     862       MOVE.L  D4,D5
00001AFC  0285 00000100            863       ANDI.L  #$0100,D5
00001B02  E08D                     864       LSR.L  #8,D5
00001B04  23C5 00003148            865       MOVE.L  D5,DR     ;DIRECTION
00001B0A  4245                     866       CLR D5
00001B0C  2A04                     867       MOVE.L  D4,D5
00001B0E  0285 00000E00            868       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT REGISTER
00001B14  E08D                     869       LSR.L   #8,D5
00001B16  E28D                     870       LSR.L   #1,D5
00001B18  BABC 00000007            871       CMP.L   #7,D5
00001B1E  6E00 0FB2                872       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001B22  BABC 00000000            873       CMP.L   #0,D5
00001B28  6D00 0FA8                874       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001B2C  13C5 00003158            875       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001B32  4245                     876       CLR     D5
00001B34  2A04                     877       MOVE.L   D4,D5
00001B36  0285 00000007            878       ANDI.L   #$0007,D5
00001B3C  13C5 00003159            879       MOVE.B   D5,dRN         ; DESTINATION REGISTER 
00001B42  6000 0568                880       BRA      PR_G_LS_EA      ;PRINT LS WITH EFFECTIVE ADDRESSING       
00001B46                           881  G_RO            ;GROUP ROTATION
00001B46  4245                     882       CLR   D5
00001B48  23C4 00003150            883       MOVE.L D4,IR_IL
00001B4E  02B9 00000020 00003150   884       ANDI.L  #$0020,IR_IL
00001B58  2A39 00003150            885       MOVE.L  IR_IL,D5
00001B5E  EA8D                     886       LSR.L   #5,D5
00001B60  BA3C 0001                887       CMP.B   #$1,D5
00001B64  6700 0056                888       BEQ     GRO_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001B68  4245                     889       CLR D5
00001B6A  2A04                     890       MOVE.L  D4,D5
00001B6C  0285 00000100            891       ANDI.L  #$0100,D5
00001B72  E08D                     892       LSR.L  #8,D5
00001B74  23C5 00003148            893       MOVE.L  D5,DR
00001B7A  4245                     894       CLR D5
00001B7C  2A04                     895       MOVE.L  D4,D5
00001B7E  0285 00000E00            896       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001B84  E08D                     897       LSR.L   #8,D5
00001B86  E28D                     898       LSR.L   #1,D5
00001B88  BABC 00000007            899       CMP.L   #7,D5
00001B8E  6E00 0F42                900       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001B92  BABC 00000000            901       CMP.L   #0,D5
00001B98  6D00 0F38                902       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001B9C  13C5 00003154            903       MOVE.B  D5,S_COUNT
00001BA2  4EB9 0000246C            904       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001BA8  4245                     905       CLR     D5
00001BAA  2A04                     906       MOVE.L  D4,D5
00001BAC  0285 00000007            907       ANDI.L   #$0007,D5
00001BB2  13C5 00003159            908       MOVE.B   D5,dRN
00001BB8  6000 0672                909       BRA      PR_RO    ;PRINT ROTATION   
00001BBC                           910  
00001BBC                           911  GRO_EA 
00001BBC  4245                     912       CLR D5
00001BBE  4244                     913       CLR D4
00001BC0  3839 0000310E            914       MOVE.W COMMANDDATA,D4
00001BC6                           915  
00001BC6  2A04                     916       MOVE.L  D4,D5
00001BC8  0285 00000100            917       ANDI.L  #$0100,D5
00001BCE  E08D                     918       LSR.L  #8,D5
00001BD0  23C5 00003148            919       MOVE.L  D5,DR     ;DIRECTION
00001BD6  4245                     920       CLR D5
00001BD8  2A04                     921       MOVE.L  D4,D5
00001BDA  0285 00000E00            922       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001BE0  E08D                     923       LSR.L   #8,D5
00001BE2  E28D                     924       LSR.L   #1,D5
00001BE4  BABC 00000007            925       CMP.L   #7,D5
00001BEA  6E00 0EE6                926       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001BEE  BABC 00000000            927       CMP.L   #0,D5
00001BF4  6D00 0EDC                928       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001BF8  13C5 00003158            929       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001BFE  4245                     930       CLR     D5
00001C00  2A04                     931       MOVE.L   D4,D5
00001C02  0285 00000007            932       ANDI.L   #$0007,D5
00001C08  13C5 00003159            933       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001C0E  6000 055C                934       BRA      PR_G_RO_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING  
00001C12                           935  
00001C12                           936  
00001C12                           937  
00001C12                           938  G_AS         ;GROUP ARITHMATIC SHIFT
00001C12  4245                     939       CLR   D5
00001C14  23C4 00003150            940       MOVE.L D4,IR_IL
00001C1A  02B9 00000020 00003150   941       ANDI.L  #$0020,IR_IL
00001C24  2A39 00003150            942       MOVE.L  IR_IL,D5
00001C2A  EA8D                     943       LSR.L   #5,D5
00001C2C  BA3C 0001                944       CMP.B   #$1,D5
00001C30  6700 0056                945       BEQ     GAS_EA    ; L SHIFT WITH DATA REGISTER AS SOURCE
00001C34  4245                     946       CLR D5
00001C36  2A04                     947       MOVE.L  D4,D5
00001C38  0285 00000100            948       ANDI.L  #$0100,D5
00001C3E  E08D                     949       LSR.L  #8,D5
00001C40  23C5 00003148            950       MOVE.L  D5,DR
00001C46  4245                     951       CLR D5
00001C48  2A04                     952       MOVE.L  D4,D5
00001C4A  0285 00000E00            953       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001C50  E08D                     954       LSR.L   #8,D5
00001C52  E28D                     955       LSR.L   #1,D5
00001C54  BABC 00000007            956       CMP.L   #7,D5
00001C5A  6E00 0E76                957       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001C5E  BABC 00000000            958       CMP.L   #0,D5
00001C64  6D00 0E6C                959       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001C68  13C5 00003154            960       MOVE.B  D5,S_COUNT
00001C6E  4EB9 0000246C            961       JSR     EIGHT_SHIFT  ; IF COUNT SHIFT IS ZERO, THEN THE SHIFT IS EIGHT
00001C74  4245                     962       CLR     D5
00001C76  2A04                     963       MOVE.L  D4,D5
00001C78  0285 00000007            964       ANDI.L   #$0007,D5
00001C7E  13C5 00003159            965       MOVE.B   D5,dRN
00001C84  6000 0610                966       BRA      PR_AS    ;PRINT ROTATION 
00001C88                           967  
00001C88                           968  GAS_EA    ;SHIFT IS WITH DATA REGISTER
00001C88  4245                     969       CLR D5
00001C8A  4244                     970       CLR D4
00001C8C  3839 0000310E            971       MOVE.W COMMANDDATA,D4
00001C92                           972  
00001C92  2A04                     973       MOVE.L  D4,D5
00001C94  0285 00000100            974       ANDI.L  #$0100,D5
00001C9A  E08D                     975       LSR.L  #8,D5
00001C9C  23C5 00003148            976       MOVE.L  D5,DR     ;DIRECTION
00001CA2  4245                     977       CLR D5
00001CA4  2A04                     978       MOVE.L  D4,D5
00001CA6  0285 00000E00            979       ANDI.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001CAC  E08D                     980       LSR.L   #8,D5
00001CAE  E28D                     981       LSR.L   #1,D5
00001CB0  BABC 00000007            982       CMP.L   #7,D5
00001CB6  6E00 0E1A                983       BGT     PRINT_DATA   ; THE NUMBER SHOULD NOT BE GREATER 7  
00001CBA  BABC 00000000            984       CMP.L   #0,D5
00001CC0  6D00 0E10                985       BLT     PRINT_DATA    ;THE COUNT IS LESS, 0 IS FOR EIGHT  
00001CC4  13C5 00003158            986       MOVE.B  D5,sRN          ; SOURCE REGISTER NUMBER BITS 
00001CCA  4245                     987       CLR     D5
00001CCC  2A04                     988       MOVE.L   D4,D5
00001CCE  0285 00000007            989       ANDI.L   #$0007,D5
00001CD4  13C5 00003159            990       MOVE.B   D5,dRN         ; DESTINATION REGISTER FOR
00001CDA  6000 0310                991       BRA      PR_G_AS_EA      ;PRINT RO WITH EFFECTIVE ADDRESSING             
00001CDE                           992  
00001CDE                           993  G14_MEMS 
00001CDE  4245                     994         CLR D5
00001CE0  2A04                     995         MOVE.L  D4,D5
00001CE2  CABC 00000E00            996         AND.L   #$0E00,D5  ;ISOLATE THE SHIFT COUNT
00001CE8  E08D                     997         LSR.L   #8,D5
00001CEA  E28D                     998         LSR.L   #1,D5
00001CEC  BA3C 0001                999         CMP.B   #%001,D5
00001CF0  6700 0012               1000         BEQ     G14_MEMS_LS   ;MEMORY SHIFT WITH LOGICAL SHIFT
00001CF4  BA3C 0003               1001         CMP.B   #%011,D5
00001CF8  6700 0070               1002         BEQ     G14_MEMS_RO   ;MEMORY ROTATION
00001CFC  BA3C 0000               1003         CMP.B   #%000,D5
00001D00  6700 00CE               1004         BEQ     G14_MEMS_AS   ; MEMORY ARITHMATIC SHIFT 
00001D04                          1005  
00001D04                          1006  G14_MEMS_LS 
00001D04  4245                    1007             CLR D5
00001D06  2A04                    1008             MOVE.L  D4,D5
00001D08  0285 00000100           1009             ANDI.L  #$0100,D5
00001D0E  E08D                    1010             LSR.L  #8,D5
00001D10  13C5 00003148           1011             MOVE.B  D5,DR     ;DIRECTION
00001D16  4245                    1012             CLR D5
00001D18  2A04                    1013             MOVE.L D4,D5
00001D1A  0285 00000038           1014             ANDI.L  #$0038,D5
00001D20  E68D                    1015             LSR.L  #3,D5
00001D22  13C5 0000315C           1016             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001D28  4245                    1017             CLR D5
00001D2A  2A04                    1018             MOVE.L D4,D5
00001D2C  0285 00000007           1019             ANDI.L  #$0007,D5
00001D32  13C5 00003159           1020             MOVE.B  D5,dRN
00001D38  0CB9 00000000 0000315C  1021             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001D42  6700 0D8E               1022             BEQ    PRINT_DATA
00001D46  0CB9 00000001 0000315C  1023             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001D50  6700 0D80               1024             BEQ     PRINT_DATA
00001D54  13C5 0000315B           1025             MOVE.B  D5,dRG     ;DESTINATION REG
00001D5A  0C39 0007 0000315C      1026             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001D62  6700 00F2               1027             BEQ     CHECK_ID_LS 
00001D66  6000 0180               1028             BRA     PR_G14_MEMS_LS             
00001D6A                          1029       
00001D6A                          1030  
00001D6A                          1031  G14_MEMS_RO
00001D6A  4245                    1032             CLR D5
00001D6C  2A04                    1033             MOVE.L  D4,D5
00001D6E  0285 00000100           1034             ANDI.L  #$0100,D5
00001D74  E08D                    1035             LSR.L  #8,D5
00001D76  13C5 00003148           1036             MOVE.B  D5,DR     ;DIRECTION
00001D7C  4245                    1037             CLR D5
00001D7E  2A04                    1038             MOVE.L D4,D5
00001D80  0285 00000038           1039             ANDI.L  #$0038,D5
00001D86  E68D                    1040             LSR.L  #3,D5
00001D88  13C5 0000315C           1041             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001D8E  4245                    1042             CLR D5
00001D90  2A04                    1043             MOVE.L D4,D5
00001D92  0285 00000007           1044             ANDI.L  #$0007,D5
00001D98  13C5 00003159           1045             MOVE.B  D5,dRN
00001D9E  0CB9 00000000 0000315C  1046             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001DA8  6700 0D28               1047             BEQ    PRINT_DATA
00001DAC  0CB9 00000001 0000315C  1048             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001DB6  6700 0D1A               1049             BEQ     PRINT_DATA
00001DBA  13C5 0000315B           1050             MOVE.B  D5,dRG     ;DESTINATION REG
00001DC0  0C39 0007 0000315C      1051             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001DC8  6700 007C               1052             BEQ     CHECK_ID_RO 
00001DCC  6000 019C               1053             BRA     PR_G14_MEMS_RO         
00001DD0                          1054  
00001DD0                          1055  G14_MEMS_AS
00001DD0  4245                    1056             CLR D5
00001DD2  2A04                    1057             MOVE.L  D4,D5
00001DD4  0285 00000100           1058             ANDI.L  #$0100,D5
00001DDA  E08D                    1059             LSR.L  #8,D5
00001DDC  13C5 00003148           1060             MOVE.B  D5,DR     ;DIRECTION
00001DE2  4245                    1061             CLR D5
00001DE4  2A04                    1062             MOVE.L D4,D5
00001DE6  0285 00000038           1063             ANDI.L  #$0038,D5
00001DEC  E68D                    1064             LSR.L  #3,D5
00001DEE  13C5 0000315C           1065             MOVE.B  D5,dMODE     ;DESTINATION MODE
00001DF4  4245                    1066             CLR D5
00001DF6  2A04                    1067             MOVE.L D4,D5
00001DF8  0285 00000007           1068             ANDI.L  #$0007,D5
00001DFE  13C5 00003159           1069             MOVE.B  D5,dRN
00001E04  0CB9 00000000 0000315C  1070             CMP.L  #%000,dMODE   ;MODE 000 IS NOT ALLOWED
00001E0E  6700 0CC2               1071             BEQ    PRINT_DATA
00001E12  0CB9 00000001 0000315C  1072             CMP.L   #%001,dMODE   ;MODE 001 IS NOT ALLOWED
00001E1C  6700 0CB4               1073             BEQ     PRINT_DATA
00001E20  13C5 0000315B           1074             MOVE.B  D5,dRG     ;DESTINATION REG
00001E26  0C39 0007 0000315C      1075             CMP.B   #%111,dMODE   ;IF MODE 111 CHECK IF THE ID IS IMMIDIATE
00001E2E  6700 0006               1076             BEQ     CHECK_ID_AS 
00001E32  6000 0032               1077             BRA     PR_G14_MEMS_AS                          
00001E36                          1078             
00001E36                          1079  
00001E36                          1080  
00001E36  0C39 0004 0000315B      1081  CHECK_ID_AS  CMP.B #$4,dRG
00001E3E  6700 0C92               1082               BEQ   PRINT_DATA
00001E42  6000 0022               1083               BRA     PR_G14_MEMS_AS
00001E46                          1084               
00001E46  0C39 0004 0000315B      1085  CHECK_ID_RO  CMP.B #$4,dRG
00001E4E  6700 0C82               1086               BEQ   PRINT_DATA
00001E52  6000 0116               1087               BRA     PR_G14_MEMS_RO
00001E56                          1088    
00001E56  0C39 0004 0000315B      1089  CHECK_ID_LS  CMP.B #$4,dRG
00001E5E  6700 0C72               1090               BEQ   PRINT_DATA
00001E62  6000 0084               1091               BRA    PR_G14_MEMS_LS
00001E66                          1092                               
00001E66                          1093  PR_G14_MEMS_AS
00001E66  4EB9 00002822           1094       JSR     PRINTCLRSPOT      * print space
00001E6C                          1095   
00001E6C  0C39 0000 00003148      1096       CMP.B #$0,DR 
00001E74  6700 003A               1097       BEQ   PR_ASR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001E78                          1098      
00001E78                          1099      *******PRINT LSL*******
00001E78  43F9 000030F0           1100       LEA       PASL,A1   MEM LEFT SHIF
00001E7E  103C 000E               1101       MOVE.B   #14,D0     ; moves #14 into data register D0
00001E82  4E4F                    1102       TRAP     #15
00001E84                          1103  
00001E84  4EB9 00002822           1104       JSR     PRINTCLRSPOT      * print space
00001E8A                          1105   
00001E8A  4243                    1106       CLR D3
00001E8C  4242                    1107       CLR D2
00001E8E  1439 0000315C           1108       MOVE.B  dMODE,D2
00001E94  1639 00003159           1109       MOVE.B  dRN,D3
00001E9A  4EB9 00002BA0           1110       JSR     EA_START
00001EA0                          1111       
00001EA0  43F9 00003088           1112       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001EA6  103C 000E               1113       MOVE.B   #14,D0     ; moves #14 into data register D0
00001EAA  4E4F                    1114       TRAP     #15       ; Displays message via trap 14
00001EAC                          1115       
00001EAC  6000 F3D4               1116       BRA MEMORYGRABBER
00001EB0                          1117  
00001EB0                          1118       
00001EB0                          1119  PR_ASR_MEM   ;MEM RIGHT SHIFT
00001EB0                          1120            
00001EB0  43F9 000030EC           1121       LEA       PASR,A1   MEM RIGHT SHIF
00001EB6  103C 000E               1122       MOVE.B   #14,D0     ; moves #14 into data register D0
00001EBA  4E4F                    1123       TRAP     #15
00001EBC                          1124  
00001EBC  4EB9 00002822           1125       JSR     PRINTCLRSPOT      * print space
00001EC2                          1126   
00001EC2  4243                    1127       CLR D3
00001EC4  4242                    1128       CLR D2
00001EC6  1439 0000315C           1129       MOVE.B  dMODE,D2
00001ECC  1639 00003159           1130       MOVE.B  dRN,D3
00001ED2  4EB9 00002BA0           1131       JSR     EA_START
00001ED8                          1132       
00001ED8  43F9 00003088           1133       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001EDE  103C 000E               1134       MOVE.B   #14,D0     ; moves #14 into data register D0
00001EE2  4E4F                    1135       TRAP     #15       ; Displays message via trap 14
00001EE4                          1136       
00001EE4  6000 F39C               1137       BRA MEMORYGRABBER
00001EE8                          1138  
00001EE8                          1139  
00001EE8                          1140               
00001EE8                          1141  
00001EE8                          1142  PR_G14_MEMS_LS
00001EE8  4EB9 00002822           1143       JSR     PRINTCLRSPOT      * print space
00001EEE                          1144   
00001EEE  0C39 0000 00003148      1145       CMP.B #$0,DR 
00001EF6  6700 003A               1146       BEQ   PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001EFA                          1147      
00001EFA                          1148      *******PRINT LSL*******
00001EFA  43F9 000030E4           1149       LEA       PLSL,A1   MEM LEFT SHIF
00001F00  103C 000E               1150       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F04  4E4F                    1151       TRAP     #15 
00001F06                          1152       
00001F06  4EB9 00002822           1153       JSR     PRINTCLRSPOT      * print space
00001F0C                          1154       
00001F0C  4243                    1155       CLR D3
00001F0E  4242                    1156       CLR D2
00001F10  1439 0000315C           1157       MOVE.B  dMODE,D2
00001F16  1639 00003159           1158       MOVE.B  dRN,D3
00001F1C  4EB9 00002BA0           1159       JSR     EA_START
00001F22                          1160       
00001F22  43F9 00003088           1161       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F28  103C 000E               1162       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F2C  4E4F                    1163       TRAP     #15       ; Displays message via trap 14
00001F2E                          1164       
00001F2E  6000 F352               1165       BRA MEMORYGRABBER
00001F32                          1166       
00001F32                          1167  PR_LSR_MEM   ;LOGICAL MEM RIGHT SHIFT
00001F32  43F9 000030E8           1168       LEA       PLSR,A1   MEM RIGHT SHIF
00001F38  103C 000E               1169       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F3C  4E4F                    1170       TRAP     #15
00001F3E                          1171       
00001F3E  4EB9 00002822           1172       JSR     PRINTCLRSPOT
00001F44                          1173   
00001F44  4243                    1174       CLR D3
00001F46  4242                    1175       CLR D2
00001F48  1439 0000315C           1176       MOVE.B  dMODE,D2
00001F4E  1639 00003159           1177       MOVE.B  dRN,D3
00001F54  4EB9 00002BA0           1178       JSR     EA_START
00001F5A                          1179       
00001F5A  43F9 00003088           1180       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001F60  103C 000E               1181       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F64  4E4F                    1182       TRAP     #15       ; Displays message via trap 14
00001F66                          1183       
00001F66  6000 F31A               1184       BRA    MEMORYGRABBER
00001F6A                          1185  
00001F6A                          1186  PR_G14_MEMS_RO
00001F6A  4EB9 00002822           1187       JSR     PRINTCLRSPOT      * print space
00001F70                          1188       
00001F70  0C39 0000 00003148      1189       CMP.B #$0,DR 
00001F78  6700 003A               1190       BEQ   PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001F7C                          1191      
00001F7C                          1192      *******PRINT ASL*******
00001F7C  43F9 000030F4           1193       LEA       PROL,A1   ROTATE MEM LEFT SHIF
00001F82  103C 000E               1194       MOVE.B   #14,D0     ; moves #14 into data register D0
00001F86  4E4F                    1195       TRAP     #15
00001F88                          1196  
00001F88  4EB9 00002822           1197       JSR     PRINTCLRSPOT
00001F8E                          1198        
00001F8E  4243                    1199       CLR D3
00001F90  4242                    1200       CLR D2
00001F92  1439 0000315C           1201       MOVE.B  dMODE,D2
00001F98  1639 00003159           1202       MOVE.B  dRN,D3
00001F9E  4EB9 00002BA0           1203       JSR     EA_START
00001FA4                          1204       
00001FA4  43F9 00003088           1205       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001FAA  103C 000E               1206       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FAE  4E4F                    1207       TRAP     #15       ; Displays message via trap 14
00001FB0                          1208       
00001FB0  6000 F2D0               1209       BRA MEMORYGRABBER
00001FB4                          1210  
00001FB4                          1211  PR_ROR_MEM   ;ROTATE MEM RIGHT 
00001FB4  43F9 000030F8           1212       LEA       PROR,A1   ROTATE MEM RIGHT SHIF
00001FBA  103C 000E               1213       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FBE  4E4F                    1214       TRAP     #15
00001FC0                          1215  
00001FC0  4EB9 00002822           1216       JSR     PRINTCLRSPOT
00001FC6                          1217   
00001FC6  4243                    1218       CLR D3
00001FC8  4242                    1219       CLR D2
00001FCA  1439 0000315C           1220       MOVE.B  dMODE,D2
00001FD0  1639 00003159           1221       MOVE.B  dRN,D3
00001FD6  4EB9 00002BA0           1222       JSR     EA_START
00001FDC                          1223       
00001FDC  43F9 00003088           1224       LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00001FE2  103C 000E               1225       MOVE.B   #14,D0     ; moves #14 into data register D0
00001FE6  4E4F                    1226       TRAP     #15       ; Displays message via trap 14
00001FE8                          1227       
00001FE8  6000 F298               1228       BRA MEMORYGRABBER
00001FEC                          1229  
00001FEC                          1230  
00001FEC                          1231  
00001FEC                          1232  
00001FEC                          1233  PR_G_AS_EA
00001FEC  4EB9 00002822           1234         JSR     PRINTCLRSPOT      * print space
00001FF2                          1235  
00001FF2  0CB9 00000000 00003148  1236          CMP.L #$0,DR 
00001FFC  6700 0058               1237          BEQ   PR_ASR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002000                          1238       
00002000                          1239          *******PRINT ASL*******
00002000  43F9 000030F0           1240          LEA       PASL,A1
00002006  103C 000E               1241          MOVE.B   #14,D0     ; moves #14 into data register D0
0000200A  4E4F                    1242          TRAP     #15 
0000200C  4EB9 000027CA           1243          JSR      SIZESPLIT
00002012                          1244          
00002012  4EB9 00002822           1245          JSR     PRINTCLRSPOT
00002018                          1246          
00002018  4242                    1247          CLR D2
0000201A  4243                    1248          CLR D3
0000201C  143C 0000               1249          MOVE.B  #%000,D2     ; mode data register
00002020  1639 00003158           1250          MOVE.B  sRN,D3       ; source register number
00002026  4EB9 00002BA0           1251          JSR     EA_START
0000202C  4EB9 00002830           1252          JSR     PRINTCOMA   ; print coma
00002032  4243                    1253          CLR D3
00002034  4242                    1254          CLR D2
00002036  143C 0000               1255          MOVE.B  #%000,D2      ; mode data register
0000203A  1639 00003159           1256          MOVE.B  dRN,D3        ; destination register
00002040  4EB9 00002BA0           1257          JSR     EA_START
00002046                          1258          
00002046  43F9 00003088           1259          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000204C  103C 000E               1260          MOVE.B   #14,D0     ; moves #14 into data register D0
00002050  4E4F                    1261          TRAP     #15       ; Displays message via trap 14
00002052                          1262          
00002052  6000 F22E               1263          BRA   MEMORYGRABBER
00002056                          1264  
00002056                          1265          
00002056                          1266  PR_ASR_EA          ;RIGHT ASR SHIFT WITH DATA REGISTER
00002056  43F9 000030EC           1267           LEA       PASR,A1
0000205C  103C 000E               1268          MOVE.B   #14,D0     ; moves #14 into data register D0
00002060  4E4F                    1269          TRAP     #15 
00002062  4EB9 000027CA           1270          JSR      SIZESPLIT
00002068                          1271          
00002068  4EB9 00002822           1272          JSR     PRINTCLRSPOT
0000206E                          1273          
0000206E  4242                    1274          CLR D2
00002070  4243                    1275          CLR D3
00002072  143C 0000               1276          MOVE.B  #%000,D2     ; mode data register
00002076  1639 00003158           1277          MOVE.B  sRN,D3       ; source register number
0000207C  4EB9 00002BA0           1278          JSR     EA_START
00002082  4EB9 00002830           1279          JSR     PRINTCOMA   ; print coma
00002088  4243                    1280          CLR D3
0000208A  4242                    1281          CLR D2
0000208C  143C 0000               1282          MOVE.B  #%000,D2      ; mode data register
00002090  1639 00003159           1283          MOVE.B  dRN,D3        ; destination register
00002096  4EB9 00002BA0           1284          JSR     EA_START
0000209C                          1285          
0000209C  43F9 00003088           1286          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000020A2  103C 000E               1287          MOVE.B   #14,D0     ; moves #14 into data register D0
000020A6  4E4F                    1288          TRAP     #15       ; Displays message via trap 14
000020A8                          1289          
000020A8  6000 F1D8               1290          BRA   MEMORYGRABBER
000020AC                          1291  
000020AC                          1292  
000020AC                          1293  PR_G_LS_EA
000020AC  4EB9 00002822           1294          JSR     PRINTCLRSPOT      * print space
000020B2                          1295  
000020B2  0CB9 00000000 00003148  1296          CMP.L #$0,DR 
000020BC  6700 0058               1297          BEQ   PR_LSR_EA   ;RIGHT SHIFT WITH DATA REGISTER
000020C0                          1298       
000020C0                          1299          *******PRINT LSL*******
000020C0  43F9 000030E4           1300          LEA       PLSL,A1
000020C6  103C 000E               1301          MOVE.B   #14,D0     ; moves #14 into data register D0
000020CA  4E4F                    1302          TRAP     #15 
000020CC  4EB9 000027CA           1303          JSR      SIZESPLIT
000020D2                          1304          
000020D2  4EB9 00002822           1305          JSR     PRINTCLRSPOT
000020D8                          1306          
000020D8  4242                    1307          CLR D2
000020DA  4243                    1308          CLR D3
000020DC  143C 0000               1309          MOVE.B  #%000,D2     ; mode data register
000020E0  1639 00003158           1310          MOVE.B  sRN,D3       ; source register number
000020E6  4EB9 00002BA0           1311          JSR     EA_START
000020EC  4EB9 00002830           1312          JSR     PRINTCOMA   ; print coma
000020F2  4243                    1313          CLR D3
000020F4  4242                    1314          CLR D2
000020F6  143C 0000               1315          MOVE.B  #%000,D2      ; mode data register
000020FA  1639 00003159           1316          MOVE.B  dRN,D3        ; destination register
00002100  4EB9 00002BA0           1317          JSR     EA_START
00002106                          1318          
00002106  43F9 00003088           1319          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000210C  103C 000E               1320          MOVE.B   #14,D0     ; moves #14 into data register D0
00002110  4E4F                    1321          TRAP     #15       ; Displays message via trap 14
00002112                          1322          
00002112  6000 F16E               1323          BRA   MEMORYGRABBER
00002116                          1324          
00002116                          1325  PR_LSR_EA          ;RIGHT SHIFT WITH DATA REGISTER
00002116  43F9 000030E8           1326           LEA       PLSR,A1
0000211C  103C 000E               1327           MOVE.B   #14,D0     ; moves #14 into data register D0
00002120  4E4F                    1328          TRAP     #15 
00002122  4EB9 000027CA           1329          JSR      SIZESPLIT
00002128                          1330          
00002128  4EB9 00002822           1331          JSR     PRINTCLRSPOT
0000212E                          1332          
0000212E  4242                    1333          CLR D2
00002130  4243                    1334          CLR D3
00002132  143C 0000               1335          MOVE.B  #%000,D2     ; mode data register
00002136  1639 00003158           1336          MOVE.B  sRN,D3       ; source register number
0000213C  4EB9 00002BA0           1337          JSR     EA_START
00002142  4EB9 00002830           1338          JSR     PRINTCOMA   ; print coma
00002148  4243                    1339          CLR D3
0000214A  4242                    1340          CLR D2
0000214C  143C 0000               1341          MOVE.B  #%000,D2      ; mode data register
00002150  1639 00003159           1342          MOVE.B  dRN,D3        ; destination register
00002156  4EB9 00002BA0           1343          JSR     EA_START
0000215C                          1344          
0000215C  43F9 00003088           1345          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002162  103C 000E               1346          MOVE.B   #14,D0     ; moves #14 into data register D0
00002166  4E4F                    1347          TRAP     #15       ; Displays message via trap 14
00002168                          1348          
00002168  6000 F118               1349          BRA   MEMORYGRABBER
0000216C                          1350  
0000216C                          1351  
0000216C                          1352  PR_G_RO_EA
0000216C  4EB9 00002822           1353          JSR     PRINTCLRSPOT      * print space 
00002172                          1354          
00002172  0CB9 00000000 00003148  1355           CMP.L #$0,DR 
0000217C  6700 0058               1356          BEQ   PR_ROR_EA   ;RIGHT SHIFT WITH DATA REGISTER
00002180                          1357       
00002180                          1358          *******PRINT LSL*******
00002180  43F9 000030F4           1359          LEA       PROL,A1
00002186  103C 000E               1360          MOVE.B   #14,D0     ; moves #14 into data register D0
0000218A  4E4F                    1361          TRAP     #15 
0000218C  4EB9 000027CA           1362          JSR      SIZESPLIT
00002192                          1363          
00002192  4EB9 00002822           1364          JSR     PRINTCLRSPOT
00002198                          1365          
00002198  4242                    1366          CLR D2
0000219A  4243                    1367          CLR D3
0000219C  143C 0000               1368          MOVE.B  #%000,D2     ; mode data register
000021A0  1639 00003158           1369          MOVE.B  sRN,D3       ; source register number
000021A6  4EB9 00002BA0           1370          JSR     EA_START
000021AC  4EB9 00002830           1371          JSR     PRINTCOMA   ; print coma
000021B2  4243                    1372          CLR D3
000021B4  4242                    1373          CLR D2
000021B6  143C 0000               1374          MOVE.B  #%000,D2      ; mode data register
000021BA  1639 00003159           1375          MOVE.B  dRN,D3        ; destination register
000021C0  4EB9 00002BA0           1376          JSR     EA_START
000021C6                          1377          
000021C6  43F9 00003088           1378          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000021CC  103C 000E               1379          MOVE.B   #14,D0     ; moves #14 into data register D0
000021D0  4E4F                    1380          TRAP     #15       ; Displays message via trap 14
000021D2                          1381          
000021D2  6000 F0AE               1382          BRA   MEMORYGRABBER
000021D6                          1383  
000021D6                          1384          
000021D6                          1385  PR_ROR_EA           ;ROTATE RIGHT WITH DATA REGISTER
000021D6  43F9 000030F8           1386          LEA       PROR,A1
000021DC  103C 000E               1387          MOVE.B   #14,D0     ; moves #14 into data register D0
000021E0  4E4F                    1388          TRAP     #15 
000021E2  4EB9 000027CA           1389          JSR      SIZESPLIT
000021E8                          1390          
000021E8  4EB9 00002822           1391          JSR     PRINTCLRSPOT
000021EE                          1392          
000021EE  4242                    1393          CLR D2
000021F0  4243                    1394          CLR D3
000021F2  143C 0000               1395          MOVE.B  #%000,D2     ; mode data register
000021F6  1639 00003158           1396          MOVE.B  sRN,D3       ; source register number
000021FC  4EB9 00002BA0           1397          JSR     EA_START
00002202  4EB9 00002830           1398          JSR     PRINTCOMA   ; print coma
00002208  4243                    1399          CLR D3
0000220A  4242                    1400          CLR D2
0000220C  143C 0000               1401          MOVE.B  #%000,D2      ; mode data register
00002210  1639 00003159           1402          MOVE.B  dRN,D3        ; destination register
00002216  4EB9 00002BA0           1403          JSR     EA_START
0000221C                          1404          
0000221C  43F9 00003088           1405          LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002222  103C 000E               1406          MOVE.B   #14,D0     ; moves #14 into data register D0
00002226  4E4F                    1407          TRAP     #15       ; Displays message via trap 14
00002228                          1408          
00002228  6000 F058               1409          BRA   MEMORYGRABBER
0000222C                          1410  
0000222C                          1411  PR_RO 
0000222C  4EB9 00002822           1412       JSR     PRINTCLRSPOT      * print space
00002232                          1413   
00002232  0CB9 00000000 00003148  1414       CMP.L #$0,DR 
0000223C  6700 01D8               1415       BEQ   PR_ROR   ;RIGHT SHIFT
00002240                          1416      
00002240                          1417      *******PRINT ASL*******
00002240  43F9 000030F4           1418       LEA       PROL,A1
00002246  103C 000E               1419       MOVE.B   #14,D0     ; moves #14 into data register D0
0000224A  4E4F                    1420       TRAP     #15 
0000224C                          1421  
0000224C  4EB9 000027CA           1422       JSR      SIZESPLIT
00002252                          1423      
00002252  4EB9 00002822           1424       JSR     PRINTCLRSPOT
00002258  4EB9 0000283E           1425      JSR     PRINTHASH   * print hash
0000225E                          1426  
0000225E                          1427      
0000225E  4241                    1428      CLR D1
00002260  1239 00003154           1429      MOVE.B   S_COUNT,D1
00002266  103C 0003               1430      MOVE.B   #3,D0
0000226A  4E4F                    1431      TRAP     #15
0000226C  4EB9 00002830           1432      JSR     PRINTCOMA   ; print coma
00002272  4243                    1433      CLR D3
00002274  4242                    1434      CLR D2
00002276  143C 0000               1435      MOVE.B  #%000,D2
0000227A  1639 00003159           1436      MOVE.B  dRN,D3
00002280  4EB9 00002BA0           1437      JSR     EA_START
00002286                          1438      
00002286  43F9 00003088           1439      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000228C  103C 000E               1440      MOVE.B   #14,D0     ; moves #14 into data register D0
00002290  4E4F                    1441      TRAP     #15       ; Displays message via trap 14
00002292                          1442  
00002292                          1443      
00002292  6000 EFEE               1444      BRA    MEMORYGRABBER
00002296                          1445  
00002296                          1446  
00002296                          1447  
00002296                          1448  PR_AS 
00002296  4EB9 00002822           1449       JSR     PRINTCLRSPOT      * print space
0000229C                          1450  
0000229C  0CB9 00000000 00003148  1451       CMP.L #$0,DR 
000022A6  6700 0118               1452      BEQ   PR_ASR   ;RIGHT SHIFT
000022AA                          1453      
000022AA                          1454      *******PRINT ASL*******
000022AA  43F9 000030F0           1455       LEA       PASL,A1
000022B0  103C 000E               1456       MOVE.B   #14,D0     ; moves #14 into data register D0
000022B4  4E4F                    1457       TRAP     #15 
000022B6                          1458  
000022B6  4EB9 000027CA           1459      JSR      SIZESPLIT
000022BC                          1460      
000022BC  4EB9 00002822           1461      JSR     PRINTCLRSPOT
000022C2  4EB9 0000283E           1462      JSR     PRINTHASH   ; print hash
000022C8                          1463      
000022C8  4241                    1464      CLR D1
000022CA  1239 00003154           1465      MOVE.B   S_COUNT,D1
000022D0  103C 0003               1466      MOVE.B   #3,D0
000022D4  4E4F                    1467      TRAP     #15
000022D6  4EB9 00002830           1468      JSR     PRINTCOMA   ; print coma
000022DC  4243                    1469      CLR D3
000022DE  4242                    1470      CLR D2
000022E0  143C 0000               1471      MOVE.B  #%000,D2
000022E4  1639 00003159           1472      MOVE.B  dRN,D3
000022EA  4EB9 00002BA0           1473      JSR     EA_START
000022F0                          1474      
000022F0  43F9 00003088           1475      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000022F6  103C 000E               1476      MOVE.B   #14,D0     ; moves #14 into data register D0
000022FA  4E4F                    1477      TRAP     #15       ; Displays message via trap 14
000022FC                          1478  
000022FC  6000 EF84               1479      BRA    MEMORYGRABBER
00002300                          1480  
00002300                          1481                        
00002300                          1482                          
00002300                          1483  PR_LS 
00002300  4EB9 00002822           1484      JSR     PRINTCLRSPOT      * print space
00002306                          1485  
00002306  0CB9 00000000 00003148  1486      CMP.L #$0,DR 
00002310  6700 0058               1487      BEQ   PR_LSR   ;RIGHT SHIFT
00002314                          1488      
00002314                          1489      *******PRINT LSL*******
00002314  43F9 000030E4           1490       LEA       PLSL,A1
0000231A  103C 000E               1491       MOVE.B   #14,D0     ; moves #14 into data register D0
0000231E  4E4F                    1492       TRAP     #15 
00002320                          1493  
00002320  4EB9 000027CA           1494      JSR      SIZESPLIT
00002326                          1495      
00002326  4EB9 00002822           1496      JSR     PRINTCLRSPOT
0000232C  4EB9 0000283E           1497      JSR     PRINTHASH   ; print hash
00002332                          1498      
00002332  4241                    1499      CLR D1
00002334  1239 00003154           1500      MOVE.B   S_COUNT,D1
0000233A  103C 0003               1501      MOVE.B   #3,D0
0000233E  4E4F                    1502      TRAP     #15
00002340  4EB9 00002830           1503      JSR     PRINTCOMA   ; print coma
00002346  4243                    1504      CLR D3
00002348  4242                    1505      CLR D2
0000234A  143C 0000               1506      MOVE.B  #%000,D2
0000234E  1639 00003159           1507      MOVE.B  dRN,D3
00002354  4EB9 00002BA0           1508      JSR     EA_START
0000235A                          1509      
0000235A  43F9 00003088           1510      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002360  103C 000E               1511      MOVE.B   #14,D0     ; moves #14 into data register D0
00002364  4E4F                    1512      TRAP     #15       ; Displays message via trap 14
00002366                          1513  
00002366                          1514      
00002366  6000 EF1A               1515      BRA    MEMORYGRABBER
0000236A                          1516            
0000236A  43F9 000030E8           1517  PR_LSR LEA   PLSR,A1
00002370  103C 000E               1518        MOVE.B   #14,D0     ; moves #14 into data register D0
00002374  4E4F                    1519        TRAP     #15       ; Displays message via trap 14 
00002376  4EB9 000027CA           1520        JSR      SIZESPLIT
0000237C                          1521        
0000237C  4EB9 00002822           1522        JSR     PRINTCLRSPOT
00002382  4EB9 0000283E           1523        JSR     PRINTHASH   ; print hash
00002388                          1524        
00002388  4241                    1525        CLR D1
0000238A  1239 00003154           1526        MOVE.B   S_COUNT,D1
00002390  103C 0003               1527        MOVE.B   #3,D0
00002394  4E4F                    1528        TRAP     #15
00002396  4EB9 00002830           1529        JSR     PRINTCOMA   ; print coma
0000239C  4243                    1530        CLR D3
0000239E  4242                    1531        CLR D2
000023A0  143C 0000               1532        MOVE.B #%000,D2
000023A4  1639 00003159           1533        MOVE.B  dRN,D3
000023AA  4EB9 00002BA0           1534        JSR   EA_START
000023B0                          1535        
000023B0  43F9 00003088           1536        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000023B6  103C 000E               1537        MOVE.B   #14,D0     ; moves #14 into data register D0
000023BA  4E4F                    1538        TRAP     #15       ; Displays message via trap 14
000023BC                          1539  
000023BC                          1540        
000023BC  6000 EEC4               1541        BRA MEMORYGRABBER
000023C0                          1542        
000023C0  43F9 000030EC           1543  PR_ASR LEA   PASR,A1
000023C6  103C 000E               1544         MOVE.B   #14,D0     ; moves #14 into data register D0
000023CA  4E4F                    1545        TRAP     #15       ; Displays message via trap 14 
000023CC  4EB9 000027CA           1546        JSR      SIZESPLIT
000023D2                          1547        
000023D2  4EB9 00002822           1548        JSR     PRINTCLRSPOT
000023D8  4EB9 0000283E           1549        JSR     PRINTHASH   ; print hash
000023DE                          1550        
000023DE  4241                    1551        CLR D1
000023E0  1239 00003154           1552        MOVE.B   S_COUNT,D1
000023E6  103C 0003               1553        MOVE.B   #3,D0
000023EA  4E4F                    1554        TRAP     #15
000023EC  4EB9 00002830           1555        JSR     PRINTCOMA   ; print coma
000023F2  4243                    1556        CLR D3
000023F4  4242                    1557        CLR D2
000023F6  143C 0000               1558        MOVE.B #%000,D2
000023FA  1639 00003159           1559        MOVE.B  dRN,D3
00002400  4EB9 00002BA0           1560        JSR   EA_START
00002406                          1561        
00002406  43F9 00003088           1562        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000240C  103C 000E               1563        MOVE.B   #14,D0     ; moves #14 into data register D0
00002410  4E4F                    1564        TRAP     #15       ; Displays message via trap 14
00002412                          1565  
00002412  6000 EE6E               1566        BRA MEMORYGRABBER
00002416                          1567  
00002416                          1568        
00002416  43F9 000030F8           1569  PR_ROR LEA   PROR,A1
0000241C  103C 000E               1570        MOVE.B   #14,D0     ; moves #14 into data register D0
00002420  4E4F                    1571        TRAP     #15       ; Displays message via trap 14 
00002422  4EB9 000027CA           1572        JSR      SIZESPLIT
00002428                          1573        
00002428  4EB9 00002822           1574        JSR     PRINTCLRSPOT
0000242E  4EB9 0000283E           1575        JSR     PRINTHASH   ; print hash
00002434                          1576        
00002434  4241                    1577        CLR D1
00002436  1239 00003154           1578        MOVE.B   S_COUNT,D1
0000243C  103C 0003               1579        MOVE.B   #3,D0
00002440  4E4F                    1580        TRAP     #15
00002442  4EB9 00002830           1581        JSR     PRINTCOMA   ; print coma
00002448  4243                    1582        CLR D3
0000244A  4242                    1583        CLR D2
0000244C  143C 0000               1584        MOVE.B #%000,D2
00002450  1639 00003159           1585        MOVE.B  dRN,D3
00002456  4EB9 00002BA0           1586        JSR   EA_START
0000245C                          1587        
0000245C  43F9 00003088           1588        LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002462  103C 000E               1589        MOVE.B   #14,D0     ; moves #14 into data register D0
00002466  4E4F                    1590        TRAP     #15       ; Displays message via trap 14
00002468                          1591  
00002468                          1592        
00002468  6000 EE18               1593        BRA MEMORYGRABBER
0000246C                          1594        
0000246C                          1595  ;-----------------------extra parts for above code to function
0000246C                          1596  
0000246C                          1597  EIGHT_SHIFT   ; CHECK IF THE SHIFT COUNT IS EIGHT 
0000246C  0C39 0000 00003154      1598           CMP.B #$0,S_COUNT
00002474  6700 0004               1599           BEQ   IS_EIGHT
00002478  4E75                    1600           RTS
0000247A                          1601           
0000247A  13FC 0008 00003154      1602  IS_EIGHT  MOVE.B #8,S_COUNT
00002482  4E75                    1603            RTS
00002484                          1604  
00002484                          1605  ;---------------------------------------------------------
00002484                          1606                  ;MOVE SECTION
00002484  43F9 0000308E           1607  PRINTMOVE LEA PMOVE,A1
0000248A  103C 000E               1608      MOVE.B   #14,D0     ; moves #14 into data register D0
0000248E  4E4F                    1609      TRAP     #15       ; Displays message via trap 14
00002490  4EB9 000027CA           1610      JSR     SIZESPLIT
00002496  6000 03C0               1611      BRA EADN
0000249A                          1612      
0000249A  43F9 0000309A           1613  PRINTMOVEA LEA PMOVEA,A1
000024A0  103C 000E               1614      MOVE.B   #14,D0     ; moves #14 into data register D0
000024A4  4E4F                    1615      TRAP     #15       ; Displays message via trap 14
000024A6  4EB9 000027CA           1616      JSR     SIZESPLIT
000024AC  6000 03AA               1617      BRA EADN
000024B0                          1618      
000024B0                          1619                      ;First set of commands
000024B0  43F9 000030A7           1620  PRINTNOP    LEA PNOP,A1
000024B6  103C 000E               1621      MOVE.B   #14,D0     ; moves #14 into data register D0
000024BA  4E4F                    1622      TRAP     #15       ; Displays message via trap 14
000024BC                          1623      
000024BC  6000 EDC4               1624      BRA     MEMORYGRABBER
000024C0                          1625  
000024C0  43F9 00003093           1626  PRINTMOVEM  LEA PMOVEM,A1
000024C6  103C 000E               1627      MOVE.B   #14,D0     ; moves #14 into data register D0
000024CA  4E4F                    1628      TRAP     #15       ; Displays message via trap 14
000024CC  4EB9 000027CA           1629      JSR     SIZESPLIT
000024D2  6000 0384               1630      BRA EADN
000024D6                          1631  
000024D6  43F9 000030AB           1632  PRINTLEA    LEA PLEA,A1
000024DC  103C 000E               1633      MOVE.B   #14,D0     ; moves #14 into data register D0
000024E0  4E4F                    1634      TRAP     #15       ; Displays message via trap 14
000024E2  4EB9 000027CA           1635      JSR     SIZESPLIT
000024E8  6000 036E               1636      BRA EADN
000024EC                          1637  
000024EC  43F9 000030AF           1638  PRINTNOT    LEA PNOT,A1
000024F2  103C 000E               1639      MOVE.B   #14,D0     ; moves #14 into data register D0
000024F6  4E4F                    1640      TRAP     #15       ; Displays message via trap 14
000024F8  4EB9 000027CA           1641      JSR     SIZESPLIT
000024FE  6000 0358               1642      BRA EADN
00002502                          1643  
00002502  43F9 000030B3           1644  PRINTJSR    LEA PJSR,A1
00002508  103C 000E               1645      MOVE.B   #14,D0     ; moves #14 into data register D0
0000250C  4E4F                    1646      TRAP     #15       ; Displays message via trap 14
0000250E  4EB9 000027CA           1647      JSR     SIZESPLIT
00002514  6000 0342               1648      BRA EADN
00002518                          1649  
00002518  43F9 000030B7           1650  PRINTRTS    LEA PRTS,A1
0000251E  103C 000E               1651      MOVE.B   #14,D0     ; moves #14 into data register D0
00002522  4E4F                    1652      TRAP     #15       ; Displays message via trap 14
00002524                          1653      
00002524  6000 ED5C               1654      BRA     MEMORYGRABBER
00002528                          1655      
00002528                          1656                  ;ADDQ SECTION
00002528                          1657  PRINTADDQ 
00002528  43F9 000030DF           1658      LEA     PADDQ,A1
0000252E  103C 000E               1659      MOVE.B  #14,D0     ; moves #14 into data register D0
00002532  4E4F                    1660      TRAP    #15       ; Displays message via trap 14
00002534  4EB9 000027CA           1661      JSR     SIZESPLIT
0000253A                          1662      
0000253A  4EB9 00002822           1663      JSR     PRINTCLRSPOT 
00002540  4EB9 0000283E           1664      JSR     PRINTHASH   ; print hash
00002546  4EB9 0000284A           1665      JSR     PRINTDOLLARSIGN     ; print dollar sign
0000254C                          1666      
0000254C  4241                    1667      CLR     D1
0000254E  1239 00003128           1668      MOVE.B  DATA_FIELD,D1
00002554  103C 0003               1669      MOVE.B  #3,D0     
00002558  4E4F                    1670      TRAP    #15 
0000255A                          1671      
0000255A  4EB9 00002830           1672      JSR     PRINTCOMA   ; print coma
00002560                          1673      
00002560  4243                    1674      CLR     D3
00002562  4242                    1675      CLR     D2
00002564  1439 00003123           1676      MOVE.B  DEST_MODE,D2
0000256A  1639 00003122           1677      MOVE.B  DEST_REG,D3
00002570                          1678      
00002570  4EB9 00002BA0           1679      JSR     EA_START
00002576                          1680      
00002576  43F9 00003088           1681      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
0000257C  103C 000E               1682      MOVE.B  #14,D0     ; moves #14 into data register D0
00002580  4E4F                    1683      TRAP    #15       ; Displays message via trap 14
00002582                          1684      
00002582  6000 ECFE               1685     BRA      MEMORYGRABBER
00002586                          1686  
00002586                          1687                  ;SECOND SET OF COMMANDS
00002586  43F9 000030BB           1688  PRINTBGT LEA PBGT,A1
0000258C  103C 000E               1689      MOVE.B   #14,D0     ; moves #14 into data register D0
00002590  4E4F                    1690      TRAP     #15       ; Displays message via trap 14
00002592  4EB9 000027CA           1691      JSR SIZESPLIT
00002598  6000 02BE               1692      BRA EADN
0000259C                          1693  
0000259C  43F9 000030BF           1694  PRINTBEQ LEA PBEQ,A1
000025A2  103C 000E               1695      MOVE.B   #14,D0     ; moves #14 into data register D0
000025A6  4E4F                    1696      TRAP     #15       ; Displays message via trap 14
000025A8  4EB9 000027CA           1697      JSR SIZESPLIT
000025AE  6000 02A8               1698      BRA EADN
000025B2                          1699  
000025B2  43F9 000030C3           1700  PRINTBLE LEA PBLE,A1
000025B8  103C 000E               1701      MOVE.B   #14,D0     ; moves #14 into data register D0
000025BC  4E4F                    1702      TRAP     #15       ; Displays message via trap 14
000025BE  4EB9 000027CA           1703      JSR SIZESPLIT
000025C4  6000 0292               1704      BRA EADN
000025C8                          1705  
000025C8  43F9 000030C7           1706  PRINTBRA LEA PBRA,A1
000025CE  103C 000E               1707      MOVE.B   #14,D0     ; moves #14 into data register D0
000025D2  4E4F                    1708      TRAP     #15       ; Displays message via trap 14
000025D4  4EB9 000027CA           1709      JSR SIZESPLIT
000025DA  6000 027C               1710      BRA EADN
000025DE                          1711      
000025DE                          1712                  ;MOVEQ SECTION
000025DE                          1713  PRINTMOVEQ 
000025DE  43F9 000030A0           1714      LEA PMOVEQ,A1
000025E4  103C 000E               1715      MOVE.B   #14,D0     ; moves #14 into data register D0
000025E8  4E4F                    1716      TRAP     #15       ; Displays message via trap 14
000025EA                          1717      
000025EA  4EB9 00002822           1718      JSR     PRINTCLRSPOT
000025F0  4EB9 0000283E           1719      JSR     PRINTHASH   ; print hash
000025F6  4EB9 0000284A           1720      JSR     PRINTDOLLARSIGN     ; print dollar sign  
000025FC                          1721   
000025FC  2239 00003128           1722      MOVE.L      DATA_FIELD,D1
00002602  143C 0010               1723      MOVE.B      #16,D2
00002606  103C 000F               1724      MOVE.B      #15,D0     ; moves #14 into data register D0
0000260A  4E4F                    1725      TRAP        #15 
0000260C                          1726      
0000260C  4EB9 00002830           1727      JSR     PRINTCOMA   ; print coma
00002612  1E3C 0000               1728      MOVE.B #0,D7
00002616  7400                    1729      MOVE.L #%000,D2
00002618  1639 00003122           1730      MOVE.B DEST_REG,D3
0000261E  6000 0238               1731      BRA EADN
00002622                          1732  
00002622                          1733                  ;OR SECTION
00002622                          1734  PRINTOR 
00002622  43F9 000030CB           1735      LEA     POR,A1
00002628  103C 000E               1736      MOVE.B  #14,D0     ; moves #14 into data register D0
0000262C  4E4F                    1737      TRAP    #15       ; Displays message via trap 14
0000262E  4EB9 000027CA           1738      JSR     SIZESPLIT
00002634                          1739      
00002634  4EB9 00002822           1740      JSR     PRINTCLRSPOT
0000263A  4EB9 0000283E           1741      JSR     PRINTHASH   ; print hash
00002640  4EB9 0000284A           1742      JSR     PRINTDOLLARSIGN     ; print dollar sign   
00002646                          1743      
00002646                          1744      * TODO : CHECK THE INVELID_EA FLAG
00002646                          1745      
00002646  0C39 0000 00003139      1746      CMP.B   #%0,XBit
0000264E  6700 0006               1747      BEQ     PRINT_EA_TO_DN
00002652  6000 005E               1748      BRA     PRINT_DN_TO_EA
00002656                          1749      
00002656                          1750     * BRA EADN
00002656                          1751  
00002656                          1752  PRINT_EA_TO_DN
00002656  13F9 00003126 00003124  1753      MOVE.B  TEMP_MODE,SRC_MODE
00002660  13F9 00003127 00003125  1754      MOVE.B  TEMP_REG,SRC_REG
0000266A  4243                    1755      CLR     D3
0000266C  4242                    1756      CLR     D2
0000266E  1439 00003124           1757      MOVE.B  SRC_MODE,D2
00002674  1639 00003125           1758      MOVE.B  SRC_REG,D3
0000267A  4EB9 00002BA0           1759      JSR     EA_START
00002680                          1760  
00002680  4EB9 00002830           1761      JSR     PRINTCOMA   ; print coma
00002686                          1762   
00002686  4243                    1763      CLR     D3
00002688  4242                    1764      CLR     D2
0000268A  1439 00003123           1765      MOVE.B  DEST_MODE,D2
00002690  1639 00003122           1766      MOVE.B  DEST_REG,D3
00002696  4EB9 00002BA0           1767      JSR     EA_START
0000269C                          1768  
0000269C  4EB9 00002822           1769      JSR     PRINTCLRSPOT
000026A2  43F9 00003088           1770      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
000026A8  103C 000E               1771      MOVE.B  #14,D0     ; moves #14 into data register D0
000026AC  4E4F                    1772      TRAP    #15       ; Displays message via trap 14
000026AE  6000 EBD2               1773      BRA     MEMORYGRABBER
000026B2                          1774      
000026B2                          1775  PRINT_DN_TO_EA    
000026B2  4243                    1776      CLR     D3
000026B4  4242                    1777      CLR     D2
000026B6  1439 00003123           1778      MOVE.B  DEST_MODE,D2
000026BC  1639 00003125           1779      MOVE.B  SRC_REG,D3
000026C2  4EB9 00002BA0           1780      JSR     EA_START
000026C8                          1781      
000026C8  4EB9 00002830           1782      JSR     PRINTCOMA   ; print coma
000026CE                          1783      
000026CE  13F9 00003126 00003124  1784      MOVE.B  TEMP_MODE,SRC_MODE
000026D8  13F9 00003127 00003125  1785      MOVE.B  TEMP_REG,SRC_REG
000026E2  4243                    1786      CLR     D3
000026E4  4242                    1787      CLR     D2
000026E6  1439 00003124           1788      MOVE.B  SRC_MODE,D2
000026EC  1639 00003125           1789      MOVE.B  SRC_REG,D3
000026F2  4EB9 00002BA0           1790      JSR     EA_START
000026F8                          1791      
000026F8  4EB9 00002822           1792      JSR     PRINTCLRSPOT
000026FE  43F9 00003088           1793      LEA     CLEAR,A1 ; Loads MESSAGE into adress at A1
00002704  103C 000E               1794      MOVE.B  #14,D0     ; moves #14 into data register D0
00002708  4E4F                    1795      TRAP    #15       ; Displays message via trap 14
0000270A  6000 EB76               1796      BRA     MEMORYGRABBER
0000270E                          1797  
0000270E                          1798                  ;SUB SECTION
0000270E  43F9 000030CE           1799  PRINTSUB LEA PSUB,A1
00002714  103C 000E               1800      MOVE.B   #14,D0     ; moves #14 into data register D0
00002718  4E4F                    1801      TRAP     #15       ; Displays message via trap 14
0000271A  4EB9 000027CA           1802      JSR SIZESPLIT
00002720  6000 0136               1803      BRA EADN
00002724                          1804  
00002724                          1805                  ;AND SECTION
00002724  43F9 000030D2           1806  PRINTAND LEA PAND,A1
0000272A  103C 000E               1807      MOVE.B   #14,D0     ; moves #14 into data register D0
0000272E  4E4F                    1808      TRAP     #15       ; Displays message via trap 14
00002730  4EB9 000027CA           1809      JSR SIZESPLIT
00002736  6000 0120               1810      BRA EADN
0000273A                          1811  
0000273A                          1812                  ;ADD SPLIT              
0000273A  43F9 000030D6           1813  PRINTADD LEA PADD,A1
00002740  103C 000E               1814      MOVE.B   #14,D0     ; moves #14 into data register D0
00002744  4E4F                    1815      TRAP     #15       ; Displays message via trap 14
00002746  4EB9 000027CA           1816      JSR     SIZESPLIT
0000274C  6000 010A               1817      BRA EADN
00002750                          1818      
00002750  43F9 000030DA           1819  PRINTADDA LEA PADDA,A1
00002756  103C 000E               1820      MOVE.B   #14,D0     ; moves #14 into data register D0
0000275A  4E4F                    1821      TRAP     #15       ; Displays message via trap 14
0000275C  4EB9 000027CA           1822      JSR     SIZESPLIT
00002762  6000 00F4               1823      BRA EADN
00002766                          1824      
00002766                          1825                  ;THIRD ROTATE SPLIT   
00002766                          1826  PRINTROTATESPLIT 
00002766  0C79 0000 0000308D      1827      CMP #0,CommandDetail   
0000276E                          1828      *BEQ PRINTLSL
0000276E  0C79 0001 0000308D      1829      CMP #1,CommandDetail   
00002776                          1830      *BEQ PRINTLSLDOUBLE
00002776  0C79 0002 0000308D      1831      CMP #2,CommandDetail   
0000277E                          1832      *BEQ PRINTLSR
0000277E  0C79 0003 0000308D      1833      CMP #3,CommandDetail   
00002786                          1834      *BEQ PRINTLSRDOUBLE
00002786  0C79 0004 0000308D      1835      CMP #4,CommandDetail   
0000278E                          1836      *BEQ PRINTASR
0000278E  0C79 0005 0000308D      1837      CMP #5,CommandDetail   
00002796                          1838      *BEQ PRINTASRDOUBLE
00002796  0C79 0006 0000308D      1839      CMP #6,CommandDetail   
0000279E                          1840      *BEQ PRINTASL
0000279E  0C79 0007 0000308D      1841      CMP #7,CommandDetail   
000027A6                          1842      *BEQ PRINTASLDOUBLE
000027A6  0C79 0008 0000308D      1843      CMP #8,CommandDetail   
000027AE                          1844      *BEQ PRINTROL
000027AE  0C79 0009 0000308D      1845      CMP #9,CommandDetail   
000027B6                          1846      *BEQ PRINTROLDOUBLE
000027B6  0C79 000A 0000308D      1847      CMP #10,CommandDetail
000027BE                          1848      *BEQ PRINTROR     
000027BE  0C79 000B 0000308D      1849      CMP #11,CommandDetail
000027C6                          1850      *BEQ PRINTRORDOUBLE            
000027C6  6000 EABA               1851      BRA MEMORYGRABBER    
000027CA                          1852  
000027CA                          1853  
000027CA                          1854                  ;SIZE PRINTER
000027CA                          1855  SIZESPLIT   
000027CA  0CB9 00000001 00003112  1856      CMP.L #1,SizeValue
000027D4  6700 003E               1857      BEQ PRINTB
000027D8  0CB9 00000002 00003112  1858      CMP.L #2,SizeValue
000027E2  6700 0022               1859      BEQ PRINTW
000027E6  0CB9 00000003 00003112  1860      CMP.L #3,SizeValue
000027F0  6700 0006               1861      BEQ PRINTL
000027F4  6000 002C               1862      BRA PRINTCLRSPOT ; go to EA/DN section
000027F8                          1863      
000027F8  43F9 0000311E           1864  PRINTL LEA PL,A1
000027FE  103C 000E               1865      MOVE.B   #14,D0     ; moves #14 into data register D0
00002802  4E4F                    1866      TRAP     #15       ; Displays message via trap 14
00002804  4E75                    1867      RTS
00002806                          1868  
00002806  43F9 0000311A           1869  PRINTW      LEA PW,A1
0000280C  103C 000E               1870      MOVE.B   #14,D0     ; moves #14 into data register D0
00002810  4E4F                    1871      TRAP     #15       ; Displays message via trap 14
00002812  4E75                    1872      RTS
00002814                          1873  
00002814  43F9 00003116           1874  PRINTB  LEA PB,A1
0000281A  103C 000E               1875      MOVE.B   #14,D0     ; moves #14 into data register D0
0000281E  4E4F                    1876      TRAP     #15       ; Displays message via trap 14
00002820  4E75                    1877      RTS
00002822                          1878      
00002822                          1879  PRINTCLRSPOT 
00002822  43F9 00003130           1880      LEA CLRSPOT,A1
00002828  103C 000E               1881      MOVE.B   #14,D0     ; moves #14 into data register D0
0000282C  4E4F                    1882      TRAP     #15       ; Displays message via trap 14
0000282E  4E75                    1883      RTS
00002830                          1884  
00002830                          1885  PRINTCOMA   
00002830  43F9 00003136           1886      LEA     COMA,A1
00002836  103C 000E               1887      MOVE.B  #14,D0     
0000283A  4E4F                    1888      TRAP    #15
0000283C  4E75                    1889      RTS
0000283E                          1890  
0000283E                          1891  PRINTHASH 
0000283E  43F9 0000312E           1892      LEA     HASH,A1    * print hash
00002844  700E                    1893      MOVEQ   #14,D0
00002846  4E4F                    1894      TRAP    #15
00002848  4E75                    1895      RTS
0000284A                          1896  
0000284A                          1897  PRINTDOLLARSIGN   
0000284A  43F9 00003134           1898      LEA     DOLLARSIGN,A1   * print dollar sign
00002850  103C 000E               1899      MOVE.B   #14,D0
00002854  4E4F                    1900      TRAP     #15 
00002856  4E75                    1901      RTS
00002858                          1902  
00002858                          1903                  ;PRINT EA/DN
00002858                          1904  EADN 
00002858  BE3C 0000               1905      CMP.B   #0,D7
0000285C  6700 0048               1906      BEQ     PRINTNOTRAIL
00002860  BE3C 0001               1907      CMP.B   #1,D7
00002864  6700 000E               1908      BEQ     PRINTONETRAIL 
00002868  BE3C 0002               1909      CMP.B   #2,D7
0000286C  6700 001C               1910      BEQ     PRINTTWOTRAIL
00002870                          1911      
00002870  6000 EA10               1912      BRA     MEMORYGRABBER
00002874                          1913      
00002874                          1914  PRINTONETRAIL 
00002874  4EB9 00002BA0           1915      JSR EA_Start
0000287A  43F9 00003088           1916      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
00002880  103C 000E               1917      MOVE.B   #14,D0     ; moves #14 into data register D0
00002884  4E4F                    1918      TRAP     #15       ; Displays message via trap 14
00002886  6000 E9FA               1919      BRA MEMORYGRABBER
0000288A                          1920  
0000288A                          1921  PRINTTWOTRAIL 
0000288A  4EB9 00002BA0           1922      JSR EA_Start
00002890  4EB9 00002BA0           1923      JSR EA_Start
00002896  43F9 00003088           1924      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
0000289C  103C 000E               1925      MOVE.B   #14,D0     ; moves #14 into data register D0
000028A0  4E4F                    1926      TRAP     #15       ; Displays message via trap 14
000028A2  6000 E9DE               1927      BRA MEMORYGRABBER
000028A6                          1928      
000028A6                          1929  PRINTNOTRAIL 
000028A6  4EB9 00002BA0           1930      JSR EA_Start
000028AC  43F9 00003088           1931      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000028B2  103C 000E               1932      MOVE.B   #14,D0     ; moves #14 into data register D0
000028B6  4E4F                    1933      TRAP     #15       ; Displays message via trap 14
000028B8  6000 E9C8               1934      BRA MEMORYGRABBER
000028BC                          1935  
000028BC                          1936  CLOSINGSTATEMENTS     
000028BC  43F9 00003088           1937      LEA      CLEAR,A1 ; Loads MESSAGE into adress at A1
000028C2  103C 000E               1938      MOVE.B   #14,D0     ; moves #14 into data register D0
000028C6  4E4F                    1939      TRAP     #15       ; Displays message via trap 14
000028C8                          1940     
000028C8                          1941  STOP    
000028C8  103C 0009               1942      MOVE.B #9,D0        ; moves #9 into data register D0
000028CC  4E4F                    1943      TRAP     #15       ; halt simulator via trap 9
000028CE                          1944  
000028CE                          1945  
000028CE                          1946  ;----------------------------- ADDED THIS FOR THE MEMORYGRABBER (MAIN LOOP) 
000028CE                          1947  ENDING 
000028CE  43F9 00003075           1948      LEA     FINALMESSAGE,A1     * Prints End of Program message
000028D4  103C 000E               1949      MOVE.B  #14,D0
000028D8  4E4F                    1950      TRAP    #15
000028DA                          1951  
000028DA  FFFF FFFF               1952      SIMHALT             ; halt simulator
000028DE                          1953      
000028DE                          1954      
000028DE                          1955      
000028DE                          1956  ;----------------------------- ADDED THIS FOR OP CODE PART 
000028DE                          1957  ********* CHECK DESTINATION ***********
000028DE                          1958  CHECK_DESTINATION
000028DE  13FC 000F 0000313B      1959      MOVE.B  #$F,DstMode
000028E6                          1960      
000028E6  0C39 0007 00003123      1961      CMP.B   #7,DEST_MODE             * if mode = 111 = either word or long depending on register 
000028EE  6700 0026               1962      BEQ     CHECK_DEST_REG             * Checks registers
000028F2                          1963      
000028F2  0C39 0005 00003123      1964      CMP.B   #5,DEST_MODE            * if mode = 101 = (d16,An)
000028FA  6700 0058               1965      BEQ     R_CHECK_DEST    * Print DATA instead 
000028FE                          1966      
000028FE  0C39 0006 00003123      1967      CMP.B   #6,DEST_MODE             * if mode = 110 = (d8,An,Xn)
00002906  6700 004C               1968      BEQ     R_CHECK_DEST    * Print DATA instead
0000290A                          1969      
0000290A  13F9 00003123 0000313B  1970      MOVE.B  DEST_MODE,DstMode
00002914  4E75                    1971      RTS
00002916                          1972  CHECK_DEST_REG
00002916  0C39 0002 00003122      1973      CMP.B   #2,DEST_REG             * if DEST_REG = 010
0000291E  6700 0034               1974      BEQ     R_CHECK_DEST
00002922                          1975  
00002922  0C39 0003 00003122      1976      CMP.B   #3,DEST_REG         * if DEST_REG = 011
0000292A  6700 0028               1977      BEQ     R_CHECK_DEST
0000292E                          1978      
0000292E  0C39 0005 00003122      1979      CMP.B   #5,DEST_REG             * if DEST_REG = 101
00002936  6C00 016C               1980      BGE     RETURN
0000293A                          1981      
0000293A  13F9 00003123 0000313B  1982      MOVE.B  DEST_MODE,DstMode
00002944  4286                    1983      CLR.L   D6
00002946  1C39 00003122           1984      MOVE.B  DEST_REG,D6
0000294C  DD39 0000313B           1985      ADD.B   D6,DstMode
00002952  4E75                    1986      RTS
00002954                          1987  R_CHECK_DEST
00002954  13FC 000E 0000313B      1988      MOVE.B  #$E,DstMode
0000295C  4E75                    1989      RTS
0000295E                          1990  ********* CHECK TEMP ***********
0000295E                          1991  CHECK_TEMP
0000295E                          1992  
0000295E  13FC 000F 0000313C      1993      MOVE.B  #$F,TempMode
00002966                          1994      
00002966  0C39 0007 00003126      1995      CMP.B   #7,TEMP_MODE             * if mode = 111 = either word or long depending on register 
0000296E  6700 0026               1996      BEQ     CHECK_TEMP_REG      * Checks registers
00002972                          1997  
00002972  0C39 0005 00003126      1998      CMP.B   #5,TEMP_MODE             * if mode = 101 = (d16,An)
0000297A  6700 0058               1999      BEQ     R_CHECK_TEMP    * 
0000297E                          2000      
0000297E  0C39 0006 00003126      2001      CMP.B   #6,TEMP_MODE             * if mode = 110 = (d8,An,Xn)
00002986  6700 004C               2002      BEQ     R_CHECK_TEMP    * 
0000298A                          2003      
0000298A  13F9 00003126 0000313C  2004      MOVE.B  TEMP_MODE,TempMode
00002994  4E75                    2005      RTS
00002996                          2006  CHECK_TEMP_REG
00002996  0C39 0002 00003127      2007      CMP.B   #2,TEMP_REG             * if RRRT = 010 = (d16,PC)
0000299E  6700 0034               2008      BEQ     R_CHECK_TEMP
000029A2                          2009  
000029A2  0C39 0003 00003127      2010      CMP.B   #3,TEMP_REG             * if RRRT = 011 = (d8,PC,Xn)
000029AA  6700 0028               2011      BEQ     R_CHECK_TEMP
000029AE                          2012      
000029AE  0C39 0005 00003127      2013      CMP.B   #5,TEMP_REG             * if RRRT = 101
000029B6  6700 00EC               2014      BEQ     RETURN
000029BA                          2015      
000029BA  13F9 00003126 0000313C  2016      MOVE.B  TEMP_MODE,TempMode
000029C4  4286                    2017      CLR.L   D6
000029C6  1C39 00003127           2018      MOVE.B  TEMP_REG,D6
000029CC  DD39 0000313C           2019      ADD.B   D6,TempMode
000029D2  4E75                    2020      RTS
000029D4                          2021  R_CHECK_TEMP
000029D4  13FC 000E 0000313C      2022      MOVE.B  #$E,TempMode
000029DC  4E75                    2023      RTS
000029DE                          2024  ******************** CHECK_SOURCE ******************** 
000029DE                          2025  CHECK_SOURCE    * TODO
000029DE  13FC 000F 0000313D      2026      MOVE.B  #$F,SrcMode
000029E6                          2027      
000029E6  0C39 0007 00003124      2028      CMP.B   #7,SRC_MODE         * if mode = 111 = either word or long depending on register 
000029EE  6700 0026               2029      BEQ     CHECK_SOURCE_REG    * Checks registers
000029F2                          2030  
000029F2  0C39 0005 00003124      2031      CMP.B   #5,SRC_MODE     * if mode = 101 = (d16,An)
000029FA  6700 0058               2032      BEQ     R_CHECK_SOURCE 
000029FE                          2033      
000029FE  0C39 0006 00003124      2034      CMP.B   #6,SRC_MODE     * if mode = 110 = (d8,An,Xn)
00002A06  6700 004C               2035      BEQ     R_CHECK_SOURCE 
00002A0A                          2036      
00002A0A  13F9 00003124 0000313D  2037      MOVE.B  SRC_MODE,SrcMode
00002A14  4E75                    2038      RTS
00002A16                          2039  CHECK_SOURCE_REG
00002A16  0C39 0002 00003125      2040      CMP.B   #2,SRC_REG             * if RRRS = 010
00002A1E  6700 0034               2041      BEQ     R_CHECK_SOURCE
00002A22                          2042  
00002A22  0C39 0003 00003125      2043      CMP.B   #3,SRC_REG          * if RRRS = 011
00002A2A  6700 0028               2044      BEQ     R_CHECK_SOURCE
00002A2E                          2045      
00002A2E  0C39 0005 00003125      2046      CMP.B   #5,SRC_REG      * if RRRS = 101
00002A36  6C00 006C               2047      BGE     RETURN
00002A3A                          2048      
00002A3A  13F9 00003124 0000313D  2049      MOVE.B  SRC_MODE,SrcMode
00002A44  4286                    2050      CLR.L   D6
00002A46  1C39 00003125           2051      MOVE.B  SRC_REG,D6
00002A4C  DD39 0000313D           2052      ADD.B   D6,SrcMode
00002A52  4E75                    2053      RTS
00002A54                          2054  R_CHECK_SOURCE
00002A54  13FC 000E 0000313D      2055      MOVE.B  #$E,SrcMode
00002A5C  4E75                    2056      RTS
00002A5E                          2057  ******************** XBIT ********************
00002A5E                          2058  CHECK_XBIT      
00002A5E  0C39 0000 00003139      2059      CMP.B   #%0,XBit
00002A66  6700 0008               2060      BEQ     TEMP_TO_DEST    * if XBit equls #%0, set TEMP_REG and TEMP_MODE to DEST_REG and DEST_MODE
00002A6A  6600 001E               2061      BNE     TEMP_TO_SRC     * else set TEMP_REG and TEMP_MODE to SRC_REG and SRC_MODE
00002A6E  4E75                    2062      RTS
00002A70                          2063  TEMP_TO_DEST
00002A70  13F9 00003127 00003122  2064      MOVE.B  TEMP_REG,DEST_REG
00002A7A  13F9 00003126 00003123  2065      MOVE.B  TEMP_MODE,DEST_MODE
00002A84  4EB8 28DE               2066      JSR     CHECK_DESTINATION   * TODO: EA part of checking Destination
00002A88  4E75                    2067      RTS
00002A8A                          2068  TEMP_TO_SRC
00002A8A  13F9 00003127 00003125  2069      MOVE.B  TEMP_REG,SRC_REG
00002A94  13F9 00003126 00003124  2070      MOVE.B  TEMP_MODE,SRC_MODE
00002A9E  4EB8 29DE               2071      JSR     CHECK_SOURCE                 
00002AA2  4E75                    2072      RTS
00002AA4                          2073    
00002AA4                          2074  ******************** OTHER COMMANDS ********************
00002AA4                          2075  RETURN
00002AA4  4E75                    2076      RTS
00002AA6                          2077  
00002AA6                          2078  FORMAT_DATA
00002AA6  0C39 0000 00003128      2079      CMP.B   #0,DATA_FIELD
00002AAE  66F4                    2080      BNE     RETURN
00002AB0  13FC 0008 00003128      2081      MOVE.B  #8,DATA_FIELD
00002AB8  4E75                    2082      RTS
00002ABA                          2083  
00002ABA                          2084  CHECK_DATA_NEG
00002ABA  BC3C 0080               2085      CMP.B   #128,D6
00002ABE  6700 0004               2086      BEQ     PRINT_NEG
00002AC2  4E75                    2087      RTS
00002AC4                          2088      
00002AC4                          2089  PRINT_NEG
00002AC4  43F9 00003132           2090      LEA     NEG,A1      * print "-"
00002ACA  103C 000E               2091      MOVE.B  #14,D0
00002ACE  4E4F                    2092      TRAP    #15
00002AD0  4E75                    2093      RTS
00002AD2                          2094  
00002AD2                          2095  PRINT_DATA
00002AD2  43F9 000030FC           2096      LEA     PDATA,A1
00002AD8  103C 000E               2097      MOVE.B  #14,D0
00002ADC  4E4F                    2098      TRAP    #15
00002ADE                          2099      
00002ADE  4EB8 2822               2100      JSR     PRINTCLRSPOT      * print space
00002AE2                          2101      
00002AE2                          2102      * TODO: PRINT #$
00002AE2                          2103      * TODO: PRINT COMMANDDATA 
00002AE2  4E75                    2104      RTS
00002AE4                          2105      
00002AE4                          2106  * SET SIZE FOR SIZESPLIT    
00002AE4                          2107  SETSIZE1
00002AE4  0C39 0000 0000312D      2108      CMP.B   #%0,SIZE_BITS
00002AEC  6700 0040               2109      BEQ     SETSIZEW
00002AF0  0C39 0001 0000312D      2110      CMP.B   #%1,SIZE_BITS
00002AF8  6700 0040               2111      BEQ     SETSIZEL
00002AFC  4E75                    2112      RTS
00002AFE                          2113  SETSIZE2
00002AFE  0C39 0000 0000312D      2114      CMP.B   #%00,SIZE_BITS
00002B06  6700 001A               2115      BEQ     SETSIZEB
00002B0A  0C39 0001 0000312D      2116      CMP.B   #%01,SIZE_BITS
00002B12  6700 001A               2117      BEQ     SETSIZEW
00002B16  0C39 0002 0000312D      2118      CMP.B   #%10,SIZE_BITS
00002B1E  6700 001A               2119      BEQ     SETSIZEL
00002B22                          2120  SETSIZEB
00002B22  23FC 00000001 00003112  2121      MOVE.L  #1,SizeValue
00002B2C  4E75                    2122      RTS
00002B2E                          2123  SETSIZEW
00002B2E  23FC 00000002 00003112  2124      MOVE.L  #2,SizeValue 
00002B38  4E75                    2125      RTS
00002B3A                          2126  SETSIZEL
00002B3A  23FC 00000003 00003112  2127      MOVE.L  #3,SizeValue
00002B44  4E75                    2128      RTS
00002B46                          2129      
00002B46                          2130  *SETINVEA
00002B46                          2131      *MOVE.B  #1,INVALID_EA
00002B46                          2132      *RTS     
00002B46                          2133      
00002B46                          2134  CLEARMR
00002B46  13FC 0000 00003122      2135      MOVE.B  #0,DEST_REG 
00002B4E  13FC 0000 00003123      2136      MOVE.B  #0,DEST_MODE
00002B56  13FC 0000 00003124      2137      MOVE.B  #0,SRC_MODE
00002B5E  13FC 0000 00003125      2138      MOVE.B  #0,SRC_REG
00002B66  13FC 0000 00003126      2139      MOVE.B  #0,TEMP_MODE
00002B6E  13FC 0000 00003127      2140      MOVE.B  #0,TEMP_REG 
00002B76  13FC 0000 0000312D      2141      MOVE.B  #0,SIZE_BITS
00002B7E  13FC 0000 00003112      2142      MOVE.B  #0,SizeValue
00002B86  23FC 00000000 00003128  2143      MOVE.L  #0,DATA_FIELD
00002B90  7200                    2144      MOVE.L #0,D1
00002B92  7400                    2145      MOVE.L #0,D2
00002B94  7600                    2146      MOVE.L #0,D3
00002B96  7800                    2147      MOVE.L #0,D4
00002B98  7A00                    2148      MOVE.L #0,D5
00002B9A  7C00                    2149      MOVE.L #0,D6
00002B9C  7E00                    2150      MOVE.L #0,D7
00002B9E  4E75                    2151      RTS  
00002BA0                          2152  
00002BA0                          2153  *************    
00002BA0                          2154  
00002BA0                          2155  *******************************************************
00002BA0                          2156  * EA subroutine
00002BA0                          2157  * Purpose: Generate EA
00002BA0                          2158  *         Addresses used: 
00002BA0                          2159  *            D2 FOR MODE
00002BA0                          2160  *            D3 FOR REGISTER
00002BA0                          2161  *            D5 HOLDS DECIMAL VALUE OF THE REGISTER 
00002BA0                          2162  *            D1 FOR PRINTING
00002BA0                          2163  *            A6 MIMICKS INSTRUCTION BUFFER
00002BA0                          2164  *            D7 DATA FOR ABSOLUTE, IMMIDIATE ADDRESSING  
00002BA0                          2165  ***************************************************
00002BA0                          2166  
00002BA0  0C39 000F 0000313E      2167  EA_start        CMP.B      #$F,STATE
00002BA8  6700 039A               2168                  BEQ        EA_FINISH
00002BAC  4EF9 00002F46           2169                  jmp        REGISTER_NUMBER_TO_DECIMAL
00002BB2                          2170  
00002BB2  B47C 0000               2171  Continue_EA     CMP.W       #MODE000,D2             
00002BB6  6700 0036               2172                  BEQ         DATA_REGISTER                 
00002BBA  B47C 0001               2173                  CMP.W       #MODE001,D2               
00002BBE  6700 004A               2174                  BEQ         ADDRESS_REGISTER                 
00002BC2  B47C 0002               2175                  CMP.W       #MODE010,D2              
00002BC6  6700 005E               2176                  BEQ         ADDRESS_REGISTER_DIRECT               
00002BCA  B47C 0003               2177                  CMP.W       #MODE011,D2              
00002BCE  6700 0086               2178                  BEQ         ADDRESS_REGISTER_INCREMENT             
00002BD2  B47C 0004               2179                  CMP.W       #MODE100,D2          
00002BD6  6700 00B8               2180                  BEQ         ADDRESS_REGISTER_DECREMENT              
00002BDA  B47C 0007               2181                  CMP.W       #MODE111,D2          
00002BDE  6700 00EA               2182                  BEQ         ABSOLUTE_IMMIDIATE_ADRRESSING                
00002BE2  13FC 0001 0000313E      2183                  MOVE.B      #BAD_FLAG,STATE               
00002BEA  6000 0358               2184                  BRA         EA_FINISH              
00002BEE                          2185                  
00002BEE                          2186  DATA_REGISTER                         ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002BEE  123C 0044               2187                  MOVE.B   #D,D1
00002BF2  103C 0006               2188                  MOVE.B  #6,D0
00002BF6  4E4F                    2189                  TRAP    #15
00002BF8  0685 00000030           2190                  ADDI.L   #$30,D5
00002BFE  1205                    2191                  MOVE.B   D5,D1
00002C00  103C 0006               2192                  MOVE.B  #6,D0
00002C04  4E4F                    2193                  TRAP    #15                  ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C06  6000 033C               2194                  BRA      EA_FINISH
00002C0A                          2195                      
00002C0A                          2196  
00002C0A  123C 0041               2197  ADDRESS_REGISTER MOVE.B  #A,D1                      ;LOAD THE REGISTERS TO A6
00002C0E  103C 0006               2198                   MOVE.B  #6,D0
00002C12  4E4F                    2199                   TRAP    #15
00002C14  0685 00000030           2200                   ADDI.L   #$30,D5
00002C1A  1205                    2201                   MOVE.B   D5,D1
00002C1C  103C 0006               2202                   MOVE.B  #6,D0
00002C20  4E4F                    2203                   TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C22  6000 0320               2204                   BRA      EA_FINISH
00002C26                          2205  
00002C26                          2206                   
00002C26                          2207  ADDRESS_REGISTER_DIRECT                                 ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL
00002C26  123C 0028               2208                          MOVE.B   #OPEN_PARENTHESIS,D1
00002C2A  103C 0006               2209                          MOVE.B   #6,D0
00002C2E  4E4F                    2210                          TRAP     #15
00002C30  123C 0041               2211                          MOVE.B   #A,D1
00002C34  103C 0006               2212                          MOVE.B  #6,D0
00002C38  4E4F                    2213                          TRAP    #15
00002C3A  0685 00000030           2214                          ADDI.L   #$30,D5
00002C40  1205                    2215                          MOVE.B   D5,D1
00002C42  103C 0006               2216                          MOVE.B  #6,D0
00002C46  4E4F                    2217                          TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C48  123C 0029               2218                          MOVE.B   #CLOSED_PARENTHESIS,D1
00002C4C  103C 0006               2219                          MOVE.B  #6,D0
00002C50  4E4F                    2220                          TRAP    #15
00002C52  6000 02F0               2221                          BRA      EA_FINISH
00002C56                          2222  
00002C56                          2223  
00002C56                          2224  ADDRESS_REGISTER_INCREMENT                                ; THE BINARY NUMBER IN D3 TO DECIMAL
00002C56  123C 0028               2225                             MOVE.B   #OPEN_PARENTHESIS,D1
00002C5A  103C 0006               2226                             MOVE.B   #6,D0
00002C5E  4E4F                    2227                             TRAP     #15
00002C60  123C 0041               2228                             MOVE.B   #A,D1
00002C64  103C 0006               2229                             MOVE.B  #6,D0
00002C68  4E4F                    2230                             TRAP    #15
00002C6A  0685 00000030           2231                             ADDI.L   #$30,D5
00002C70  1205                    2232                             MOVE.B   D5,D1
00002C72  103C 0006               2233                             MOVE.B  #6,D0
00002C76  4E4F                    2234                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002C78  123C 0029               2235                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002C7C  103C 0006               2236                             MOVE.B  #6,D0
00002C80  4E4F                    2237                             TRAP    #15
00002C82                          2238                           *  MOVE.B   #PLUS_SIGN,(A4)+
00002C82  123C 002B               2239                           MOVE.B   #PLUS_SIGN,D1
00002C86  103C 0006               2240                             MOVE.B  #6,D0
00002C8A  4E4F                    2241                             TRAP    #15
00002C8C  6000 02B6               2242                             BRA      EA_FINISH
00002C90                          2243  
00002C90                          2244  
00002C90                          2245  ADDRESS_REGISTER_DECREMENT                                ; CONVERTS THE BINARY NUMBER IN D3 TO DECIMAL AND 
00002C90  123C 002D               2246                             MOVE.B   #MINUS_SIGN,D1
00002C94  103C 0006               2247                             MOVE.B   #6,D0
00002C98  4E4F                    2248                             TRAP        #15
00002C9A  123C 0028               2249                             MOVE.B   #OPEN_PARENTHESIS,D1
00002C9E  103C 0006               2250                             MOVE.B   #6,D0
00002CA2  4E4F                    2251                             TRAP     #15
00002CA4  123C 0041               2252                             MOVE.B   #A,D1
00002CA8  103C 0006               2253                             MOVE.B  #6,D0
00002CAC  4E4F                    2254                             TRAP    #15
00002CAE  0685 00000030           2255                             ADDI.L   #$30,D5
00002CB4  1205                    2256                             MOVE.B   D5,D1
00002CB6  103C 0006               2257                             MOVE.B  #6,D0
00002CBA  4E4F                    2258                             TRAP    #15                     ;DECIMAL FORM OF THE REGISTER TO PRINTING BUFFER
00002CBC  123C 0029               2259                             MOVE.B   #CLOSED_PARENTHESIS,D1
00002CC0  103C 0006               2260                             MOVE.B  #6,D0
00002CC4  4E4F                    2261                             TRAP    #15
00002CC6  6000 027C               2262                             BRA      EA_FINISH
00002CCA                          2263  
00002CCA                          2264  ABSOLUTE_IMMIDIATE_ADRRESSING 
00002CCA  6000 0002               2265                                BRA  CONTINUE_A_I_A
00002CCE                          2266                                
00002CCE                          2267                                
00002CCE                          2268  CONTINUE_A_I_A                
00002CCE  BA3C 0004               2269                                CMP.B       #4,D5                ; CHECK FOR IMMIDIATE DATA
00002CD2  6700 001E               2270                                BEQ         IMMIDIATE_REGISTER                
00002CD6  BA3C 0000               2271                                CMP.B       #0,D5                ; WORD ADDRESSING
00002CDA  6700 0048               2272                                BEQ         WORD_ADDRESSING                
00002CDE  BA3C 0001               2273                                CMP.B       #1,D5                ; LONG ADDRESSIN 
00002CE2  6700 0054               2274                                BEQ         LONG_ADDRESSING              
00002CE6  13FC 0001 0000313E      2275                                MOVE.B      #BAD_FLAG,STATE              
00002CEE  6000 0254               2276                                BRA         EA_FINISH                * jump to end   
00002CF2                          2277                                
00002CF2                          2278                                
00002CF2  123C 0023               2279  IMMIDIATE_REGISTER            MOVE.B #HASH_TAG,D1
00002CF6  103C 0006               2280                                MOVE.B #6,D0
00002CFA  4E4F                    2281                                TRAP   #15
00002CFC  0C39 0001 0000312C      2282                                CMP.B #1,SIZE   ;BYTE
00002D04  6700 0046               2283                                BEQ   GETBYTE
00002D08  0C39 0002 0000312C      2284                                CMP.B #2,SIZE   ;BYTE
00002D10  6700 0044               2285                                BEQ   GETWORD
00002D14  0C39 0003 0000312C      2286                                CMP.B #3,SIZE   ;BYTE
00002D1C  6700 0042               2287                                BEQ   GETLONG
00002D20  6000 003E               2288                                BRA   GETLONG
00002D24                          2289                                
00002D24                          2290  
00002D24  123C 0024               2291  WORD_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002D28  103C 0006               2292                               MOVE.B #6,D0
00002D2C  4E4F                    2293                               TRAP  #15
00002D2E  3E1E                    2294                               MOVE.W  (A6)+,D7
00002D30  6000 00BE               2295                               BRA   PRINT_WORD
00002D34  6000 020E               2296                               BRA   EA_FINISH
00002D38                          2297  
00002D38  123C 0024               2298  LONG_ADDRESSING              MOVE.B #DOLLAR_SIGN,D1
00002D3C  103C 0006               2299                               MOVE.B #6,D0
00002D40  4E4F                    2300                               TRAP  #15
00002D42  2E1E                    2301                               MOVE.L  (A6)+,D7
00002D44  6000 0128               2302                               BRA   PRINT_LONG
00002D48  6000 01FA               2303                               BRA   EA_FINISH                            
00002D4C                          2304  
00002D4C                          2305  GETBYTE      
00002D4C  1E1E                    2306                  MOVE.B   (A6)+,D7    
00002D4E  6B00 001A               2307                  BMI     ADD_NEGATIVE
00002D52  6000 0024               2308                  BRA     PRINT_BRANCHING
00002D56                          2309  GETWORD                
00002D56  3E1E                    2310                  MOVE.W   (A6)+,D7
00002D58  6B00 0010               2311                  BMI     ADD_NEGATIVE
00002D5C  6000 001A               2312                  BRA     PRINT_BRANCHING
00002D60                          2313  GETLONG                
00002D60                          2314                  
00002D60  2E1E                    2315                  MOVE.L   (A6)+,D7
00002D62  6B00 0006               2316                  BMI     ADD_NEGATIVE
00002D66  6000 0010               2317                  BRA     PRINT_BRANCHING
00002D6A                          2318                  
00002D6A  123C 002D               2319  ADD_NEGATIVE    MOVE.B #MINUS_SIGN,D1
00002D6E  123C 0006               2320                  MOVE.B #6,D1
00002D72  4E4F                    2321                  TRAP   #15
00002D74  6000 0002               2322                  BRA    PRINT_BRANCHING
00002D78                          2323  
00002D78                          2324  
00002D78  0C39 0001 0000312C      2325  PRINT_BRANCHING  CMP.B #1,SIZE   ;BYTE
00002D80  6700 001C               2326                  BEQ    PRINT_BYTE    
00002D84  0C39 0002 0000312C      2327                  CMP.B #2,SIZE   ;WORD
00002D8C  6700 0062               2328                  BEQ    PRINT_WORD
00002D90  0C39 0003 0000312C      2329                  CMP.B  #3,SIZE  ;LONG
00002D98  6700 00D4               2330                  BEQ    PRINT_LONG
00002D9C  60DA                    2331                  BRA    PRINT_BRANCHING
00002D9E                          2332  
00002D9E                          2333  
00002D9E                          2334  
00002D9E                          2335  
00002D9E                          2336                  
00002D9E                          2337  **** BYTE DATA PRINTING***********************
00002D9E  4241                    2338  PRINT_BYTE     CLR     D1                  ; CLEAR ANY LEFT BITS
00002DA0                          2339                 
00002DA0                          2340  
00002DA0  BEBC 0000000F           2341                 CMP.L   #$F,D7              
00002DA6  6F00 0006               2342                 BLE     BYTE_ONE_LOOP                  
00002DAA  6000 000E               2343                 BRA     READ_BYTE
00002DAE                          2344  
00002DAE                          2345  BYTE_ONE_LOOP
00002DAE  13FC 0001 0000315A      2346                  MOVE.B  #1,NUMBER_OF_HEX  
00002DB6  6000 0002               2347                  BRA     READ_BYTE
00002DBA                          2348      
00002DBA                          2349  READ_BYTE                           
00002DBA  0C39 0000 0000315A      2350      CMP.B   #0,NUMBER_OF_HEX               
00002DC2  6700 0014               2351      BEQ     COPYBYTE
00002DC6                          2352      
00002DC6  123C 0030               2353      MOVE.B  #$30,D1             
00002DCA  103C 0006               2354      MOVE.B  #6,D0               
00002DCE  4E4F                    2355      TRAP    #15
00002DD0                          2356  
00002DD0  5339 0000315A           2357      SUBI.B  #1,NUMBER_OF_HEX     ; MINUS ONE           
00002DD6  60E2                    2358      BRA     READ_BYTE           ; LOOP
00002DD8                          2359      
00002DD8                          2360  COPYBYTE
00002DD8  2207                    2361      MOVE.L  D7,D1               ; COPY DATA 
00002DDA  143C 0010               2362      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002DDE  103C 000F               2363      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002DE2  4E4F                    2364      TRAP    #15
00002DE4  13FC 0000 0000315A      2365      MOVE.B  #0,NUMBER_OF_HEX
00002DEC  6000 0156               2366      BRA  EA_FINISH
00002DF0                          2367  
00002DF0                          2368  
00002DF0                          2369  
00002DF0                          2370  
00002DF0                          2371  
00002DF0                          2372  ******PRINT WORD DATA******************
00002DF0  4241                    2373  PRINT_WORD   CLR     D1                  ; CLEAR ANY LEFT BITS
00002DF2                          2374                 
00002DF2                          2375  
00002DF2  BEBC 0000000F           2376                 CMP.L   #$F,D7              
00002DF8  6F00 001A               2377                 BLE     WORD_ONE_LOOP
00002DFC  BEBC 000000FF           2378                 CMP.L   #$FF,D7              
00002E02  6F00 001C               2379                 BLE     WORD_TWO_LOOP
00002E06  BEBC 00000FFF           2380                 CMP.L   #$FFF,D7              
00002E0C  6F00 001E               2381                 BLE     WORD_THREE_LOOP                  
00002E10  6000 0026               2382                 BRA     READ_WORD
00002E14                          2383  
00002E14                          2384  WORD_ONE_LOOP
00002E14  13FC 0001 0000315A      2385                  MOVE.B  #1,NUMBER_OF_HEX  
00002E1C  6000 001A               2386                  BRA     READ_WORD
00002E20                          2387                  
00002E20                          2388  WORD_TWO_LOOP
00002E20  13FC 0002 0000315A      2389                  MOVE.B  #2,NUMBER_OF_HEX  
00002E28  6000 000E               2390                  BRA     READ_WORD
00002E2C                          2391                  
00002E2C                          2392  WORD_THREE_LOOP
00002E2C  13FC 0003 0000315A      2393                  MOVE.B  #3,NUMBER_OF_HEX  
00002E34  6000 0002               2394                  BRA     READ_WORD                
00002E38                          2395      
00002E38                          2396  READ_WORD                           
00002E38  0C39 0000 0000315A      2397      CMP.B   #0,NUMBER_OF_HEX               
00002E40  6700 0014               2398      BEQ     COPYWORD
00002E44                          2399      
00002E44  123C 0030               2400      MOVE.B  #$30,D1             
00002E48  103C 0006               2401      MOVE.B  #6,D0               
00002E4C  4E4F                    2402      TRAP    #15
00002E4E                          2403  
00002E4E  5339 0000315A           2404      SUBI.B  #1,NUMBER_OF_HEX              
00002E54  60E2                    2405      BRA     READ_WORD                   ; LOOP
00002E56                          2406  
00002E56                          2407  COPYWORD
00002E56  2207                    2408      MOVE.L  D7,D1               ; COPY DATA 
00002E58  143C 0010               2409      MOVE.B  #16,D2              ; CONVERT THE BASE TO 16
00002E5C  103C 000F               2410      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002E60  4E4F                    2411      TRAP    #15
00002E62  13FC 0000 0000315A      2412      MOVE.B  #0,NUMBER_OF_HEX
00002E6A  6000 00D8               2413      BRA  EA_FINISH
00002E6E                          2414  
00002E6E                          2415  ****************PRINT LONG DATA*****************
00002E6E  4241                    2416  PRINT_LONG      CLR     D1                  ; CLEAR ANY LEFT BITS
00002E70                          2417                 
00002E70                          2418  
00002E70  BEBC 0000000F           2419                 CMP.L   #$F,D7              
00002E76  6F00 0042               2420                 BLE     LONG_ONE_LOOP
00002E7A  BEBC 000000FF           2421                 CMP.L   #$FF,D7              
00002E80  6F00 0044               2422                 BLE     LONG_TWO_LOOP
00002E84  BEBC 00000FFF           2423                 CMP.L   #$FFF,D7              
00002E8A  6F00 0046               2424                 BLE     LONG_THREE_LOOP
00002E8E  BEBC 0000FFFF           2425                 CMP.L   #$FFFF,D7              
00002E94  6F00 0048               2426                 BLE     LONG_FOUR_LOOP
00002E98  BEBC 000FFFFF           2427                 CMP.L   #$FFFFF,D7              
00002E9E  6F00 004A               2428                 BLE     LONG_FIVE_LOOP
00002EA2  BEBC 00FFFFFF           2429                 CMP.L   #$FFFFFF,D7              
00002EA8  6F00 004C               2430                 BLE     LONG_SIX_LOOP
00002EAC  BEBC 0FFFFFFF           2431                 CMP.L   #$FFFFFFF,D7              
00002EB2  6F00 004E               2432                 BLE     LONG_SEVEN_LOOP                  
00002EB6  6000 0056               2433                 BRA     READ_LONG
00002EBA                          2434  
00002EBA                          2435  LONG_ONE_LOOP
00002EBA  13FC 0001 0000315A      2436                  MOVE.B  #1,NUMBER_OF_HEX  
00002EC2  6000 004A               2437                  BRA     READ_LONG
00002EC6                          2438                  
00002EC6                          2439  LONG_TWO_LOOP
00002EC6  13FC 0002 0000315A      2440                  MOVE.B  #2,NUMBER_OF_HEX  
00002ECE  6000 003E               2441                  BRA     READ_LONG
00002ED2                          2442                  
00002ED2                          2443  LONG_THREE_LOOP
00002ED2  13FC 0003 0000315A      2444                  MOVE.B  #3,NUMBER_OF_HEX  
00002EDA  6000 0032               2445                  BRA     READ_LONG                
00002EDE                          2446  LONG_FOUR_LOOP
00002EDE  13FC 0004 0000315A      2447                  MOVE.B  #4,NUMBER_OF_HEX  
00002EE6  6000 0026               2448                  BRA     READ_LONG
00002EEA                          2449                  
00002EEA                          2450  LONG_FIVE_LOOP
00002EEA  13FC 0005 0000315A      2451                  MOVE.B  #5,NUMBER_OF_HEX  
00002EF2  6000 001A               2452                  BRA     READ_LONG
00002EF6                          2453                  
00002EF6                          2454  LONG_SIX_LOOP
00002EF6  13FC 0006 0000315A      2455                  MOVE.B  #6,NUMBER_OF_HEX  
00002EFE  6000 000E               2456                  BRA     READ_LONG
00002F02                          2457  LONG_SEVEN_LOOP
00002F02  13FC 0007 0000315A      2458                  MOVE.B  #7,NUMBER_OF_HEX  
00002F0A  6000 0002               2459                  BRA     READ_LONG
00002F0E                          2460  
00002F0E                          2461       
00002F0E                          2462  READ_LONG                           
00002F0E  0C39 0000 0000315A      2463      CMP.B   #0,NUMBER_OF_HEX               
00002F16  6700 0014               2464      BEQ     COPYLONG
00002F1A  123C 0030               2465      MOVE.B  #$30,D1             
00002F1E  103C 0006               2466      MOVE.B  #6,D0               
00002F22  4E4F                    2467      TRAP    #15
00002F24                          2468  
00002F24  5339 0000315A           2469      SUBI.B  #1,NUMBER_OF_HEX               
00002F2A  60E2                    2470      BRA     READ_LONG                   ; LOOP
00002F2C                          2471  
00002F2C                          2472  COPYLONG
00002F2C  2207                    2473      MOVE.L  D7,D1               ; COPY DATA 
00002F2E  143C 0010               2474      MOVE.B  #16,D2              ; USIGN BASE TO 16
00002F32  103C 000F               2475      MOVE.B  #15,D0              ; Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B.
00002F36  4E4F                    2476      TRAP    #15
00002F38  13FC 0000 0000315A      2477      MOVE.B  #0,NUMBER_OF_HEX
00002F40  6000 0002               2478      BRA  EA_FINISH
00002F44                          2479  
00002F44                          2480    
00002F44                          2481  
00002F44                          2482  
00002F44                          2483  
00002F44                          2484  
00002F44                          2485  
00002F44                          2486  
00002F44                          2487  
00002F44  4E75                    2488  EA_FINISH      RTS
00002F46                          2489  
00002F46                          2490  
00002F46                          2491  
00002F46                          2492  
00002F46                          2493  ************************************************
00002F46                          2494  *Subroutine: REGISTER_NUMBER_TO_DECIMAL 
00002F46                          2495  *            CONVERT BINARY NUMBER IN D3 TO DECIMAL AND STORES IN D5
00002F46                          2496  ************************************************
00002F46                          2497  REGISTER_NUMBER_TO_DECIMAL 
00002F46  B67C 0000               2498                             CMP.W       #REG_0,D3
00002F4A  6700 0046               2499                             BEQ         RG0
00002F4E  B67C 0001               2500                             CMP.W       #REG_1,D3
00002F52  6700 0046               2501                             BEQ         RG1
00002F56  B67C 0002               2502                             CMP.W       #REG_2,D3
00002F5A  6700 0046               2503                             BEQ         RG2
00002F5E  B67C 0003               2504                             CMP.W       #REG_3,D3
00002F62  6700 0046               2505                             BEQ         RG3
00002F66  B67C 0004               2506                             CMP.W       #REG_4,D3
00002F6A  6700 0046               2507                             BEQ         RG4
00002F6E  B67C 0005               2508                             CMP.W       #REG_5,D3
00002F72  6700 0046               2509                             BEQ         RG5
00002F76  B67C 0006               2510                             CMP.W       #REG_6,D3
00002F7A  6700 0046               2511                             BEQ         RG6
00002F7E  B67C 0007               2512                             CMP.W       #REG_7,D3
00002F82  6700 0046               2513                             BEQ         RG7
00002F86  13FC 0001 0000313E      2514                             MOVE.B      #BAD_FLAG,STATE
00002F8E  4EF8 2BB2               2515                             JMP         CONTINUE_EA
00002F92                          2516   
00002F92  1A3C 0000               2517  RG0    MOVE.B   #0,D5
00002F96  4EF8 2BB2               2518         JMP      Continue_EA
00002F9A  1A3C 0001               2519  RG1    MOVE.B   #1,D5
00002F9E  4EF8 2BB2               2520         JMP      Continue_EA
00002FA2  1A3C 0002               2521  RG2    MOVE.B   #2,D5
00002FA6  4EF8 2BB2               2522         JMP      Continue_EA
00002FAA  1A3C 0003               2523  RG3    MOVE.B   #3,D5
00002FAE  4EF8 2BB2               2524         JMP      Continue_EA
00002FB2  1A3C 0004               2525  RG4    MOVE.B   #4,D5
00002FB6  4EF8 2BB2               2526         JMP      Continue_EA
00002FBA  1A3C 0005               2527  RG5    MOVE.B   #5,D5
00002FBE  4EF8 2BB2               2528         JMP      Continue_EA
00002FC2  1A3C 0006               2529  RG6    MOVE.B   #6,D5
00002FC6  4EF8 2BB2               2530         JMP      Continue_EA
00002FCA  1A3C 0007               2531  RG7    MOVE.B   #7,D5
00002FCE  4EF8 2BB2               2532         JMP      Continue_EA 
00002FD2                          2533      
00002FD2                          2534  ;------------------------------------------------
00002FD2                          2535      
00002FD2                          2536  Float   DS.L 1 #0
00002FD6                          2537  
00002FD6                          2538  ValOne    DS.B 1 #0
00002FD7                          2539  ValTwo    DS.B 1 #0
00002FD8                          2540  ValThree    DS.B 1 #0
00002FD9                          2541  ValFour    DS.B 1 #0
00002FDA                          2542  ValFive    DS.B 1 #0
00002FDB                          2543  ValSix    DS.B 1 #0
00002FDC                          2544  ValSeven    DS.B 1 #0
00002FDD                          2545  ValEight    DS.B 1 #0
00002FDE                          2546  
00002FDE                          2547  Addsum DS.W 1 #0
00002FE0                          2548  CarryBit DS.B 1 #0   
00002FE1                          2549  
00002FE1                          2550  Trailers DS.B 1 #0
00002FE2                          2551  Source DS.L 1 #0
00002FE6                          2552  Destination DS.L 1 #0
00002FEA                          2553  
00002FEA                          2554          ;generic command lines
00002FEA= 50 6C 65 61 73 65 ...   2555  USERPAGEBREAK DC.B 'Please Press enter',CR,LF,0
00002FFF= 4E 75 6D 62 65 72 ...   2556  BADVAL DC.B    'Number out of range of acceptable values ',CR,LF,0
0000302B= 50 6C 65 61 73 65 ...   2557  MESSAGEFIRSTADRESS DC.B    'Please enter starting memory adress: ',0 
00003051= 50 6C 65 61 73 65 ...   2558  MESSAGESECONDADRESS DC.B    'Please enter ending memory adress: ',0 
00003075= 45 4E 44 20 4F 46 ...   2559  FINALMESSAGE    DC.B    'END OF THE PROGRAM',0
00003088= 20 0D 0A 00             2560  CLEAR DC.B      ' ',CR,LF,0
0000308C                          2561  
0000308C                          2562          ;the collection of actual command lines to print
0000308C                          2563  CommandPrinter    DS.B 1 #0
0000308D                          2564  CommandDetail    DS.B 1 #0
0000308E= 4D 4F 56 45 00          2565  PMOVE DC.B      'MOVE',0
00003093= 4D 4F 56 45 4D 20 00    2566  PMOVEM DC.B      'MOVEM ',0
0000309A= 4D 4F 56 45 41 00       2567  PMOVEA DC.B      'MOVEA',0
000030A0= 4D 4F 56 45 51 20 00    2568  PMOVEQ DC.B      'MOVEQ ',0
000030A7= 4E 4F 50 00             2569  PNOP DC.B      'NOP',0
000030AB= 4C 45 41 00             2570  PLEA DC.B      'LEA',0
000030AF= 4E 4F 54 00             2571  PNOT DC.B      'NOT',0
000030B3= 4A 53 52 00             2572  PJSR DC.B      'JSR',0
000030B7= 52 54 53 00             2573  PRTS DC.B      'RTS',0
000030BB= 42 47 54 00             2574  PBGT DC.B      'BGT',0
000030BF= 42 45 51 00             2575  PBEQ DC.B      'BEQ',0
000030C3= 42 4C 45 00             2576  PBLE DC.B      'BLE',0
000030C7= 42 52 41 00             2577  PBRA DC.B      'BRA',0
000030CB= 4F 52 00                2578  POR DC.B      'OR',0
000030CE= 53 55 42 00             2579  PSUB DC.B      'SUB',0
000030D2= 41 4E 44 00             2580  PAND DC.B      'AND',0
000030D6= 41 44 44 00             2581  PADD DC.B      'ADD',0
000030DA= 41 44 44 41 00          2582  PADDA DC.B      'ADDA',0
000030DF= 41 44 44 51 00          2583  PADDQ DC.B      'ADDQ',0
000030E4= 4C 53 4C 00             2584  PLSL DC.B      'LSL',0
000030E8= 4C 53 52 00             2585  PLSR DC.B      'LSR',0
000030EC= 41 53 52 00             2586  PASR DC.B      'ASR',0
000030F0= 41 53 4C 00             2587  PASL DC.B      'ASL',0
000030F4= 52 4F 4C 00             2588  PROL DC.B      'ROL',0
000030F8= 52 4F 52 00             2589  PROR DC.B      'ROR',0
000030FC                          2590  
000030FC= 44 41 54 41 00          2591  PDATA   DC.B    'DATA',0
00003101                          2592  
00003101= 00                      2593  INPUT   DC.B    0
00003102                          2594  
00003102= 00000000                2595  STARTINGADDRESS     DC.L 0
00003106= 00000000                2596  CURRENTADDRESS      DC.L 0
0000310A= 00000000                2597  ENDINGADDRESS       DC.L 0
0000310E                          2598  CYCLECOUNTER
0000310E= 0000                    2599  COMMANDDATA         DC.W 0
00003110= 00                      2600  Bits                DC.B 0
00003111                          2601  
00003111                          2602          ;the sizes to print
00003112                          2603  SizeValue           DS.L 1 #0
00003116= 2E 42 20 00             2604  PB DC.B      '.B ',0
0000311A= 2E 57 20 00             2605  PW DC.B      '.W ',0
0000311E= 2E 4C 20 00             2606  PL DC.B      '.L ',0
00003122                          2607  
00003122                          2608  ;----- ADDED FOR THE OP CODE PART
00003122                          2609  
00003122= 00                      2610  DEST_REG        DC.B    0
00003123= 00                      2611  DEST_MODE       DC.B    0
00003124                          2612  
00003124= 00                      2613  SRC_MODE        DC.B    0
00003125= 00                      2614  SRC_REG         DC.B    0
00003126                          2615  
00003126= 00                      2616  TEMP_MODE       DC.B    0
00003127= 00                      2617  TEMP_REG        DC.B    0
00003128                          2618  
00003128                          2619  DATA_FIELD      DS.L    1 #0
0000312C= 00                      2620  SIZE            DC.B    0
0000312D= 00                      2621  SIZE_BITS        DC.B    0
0000312E                          2622  
0000312E= 23 00                   2623  HASH            DC.B    '#',0
00003130= 20 00                   2624  CLRSPOT         DC.B    ' ',0
00003132= 2D 00                   2625  NEG             DC.B    '-',0
00003134= 24 00                   2626  DOLLARSIGN      DC.B    '$',0
00003136= 2C 00                   2627  COMA            DC.B    ',',0
00003138                          2628  
00003138= 00                      2629  INDEX           DC.B    0
00003139                          2630  
00003139= 00                      2631  XBIT            DC.B    0
0000313A= 00                      2632  INVALID_EA      DC.B    0
0000313B                          2633  
0000313B= 00                      2634  DstMode         DC.B    0
0000313C= 00                      2635  TempMode        DC.B    0
0000313D= 00                      2636  SrcMode         DC.B    0
0000313E                          2637  
0000313E                          2638  ;------ ADDED FOR EA CODE PART
0000313E                          2639  
0000313E  =00000000               2640  REG_0  EQU         %000
0000313E  =00000001               2641  REG_1  EQU         %001
0000313E  =00000002               2642  REG_2  EQU         %010
0000313E  =00000003               2643  REG_3  EQU         %011
0000313E  =00000004               2644  REG_4  EQU         %100
0000313E  =00000005               2645  REG_5  EQU         %101
0000313E  =00000006               2646  REG_6  EQU         %110
0000313E  =00000007               2647  REG_7  EQU         %111
0000313E                          2648  
0000313E  =00000000               2649  MODE000       EQU         %000                   * MODE Dn
0000313E  =00000001               2650  MODE001       EQU         %001                   * MODE An
0000313E  =00000002               2651  MODE010       EQU         %010                   * MODE (An)
0000313E  =00000003               2652  MODE011       EQU         %011                   * MODE (An)+
0000313E  =00000004               2653  MODE100       EQU         %100                   * MODE -(An)
0000313E  =00000007               2654  MODE111       EQU         %111                   * ABSOLUTE AND IMMIDIATE DATA ADDRESSING
0000313E                          2655  
0000313E= 00                      2656  STATE         DC.B        0                      ; USED TO FLAG  BAD OR GOOD STATE
0000313F  =00000001               2657  BAD_FLAG      EQU         1
00003140= 00008000                2658  word          DC.L        $8000
00003144                          2659  SIZE_IL       DS.L        1             ;SIZE ISOLATION
00003148                          2660  DR            DS.L        1             ;DIRECTION ISOLATION
0000314C                          2661  G14_TYPE      DS.L        1             ; GROUP 14 TYPE 
00003150                          2662  IR_IL         DS.L        1             ; DATA REGISTER OR IMMIDIATE DATA FOR GROUP 14
00003154                          2663  S_COUNT       DS.L        1             ; STORES SHIFT COUNT
00003158                          2664  sRN           DS.B       1             ;SOURCE REGISTER FOR SHIFTING MODES
00003159                          2665  DRN           DS.B       1             ; DESTINATION REGISTER FOR SHIFTING MODES
0000315A= 00                      2666  NUMBER_OF_HEX DC.B        0
0000315B                          2667  dRG           DS.B        1
0000315C                          2668  dMODE         DS.B        1
0000315D                          2669  sRG           DS.B        1
0000315E                          2670  
0000315E= 00000100                2671  print_buffer  DC.l       $100
00003162                          2672  
00003162                          2673  ***** ASCII VALUES FOR EA CHARACTERS**************
00003162  =00000044               2674  D                       EQU      $44
00003162  =00000041               2675  A                       EQU      $41
00003162  =00000028               2676  OPEN_PARENTHESIS        EQU      $28
00003162  =00000024               2677  DOLLAR_SIGN             EQU      $24
00003162  =00000029               2678  CLOSED_PARENTHESIS      EQU      $29
00003162  =0000002B               2679  PLUS_SIGN               EQU      $2B
00003162  =0000002D               2680  MINUS_SIGN              EQU      $2D
00003162  =00000023               2681  HASH_TAG                EQU      $23
00003162  =00000025               2682  PERCENT_SIGN            EQU      $25
00003162                          2683  
00003162                          2684  
00003162                          2685      
00003162                          2686      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   41
ABSOLUTE_IMMIDIATE_ADRRESSING  2CCA
ADDRESS_REGISTER    2C0A
ADDRESS_REGISTER_DECREMENT  2C90
ADDRESS_REGISTER_DIRECT  2C26
ADDRESS_REGISTER_INCREMENT  2C56
ADDSUM              2FDE
ADD_NEGATIVE        2D6A
BADVAL              2FFF
BAD_FLAG            1
BITS                3110
BYTE_ONE_LOOP       2DAE
CARRYBIT            2FE0
CCHECK_ADD          179C
CCHECK_ADDA         17C2
CHAR1               1154
CHAR2               116C
CHARSUB             1184
CHECK_ADD           1782
CHECK_ADDA          17A0
CHECK_ADDQ          162C
CHECK_AND           1988
CHECK_DATA_NEG      2ABA
CHECK_DESTINATION   28DE
CHECK_DEST_REG      2916
CHECK_ID_AS         1E36
CHECK_ID_LS         1E56
CHECK_ID_RO         1E46
CHECK_JSR           15A6
CHECK_LEA           13B4
CHECK_MOVEM_1000    14CA
CHECK_MOVEM_1100    157E
CHECK_MOVEQ         181E
CHECK_NOP_JSR_RTS   1586
CHECK_NOP_RTS       160C
CHECK_NOT           1440
CHECK_OR            187C
CHECK_SOURCE        29DE
CHECK_SOURCE_REG    2A16
CHECK_SUB           18FA
CHECK_TEMP          295E
CHECK_TEMP_REG      2996
CHECK_XBIT          2A5E
CLEAR               3088
CLEARMR             2B46
CLOSED_PARENTHESIS  29
CLOSINGSTATEMENTS   28BC
CLRSPOT             3130
COMA                3136
COMMANDDATA         310E
COMMANDDETAIL       308D
COMMANDPRINTER      308C
COMPARE_0100        137C
COMPARE_0110        16B6
COMPARE_1101        16E6
COMPARE_1110        1A16
COMPARE_GROUPS      1318
CONTINUE_A_I_A      2CCE
CONTINUE_EA         2BB2
COPYBYTE            2DD8
COPYLONG            2F2C
COPYWORD            2E56
CR                  D
CURRENTADDRESS      3106
CYCLECOUNTER        310E
D                   44
DATA_FIELD          3128
DATA_REGISTER       2BEE
DESTINATION         2FE6
DEST_MODE           3123
DEST_REG            3122
DMODE               315C
DOLLARSIGN          3134
DOLLAR_SIGN         24
DONE                11AE
DR                  3148
DRG                 315B
DRN                 3159
DSTMODE             313B
EADN                2858
EA_FINISH           2F44
EA_START            2BA0
EIGHT_SHIFT         246C
ENDING              28CE
ENDINGADDRESS       310A
ENTRYLOOP           119C
EXIT                11FC
FINALMESSAGE        3075
FLOAT               2FD2
FORMAT_DATA         2AA6
G14_MEMS            1CDE
G14_MEMS_AS         1DD0
G14_MEMS_LS         1D04
G14_MEMS_RO         1D6A
G14_TYPE            314C
GAS_EA              1C88
GETBYTE             2D4C
GETLONG             2D60
GETWORD             2D56
GLS_EA              1AF0
GRO_EA              1BBC
G_AS                1C12
G_LS                1A7A
G_RO                1B46
HASH                312E
HASH_TAG            23
IMMIDIATE_REGISTER  2CF2
INDEX               3138
INPUT               3101
INT2                1134
INTSUB              114C
INVALID             118C
INVALID_EA          313A
IR_IL               3150
IS_EIGHT            247A
LF                  A
LOADDATAONE         1006
LOADDATATWO         1058
LONG_ADDRESSING     2D38
LONG_FIVE_LOOP      2EEA
LONG_FOUR_LOOP      2EDE
LONG_ONE_LOOP       2EBA
LONG_SEVEN_LOOP     2F02
LONG_SIX_LOOP       2EF6
LONG_THREE_LOOP     2ED2
LONG_TWO_LOOP       2EC6
LOOP_READ_BITS      12FA
MEMORYGRABBER       1282
MESSAGEFIRSTADRESS  302B
MESSAGESECONDADRESS  3051
MINUS_SIGN          2D
MODE000             0
MODE001             1
MODE010             2
MODE011             3
MODE100             4
MODE111             7
NEG                 3132
NUMBER_OF_HEX       315A
OPEN_PARENTHESIS    28
PADD                30D6
PADDA               30DA
PADDQ               30DF
PAGEBREAK           12CE
PAND                30D2
PASL                30F0
PASR                30EC
PB                  3116
PBEQ                30BF
PBGT                30BB
PBLE                30C3
PBRA                30C7
PDATA               30FC
PERCENT_SIGN        25
PJSR                30B3
PL                  311E
PLEA                30AB
PLSL                30E4
PLSR                30E8
PLUS_SIGN           2B
PMOVE               308E
PMOVEA              309A
PMOVEM              3093
PMOVEQ              30A0
PNOP                30A7
PNOT                30AF
POR                 30CB
PRINTADD            273A
PRINTADDA           2750
PRINTADDQ           2528
PRINTAND            2724
PRINTB              2814
PRINTBEQ            259C
PRINTBGT            2586
PRINTBLE            25B2
PRINTBRA            25C8
PRINTCLRSPOT        2822
PRINTCOMA           2830
PRINTDOLLARSIGN     284A
PRINTHASH           283E
PRINTJSR            2502
PRINTL              27F8
PRINTLEA            24D6
PRINTMOVE           2484
PRINTMOVEA          249A
PRINTMOVEM          24C0
PRINTMOVEQ          25DE
PRINTNOP            24B0
PRINTNOT            24EC
PRINTNOTRAIL        28A6
PRINTONETRAIL       2874
PRINTOR             2622
PRINTROTATESPLIT    2766
PRINTRTS            2518
PRINTSUB            270E
PRINTTWOTRAIL       288A
PRINTW              2806
PRINT_BRANCHING     2D78
PRINT_BUFFER        315E
PRINT_BYTE          2D9E
PRINT_DATA          2AD2
PRINT_DN_TO_EA      26B2
PRINT_EA_TO_DN      2656
PRINT_LONG          2E6E
PRINT_NEG           2AC4
PRINT_WORD          2DF0
PROL                30F4
PROR                30F8
PRTS                30B7
PR_AS               2296
PR_ASR              23C0
PR_ASR_EA           2056
PR_ASR_MEM          1EB0
PR_G14_MEMS_AS      1E66
PR_G14_MEMS_LS      1EE8
PR_G14_MEMS_RO      1F6A
PR_G_AS_EA          1FEC
PR_G_LS_EA          20AC
PR_G_RO_EA          216C
PR_LS               2300
PR_LSR              236A
PR_LSR_EA           2116
PR_LSR_MEM          1F32
PR_RO               222C
PR_ROR              2416
PR_ROR_EA           21D6
PR_ROR_MEM          1FB4
PSUB                30CE
PW                  311A
READ_BITS           12F0
READ_BYTE           2DBA
READ_LONG           2F0E
READ_WORD           2E38
REGISTER_NUMBER_TO_DECIMAL  2F46
REG_0               0
REG_1               1
REG_2               2
REG_3               3
REG_4               4
REG_5               5
REG_6               6
REG_7               7
RETURN              2AA4
RG0                 2F92
RG1                 2F9A
RG2                 2FA2
RG3                 2FAA
RG4                 2FB2
RG5                 2FBA
RG6                 2FC2
RG7                 2FCA
R_CHECK_DEST        2954
R_CHECK_SOURCE      2A54
R_CHECK_TEMP        29D4
SET                 1310
SETSIZE1            2AE4
SETSIZE2            2AFE
SETSIZEB            2B22
SETSIZEL            2B3A
SETSIZEW            2B2E
SIZE                312C
SIZESPLIT           27CA
SIZEVALUE           3112
SIZE_BITS           312D
SIZE_IL             3144
SOURCE              2FE2
SRCMODE             313D
SRC_MODE            3124
SRC_REG             3125
SRG                 315D
SRN                 3158
START               1000
STARTCHECK          111C
STARTINGADDRESS     3102
STATE               313E
STOP                28C8
STOREADRESSES       125A
S_COUNT             3154
TEMPMODE            313C
TEMP_MODE           3126
TEMP_REG            3127
TEMP_TO_DEST        2A70
TEMP_TO_SRC         2A8A
TRAILERS            2FE1
USERPAGEBREAK       2FEA
VAL1                10A2
VAL2                10AC
VAL3                10BC
VAL4                10CC
VAL5                10DC
VAL6                10EC
VAL7                10FC
VAL8                110C
VALEIGHT            2FDD
VALFIVE             2FDA
VALFOUR             2FD9
VALONE              2FD6
VALSEVEN            2FDC
VALSIX              2FDB
VALTHREE            2FD8
VALTWO              2FD7
WORD                3140
WORD_ADDRESSING     2D24
WORD_ONE_LOOP       2E14
WORD_THREE_LOOP     2E2C
WORD_TWO_LOOP       2E20
XBIT                3139
